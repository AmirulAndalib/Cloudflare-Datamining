---
import tokenPermissionGroups from '../../../../data/account/token_permission_groups_dash.json';
import commonTranslations from '../../../../data/dashboard-translations/common.json';
import Description from '../../components/Description.astro';
import MainHeading from '../../components/MainHeading.astro';
import PermissionsBoxes from '../../components/PermissionsBoxes.astro';
import Layout from '../../layouts/Layout.astro';
export const prerender = true;


let permissions = [];
for (const scope of tokenPermissionGroups) {
	const lastUnderscore = scope.label.lastIndexOf('_');
	const key = scope.label.slice(0, Math.max(0, lastUnderscore));
	let value = scope.label.slice(Math.max(0, lastUnderscore + 1));
	// handle zaraz
	if (key === 'zaraz' && value === 'write') {
		value = 'edit_publish';
	}
	const existing = permissions.find(perm => perm.name === key);
	if (value === 'write') {
		value = 'edit';
	}
	if (existing) {
		existing.types.push(value);
		continue;
	}
	let description = null;
	const translationKeysToTry = [
		`api_tokens.permission_${key}`,
		`api_tokens.permission_${key.replace('account_', '')}`,
		`api_tokens.permission_${key.replace('zone_', '')}`,
	];
	for (const translationKey of translationKeysToTry) {
		if (commonTranslations[translationKey]) {
			description = commonTranslations[translationKey];
			break;
		}
	}
	if (!description) {
		description = scope.name;
		console.log(`Missing translation for api_tokens.permission_${key}`);
	}
	if (description.endsWith(' Read') || description.endsWith(' Write')) {
		description = description.slice(0, Math.max(0, description.length - 5));
	}
	permissions.push({
		name: key,
		description: description,
		types: [value],
	});
}
permissions = permissions.sort((permA, permB) => permA.name.localeCompare(permB.name));
---
<Layout title="API Token URL Generator - Cloudflare Datamining" description="Generate an API token URL to share for usage on the Cloudflare Dashboard">
	<MainHeading title="API Token URL Generator" />
	<Description>
		<p>The Cloudflare dashboard supports an undocumented URL format to pre-fill information on the API token generation page. This can be very helpful for sharing with projects that require an API token, instead of having to manually list all needed permissions.</p>
		<p>Select the permissions you need, give the token a name, and scroll down to get the full URL for sharing.</p>
	</Description>

	<form id="apiTokenUrlGenerator" method="post" class="space-y-5">
		<div class="space-y-2">
			<h3 class="text-lg font-semibold">Token Name</h3>
			<input type="text" name="name" placeholder="Token Name" class="block w-full rounded-md border-gray-300 bg-gray-200 shadow-sm focus:border-gray-500 focus:ring-gray-500 dark:border-gray-700 dark:bg-gray-800 sm:text-sm">
		</div>
		<noscript>This form requires JavaScript to function today, sorry.</noscript>

		<div class="space-y-2">
			<h3 class="text-lg font-semibold">Token Permissions</h3>
			<PermissionsBoxes permissions={permissions} />
		</div>

		<div class="space-y-2">
			<h3 class="text-lg font-semibold">Token URL</h3>
			<output
				name="result"
				for="apiTokenUrlGenerator"
				class="min-h-8 block whitespace-pre-wrap break-all rounded bg-gray-200 p-2 font-mono text-sm dark:bg-gray-800"
			></output>
			<button type="button" id="copyToClipboard" class="inline-flex items-center rounded-md border border-transparent bg-gray-600 px-3 py-2 text-sm font-medium leading-4 text-white shadow-sm hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2">Copy Token URL</button>
		</div>
	</form>
</Layout>

<script>
	type PermissionTypes = {
		[key: string]: 'read' | 'edit';
	};
	function setupForm() {
		const form = document.querySelector('#apiTokenUrlGenerator') as HTMLFormElement;
		const output = form.querySelector('output[name="result"]');
		if (!form || !output) { return; }

		// TODO better types
		function triggerChange() {
			const formData = new FormData(form);
			const permissions = {};
			const types:PermissionTypes = {};
			for (const [key, value] of formData.entries()) {
				if (key.startsWith('permission_')) {
					permissions[key.replace('permission_', '')] = value;
				}
				if (key.startsWith('type_')) {
					types[key.replace('type_', '')] = value;
				}
			}
			// example: https://dash.cloudflare.com/profile/api-tokens?permissionGroupKeys=[%7B%22key%22:%22d1%22,%22type%22:%22edit%22%7D,%7B%22key%22:%22page%22,%22type%22:%22edit%22%7D,%7B%22key%22:%22images%22,%22type%22:%22edit%22%7D,%7B%22key%22:%22access%22,%22type%22:%22edit%22%7D,%7B%22key%22:%22workers_kv_storage%22,%22type%22:%22edit%22%7D,%7B%22key%22:%22access_acct%22,%22type%22:%22read%22%7D,%7B%22key%22:%22dns%22,%22type%22:%22edit%22%7D,%7B%22key%22:%22workers_script%22,%22type%22:%22edit%22%7D]&name=Wildebeest
			const url = new URL('https://dash.cloudflare.com/profile/api-tokens');
			const permissionGroupKeys = [];

			for (const [key, value] of Object.entries(permissions)) {
				if (value === 'on') {
					permissionGroupKeys.push({
						key,
						type: types[key] ?? 'read',
					});
				}
			}
			url.searchParams.set('permissionGroupKeys', JSON.stringify(permissionGroupKeys));
			if (formData.has('name')) {
				url.searchParams.set('name', formData.get('name') as string);
			}
			output.textContent = url.toString();
		}
		form.addEventListener('change', (event) => {
			event.preventDefault();
			triggerChange();
		});

		form.addEventListener('submit', (event) => {
			event.preventDefault();
		});
		triggerChange();

		// handle checkboxes triggering dropdowns to stop being disabled
		const checkboxes = form.querySelectorAll('input[type="checkbox"]');
		for (const checkbox of checkboxes) {
			checkbox.addEventListener('change', (event) => {
				const checkbox = event.target as HTMLInputElement;
				const dropdown = form.querySelector(`select[name="type_${checkbox.name.replace('permission_', '')}"]`) as HTMLSelectElement;
				if (checkbox.checked) {
					dropdown.disabled = false;
				} else {
					dropdown.disabled = true;
				}
			});
		}

		const copyToClipboard = document.querySelector('#copyToClipboard') as HTMLButtonElement;
		if (copyToClipboard) {
			copyToClipboard.addEventListener('click', (event) => {
				event.preventDefault();
				navigator.clipboard.writeText(output.textContent);
			});
		}
	}
	setupForm();
</script>
