---
import Layout from '../layouts/Layout.astro';
import Table from '../components/Table.astro';

import {airports} from '../airportsWithLocations.js';
import {types} from '../coloTypes';
import MainHeading from '../components/MainHeading.astro';

const importFiles = await Astro.glob('../../../data/other/colos-id-map.json');
const colos = importFiles[0].default;



for(const coloId in colos){
	const colo = colos[coloId];
	const airport = airports.find(air => colo.toUpperCase().startsWith(air.code));
	if(!airport){
		continue;
	}
	if(airport?.name.includes('China')){
		types[colo] = 'JDC';
	}
}

---
<Layout title="Colos - Cloudflare Datamining" description="A lot of Cloudflare locations and types with their current status.">
	<MainHeading title="Colos" />
	<Table
		headers = {["Status", "Total", "%"]}
		widths={["w-[80%]", "w-[10%]", "w-[10%]"]}
		id="status"
		data = {["Online", "Offline", "China"].map((name:string) => [
			name,
			'loading...',
			'loading...',
		])}
	></Table>
	<Table
		headers = {["ID", "Colo", "Type", "Status"]}
		widths={["w-[30%]", "w-[30%]", "w-[30%]", "w-[10%]"]}
		id="colos"
		data = {Object.keys(colos).map((id:string) => [
			id,
			colos[id],
			types[colos[id]],
			'loading...',
		])}
	></Table>
</Layout>

<script>

async function getColosStatus(){
	const coloTable = document.querySelector('table#colos');
	if(!coloTable){
		return;
	}
	const headers = coloTable.querySelectorAll('thead tr th');
	if(!headers){
		return;
	}
	let statusIndex = null;
	for(const [index, header] of headers.entries()){
		if(header.textContent === 'Status'){
			statusIndex = index + 1;
			break;
		}
	}
	let tableRows = coloTable.querySelectorAll('tbody tr');
	if(!tableRows){
		return;
	}

	const coloStatusRes = await fetch('https://colos-status.jross.workers.dev/');
	const coloStatus = await coloStatusRes.json();
	let colosStatuses = {Online: 0, China: 0, Offline: 0};
	let totalColos = 0;

	for(const row of tableRows){
		const coloName = row.querySelector('td:nth-child(2)')?.textContent;
		const status = row.querySelector(`td:nth-child(${statusIndex})`);
		const type = row.querySelector('td:nth-child(3)')?.textContent;
		if(!coloName || !status){
			continue;
		}
		status.textContent = '';
		let spanElement = status.querySelector('span');
		if(!spanElement){
			spanElement = document.createElement('span');
			status.append(spanElement);
		}
		spanElement.classList.add('font-sans', 'inline-flex', 'items-center', 'rounded-full', 'px-2.5', 'py-0.5', 'text-xs', 'font-medium');
		const online = coloStatus[coloName] === true;
		if(online){
			spanElement.classList.add('bg-green-100', 'dark:bg-green-800', 'text-green-800', 'dark:text-green-100');
			spanElement.textContent = 'Online';
		}else if(type === 'JDC'){
			spanElement.classList.add('bg-gray-100', 'dark:bg-gray-800', 'text-gray-800', 'dark:text-gray-100');
			spanElement.textContent = 'China';
		}else{
			spanElement.classList.add('bg-red-100', 'dark:bg-red-800', 'text-red-800', 'dark:text-red-100');
			spanElement.textContent = 'Offline';
		}
		colosStatuses[spanElement.textContent]++;
		totalColos++;
	}

	const statusTable = document.querySelector('table#status');
	if(!coloTable){
		return;
	}
	tableRows = statusTable.querySelectorAll('tbody tr');
	if(!tableRows){
		return;
	}
	for(const row of tableRows){
		const status = row.querySelector('td:nth-child(1)')?.textContent;
		const total = row.querySelector('td:nth-child(2)');
		const percent = row.querySelector('td:nth-child(3)');
		if(!status || colosStatuses[status] === undefined) {
			continue;
		}
		total.textContent = colosStatuses[status];
		percent.textContent = Math.floor(colosStatuses[status] / totalColos * 100).toString() + "%";
	}
}

getColosStatus();

setInterval(() => {
	getColosStatus();
}, 60000);

</script>