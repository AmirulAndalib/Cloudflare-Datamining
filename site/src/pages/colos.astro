---
import Layout from '../layouts/Layout.astro';
import Table from '../components/Table.astro';

import {airports} from '../airportsWithLocations.js';

const importFiles = await Astro.glob('../../../data/other/colos-id-map.json');
const colos = importFiles[0].default;

const types: any = {
	// canaries
	'blr01': 'CAN',
	'kul01': 'CAN',
	'slc01': 'CAN',
	'iah01': 'CAN',
	'lis01': 'CAN',

	// testing colos
	'sfo06': 'DOG',
	'sfo07': 'LAB',
	'pig02': 'PIG',

	// MCP
	'ams01': 'MCP',
	'ams06': 'MCP',
	'ams07': 'MCP',

	'atl01': 'MCP',
	'atl06': 'MCP',
	'atl07': 'MCP',
	'atl08': 'MCP',
	'atl09': 'MCP',

	'bom03': 'MCP',
	'bom06': 'MCP',

	'cdg01': 'MCP',
	'cdg07': 'MCP',
	'cdg08': 'MCP',
	'cdg09': 'MCP',
	'cdg10': 'MCP',
	'cdg11': 'MCP',

	'ewr01': 'MCP',
	'ewr05': 'MCP',
	'ewr07': 'MCP',
	'ewr08': 'MCP',

	'fra03': 'MCP',
	'fra06': 'MCP',
	'fra07': 'MCP',
	'fra08': 'MCP',

	'gru02': 'MCP',
	'gru07': 'MCP',
	'gru08': 'MCP',
	'gru09': 'MCP',

	'iad02': 'MCP',
	'iad03': 'MCP',
	'iad04': 'MCP',
	'iad05': 'MCP',
	'iad07': 'MCP',
	'iad08': 'MCP',

	'icn01': 'MCP',
	'icn06': 'MCP',

	'kix01': 'MCP',
	'kix02': 'MCP',
	'kix03': 'MCP',

	'lax01': 'MCP',
	'lax05': 'MCP',
	'lax06': 'MCP',
	'lax07': 'MCP',

	'lhr01': 'MCP',
	'lhr08': 'MCP',
	'lhr09': 'MCP',
	'lhr10': 'MCP',
	'lhr11': 'MCP',

	'mad01': 'MCP',
	'mad02': 'MCP',
	'mad03': 'MCP',
	'mad04': 'MCP',

	'man01': 'MCP',
	'man02': 'MCP',

	'mia01': 'MCP',
	'mia02': 'MCP',
	'mia04': 'MCP',
	'mia05': 'MCP',

	'mxp01': 'MCP',
	'mxp02': 'MCP',
	'mxp03': 'MCP',

	'nrt01': 'MCP',
	'nrt05': 'MCP',
	'nrt07': 'MCP',
	'nrt08': 'MCP',

	'ord02': 'MCP',
	'ord06': 'MCP',
	'ord07': 'MCP',
	'ord08': 'MCP',

	'sea01': 'MCP',
	'sea05': 'MCP',
	'sea06': 'MCP',
	'sea08': 'MCP',

	'sin06': 'MCP',
	'sin07': 'MCP',
	'sin08': 'MCP',
	'sin09': 'MCP',

	'sjc01': 'MCP',
	'sjc05': 'MCP',
	'sjc06': 'MCP',
	'sjc07': 'MCP',
	'sjc08': 'MCP',

	'syd01': 'MCP',
	'syd04': 'MCP',
	'syd05': 'MCP',
	'syd06': 'MCP',
	'syd07': 'MCP',
};

for(const coloId in colos){
	const colo = colos[coloId];
	const airport = airports.find(air => colo.toUpperCase().startsWith(air.code));
	if(!airport){
		continue;
	}
	if(airport?.name.includes('China')){
		types[colo] = 'JDC';
	}
}


---
<Layout title="Colos - Cloudflare Datamining">
	<main class="m-auto max-w-5xl p-4">
		<h2 class="mb-2 text-xl">Colos</h2>
		<Table
			headers = {["ID", "Colo", "Type", "Status"]}
			widths={["w-[30%]", "w-[30%]", "w-[30%]", "w-[10%]"]}
			data = {Object.keys(colos).map((id:string) => [
				id,
				colos[id],
				types[colos[id]],
				'loading...',
			])}
		></Table>
	</main>
</Layout>

<script>

async function getColosStatus(){
	const table = document.querySelector('table');
	if(!table){
		return;
	}
	const headers = table.querySelectorAll('thead tr th');
	if(!headers){
		return;
	}
	let statusIndex = null;
	for(const [index, header] of headers.entries()){
		if(header.textContent === 'Status'){
			statusIndex = index + 1;
			break;
		}
	}
	const tableRows = table.querySelectorAll('tbody tr');
	if(!tableRows){
		return;
	}

	const coloStatusRes = await fetch('https://colos-status.jross.workers.dev/');
	const coloStatus = await coloStatusRes.json();

	for(const row of tableRows){
		const coloName = row.querySelector('td:nth-child(2)')?.textContent;
		const status = row.querySelector(`td:nth-child(${statusIndex})`);
		const type = row.querySelector('td:nth-child(3)')?.textContent;
		if(!coloName || !status){
			continue;
		}
		status.textContent = '';
		let spanElement = status.querySelector('span');
		if(!spanElement){
			spanElement = document.createElement('span');
			status.append(spanElement);
		}
		spanElement.classList.add('w-4', 'h-4', 'inline-block', 'rounded-full', 'mr-2');
		const online = coloStatus[coloName] === true;
		if(online){
			spanElement.classList.add('bg-green-500');
			spanElement.title = 'Online';
		}else if(type === 'JDC'){
			spanElement.classList.add('bg-gray-500');
			spanElement.title = 'China network. Unknown status';
		}else{
			spanElement.classList.add('bg-red-500');
			spanElement.title = 'Offline or non-responsive';
		}
	}
}

getColosStatus();

setInterval(() => {
	getColosStatus();
}, 60000);

</script>