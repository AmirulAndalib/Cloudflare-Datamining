---
export interface Props {
	headers: string[] | undefined;
	widths?: string[];
	id?: string;
	data: any;
}

const {id, headers, data, widths} = Astro.props;

---
<div class="my-2 flex flex-col">
	<div class="-mx-4 -my-2 overflow-x-auto sm:-mx-6 lg:-mx-8">
		<div class="inline-block min-w-full py-2 align-middle md:px-6 lg:px-8">
			<div class="overflow-hidden shadow ring-1 ring-black/5 md:rounded-lg">
				<table id={id} class="min-w-full divide-y divide-gray-300 dark:divide-gray-700">
					<thead class="bg-gray-50 dark:bg-gray-800">
						<tr>
							{(headers ?? []).map((header:string) => (
								<th scope="col" class="truncate whitespace-nowrap px-2 py-3.5 text-left text-sm font-semibold first:pl-4">{header}</th>
							))}
						</tr>
					</thead>
					<tbody class="divide-y divide-gray-200 bg-white dark:divide-gray-600 dark:bg-gray-700">
						{data.map((item:string[]) => (
							<tr>
								{item.map((value: string | string[], index: number) => (
									<td class={['whitespace-nowrap py-2 pl-2 first:pl-4 pr-3 text-sm text-gray-500 dark:text-gray-300 truncate font-mono', widths?.[index]].join(' ').trim()}>
										{!Array.isArray(value) ? value : (
											<ul class="list-none list-inside">
												{value.map((item: string) => (
													<li class="text-sm text-gray-500 dark:text-gray-300 truncate font-mono inline after:content-[',_'] last:after:content-['']">{item}</li>
												))}
											</ul>
										)}
									</td>
								))}
							</tr>
						))}
					</tbody>
				</table>
			</div>
		</div>
	</div>
</div>
