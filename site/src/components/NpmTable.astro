---
import Table from './Table.astro';
import MainHeading from './MainHeading.astro';
import SubHeading from './SubHeading.astro';
export interface Props {
	data: object;
	title: string;
	headers?: string[]
}

const {data, title, headers}: {data: any, title: string, headers?: string[]} = Astro.props;
const tableHeaders = headers ?? ["Entitlement", "Default Value"];

function getValue(data:string|object){
	if(typeof data === 'string'){
		return data;
	}
	return JSON.stringify(data);
}
---

<MainHeading title={title} />
<div class="space-y-6">
	{Object.keys(data).map(namespace => (
		<div>
			<SubHeading category={namespace} />
			<div class="mt-2 flex flex-col">
				<div class="-my-2 -mx-4 overflow-x-auto sm:-mx-6 lg:-mx-8">
					<div class="inline-block min-w-full py-2 align-middle md:px-6 lg:px-8">
						<div class="overflow-hidden shadow ring-1 ring-black ring-opacity-5 md:rounded-lg">
							<table class="min-w-full divide-y divide-gray-300 dark:divide-gray-700">
								<thead class="bg-gray-50 dark:bg-gray-800">
									<tr>
										{(tableHeaders ?? []).map((header:string) => (
											<th scope="col" class="whitespace-nowrap pl-2 first:pl-4 pr-2 py-3.5 text-left text-sm font-semibold truncate">{header}</th>
										))}
									</tr>
								</thead>
								<tbody class="divide-y divide-gray-200 dark:divide-gray-600 bg-white dark:bg-gray-700">
									{Object.keys(data[namespace]).map(pkg => {
										console.log(data[namespace][pkg]);
										return <tr>
											<td class="whitespace-nowrap py-2 pl-2 first:pl-4 pr-3 text-sm text-gray-500 dark:text-gray-300 truncate font-mono">{data[namespace][pkg]['name']}</td>
											<td class="whitespace-nowrap py-2 pl-2 first:pl-4 pr-3 text-sm text-gray-500 dark:text-gray-300 truncate flex flex-col">
												<p>
													{data[namespace][pkg]['description']}
												</p>
												<div>
													{new Date(data[namespace][pkg]['date']).toLocaleString('en-GB', {year: 'numeric', month: 'long', day: 'numeric', hour: 'numeric', minute: 'numeric', second: 'numeric'})}
													&middot; 
													<span class="font-sans inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium bg-gray-100 dark:bg-gray-900 text-gray-800 dark:text-gray-100">v{data[namespace][pkg]['version']}</span>
													&middot; 
													<div class="inline-block space-x-1">
														{Object.keys(data[namespace][pkg]['tags']).map(tag => {
															return <span class="font-sans inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium bg-gray-100 dark:bg-gray-900 text-gray-800 dark:text-gray-100">{tag}</span>
														})}
													</div>
												</div>
											</td>
										</tr>
									})}
								</tbody>
							</table>
						</div>
					</div>
				</div>
			</div>
		</div>
	))}
</div>