---
export interface Props {
	usage: string;
}
const navItems = [
	{
		label: 'Home',
		path: '/',
	},
	{
		label: 'Account',
		path: '/account',
		submenu: [
			{
				label: 'Flags',
				path: '/flags',
			},
			{
				label: 'Entitlements',
				path: '/entitlements',
			},
			{
				label: 'Known Entitlements',
				path: '/known-entitlements',
			},
		],
	},
	{
		label: 'Zone',
		path: '/zone',
		submenu: [
			{
				label: 'Flags',
				path: '/flags',
			},
			{
				label: 'Entitlements',
				path: '/entitlements',
			},
			{
				label: 'Known Entitlements',
				path: '/known-entitlements',
			},
		],
	},
	{
		label: 'Gates',
		path: '/gates',
	},
	{
		label: 'GraphQL',
		path: '/graphql',
	},
	{
		label: 'Colos',
		path: '/colos',
	},
	{
		label: 'NPM',
		path: '/npm',
	},
	{
		label: 'Products',
		path: '/products',
		submenu: [
			{
				label: 'Pages',
				path: '/pages',
			},
		],
	},
];

var currentPath = Astro.url.pathname;
if (currentPath.charAt(-1) === '/') {
	currentPath = currentPath.slice(-1);
}
const {usage} = Astro.props;
---

<nav aria-label="Sidebar" class="sticky top-4 divide-y divide-gray-300">
	<div class="space-y-1">
		{navItems.map((item, index) => {
			if (item.submenu) {
				return (
					<div>
						<button id={`${usage}-submenu-${index}`} type="button" class="text-gray-700 hover:bg-gray-50 group w-full flex items-center pr-2 py-2 text-left text-sm font-medium rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500" aria-controls="sub-menu-2" aria-expanded="false">
							<!-- Expanded: "text-gray-400 rotate-90", Collapsed: "text-gray-300" -->
							<svg id={`${usage}-submenu-${index}-icon`} class={[
									currentPath.startsWith(item.path) ? 'text-gray-400 rotate-90' : 'text-gray-300', "mr-2 h-5 w-5 flex-shrink-0 transform transition-colors duration-150 ease-in-out",
								].join(' ').trim()} viewBox="0 0 20 20" aria-hidden="true">
								<path d="M6 6L14 10L6 14V6Z" fill="currentColor" />
							</svg>
							<span class="truncate">{item.label}</span>
						</button>
						<div id={`${usage}-submenu-${index}-menu`} class={currentPath.startsWith(item.path) ? '' : 'hidden'}>
							{item.submenu.map((submenu) => {
								return (<a
									href={item.path + submenu.path}
									class={[
											currentPath == item.path + submenu.path ? 'bg-gray-200 text-gray-900' : 'text-gray-700 hover:bg-gray-50',
											"group flex items-center pl-10 pr-2 py-2 text-sm font-medium rounded-md",
										].join(' ').trim()}
										>
									<span class="truncate">{submenu.label}</span>
								</a>)
							})}
						</div>
					</div>
				)
			} else {
				return (<a
					href={item.path}
					class={[
							currentPath == item.path ? 'bg-gray-200 text-gray-900' : 'text-gray-700 hover:bg-gray-50',
							"group flex items-center pl-7 pr-2 py-2 text-sm font-medium rounded-md",
						].join(' ').trim()}
				>
					<span class="truncate">{item.label}</span>
				</a>)
			}
		})}
	</div>
</nav>

<script>
	document.querySelectorAll('button').forEach(function (button) {
		button.addEventListener('click', function() {
			const icon = document.getElementById(button.id + '-icon')!;
			document.getElementById(`${button.id}-menu`)?.classList.toggle("hidden");
			icon.classList.toggle('text-gray-300');
			icon.classList.toggle('text-gray-400');
			icon.classList.toggle('rotate-90');
		});
	});
</script>