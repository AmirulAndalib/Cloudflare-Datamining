{
	"type": "object",
	"title": "Workers Dispatch Namespace",
	"description": "A Workers for Platforms namespace for dispatching workers by name.",
	"id": "https://api.cloudflare.com/schemas/v4/client/account/workers/dispatch-namespaces.json",
	"links": [
		{
			"href": "/workers/dispatch/namespaces",
			"rel": "",
			"title": "List Namespaces",
			"mediaType": "application/json",
			"method": "GET",
			"encType": "application/json",
			"description": "Lists all Workers dispatch namespaces.",
			"cfPrivate": false,
			"cfOwnership": "workers",
			"html_id": "workers-dispatch-namespace-list-namespaces",
			"uri": "/workers/dispatch/namespaces",
			"curl": "curl -X GET \"https://api.cloudflare.com/client/v4//workers/dispatch/namespaces?success=true&errors=&messages=&result=[object Object]\" \\\n     -H \"X-Auth-Email: user@example.com\" \\\n     -H \"X-Auth-Key: c2547eb745079dac9320b638f5e225cf483cc5cfdda41\" \\\n     -H \"Content-Type: application/json\"",
			"parameters": {
				"_formatter": {
					"jsonMediaType": {}
				},
				"all_props": {
					"result": {
						"type": "object",
						"example": "{}",
						"properties": {
							"dispatch_namespace": {
								"type": "string",
								"description": "Name of the Workers dispatch namespace, any valid UTF8 string.",
								"examples": [
									"my-dispatch-namespace"
								]
							},
							"created_on": {
								"type": "string",
								"format": "date-time"
							},
							"modified_on": {
								"type": "string",
								"format": "date-time"
							}
						},
						"additionalProperties": false
					}
				},
				"required_props": [],
				"optional_props": [
					"result"
				],
				"objects": [
					{
						"all_props": {
							"success": {
								"type": "boolean",
								"example": "true",
								"description": "Whether the API call was successful or not.",
								"enum": [
									true
								]
							},
							"errors": {
								"type": "array",
								"example": "[]",
								"items": {
									"type": "object",
									"required": [
										"code",
										"message"
									],
									"properties": {
										"code": {
											"type": "integer",
											"minimum": 1000
										},
										"message": {
											"type": "string"
										}
									},
									"uniqueItems": true
								}
							},
							"messages": {
								"type": "array",
								"example": "[]",
								"items": {
									"type": "object",
									"required": [
										"code",
										"message"
									],
									"properties": {
										"code": {
											"type": "integer",
											"minimum": 1000
										},
										"message": {
											"type": "string"
										}
									},
									"uniqueItems": true
								}
							},
							"result": {
								"type": [
									"object",
									"array",
									"string"
								]
							}
						},
						"required_props": [],
						"optional_props": [
							"success",
							"errors",
							"messages",
							"result"
						],
						"objects": [],
						"example": "{\n  \"success\": true,\n  \"errors\": [],\n  \"messages\": []\n}"
					},
					{
						"all_props": {
							"success": {
								"type": "boolean",
								"example": "false",
								"description": "Whether the API call was successful or not.",
								"enum": [
									false
								]
							},
							"errors": {
								"example": "[\n  {}\n]",
								"properties": {
									"code": {
										"type": "integer",
										"minimum": 1000
									},
									"message": {
										"type": "string"
									}
								},
								"allOf": [
									{
										"type": "array",
										"items": {
											"type": "object",
											"required": [
												"code",
												"message"
											],
											"properties": {
												"code": {
													"type": "integer",
													"minimum": 1000
												},
												"message": {
													"type": "string"
												}
											},
											"uniqueItems": true
										},
										"example": []
									}
								],
								"minLength": 1
							},
							"messages": {
								"example": "[\n  {}\n]",
								"properties": {
									"code": {
										"type": "integer",
										"minimum": 1000
									},
									"message": {
										"type": "string"
									}
								},
								"allOf": [
									{
										"type": "array",
										"items": {
											"type": "object",
											"required": [
												"code",
												"message"
											],
											"properties": {
												"code": {
													"type": "integer",
													"minimum": 1000
												},
												"message": {
													"type": "string"
												}
											},
											"uniqueItems": true
										},
										"example": []
									}
								]
							},
							"result": {
								"type": "null",
								"example": "null",
								"enum": [
									null
								]
							}
						},
						"required_props": [],
						"optional_props": [
							"success",
							"errors",
							"messages",
							"result"
						],
						"objects": [],
						"example": "{\n  \"success\": false,\n  \"errors\": [\n    {}\n  ],\n  \"messages\": [\n    {}\n  ],\n  \"result\": null\n}"
					}
				],
				"example": "{\n  \"success\": true,\n  \"errors\": [],\n  \"messages\": [],\n  \"result\": {}\n}",
				"which_of": "oneOf"
			}
		},
		{
			"href": "/workers/dispatch/namespaces",
			"rel": "",
			"title": "Create Namespace",
			"mediaType": "application/json",
			"method": "POST",
			"encType": "application/json",
			"description": "Creates a Workers dispatch namespace.",
			"cfPrivate": false,
			"cfOwnership": "workers",
			"html_id": "workers-dispatch-namespace-create-namespace",
			"uri": "/workers/dispatch/namespaces",
			"curl": "curl -X POST \"https://api.cloudflare.com/client/v4//workers/dispatch/namespaces\" \\\n     -H \"X-Auth-Email: user@example.com\" \\\n     -H \"X-Auth-Key: c2547eb745079dac9320b638f5e225cf483cc5cfdda41\" \\\n     -H \"Content-Type: application/json\" \\\n     --data '{\"success\":true,\"errors\":[],\"messages\":[],\"result\":{}}'",
			"parameters": {
				"_formatter": {
					"jsonMediaType": {}
				},
				"all_props": {
					"result": {
						"type": "object",
						"example": "{}",
						"properties": {
							"dispatch_namespace": {
								"type": "string",
								"description": "Name of the Workers dispatch namespace, any valid UTF8 string.",
								"examples": [
									"my-dispatch-namespace"
								]
							},
							"created_on": {
								"type": "string",
								"format": "date-time"
							},
							"modified_on": {
								"type": "string",
								"format": "date-time"
							}
						},
						"additionalProperties": false
					}
				},
				"required_props": [],
				"optional_props": [
					"result"
				],
				"objects": [
					{
						"all_props": {
							"success": {
								"type": "boolean",
								"example": "true",
								"description": "Whether the API call was successful or not.",
								"enum": [
									true
								]
							},
							"errors": {
								"type": "array",
								"example": "[]",
								"items": {
									"type": "object",
									"required": [
										"code",
										"message"
									],
									"properties": {
										"code": {
											"type": "integer",
											"minimum": 1000
										},
										"message": {
											"type": "string"
										}
									},
									"uniqueItems": true
								}
							},
							"messages": {
								"type": "array",
								"example": "[]",
								"items": {
									"type": "object",
									"required": [
										"code",
										"message"
									],
									"properties": {
										"code": {
											"type": "integer",
											"minimum": 1000
										},
										"message": {
											"type": "string"
										}
									},
									"uniqueItems": true
								}
							},
							"result": {
								"type": [
									"object",
									"array",
									"string"
								]
							}
						},
						"required_props": [],
						"optional_props": [
							"success",
							"errors",
							"messages",
							"result"
						],
						"objects": [],
						"example": "{\n  \"success\": true,\n  \"errors\": [],\n  \"messages\": []\n}"
					},
					{
						"all_props": {
							"success": {
								"type": "boolean",
								"example": "false",
								"description": "Whether the API call was successful or not.",
								"enum": [
									false
								]
							},
							"errors": {
								"example": "[\n  {}\n]",
								"properties": {
									"code": {
										"type": "integer",
										"minimum": 1000
									},
									"message": {
										"type": "string"
									}
								},
								"allOf": [
									{
										"type": "array",
										"items": {
											"type": "object",
											"required": [
												"code",
												"message"
											],
											"properties": {
												"code": {
													"type": "integer",
													"minimum": 1000
												},
												"message": {
													"type": "string"
												}
											},
											"uniqueItems": true
										},
										"example": []
									}
								],
								"minLength": 1
							},
							"messages": {
								"example": "[\n  {}\n]",
								"properties": {
									"code": {
										"type": "integer",
										"minimum": 1000
									},
									"message": {
										"type": "string"
									}
								},
								"allOf": [
									{
										"type": "array",
										"items": {
											"type": "object",
											"required": [
												"code",
												"message"
											],
											"properties": {
												"code": {
													"type": "integer",
													"minimum": 1000
												},
												"message": {
													"type": "string"
												}
											},
											"uniqueItems": true
										},
										"example": []
									}
								]
							},
							"result": {
								"type": "null",
								"example": "null",
								"enum": [
									null
								]
							}
						},
						"required_props": [],
						"optional_props": [
							"success",
							"errors",
							"messages",
							"result"
						],
						"objects": [],
						"example": "{\n  \"success\": false,\n  \"errors\": [\n    {}\n  ],\n  \"messages\": [\n    {}\n  ],\n  \"result\": null\n}"
					}
				],
				"example": "{\n  \"success\": true,\n  \"errors\": [],\n  \"messages\": [],\n  \"result\": {}\n}",
				"which_of": "oneOf"
			},
			"response": "{\n  \"params\": [\n    {}\n  ]\n}"
		},
		{
			"href": "/workers/dispatch/namespaces/{#/definitions/dispatch-namespace-name}",
			"rel": "",
			"title": "Get Namespace",
			"mediaType": "application/json",
			"method": "GET",
			"encType": "application/json",
			"description": "Returns details about a Workers dispatch namespace.",
			"cfPrivate": false,
			"cfOwnership": "workers",
			"html_id": "workers-dispatch-namespace-get-namespace",
			"uri": "/workers/dispatch/namespaces/{#/definitions/dispatch-namespace-name}",
			"curl": "curl -X GET \"https://api.cloudflare.com/client/v4//workers/dispatch/namespaces/{#/definitions/dispatch-namespace-name}?success=true&errors=&messages=&result=[object Object]\" \\\n     -H \"X-Auth-Email: user@example.com\" \\\n     -H \"X-Auth-Key: c2547eb745079dac9320b638f5e225cf483cc5cfdda41\" \\\n     -H \"Content-Type: application/json\"",
			"parameters": {
				"_formatter": {
					"jsonMediaType": {}
				},
				"all_props": {
					"result": {
						"type": "object",
						"example": "{}",
						"properties": {
							"dispatch_namespace": {
								"type": "string",
								"description": "Name of the Workers dispatch namespace, any valid UTF8 string.",
								"examples": [
									"my-dispatch-namespace"
								]
							},
							"created_on": {
								"type": "string",
								"format": "date-time"
							},
							"modified_on": {
								"type": "string",
								"format": "date-time"
							}
						},
						"additionalProperties": false
					}
				},
				"required_props": [],
				"optional_props": [
					"result"
				],
				"objects": [
					{
						"all_props": {
							"success": {
								"type": "boolean",
								"example": "true",
								"description": "Whether the API call was successful or not.",
								"enum": [
									true
								]
							},
							"errors": {
								"type": "array",
								"example": "[]",
								"items": {
									"type": "object",
									"required": [
										"code",
										"message"
									],
									"properties": {
										"code": {
											"type": "integer",
											"minimum": 1000
										},
										"message": {
											"type": "string"
										}
									},
									"uniqueItems": true
								}
							},
							"messages": {
								"type": "array",
								"example": "[]",
								"items": {
									"type": "object",
									"required": [
										"code",
										"message"
									],
									"properties": {
										"code": {
											"type": "integer",
											"minimum": 1000
										},
										"message": {
											"type": "string"
										}
									},
									"uniqueItems": true
								}
							},
							"result": {
								"type": [
									"object",
									"array",
									"string"
								]
							}
						},
						"required_props": [],
						"optional_props": [
							"success",
							"errors",
							"messages",
							"result"
						],
						"objects": [],
						"example": "{\n  \"success\": true,\n  \"errors\": [],\n  \"messages\": []\n}"
					},
					{
						"all_props": {
							"success": {
								"type": "boolean",
								"example": "false",
								"description": "Whether the API call was successful or not.",
								"enum": [
									false
								]
							},
							"errors": {
								"example": "[\n  {}\n]",
								"properties": {
									"code": {
										"type": "integer",
										"minimum": 1000
									},
									"message": {
										"type": "string"
									}
								},
								"allOf": [
									{
										"type": "array",
										"items": {
											"type": "object",
											"required": [
												"code",
												"message"
											],
											"properties": {
												"code": {
													"type": "integer",
													"minimum": 1000
												},
												"message": {
													"type": "string"
												}
											},
											"uniqueItems": true
										},
										"example": []
									}
								],
								"minLength": 1
							},
							"messages": {
								"example": "[\n  {}\n]",
								"properties": {
									"code": {
										"type": "integer",
										"minimum": 1000
									},
									"message": {
										"type": "string"
									}
								},
								"allOf": [
									{
										"type": "array",
										"items": {
											"type": "object",
											"required": [
												"code",
												"message"
											],
											"properties": {
												"code": {
													"type": "integer",
													"minimum": 1000
												},
												"message": {
													"type": "string"
												}
											},
											"uniqueItems": true
										},
										"example": []
									}
								]
							},
							"result": {
								"type": "null",
								"example": "null",
								"enum": [
									null
								]
							}
						},
						"required_props": [],
						"optional_props": [
							"success",
							"errors",
							"messages",
							"result"
						],
						"objects": [],
						"example": "{\n  \"success\": false,\n  \"errors\": [\n    {}\n  ],\n  \"messages\": [\n    {}\n  ],\n  \"result\": null\n}"
					}
				],
				"example": "{\n  \"success\": true,\n  \"errors\": [],\n  \"messages\": [],\n  \"result\": {}\n}",
				"which_of": "oneOf"
			}
		}
	],
	"extraProperties": null,
	"example": "",
	"cfExtendedDescription": "**For more detailed documentation on using the API for Workers see the [Workers API](https://workers.cloudflare.com/docs/reference/tooling/api/).**",
	"html_id": "workers-dispatch-namespace",
	"object_definition": {
		"_formatter": {
			"jsonMediaType": {}
		},
		"all_props": {
			"dispatch_namespace": {
				"type": "string",
				"description": "Name of the Workers dispatch namespace, any valid UTF8 string.",
				"examples": [
					"my-dispatch-namespace"
				]
			},
			"created_on": {
				"type": "string",
				"format": "date-time"
			},
			"modified_on": {
				"type": "string",
				"format": "date-time"
			}
		},
		"required_props": [],
		"optional_props": [
			"dispatch_namespace",
			"created_on",
			"modified_on"
		],
		"objects": [],
		"example": "{}",
		"title": "Workers Dispatch Namespace",
		"description": "A Workers for Platforms namespace for dispatching workers by name."
	}
}