{
	"DELETE /accounts/{account_identifier}/stream/{identifier}": {
		"description": "Deletes a video and its copies from Cloudflare Stream.",
		"operationId": "stream-videos-delete-video",
		"parameters": [
			{
				"in": "path",
				"name": "identifier",
				"required": true,
				"schema": {
					"description": "A Cloudflare-generated unique identifier for a media item.",
					"example": "ea95132c15732412d22c1476fa83f27a",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "account_identifier",
				"required": true,
				"schema": {
					"description": "The account identifier tag.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {}
				},
				"description": "Delete video response"
			},
			"4XX": {
				"content": {
					"application/json": {}
				},
				"description": "Delete video response failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": [],
				"api_token": []
			}
		],
		"summary": "Delete video",
		"tags": [
			"Stream Videos"
		]
	},
	"GET /accounts/{account_identifier}/stream": {
		"description": "Lists up to 1000 videos from a single request. For a specific range, refer to the optional parameters.",
		"operationId": "stream-videos-list-videos",
		"parameters": [
			{
				"in": "path",
				"name": "account_identifier",
				"required": true,
				"schema": {
					"description": "The account identifier tag.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "status",
				"schema": {
					"description": "Specifies the processing status of the video.",
					"enum": [
						"pendingupload",
						"downloading",
						"queued",
						"inprogress",
						"ready",
						"error"
					],
					"example": "inprogress",
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "creator",
				"schema": {
					"description": "A user-defined identifier for the media creator.",
					"example": "creator-id_abcde12345",
					"maxLength": 64,
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "type",
				"schema": {
					"description": "Specifies whether the video is `vod` or `live`.",
					"example": "live",
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "asc",
				"schema": {
					"default": false,
					"description": "Lists videos in ascending order of creation.",
					"example": true,
					"type": "boolean"
				}
			},
			{
				"in": "query",
				"name": "search",
				"schema": {
					"description": "Searches over the `name` key in the `meta` field. This field can be set with or after the upload request.",
					"example": "puppy.mp4",
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "start",
				"schema": {
					"description": "Lists videos created after the specified date.",
					"example": "2014-01-02T02:20:00Z",
					"format": "date-time",
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "end",
				"schema": {
					"description": "Lists videos created before the specified date.",
					"example": "2014-01-02T02:20:00Z",
					"format": "date-time",
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/api-response-collection-PAmkZGnN"
								},
								{
									"properties": {
										"result": {
											"items": {
												"$ref": "#/components/schemas/videos"
											},
											"type": "array"
										}
									}
								},
								{
									"properties": {
										"range": {
											"description": "The total number of remaining videos based on cursor position.",
											"example": 1000,
											"type": "integer"
										},
										"total": {
											"description": "The total number of videos that match the provided filters.",
											"example": 35586,
											"type": "integer"
										}
									}
								}
							]
						}
					}
				},
				"description": "List videos response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"$ref": "#/components/schemas/messages-KPbOwT6c"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"$ref": "#/components/schemas/messages-KPbOwT6c"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "List videos response failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": [],
				"api_token": []
			}
		],
		"summary": "List videos",
		"tags": [
			"Stream Videos"
		]
	},
	"GET /accounts/{account_identifier}/stream/{identifier}": {
		"description": "Fetches details for a single video.",
		"operationId": "stream-videos-retrieve-video-details",
		"parameters": [
			{
				"in": "path",
				"name": "identifier",
				"required": true,
				"schema": {
					"description": "A Cloudflare-generated unique identifier for a media item.",
					"example": "ea95132c15732412d22c1476fa83f27a",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "account_identifier",
				"required": true,
				"schema": {
					"description": "The account identifier tag.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/api-response-single-orHM1jWS"
								},
								{
									"properties": {
										"result": {
											"$ref": "#/components/schemas/videos"
										}
									}
								}
							]
						}
					}
				},
				"description": "Retrieve video details response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"$ref": "#/components/schemas/messages-KPbOwT6c"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"$ref": "#/components/schemas/messages-KPbOwT6c"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Retrieve video details response failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": [],
				"api_token": []
			}
		],
		"summary": "Retrieve video details",
		"tags": [
			"Stream Videos"
		]
	},
	"GET /accounts/{account_identifier}/stream/{identifier}/embed": {
		"description": "Fetches an HTML code snippet to embed a video in a web page delivered through Cloudflare. On success, returns an HTML fragment for use on web pages to display a video. On failure, returns a JSON response body.",
		"operationId": "stream-videos-retreieve-embed-code-html",
		"parameters": [
			{
				"in": "path",
				"name": "identifier",
				"required": true,
				"schema": {
					"description": "A Cloudflare-generated unique identifier for a media item.",
					"example": "ea95132c15732412d22c1476fa83f27a",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "account_identifier",
				"required": true,
				"schema": {
					"description": "The account identifier tag.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"example": "<stream id=\"ea95132c15732412d22c1476fa83f27a\"></stream><script data-cfasync=\"false\" defer type=\"text/javascript\" src=\"https://embed.cloudflarestream.com/embed/we4g.fla9.latest.js\"></script>"
						}
					}
				},
				"description": "Retreieve embed Code HTML response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"$ref": "#/components/schemas/messages-KPbOwT6c"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"$ref": "#/components/schemas/messages-KPbOwT6c"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Retreieve embed Code HTML response failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": [],
				"api_token": []
			}
		],
		"summary": "Retreieve embed Code HTML",
		"tags": [
			"Stream Videos"
		]
	},
	"POST /accounts/{account_identifier}/stream": {
		"description": "Initiates a video upload using the TUS protocol. On success, the server responds with a status code 201 (created) and includes a `location` header to indicate where the content should be uploaded. Refer to https://tus.io for protocol details.",
		"operationId": "stream-videos-initiate-video-uploads-using-tus",
		"parameters": [
			{
				"in": "header",
				"name": "Tus-Resumable",
				"required": true,
				"schema": {
					"description": "Specifies the TUS protocol version. This value must be included in every upload request.\nNotes: The only supported version of TUS protocol is 1.0.0.",
					"enum": [
						"1.0.0"
					],
					"example": "1.0.0",
					"type": "string"
				}
			},
			{
				"in": "header",
				"name": "Upload-Creator",
				"schema": {
					"description": "A user-defined identifier for the media creator.",
					"example": "creator-id_abcde12345",
					"maxLength": 64,
					"type": "string"
				}
			},
			{
				"in": "header",
				"name": "Upload-Length",
				"required": true,
				"schema": {
					"description": "Indicates the size of the entire upload in bytes. The value must be a non-negative integer.",
					"minimum": 0,
					"type": "integer"
				}
			},
			{
				"in": "path",
				"name": "account_identifier",
				"required": true,
				"schema": {
					"description": "The account identifier tag.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {}
				},
				"description": "Initiate video uploads using TUS response"
			},
			"4XX": {
				"content": {
					"application/json": {}
				},
				"description": "Initiate video uploads using TUS response failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": [],
				"api_token": []
			}
		],
		"summary": "Initiate video uploads using TUS",
		"tags": [
			"Stream Videos"
		]
	},
	"POST /accounts/{account_identifier}/stream/{identifier}": {
		"description": "Edit details for a single video.",
		"operationId": "stream-videos-update-video-details",
		"parameters": [
			{
				"in": "path",
				"name": "identifier",
				"required": true,
				"schema": {
					"description": "A Cloudflare-generated unique identifier for a media item.",
					"example": "ea95132c15732412d22c1476fa83f27a",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "account_identifier",
				"required": true,
				"schema": {
					"description": "The account identifier tag.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"properties": {
							"allowedOrigins": {
								"$ref": "#/components/schemas/allowedOrigins"
							},
							"creator": {
								"$ref": "#/components/schemas/creator"
							},
							"maxDurationSeconds": {
								"$ref": "#/components/schemas/maxDurationSeconds"
							},
							"meta": {
								"$ref": "#/components/schemas/media_metadata"
							},
							"requireSignedURLs": {
								"$ref": "#/components/schemas/requireSignedURLs"
							},
							"thumbnailTimestampPct": {
								"$ref": "#/components/schemas/thumbnailTimestampPct"
							},
							"uploadExpiry": {
								"$ref": "#/components/schemas/oneTimeUploadExpiry"
							}
						},
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/api-response-single-orHM1jWS"
								},
								{
									"properties": {
										"result": {
											"$ref": "#/components/schemas/videos"
										}
									}
								}
							]
						}
					}
				},
				"description": "Edit video details response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"$ref": "#/components/schemas/messages-KPbOwT6c"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"$ref": "#/components/schemas/messages-KPbOwT6c"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Edit video details response failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": [],
				"api_token": []
			}
		],
		"summary": "Edit video details",
		"tags": [
			"Stream Videos"
		]
	},
	"POST /accounts/{account_identifier}/stream/{identifier}/token": {
		"description": "Creates a signed URL token for a video. If a body is not provided in the request, a token is created with default values.",
		"operationId": "stream-videos-create-signed-url-tokens-for-videos",
		"parameters": [
			{
				"in": "path",
				"name": "identifier",
				"required": true,
				"schema": {
					"description": "A Cloudflare-generated unique identifier for a media item.",
					"example": "ea95132c15732412d22c1476fa83f27a",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "account_identifier",
				"required": true,
				"schema": {
					"description": "The account identifier tag.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"properties": {
							"accessRules": {
								"description": "The optional list of access rule constraints on the token. Access can be blocked or allowed based on an IP, IP range, or by country. Access rules are evaluated from first to last. If a rule matches, the associated action is applied and no further rules are evaluated.",
								"example": [
									{
										"action": "block",
										"country": [
											"US",
											"MX"
										],
										"type": "ip.geoip.country"
									},
									{
										"action": "allow",
										"ip": [
											"93.184.216.0/24",
											"2400:cb00::/32"
										],
										"type": "ip.src"
									},
									{
										"action": "block",
										"type": "any"
									}
								],
								"items": {
									"$ref": "#/components/schemas/accessRules"
								},
								"type": "array"
							},
							"downloadable": {
								"default": false,
								"description": "The optional boolean value that enables using signed tokens to access MP4 download links for a video.",
								"type": "boolean"
							},
							"exp": {
								"description": "The optional unix epoch timestamp that specficies the time after a token is not accepted. The maximum time specification is 24 hours from issuing time. If this field is not set, the default is one hour after issuing.",
								"type": "integer"
							},
							"id": {
								"description": "The optional ID of a Stream signing key. If present, the `pem` field is also required.",
								"example": "ab0d4ef71g4425f8dcba9041231813000",
								"type": "string"
							},
							"nbf": {
								"description": "The optional unix epoch timestamp that specifies the time before a the token is not accepted. If this field is not set, the default is one hour before issuing.",
								"type": "integer"
							},
							"pem": {
								"description": "The optional base64 encoded private key in PEM format associated with a Stream signing key. If present, the `id` field is also required.",
								"example": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBc284dnBvOFpEWXRkOUgzbWlPaW1qYXAzVXlVM0oyZ3kwTUYvN1R4blJuRnkwRHpDCkxqUk9naFZsQ0hPQmxsd3NVaE9GU0lyYnN4K05tUTdBeS90TFpXSGxuVGF3UWJ5WGZGOStJeDhVSnNlSHBGV1oKNVF5Z1JYd2liSjh1MVVsZ2xlcmZHMkpueldjVXpZTzEySktZN3doSkw1ajROMWgxZFJNUXQ5Q1pkZFlCQWRzOQpCdk02cjRFMDcxQkhQekhWeDMrUTI1VWtubGdUNXIwS3FiM1E1Y0dlTlBXY1JreW1ybkJEWWR0OXR4eFFMb1dPCllzNXdsMnVYWFVYL0VGcDMwajU0Nmp6czllWExLYlNDbjJjTDZFVE96Y2x3aG9DRGx2a2VQT05rUE9LMDVKNUMKTm1TdFdhMG9hV1VGRzM0MFl3cVVrWGt4OU9tNndXd1JldU1uU1FJREFRQUJBb0lCQUFJOHo1ck5kOEdtOGJBMgo1S3pxQjI1R2lOVENwbUNJeW53NXRJWHZTQmNHcEdydUcvdlN2WG9kVlFVSVY0TWdHQkVXUEFrVzdsNWVBcHI4CnA1ZFd5SkRXYTNkdklFSE9vSEpYU3dBYksxZzZEMTNVa2NkZ1EyRGpoNVhuWDhHZCtBY2c2SmRTQWgxOWtYSHEKMk54RUtBVDB6Ri83a1g2MkRkREFBcWxmQkpGSXJodVIvZUdEVWh4L2piTTRhQ2JCcFdiM0pnRE9OYm5tS1ZoMwpxS2ZwZmRZZENZU1lzWUxrNTlxRDF2VFNwUVFUQ0VadW9VKzNzRVNhdkJzaUs1bU0vTzY5ZkRMRXNURG1MeTVQCmhEK3BMQXI0SlhNNjFwRGVBS0l3cUVqWWJybXlDRHRXTUdJNnZzZ0E1eXQzUUJaME9vV2w5QUkwdWxoZ3p4dXQKZ2ZFNTRRRUNnWUVBN0F3a0lhVEEzYmQ4Nk9jSVZnNFlrWGk1cm5aNDdsM1k4V24zcjIzUmVISXhLdkllRUtSbgp5bUlFNDFtRVBBSmlGWFpLK1VPTXdkeS9EcnFJUithT1JiT2NiV01jWUg2QzgvbG1wdVJFaXE3SW1Ub3VWcnA4CnlnUkprMWprVDA4cTIvNmg4eTBEdjJqMitsaHFXNzRNOUt0cmwxcTRlWmZRUFREL01tR1NnTWtDZ1lFQXdhY04KaSttN1p6dnJtL3NuekF2VlZ5SEtwZHVUUjNERk1naC9maC9tZ0ZHZ1RwZWtUOVV5b3FleGNYQXdwMVlhL01iQQoyNTVJVDZRbXZZTm5yNXp6Wmxic2tMV0hsYllvbWhmWnVXTHhXR3hRaEFORWdaMFVVdUVTRGMvbWx2UXZHbEtSCkZoaGhBUWlVSmdDamhPaHk1SlBiNGFldGRKd0UxK09lVWRFaE1vRUNnWUVBNG8yZ25CM1o4ck5xa3NzemlBek4KYmNuMlJVbDJOaW9pejBwS3JMaDFaT29NNE5BekpQdjJsaHRQMzdtS0htS1hLMHczRjFqTEgwSTBxZmxFVmVZbQpSU1huakdHazJjUnpBYUVzOGgrQzNheDE0Z01pZUtGU3BqNUpNOEFNbVVZOXQ1cUVhN2FYc3o0V1ZoOUlMYmVTCkRiNzlhKzVwd21LQVBrcnBsTHhyZFdrQ2dZQlNNSHVBWVdBbmJYZ1BDS2FZWklGVWJNUWNacmY0ZnpWQ2lmYksKYWZHampvRlNPZXdEOGdGK3BWdWJRTGwxbkFieU44ek1xVDRaaHhybUhpcFlqMjJDaHV2NmN3RXJtbGRiSnpwQwpBMnRaVXdkTk1ESFlMUG5lUHlZeGRJWnlsUXFVeW14SGkydElUQUxNcWtLOGV3ZWdXZHpkeGhQSlJScU5JazhrCmZIVHhnUUtCZ1FEUFc2UXIxY3F3QjNUdnVWdWR4WGRqUTdIcDFodXhrNEVWaEFJZllKNFhSTW1NUE5YS28wdHUKdUt6LzE0QW14R0dvSWJxYVc1bDMzeFNteUxhem84clNUN0tSTjVKME9JSHcrZkR5SFgxdHpVSjZCTldDcEFTcwpjbWdNK0htSzVON0w2bkNaZFJQY2IwU1hGaVRQUGhCUG1PVWFDUnpER0ZMK2JYM1VwajJKbWc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=",
								"type": "string"
							}
						},
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/api-response-single-orHM1jWS"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"token": {
													"description": "The signed token used with the signed URLs feature.",
													"example": "eyJhbGciOiJSUzI1NiIsImtpZCI6ImU5ZGI5OTBhODI2NjZkZDU3MWM3N2Y5NDRhNWM1YzhkIn0.eyJzdWIiOiJlYTk1MTMyYzE1NzMyNDEyZDIyYzE0NzZmYTgzZjI3YSIsImtpZCI6ImU5ZGI5OTBhODI2NjZkZDU3MWM3N2Y5NDRhNWM1YzhkIiwiZXhwIjoiMTUzNzQ2MDM2NSIsIm5iZiI6IjE1Mzc0NTMxNjUifQ.OZhqOARADn1iubK6GKcn25hN3nU-hCFF5q9w2C4yup0C4diG7aMIowiRpP-eDod8dbAJubsiFuTKrqPcmyCKWYsiv0TQueukqbQlF7HCO1TV-oF6El5-7ldJ46eD-ZQ0XgcIYEKrQOYFF8iDQbqPm3REWd6BnjKZdeVrLzuRaiSnZ9qqFpGu5dfxIY9-nZKDubJHqCr3Imtb211VIG_b9MdtO92JjvkDS-rxT_pkEfTZSafl1OU-98A7KBGtPSJHz2dHORIrUiTA6on4eIXTj9aFhGiir4rSn-rn0OjPRTtJMWIDMoQyE_fwrSYzB7MPuzL2t82BWaEbHZTfixBm5A",
													"type": "string"
												}
											}
										}
									}
								}
							]
						}
					}
				},
				"description": "Create signed URL tokens for videos response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"$ref": "#/components/schemas/messages-KPbOwT6c"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"$ref": "#/components/schemas/messages-KPbOwT6c"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Create signed URL tokens for videos response failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": [],
				"api_token": []
			}
		],
		"summary": "Create signed URL tokens for videos",
		"tags": [
			"Stream Videos"
		]
	},
	"POST /accounts/{account_identifier}/stream/copy": {
		"description": "Uploads a video to Stream from a provided URL.",
		"operationId": "stream-videos-upload-videos-from-a-url",
		"parameters": [
			{
				"in": "path",
				"name": "account_identifier",
				"required": true,
				"schema": {
					"description": "The account identifier tag.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "header",
				"name": "Upload-Creator",
				"schema": {
					"description": "A user-defined identifier for the media creator.",
					"example": "creator-id_abcde12345",
					"maxLength": 64,
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"properties": {
							"allowedOrigins": {
								"$ref": "#/components/schemas/allowedOrigins"
							},
							"creator": {
								"$ref": "#/components/schemas/creator"
							},
							"requireSignedURLs": {
								"$ref": "#/components/schemas/requireSignedURLs"
							},
							"thumbnailTimestampPct": {
								"$ref": "#/components/schemas/thumbnailTimestampPct"
							},
							"url": {
								"description": "A video's URL. The server must be publicly routable and support `HTTP HEAD` requests and `HTTP GET` range requests. The server should respond to `HTTP HEAD` requests with a `content-range` header that includes the size of the file.",
								"example": "https://example.com/myvideo.mp4",
								"format": "uri",
								"type": "string"
							},
							"watermark": {
								"$ref": "#/components/schemas/watermark_at_upload"
							}
						},
						"required": [
							"url"
						]
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/api-response-single-orHM1jWS"
								},
								{
									"properties": {
										"result": {
											"$ref": "#/components/schemas/videos"
										}
									}
								}
							]
						}
					}
				},
				"description": "Upload videos from a URL response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"$ref": "#/components/schemas/messages-KPbOwT6c"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"$ref": "#/components/schemas/messages-KPbOwT6c"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Upload videos from a URL response failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": [],
				"api_token": []
			}
		],
		"summary": "Upload videos from a URL",
		"tags": [
			"Stream Videos"
		]
	},
	"POST /accounts/{account_identifier}/stream/direct_upload": {
		"description": "Creates a direct upload that allows video uploads without an API key.",
		"operationId": "stream-videos-upload-videos-via-direct-upload-ur-ls",
		"parameters": [
			{
				"in": "path",
				"name": "account_identifier",
				"required": true,
				"schema": {
					"description": "The account identifier tag.",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "header",
				"name": "Upload-Creator",
				"schema": {
					"description": "A user-defined identifier for the media creator.",
					"example": "creator-id_abcde12345",
					"maxLength": 64,
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"properties": {
							"allowedOrigins": {
								"$ref": "#/components/schemas/allowedOrigins"
							},
							"creator": {
								"$ref": "#/components/schemas/creator"
							},
							"expiry": {
								"default": "Now + 30 minutes",
								"description": "The date and time after upload when videos will not be accepted.",
								"example": "2021-01-02T02:20:00Z",
								"format": "date-time",
								"type": "string"
							},
							"maxDurationSeconds": {
								"$ref": "#/components/schemas/maxDurationSeconds"
							},
							"requireSignedURLs": {
								"$ref": "#/components/schemas/requireSignedURLs"
							},
							"thumbnailTimestampPct": {
								"$ref": "#/components/schemas/thumbnailTimestampPct"
							},
							"watermark": {
								"$ref": "#/components/schemas/watermark_at_upload"
							}
						},
						"required": [
							"maxDurationSeconds"
						],
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/api-response-single-orHM1jWS"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"uid": {
													"$ref": "#/components/schemas/identifier-JoGfHwzz"
												},
												"uploadURL": {
													"description": "The URL an unauthenticated upload can use for a single `HTTP POST multipart/form-data` request.",
													"example": "www.example.com/samplepath",
													"type": "string"
												},
												"watermark": {
													"$ref": "#/components/schemas/watermarks"
												}
											}
										}
									}
								}
							]
						}
					}
				},
				"description": "Upload videos via direct upload URLs response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"$ref": "#/components/schemas/messages-KPbOwT6c"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"$ref": "#/components/schemas/messages-KPbOwT6c"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Upload videos via direct upload URLs response failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": [],
				"api_token": []
			}
		],
		"summary": "Upload videos via direct upload URLs",
		"tags": [
			"Stream Videos"
		]
	}
}