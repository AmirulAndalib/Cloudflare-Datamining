{
	"DELETE /zones/{zone_identifier}/dns_records/{identifier}": {
		"operationId": "dns-records-for-a-zone-delete-dns-record",
		"parameters": [
			{
				"in": "path",
				"name": "identifier",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "zone_identifier",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"result": {
									"properties": {
										"id": {
											"description": "Identifier",
											"example": "023e105f4ecef8ad9ca31a8372d0c353",
											"maxLength": 32,
											"readOnly": true,
											"type": "string"
										}
									}
								}
							},
							"type": "object"
						}
					}
				},
				"description": "Delete DNS Record response"
			},
			"4xx": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"result": {
											"properties": {
												"id": {
													"description": "Identifier",
													"example": "023e105f4ecef8ad9ca31a8372d0c353",
													"maxLength": 32,
													"readOnly": true,
													"type": "string"
												}
											}
										}
									},
									"type": "object"
								},
								{
									"properties": {
										"errors": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": [
												{
													"code": 7003,
													"message": "No route for the URI"
												}
											],
											"minLength": 1
										},
										"messages": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": []
										},
										"result": {
											"enum": [
												null
											],
											"nullable": true,
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												false
											],
											"example": false,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Delete DNS Record response failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Delete DNS Record",
		"tags": [
			"DNS Records for a Zone"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"#dns_records:edit"
			]
		},
		"x-cfPlanAvailability": {
			"business": true,
			"enterprise": true,
			"free": true,
			"pro": true
		}
	},
	"GET /zones/{zone_identifier}/dns_records": {
		"description": "List, search, sort, and filter a zones' DNS records.",
		"operationId": "dns-records-for-a-zone-list-dns-records",
		"parameters": [
			{
				"in": "path",
				"name": "zone_identifier",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "name",
				"schema": {
					"description": "DNS record name (or @ for the zone apex) in Punycode.",
					"example": "example.com",
					"maxLength": 255,
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "type",
				"schema": {
					"description": "Record type.",
					"enum": [
						"A",
						"AAAA",
						"CAA",
						"CERT",
						"CNAME",
						"DNSKEY",
						"DS",
						"HTTPS",
						"LOC",
						"MX",
						"NAPTR",
						"NS",
						"PTR",
						"SMIMEA",
						"SRV",
						"SSHFP",
						"SVCB",
						"TLSA",
						"TXT",
						"URI"
					],
					"example": "A",
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "content",
				"schema": {
					"description": "DNS record content.",
					"example": "127.0.0.1",
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "proxied",
				"schema": {
					"description": "Whether the record is receiving the performance and security benefits of Cloudflare.",
					"example": false,
					"type": "boolean"
				}
			},
			{
				"in": "query",
				"name": "match",
				"schema": {
					"default": "all",
					"description": "Whether to match all search requirements or at least one (any). If set to `all`, acts like a logical AND between filters. If set to `any`, acts like a logical OR instead. Note that the interaction between tag filters is controlled by the `tag-match` parameter instead.\n",
					"enum": [
						"any",
						"all"
					],
					"example": "any",
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "comment",
				"schema": {
					"description": "Exact value of the DNS record comment. This is a convenience alias for `comment.exact`.\n",
					"example": "Hello, world",
					"type": "string"
				}
			},
			{
				"description": "If this parameter is present, only records *with* a comment are returned.",
				"in": "query",
				"name": "comment.present"
			},
			{
				"description": "If this parameter is present, only records *without* a comment are returned.",
				"in": "query",
				"name": "comment.absent"
			},
			{
				"in": "query",
				"name": "comment.exact",
				"schema": {
					"description": "Exact value of the DNS record comment. Comment filters are case-insensitive.\n",
					"example": "Hello, world",
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "comment.contains",
				"schema": {
					"description": "Substring of the DNS record comment. Comment filters are case-insensitive.\n",
					"example": "ello, worl",
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "comment.startswith",
				"schema": {
					"description": "Prefix of the DNS record comment. Comment filters are case-insensitive.\n",
					"example": "Hello, w",
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "comment.endswith",
				"schema": {
					"description": "Suffix of the DNS record comment. Comment filters are case-insensitive.\n",
					"example": "o, world",
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "tag",
				"schema": {
					"description": "Condition on the DNS record tag.\n\nParameter values can be of the form `<tag-name>:<tag-value>` to search for an exact `name:value` pair, or just `<tag-name>` to search for records with a specific tag name regardless of its value.\n\nThis is a convenience shorthand for the more powerful `tag.<predicate>` parameters.\nExamples:\n- `tag=important` is equivalent to `tag.present=important`\n- `tag=team:DNS` is equivalent to `tag.exact=team:DNS`\n",
					"examples": [
						"important",
						"team:DNS"
					],
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "tag.present",
				"schema": {
					"description": "Name of a tag which must be present on the DNS record. Tag filters are case-insensitive.\n",
					"example": "important",
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "tag.absent",
				"schema": {
					"description": "Name of a tag which must *not* be present on the DNS record. Tag filters are case-insensitive.\n",
					"example": "important",
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "tag.exact",
				"schema": {
					"description": "A tag and value, of the form `<tag-name>:<tag-value>`. The API will only return DNS records that have a tag named `<tag-name>` whose value is `<tag-value>`. Tag filters are case-insensitive.\n",
					"example": "greeting:Hello, world",
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "tag.contains",
				"schema": {
					"description": "A tag and value, of the form `<tag-name>:<tag-value>`. The API will only return DNS records that have a tag named `<tag-name>` whose value contains `<tag-value>`. Tag filters are case-insensitive.\n",
					"example": "greeting:ello, worl",
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "tag.startswith",
				"schema": {
					"description": "A tag and value, of the form `<tag-name>:<tag-value>`. The API will only return DNS records that have a tag named `<tag-name>` whose value starts with `<tag-value>`. Tag filters are case-insensitive.\n",
					"example": "greeting:Hello, w",
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "tag.endswith",
				"schema": {
					"description": "A tag and value, of the form `<tag-name>:<tag-value>`. The API will only return DNS records that have a tag named `<tag-name>` whose value ends with `<tag-value>`. Tag filters are case-insensitive.\n",
					"example": "greeting:o, world",
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "search",
				"schema": {
					"description": "Allows searching in multiple properties of a DNS record simultaneously. This parameter is intended for human users, not automation. Its exact behavior is intentionally left unspecified and is subject to change in the future. This parameter works independently of the `match` setting. For automated searches, please use the other available parameters.\n",
					"example": "www.cloudflare.com",
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "tag_match",
				"schema": {
					"default": "all",
					"description": "Whether to match all tag search requirements or at least one (any). If set to `all`, acts like a logical AND between tag filters. If set to `any`, acts like a logical OR instead. Note that the regular `match` parameter is still used to combine the resulting condition with other filters that aren't related to tags.\n",
					"enum": [
						"any",
						"all"
					],
					"example": "any",
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "page",
				"schema": {
					"default": 1,
					"description": "Page number of paginated results.",
					"minimum": 1,
					"type": "number"
				}
			},
			{
				"in": "query",
				"name": "per_page",
				"schema": {
					"default": 100,
					"description": "Number of DNS records per page.",
					"maximum": 50000,
					"minimum": 5,
					"type": "number"
				}
			},
			{
				"in": "query",
				"name": "order",
				"schema": {
					"default": "type",
					"description": "Field to order DNS records by.",
					"enum": [
						"type",
						"name",
						"content",
						"ttl",
						"proxied"
					],
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "direction",
				"schema": {
					"default": "asc",
					"description": "Direction to order DNS records in.",
					"enum": [
						"asc",
						"desc"
					],
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"$ref": "#/components/schemas/api-response-common"
										},
										{
											"properties": {
												"result": {
													"items": {},
													"nullable": true,
													"type": "array"
												},
												"result_info": {
													"$ref": "#/components/schemas/result_info"
												}
											}
										}
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"items": {
												"oneOf": [
													{
														"$ref": "#/components/schemas/ARecord"
													},
													{
														"$ref": "#/components/schemas/AAAARecord"
													},
													{
														"$ref": "#/components/schemas/CAARecord"
													},
													{
														"$ref": "#/components/schemas/CERTRecord"
													},
													{
														"$ref": "#/components/schemas/CNAMERecord"
													},
													{
														"$ref": "#/components/schemas/DNSKEYRecord"
													},
													{
														"$ref": "#/components/schemas/DSRecord"
													},
													{
														"$ref": "#/components/schemas/HTTPSRecord"
													},
													{
														"$ref": "#/components/schemas/LOCRecord"
													},
													{
														"$ref": "#/components/schemas/MXRecord"
													},
													{
														"$ref": "#/components/schemas/NAPTRRecord"
													},
													{
														"$ref": "#/components/schemas/NSRecord"
													},
													{
														"$ref": "#/components/schemas/PTRRecord"
													},
													{
														"$ref": "#/components/schemas/SMIMEARecord"
													},
													{
														"$ref": "#/components/schemas/SRVRecord"
													},
													{
														"$ref": "#/components/schemas/SSHFPRecord"
													},
													{
														"$ref": "#/components/schemas/SVCBRecord"
													},
													{
														"$ref": "#/components/schemas/TLSARecord"
													},
													{
														"$ref": "#/components/schemas/TXTRecord"
													},
													{
														"$ref": "#/components/schemas/URIRecord"
													}
												],
												"required": [
													"id",
													"type",
													"name",
													"content",
													"proxiable",
													"locked",
													"zone_name",
													"created_on",
													"modified_on"
												],
												"type": "object"
											},
											"type": "array"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "List DNS Records response"
			},
			"4xx": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/api-response-common"
												},
												{
													"properties": {
														"result": {
															"items": {},
															"nullable": true,
															"type": "array"
														},
														"result_info": {
															"$ref": "#/components/schemas/result_info"
														}
													}
												}
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"items": {
														"oneOf": [
															{
																"$ref": "#/components/schemas/ARecord"
															},
															{
																"$ref": "#/components/schemas/AAAARecord"
															},
															{
																"$ref": "#/components/schemas/CAARecord"
															},
															{
																"$ref": "#/components/schemas/CERTRecord"
															},
															{
																"$ref": "#/components/schemas/CNAMERecord"
															},
															{
																"$ref": "#/components/schemas/DNSKEYRecord"
															},
															{
																"$ref": "#/components/schemas/DSRecord"
															},
															{
																"$ref": "#/components/schemas/HTTPSRecord"
															},
															{
																"$ref": "#/components/schemas/LOCRecord"
															},
															{
																"$ref": "#/components/schemas/MXRecord"
															},
															{
																"$ref": "#/components/schemas/NAPTRRecord"
															},
															{
																"$ref": "#/components/schemas/NSRecord"
															},
															{
																"$ref": "#/components/schemas/PTRRecord"
															},
															{
																"$ref": "#/components/schemas/SMIMEARecord"
															},
															{
																"$ref": "#/components/schemas/SRVRecord"
															},
															{
																"$ref": "#/components/schemas/SSHFPRecord"
															},
															{
																"$ref": "#/components/schemas/SVCBRecord"
															},
															{
																"$ref": "#/components/schemas/TLSARecord"
															},
															{
																"$ref": "#/components/schemas/TXTRecord"
															},
															{
																"$ref": "#/components/schemas/URIRecord"
															}
														],
														"required": [
															"id",
															"type",
															"name",
															"content",
															"proxiable",
															"locked",
															"zone_name",
															"created_on",
															"modified_on"
														],
														"type": "object"
													},
													"type": "array"
												}
											},
											"type": "object"
										}
									]
								},
								{
									"properties": {
										"errors": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": [
												{
													"code": 7003,
													"message": "No route for the URI"
												}
											],
											"minLength": 1
										},
										"messages": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": []
										},
										"result": {
											"enum": [
												null
											],
											"nullable": true,
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												false
											],
											"example": false,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "List DNS Records response failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "List DNS Records",
		"tags": [
			"DNS Records for a Zone"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"#dns_records:read"
			]
		},
		"x-cfPlanAvailability": {
			"business": true,
			"enterprise": true,
			"free": true,
			"pro": true
		}
	},
	"GET /zones/{zone_identifier}/dns_records/{identifier}": {
		"operationId": "dns-records-for-a-zone-dns-record-details",
		"parameters": [
			{
				"in": "path",
				"name": "identifier",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "zone_identifier",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"$ref": "#/components/schemas/api-response-common"
										},
										{
											"properties": {
												"result": {
													"anyOf": [
														{
															"type": "object"
														},
														{
															"type": "string"
														}
													]
												}
											}
										}
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"oneOf": [
												{
													"$ref": "#/components/schemas/ARecord"
												},
												{
													"$ref": "#/components/schemas/AAAARecord"
												},
												{
													"$ref": "#/components/schemas/CAARecord"
												},
												{
													"$ref": "#/components/schemas/CERTRecord"
												},
												{
													"$ref": "#/components/schemas/CNAMERecord"
												},
												{
													"$ref": "#/components/schemas/DNSKEYRecord"
												},
												{
													"$ref": "#/components/schemas/DSRecord"
												},
												{
													"$ref": "#/components/schemas/HTTPSRecord"
												},
												{
													"$ref": "#/components/schemas/LOCRecord"
												},
												{
													"$ref": "#/components/schemas/MXRecord"
												},
												{
													"$ref": "#/components/schemas/NAPTRRecord"
												},
												{
													"$ref": "#/components/schemas/NSRecord"
												},
												{
													"$ref": "#/components/schemas/PTRRecord"
												},
												{
													"$ref": "#/components/schemas/SMIMEARecord"
												},
												{
													"$ref": "#/components/schemas/SRVRecord"
												},
												{
													"$ref": "#/components/schemas/SSHFPRecord"
												},
												{
													"$ref": "#/components/schemas/SVCBRecord"
												},
												{
													"$ref": "#/components/schemas/TLSARecord"
												},
												{
													"$ref": "#/components/schemas/TXTRecord"
												},
												{
													"$ref": "#/components/schemas/URIRecord"
												}
											],
											"required": [
												"id",
												"type",
												"name",
												"content",
												"proxiable",
												"locked",
												"zone_name",
												"created_on",
												"modified_on"
											],
											"type": "object"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "DNS Record Details response"
			},
			"4xx": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/api-response-common"
												},
												{
													"properties": {
														"result": {
															"anyOf": [
																{
																	"type": "object"
																},
																{
																	"type": "string"
																}
															]
														}
													}
												}
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"oneOf": [
														{
															"$ref": "#/components/schemas/ARecord"
														},
														{
															"$ref": "#/components/schemas/AAAARecord"
														},
														{
															"$ref": "#/components/schemas/CAARecord"
														},
														{
															"$ref": "#/components/schemas/CERTRecord"
														},
														{
															"$ref": "#/components/schemas/CNAMERecord"
														},
														{
															"$ref": "#/components/schemas/DNSKEYRecord"
														},
														{
															"$ref": "#/components/schemas/DSRecord"
														},
														{
															"$ref": "#/components/schemas/HTTPSRecord"
														},
														{
															"$ref": "#/components/schemas/LOCRecord"
														},
														{
															"$ref": "#/components/schemas/MXRecord"
														},
														{
															"$ref": "#/components/schemas/NAPTRRecord"
														},
														{
															"$ref": "#/components/schemas/NSRecord"
														},
														{
															"$ref": "#/components/schemas/PTRRecord"
														},
														{
															"$ref": "#/components/schemas/SMIMEARecord"
														},
														{
															"$ref": "#/components/schemas/SRVRecord"
														},
														{
															"$ref": "#/components/schemas/SSHFPRecord"
														},
														{
															"$ref": "#/components/schemas/SVCBRecord"
														},
														{
															"$ref": "#/components/schemas/TLSARecord"
														},
														{
															"$ref": "#/components/schemas/TXTRecord"
														},
														{
															"$ref": "#/components/schemas/URIRecord"
														}
													],
													"required": [
														"id",
														"type",
														"name",
														"content",
														"proxiable",
														"locked",
														"zone_name",
														"created_on",
														"modified_on"
													],
													"type": "object"
												}
											},
											"type": "object"
										}
									]
								},
								{
									"properties": {
										"errors": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": [
												{
													"code": 7003,
													"message": "No route for the URI"
												}
											],
											"minLength": 1
										},
										"messages": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": []
										},
										"result": {
											"enum": [
												null
											],
											"nullable": true,
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												false
											],
											"example": false,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "DNS Record Details response failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "DNS Record Details",
		"tags": [
			"DNS Records for a Zone"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"#dns_records:read"
			]
		},
		"x-cfPlanAvailability": {
			"business": true,
			"enterprise": true,
			"free": true,
			"pro": true
		}
	},
	"GET /zones/{zone_identifier}/dns_records/export": {
		"description": "You can export your [BIND config](https://en.wikipedia.org/wiki/Zone_file \"Zone file\") through this endpoint.\n\nSee [the documentation](https://developers.cloudflare.com/dns/manage-dns-records/how-to/import-and-export/ \"Import and export records\") for more information.",
		"operationId": "dns-records-for-a-zone-export-dns-records",
		"parameters": [
			{
				"in": "path",
				"name": "zone_identifier",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"text/plain": {
						"schema": {
							"description": "Exported BIND zone file.",
							"example": "www.example.com. 300 IN  A 127.0.0.1\n",
							"type": "string"
						}
					}
				},
				"description": "Export DNS Records response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Export DNS Records response failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Export DNS Records",
		"tags": [
			"DNS Records for a Zone"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"#dns_records:read"
			]
		},
		"x-cfPlanAvailability": {
			"business": true,
			"enterprise": true,
			"free": true,
			"pro": true
		}
	},
	"PATCH /zones/{zone_identifier}/dns_records/{identifier}": {
		"operationId": "dns-records-for-a-zone-patch-dns-record",
		"parameters": [
			{
				"in": "path",
				"name": "identifier",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "zone_identifier",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"oneOf": [
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "A valid IPv4 address.",
												"example": "198.51.100.4",
												"format": "ipv4",
												"type": "string"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"proxied": {
												"$ref": "#/components/schemas/proxied"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"A"
												],
												"example": "A",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"content"
								],
								"title": "A Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "A valid IPv6 address.",
												"example": "2400:cb00:2049::1",
												"format": "ipv6",
												"type": "string"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"proxied": {
												"$ref": "#/components/schemas/proxied"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"AAAA"
												],
												"example": "AAAA",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"content"
								],
								"title": "AAAA Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "Formatted CAA content. See 'data' to set CAA properties.",
												"readOnly": true,
												"type": "string"
											},
											"data": {
												"description": "Components of a CAA record.",
												"properties": {
													"flags": {
														"description": "Flags for the CAA record.",
														"example": 1,
														"maximum": 255,
														"minimum": 0,
														"type": "number"
													},
													"tag": {
														"description": "Name of the property controlled by this record (e.g.: issue, issuewild, iodef).",
														"example": "issue",
														"type": "string"
													},
													"value": {
														"description": "Value of the record. This field's semantics depend on the chosen tag.",
														"type": "string"
													}
												},
												"type": "object"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"CAA"
												],
												"example": "CAA",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"data"
								],
								"title": "CAA Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "Formatted CERT content. See 'data' to set CERT properties.",
												"readOnly": true,
												"type": "string"
											},
											"data": {
												"description": "Components of a CERT record.",
												"properties": {
													"algorithm": {
														"description": "Algorithm.",
														"example": 8,
														"maximum": 255,
														"minimum": 0,
														"type": "number"
													},
													"certificate": {
														"description": "Certificate.",
														"type": "string"
													},
													"key_tag": {
														"description": "Key Tag.",
														"example": 1,
														"maximum": 65535,
														"minimum": 0,
														"type": "number"
													},
													"type": {
														"description": "Type.",
														"example": 9,
														"maximum": 65535,
														"minimum": 0,
														"type": "number"
													}
												},
												"type": "object"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"CERT"
												],
												"example": "CERT",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"data"
								],
								"title": "CERT Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "A valid hostname. Must not match the record's name."
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"proxied": {
												"$ref": "#/components/schemas/proxied"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"CNAME"
												],
												"example": "CNAME",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"content"
								],
								"title": "CNAME Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "Formatted DNSKEY content. See 'data' to set DNSKEY properties.",
												"readOnly": true,
												"type": "string"
											},
											"data": {
												"description": "Components of a DNSKEY record.",
												"properties": {
													"algorithm": {
														"description": "Algorithm.",
														"example": 5,
														"maximum": 255,
														"minimum": 0,
														"type": "number"
													},
													"flags": {
														"description": "Flags.",
														"example": 1,
														"maximum": 65535,
														"minimum": 0,
														"type": "number"
													},
													"protocol": {
														"description": "Protocol.",
														"example": 3,
														"maximum": 255,
														"minimum": 0,
														"type": "number"
													},
													"public_key": {
														"description": "Public Key.",
														"type": "string"
													}
												},
												"type": "object"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"DNSKEY"
												],
												"example": "DNSKEY",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"data"
								],
								"title": "DNSKEY Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "Formatted DS content. See 'data' to set DS properties.",
												"readOnly": true,
												"type": "string"
											},
											"data": {
												"description": "Components of a DS record.",
												"properties": {
													"algorithm": {
														"description": "Algorithm.",
														"example": 3,
														"maximum": 255,
														"minimum": 0,
														"type": "number"
													},
													"digest": {
														"description": "Digest.",
														"type": "string"
													},
													"digest_type": {
														"description": "Digest Type.",
														"example": 1,
														"maximum": 255,
														"minimum": 0,
														"type": "number"
													},
													"key_tag": {
														"description": "Key Tag.",
														"example": 1,
														"maximum": 65535,
														"minimum": 0,
														"type": "number"
													}
												},
												"type": "object"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"DS"
												],
												"example": "DS",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"data"
								],
								"title": "DS Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "Formatted HTTPS content. See 'data' to set HTTPS properties.",
												"readOnly": true,
												"type": "string"
											},
											"data": {
												"description": "Components of a HTTPS record.",
												"properties": {
													"priority": {
														"description": "priority.",
														"example": 1,
														"maximum": 65535,
														"minimum": 0,
														"type": "number"
													},
													"target": {
														"description": "target.",
														"example": ".",
														"type": "string"
													},
													"value": {
														"description": "value.",
														"example": "alpn=\"h3,h2\" ipv4hint=\"127.0.0.1\" ipv6hint=\"::1\"",
														"type": "string"
													}
												},
												"type": "object"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"HTTPS"
												],
												"example": "HTTPS",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"data"
								],
								"title": "HTTPS Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "Formatted LOC content. See 'data' to set LOC properties.",
												"example": "IN LOC 37 46 46 N 122 23 35 W 0m 100m 0m 0m",
												"readOnly": true,
												"type": "string"
											},
											"data": {
												"description": "Components of a LOC record.",
												"properties": {
													"altitude": {
														"description": "Altitude of location in meters.",
														"example": 0,
														"maximum": 42849672.95,
														"minimum": -100000,
														"type": "number"
													},
													"lat_degrees": {
														"description": "Degrees of latitude.",
														"example": 37,
														"maximum": 90,
														"minimum": 0,
														"type": "number"
													},
													"lat_direction": {
														"description": "Latitude direction.",
														"enum": [
															"N",
															"S"
														],
														"example": "N"
													},
													"lat_minutes": {
														"default": 0,
														"description": "Minutes of latitude.",
														"example": 46,
														"maximum": 59,
														"minimum": 0,
														"type": "number"
													},
													"lat_seconds": {
														"default": 0,
														"description": "Seconds of latitude.",
														"example": 46,
														"maximum": 59.999,
														"minimum": 0,
														"type": "number"
													},
													"long_degrees": {
														"description": "Degrees of longitude.",
														"example": 122,
														"maximum": 180,
														"minimum": 0,
														"type": "number"
													},
													"long_direction": {
														"description": "Longitude direction.",
														"enum": [
															"E",
															"W"
														],
														"example": "W"
													},
													"long_minutes": {
														"default": 0,
														"description": "Minutes of longitude.",
														"example": 23,
														"maximum": 59,
														"minimum": 0,
														"type": "number"
													},
													"long_seconds": {
														"default": 0,
														"description": "Seconds of longitude.",
														"example": 35,
														"maximum": 59.999,
														"minimum": 0,
														"type": "number"
													},
													"precision_horz": {
														"default": 0,
														"description": "Horizontal precision of location.",
														"example": 0,
														"maximum": 90000000,
														"minimum": 0,
														"type": "number"
													},
													"precision_vert": {
														"default": 0,
														"description": "Vertical precision of location.",
														"example": 0,
														"maximum": 90000000,
														"minimum": 0,
														"type": "number"
													},
													"size": {
														"default": 0,
														"description": "Size of location in meters.",
														"example": 100,
														"maximum": 90000000,
														"minimum": 0,
														"type": "number"
													}
												},
												"type": "object"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"LOC"
												],
												"example": "LOC",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"data"
								],
								"title": "LOC Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "A valid mail server hostname.",
												"example": "mx.example.com",
												"format": "hostname",
												"type": "string"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"priority": {
												"$ref": "#/components/schemas/priority-wGYGFwvJ"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"MX"
												],
												"example": "MX",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"content",
									"priority"
								],
								"title": "MX Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "Formatted NAPTR content. See 'data' to set NAPTR properties.",
												"readOnly": true,
												"type": "string"
											},
											"data": {
												"description": "Components of a NAPTR record.",
												"properties": {
													"flags": {
														"description": "Flags.",
														"type": "string"
													},
													"order": {
														"description": "Order.",
														"example": 100,
														"maximum": 65535,
														"minimum": 0,
														"type": "number"
													},
													"preference": {
														"description": "Preference.",
														"example": 10,
														"maximum": 65535,
														"minimum": 0,
														"type": "number"
													},
													"regex": {
														"description": "Regex.",
														"type": "string"
													},
													"replacement": {
														"description": "Replacement.",
														"type": "string"
													},
													"service": {
														"description": "Service.",
														"type": "string"
													}
												},
												"type": "object"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"NAPTR"
												],
												"example": "NAPTR",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"data"
								],
								"title": "NAPTR Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "A valid name server host name.",
												"example": "ns1.example.com"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"NS"
												],
												"example": "NS",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"content"
								],
								"title": "NS Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "Domain name pointing to the address.",
												"example": "example.com",
												"type": "string"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"PTR"
												],
												"example": "PTR",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"content"
								],
								"title": "PTR Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "Formatted SMIMEA content. See 'data' to set SMIMEA properties.",
												"readOnly": true,
												"type": "string"
											},
											"data": {
												"description": "Components of a SMIMEA record.",
												"properties": {
													"certificate": {
														"description": "Certificate.",
														"type": "string"
													},
													"matching_type": {
														"description": "Matching Type.",
														"example": 0,
														"maximum": 255,
														"minimum": 0,
														"type": "number"
													},
													"selector": {
														"description": "Selector.",
														"example": 0,
														"maximum": 255,
														"minimum": 0,
														"type": "number"
													},
													"usage": {
														"description": "Usage.",
														"example": 3,
														"maximum": 255,
														"minimum": 0,
														"type": "number"
													}
												},
												"type": "object"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"SMIMEA"
												],
												"example": "SMIMEA",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"data"
								],
								"title": "SMIMEA Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "Priority, weight, port, and SRV target. See 'data' for setting the individual component values.",
												"example": "10 IN SRV 5 8806 example.com.",
												"readOnly": true,
												"type": "string"
											},
											"data": {
												"description": "Components of a SRV record.",
												"properties": {
													"name": {
														"description": "A valid hostname.",
														"example": "example.com",
														"format": "hostname",
														"type": "string"
													},
													"port": {
														"description": "The port of the service.",
														"example": 8806,
														"maximum": 65535,
														"minimum": 0,
														"type": "number"
													},
													"priority": {
														"$ref": "#/components/schemas/priority-wGYGFwvJ"
													},
													"proto": {
														"description": "A valid protocol.",
														"example": "_tcp",
														"type": "string"
													},
													"service": {
														"description": "A service type, prefixed with an underscore.",
														"example": "_sip",
														"type": "string"
													},
													"target": {
														"description": "A valid hostname.",
														"example": "example.com",
														"format": "hostname",
														"type": "string"
													},
													"weight": {
														"description": "The record weight.",
														"example": 5,
														"maximum": 65535,
														"minimum": 0,
														"type": "number"
													}
												},
												"type": "object"
											},
											"name": {
												"description": "Service, protocol, and SRV name content. See 'data' for setting the individual component values.",
												"example": "_sip._tcp.example.com",
												"maxLength": 255,
												"readOnly": true,
												"type": "string"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"SRV"
												],
												"example": "SRV",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"data"
								],
								"title": "SRV Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "Formatted SSHFP content. See 'data' to set SSHFP properties.",
												"readOnly": true,
												"type": "string"
											},
											"data": {
												"description": "Components of a SSHFP record.",
												"properties": {
													"algorithm": {
														"description": "algorithm.",
														"example": 2,
														"maximum": 255,
														"minimum": 0,
														"type": "number"
													},
													"fingerprint": {
														"description": "fingerprint.",
														"type": "string"
													},
													"type": {
														"description": "type.",
														"example": 1,
														"maximum": 255,
														"minimum": 0,
														"type": "number"
													}
												},
												"type": "object"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"SSHFP"
												],
												"example": "SSHFP",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"data"
								],
								"title": "SSHFP Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "Formatted SVCB content. See 'data' to set SVCB properties.",
												"readOnly": true,
												"type": "string"
											},
											"data": {
												"description": "Components of a SVCB record.",
												"properties": {
													"priority": {
														"description": "priority.",
														"example": 1,
														"maximum": 65535,
														"minimum": 0,
														"type": "number"
													},
													"target": {
														"description": "target.",
														"example": ".",
														"type": "string"
													},
													"value": {
														"description": "value.",
														"example": "alpn=\"h3,h2\" ipv4hint=\"127.0.0.1\" ipv6hint=\"::1\"",
														"type": "string"
													}
												},
												"type": "object"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"SVCB"
												],
												"example": "SVCB",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"data"
								],
								"title": "SVCB Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "Formatted TLSA content. See 'data' to set TLSA properties.",
												"readOnly": true,
												"type": "string"
											},
											"data": {
												"description": "Components of a TLSA record.",
												"properties": {
													"certificate": {
														"description": "certificate.",
														"type": "string"
													},
													"matching_type": {
														"description": "Matching Type.",
														"example": 1,
														"maximum": 255,
														"minimum": 0,
														"type": "number"
													},
													"selector": {
														"description": "Selector.",
														"example": 0,
														"maximum": 255,
														"minimum": 0,
														"type": "number"
													},
													"usage": {
														"description": "Usage.",
														"example": 0,
														"maximum": 255,
														"minimum": 0,
														"type": "number"
													}
												},
												"type": "object"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"TLSA"
												],
												"example": "TLSA",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"data"
								],
								"title": "TLSA Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "Text content for the record.",
												"example": "example text content",
												"type": "string"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"TXT"
												],
												"example": "TXT",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"content"
								],
								"title": "TXT Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "Formatted URI content. See 'data' to set URI properties.",
												"readOnly": true,
												"type": "string"
											},
											"data": {
												"description": "Components of a URI record.",
												"properties": {
													"content": {
														"description": "The record content.",
														"example": "http://example.com/example.html",
														"type": "string"
													},
													"weight": {
														"description": "The record weight.",
														"example": 20,
														"maximum": 65535,
														"minimum": 0,
														"type": "number"
													}
												},
												"type": "object"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"priority": {
												"$ref": "#/components/schemas/priority-wGYGFwvJ"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"URI"
												],
												"example": "URI",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"data",
									"priority"
								],
								"title": "URI Record"
							}
						],
						"required": [
							"id",
							"type",
							"name",
							"content",
							"proxiable",
							"locked",
							"zone_name",
							"created_on",
							"modified_on"
						],
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"$ref": "#/components/schemas/api-response-common"
										},
										{
											"properties": {
												"result": {
													"anyOf": [
														{
															"type": "object"
														},
														{
															"type": "string"
														}
													]
												}
											}
										}
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"oneOf": [
												{
													"$ref": "#/components/schemas/ARecord"
												},
												{
													"$ref": "#/components/schemas/AAAARecord"
												},
												{
													"$ref": "#/components/schemas/CAARecord"
												},
												{
													"$ref": "#/components/schemas/CERTRecord"
												},
												{
													"$ref": "#/components/schemas/CNAMERecord"
												},
												{
													"$ref": "#/components/schemas/DNSKEYRecord"
												},
												{
													"$ref": "#/components/schemas/DSRecord"
												},
												{
													"$ref": "#/components/schemas/HTTPSRecord"
												},
												{
													"$ref": "#/components/schemas/LOCRecord"
												},
												{
													"$ref": "#/components/schemas/MXRecord"
												},
												{
													"$ref": "#/components/schemas/NAPTRRecord"
												},
												{
													"$ref": "#/components/schemas/NSRecord"
												},
												{
													"$ref": "#/components/schemas/PTRRecord"
												},
												{
													"$ref": "#/components/schemas/SMIMEARecord"
												},
												{
													"$ref": "#/components/schemas/SRVRecord"
												},
												{
													"$ref": "#/components/schemas/SSHFPRecord"
												},
												{
													"$ref": "#/components/schemas/SVCBRecord"
												},
												{
													"$ref": "#/components/schemas/TLSARecord"
												},
												{
													"$ref": "#/components/schemas/TXTRecord"
												},
												{
													"$ref": "#/components/schemas/URIRecord"
												}
											],
											"required": [
												"id",
												"type",
												"name",
												"content",
												"proxiable",
												"locked",
												"zone_name",
												"created_on",
												"modified_on"
											],
											"type": "object"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Patch DNS Record response"
			},
			"4xx": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/api-response-common"
												},
												{
													"properties": {
														"result": {
															"anyOf": [
																{
																	"type": "object"
																},
																{
																	"type": "string"
																}
															]
														}
													}
												}
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"oneOf": [
														{
															"$ref": "#/components/schemas/ARecord"
														},
														{
															"$ref": "#/components/schemas/AAAARecord"
														},
														{
															"$ref": "#/components/schemas/CAARecord"
														},
														{
															"$ref": "#/components/schemas/CERTRecord"
														},
														{
															"$ref": "#/components/schemas/CNAMERecord"
														},
														{
															"$ref": "#/components/schemas/DNSKEYRecord"
														},
														{
															"$ref": "#/components/schemas/DSRecord"
														},
														{
															"$ref": "#/components/schemas/HTTPSRecord"
														},
														{
															"$ref": "#/components/schemas/LOCRecord"
														},
														{
															"$ref": "#/components/schemas/MXRecord"
														},
														{
															"$ref": "#/components/schemas/NAPTRRecord"
														},
														{
															"$ref": "#/components/schemas/NSRecord"
														},
														{
															"$ref": "#/components/schemas/PTRRecord"
														},
														{
															"$ref": "#/components/schemas/SMIMEARecord"
														},
														{
															"$ref": "#/components/schemas/SRVRecord"
														},
														{
															"$ref": "#/components/schemas/SSHFPRecord"
														},
														{
															"$ref": "#/components/schemas/SVCBRecord"
														},
														{
															"$ref": "#/components/schemas/TLSARecord"
														},
														{
															"$ref": "#/components/schemas/TXTRecord"
														},
														{
															"$ref": "#/components/schemas/URIRecord"
														}
													],
													"required": [
														"id",
														"type",
														"name",
														"content",
														"proxiable",
														"locked",
														"zone_name",
														"created_on",
														"modified_on"
													],
													"type": "object"
												}
											},
											"type": "object"
										}
									]
								},
								{
									"properties": {
										"errors": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": [
												{
													"code": 7003,
													"message": "No route for the URI"
												}
											],
											"minLength": 1
										},
										"messages": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": []
										},
										"result": {
											"enum": [
												null
											],
											"nullable": true,
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												false
											],
											"example": false,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Patch DNS Record response failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Patch DNS Record",
		"tags": [
			"DNS Records for a Zone"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"#dns_records:edit"
			]
		},
		"x-cfPlanAvailability": {
			"business": true,
			"enterprise": true,
			"free": true,
			"pro": true
		}
	},
	"POST /zones/{zone_identifier}/dns_records": {
		"description": "Create a new DNS record for a zone.\n\nNotes:\n- A/AAAA records cannot exist on the same name as CNAME records.\n- NS records cannot exist on the same name as any other record type.\n- Domain names are always represented in Punycode, even if Unicode\n  characters were used when creating the record.\n",
		"operationId": "dns-records-for-a-zone-create-dns-record",
		"parameters": [
			{
				"in": "path",
				"name": "zone_identifier",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"oneOf": [
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "A valid IPv4 address.",
												"example": "198.51.100.4",
												"format": "ipv4",
												"type": "string"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"proxied": {
												"$ref": "#/components/schemas/proxied"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"A"
												],
												"example": "A",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"content"
								],
								"title": "A Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "A valid IPv6 address.",
												"example": "2400:cb00:2049::1",
												"format": "ipv6",
												"type": "string"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"proxied": {
												"$ref": "#/components/schemas/proxied"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"AAAA"
												],
												"example": "AAAA",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"content"
								],
								"title": "AAAA Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "Formatted CAA content. See 'data' to set CAA properties.",
												"readOnly": true,
												"type": "string"
											},
											"data": {
												"description": "Components of a CAA record.",
												"properties": {
													"flags": {
														"description": "Flags for the CAA record.",
														"example": 1,
														"maximum": 255,
														"minimum": 0,
														"type": "number"
													},
													"tag": {
														"description": "Name of the property controlled by this record (e.g.: issue, issuewild, iodef).",
														"example": "issue",
														"type": "string"
													},
													"value": {
														"description": "Value of the record. This field's semantics depend on the chosen tag.",
														"type": "string"
													}
												},
												"type": "object"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"CAA"
												],
												"example": "CAA",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"data"
								],
								"title": "CAA Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "Formatted CERT content. See 'data' to set CERT properties.",
												"readOnly": true,
												"type": "string"
											},
											"data": {
												"description": "Components of a CERT record.",
												"properties": {
													"algorithm": {
														"description": "Algorithm.",
														"example": 8,
														"maximum": 255,
														"minimum": 0,
														"type": "number"
													},
													"certificate": {
														"description": "Certificate.",
														"type": "string"
													},
													"key_tag": {
														"description": "Key Tag.",
														"example": 1,
														"maximum": 65535,
														"minimum": 0,
														"type": "number"
													},
													"type": {
														"description": "Type.",
														"example": 9,
														"maximum": 65535,
														"minimum": 0,
														"type": "number"
													}
												},
												"type": "object"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"CERT"
												],
												"example": "CERT",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"data"
								],
								"title": "CERT Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "A valid hostname. Must not match the record's name."
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"proxied": {
												"$ref": "#/components/schemas/proxied"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"CNAME"
												],
												"example": "CNAME",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"content"
								],
								"title": "CNAME Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "Formatted DNSKEY content. See 'data' to set DNSKEY properties.",
												"readOnly": true,
												"type": "string"
											},
											"data": {
												"description": "Components of a DNSKEY record.",
												"properties": {
													"algorithm": {
														"description": "Algorithm.",
														"example": 5,
														"maximum": 255,
														"minimum": 0,
														"type": "number"
													},
													"flags": {
														"description": "Flags.",
														"example": 1,
														"maximum": 65535,
														"minimum": 0,
														"type": "number"
													},
													"protocol": {
														"description": "Protocol.",
														"example": 3,
														"maximum": 255,
														"minimum": 0,
														"type": "number"
													},
													"public_key": {
														"description": "Public Key.",
														"type": "string"
													}
												},
												"type": "object"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"DNSKEY"
												],
												"example": "DNSKEY",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"data"
								],
								"title": "DNSKEY Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "Formatted DS content. See 'data' to set DS properties.",
												"readOnly": true,
												"type": "string"
											},
											"data": {
												"description": "Components of a DS record.",
												"properties": {
													"algorithm": {
														"description": "Algorithm.",
														"example": 3,
														"maximum": 255,
														"minimum": 0,
														"type": "number"
													},
													"digest": {
														"description": "Digest.",
														"type": "string"
													},
													"digest_type": {
														"description": "Digest Type.",
														"example": 1,
														"maximum": 255,
														"minimum": 0,
														"type": "number"
													},
													"key_tag": {
														"description": "Key Tag.",
														"example": 1,
														"maximum": 65535,
														"minimum": 0,
														"type": "number"
													}
												},
												"type": "object"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"DS"
												],
												"example": "DS",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"data"
								],
								"title": "DS Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "Formatted HTTPS content. See 'data' to set HTTPS properties.",
												"readOnly": true,
												"type": "string"
											},
											"data": {
												"description": "Components of a HTTPS record.",
												"properties": {
													"priority": {
														"description": "priority.",
														"example": 1,
														"maximum": 65535,
														"minimum": 0,
														"type": "number"
													},
													"target": {
														"description": "target.",
														"example": ".",
														"type": "string"
													},
													"value": {
														"description": "value.",
														"example": "alpn=\"h3,h2\" ipv4hint=\"127.0.0.1\" ipv6hint=\"::1\"",
														"type": "string"
													}
												},
												"type": "object"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"HTTPS"
												],
												"example": "HTTPS",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"data"
								],
								"title": "HTTPS Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "Formatted LOC content. See 'data' to set LOC properties.",
												"example": "IN LOC 37 46 46 N 122 23 35 W 0m 100m 0m 0m",
												"readOnly": true,
												"type": "string"
											},
											"data": {
												"description": "Components of a LOC record.",
												"properties": {
													"altitude": {
														"description": "Altitude of location in meters.",
														"example": 0,
														"maximum": 42849672.95,
														"minimum": -100000,
														"type": "number"
													},
													"lat_degrees": {
														"description": "Degrees of latitude.",
														"example": 37,
														"maximum": 90,
														"minimum": 0,
														"type": "number"
													},
													"lat_direction": {
														"description": "Latitude direction.",
														"enum": [
															"N",
															"S"
														],
														"example": "N"
													},
													"lat_minutes": {
														"default": 0,
														"description": "Minutes of latitude.",
														"example": 46,
														"maximum": 59,
														"minimum": 0,
														"type": "number"
													},
													"lat_seconds": {
														"default": 0,
														"description": "Seconds of latitude.",
														"example": 46,
														"maximum": 59.999,
														"minimum": 0,
														"type": "number"
													},
													"long_degrees": {
														"description": "Degrees of longitude.",
														"example": 122,
														"maximum": 180,
														"minimum": 0,
														"type": "number"
													},
													"long_direction": {
														"description": "Longitude direction.",
														"enum": [
															"E",
															"W"
														],
														"example": "W"
													},
													"long_minutes": {
														"default": 0,
														"description": "Minutes of longitude.",
														"example": 23,
														"maximum": 59,
														"minimum": 0,
														"type": "number"
													},
													"long_seconds": {
														"default": 0,
														"description": "Seconds of longitude.",
														"example": 35,
														"maximum": 59.999,
														"minimum": 0,
														"type": "number"
													},
													"precision_horz": {
														"default": 0,
														"description": "Horizontal precision of location.",
														"example": 0,
														"maximum": 90000000,
														"minimum": 0,
														"type": "number"
													},
													"precision_vert": {
														"default": 0,
														"description": "Vertical precision of location.",
														"example": 0,
														"maximum": 90000000,
														"minimum": 0,
														"type": "number"
													},
													"size": {
														"default": 0,
														"description": "Size of location in meters.",
														"example": 100,
														"maximum": 90000000,
														"minimum": 0,
														"type": "number"
													}
												},
												"type": "object"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"LOC"
												],
												"example": "LOC",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"data"
								],
								"title": "LOC Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "A valid mail server hostname.",
												"example": "mx.example.com",
												"format": "hostname",
												"type": "string"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"priority": {
												"$ref": "#/components/schemas/priority-wGYGFwvJ"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"MX"
												],
												"example": "MX",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"content",
									"priority"
								],
								"title": "MX Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "Formatted NAPTR content. See 'data' to set NAPTR properties.",
												"readOnly": true,
												"type": "string"
											},
											"data": {
												"description": "Components of a NAPTR record.",
												"properties": {
													"flags": {
														"description": "Flags.",
														"type": "string"
													},
													"order": {
														"description": "Order.",
														"example": 100,
														"maximum": 65535,
														"minimum": 0,
														"type": "number"
													},
													"preference": {
														"description": "Preference.",
														"example": 10,
														"maximum": 65535,
														"minimum": 0,
														"type": "number"
													},
													"regex": {
														"description": "Regex.",
														"type": "string"
													},
													"replacement": {
														"description": "Replacement.",
														"type": "string"
													},
													"service": {
														"description": "Service.",
														"type": "string"
													}
												},
												"type": "object"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"NAPTR"
												],
												"example": "NAPTR",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"data"
								],
								"title": "NAPTR Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "A valid name server host name.",
												"example": "ns1.example.com"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"NS"
												],
												"example": "NS",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"content"
								],
								"title": "NS Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "Domain name pointing to the address.",
												"example": "example.com",
												"type": "string"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"PTR"
												],
												"example": "PTR",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"content"
								],
								"title": "PTR Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "Formatted SMIMEA content. See 'data' to set SMIMEA properties.",
												"readOnly": true,
												"type": "string"
											},
											"data": {
												"description": "Components of a SMIMEA record.",
												"properties": {
													"certificate": {
														"description": "Certificate.",
														"type": "string"
													},
													"matching_type": {
														"description": "Matching Type.",
														"example": 0,
														"maximum": 255,
														"minimum": 0,
														"type": "number"
													},
													"selector": {
														"description": "Selector.",
														"example": 0,
														"maximum": 255,
														"minimum": 0,
														"type": "number"
													},
													"usage": {
														"description": "Usage.",
														"example": 3,
														"maximum": 255,
														"minimum": 0,
														"type": "number"
													}
												},
												"type": "object"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"SMIMEA"
												],
												"example": "SMIMEA",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"data"
								],
								"title": "SMIMEA Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "Priority, weight, port, and SRV target. See 'data' for setting the individual component values.",
												"example": "10 IN SRV 5 8806 example.com.",
												"readOnly": true,
												"type": "string"
											},
											"data": {
												"description": "Components of a SRV record.",
												"properties": {
													"name": {
														"description": "A valid hostname.",
														"example": "example.com",
														"format": "hostname",
														"type": "string"
													},
													"port": {
														"description": "The port of the service.",
														"example": 8806,
														"maximum": 65535,
														"minimum": 0,
														"type": "number"
													},
													"priority": {
														"$ref": "#/components/schemas/priority-wGYGFwvJ"
													},
													"proto": {
														"description": "A valid protocol.",
														"example": "_tcp",
														"type": "string"
													},
													"service": {
														"description": "A service type, prefixed with an underscore.",
														"example": "_sip",
														"type": "string"
													},
													"target": {
														"description": "A valid hostname.",
														"example": "example.com",
														"format": "hostname",
														"type": "string"
													},
													"weight": {
														"description": "The record weight.",
														"example": 5,
														"maximum": 65535,
														"minimum": 0,
														"type": "number"
													}
												},
												"type": "object"
											},
											"name": {
												"description": "Service, protocol, and SRV name content. See 'data' for setting the individual component values.",
												"example": "_sip._tcp.example.com",
												"maxLength": 255,
												"readOnly": true,
												"type": "string"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"SRV"
												],
												"example": "SRV",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"data"
								],
								"title": "SRV Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "Formatted SSHFP content. See 'data' to set SSHFP properties.",
												"readOnly": true,
												"type": "string"
											},
											"data": {
												"description": "Components of a SSHFP record.",
												"properties": {
													"algorithm": {
														"description": "algorithm.",
														"example": 2,
														"maximum": 255,
														"minimum": 0,
														"type": "number"
													},
													"fingerprint": {
														"description": "fingerprint.",
														"type": "string"
													},
													"type": {
														"description": "type.",
														"example": 1,
														"maximum": 255,
														"minimum": 0,
														"type": "number"
													}
												},
												"type": "object"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"SSHFP"
												],
												"example": "SSHFP",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"data"
								],
								"title": "SSHFP Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "Formatted SVCB content. See 'data' to set SVCB properties.",
												"readOnly": true,
												"type": "string"
											},
											"data": {
												"description": "Components of a SVCB record.",
												"properties": {
													"priority": {
														"description": "priority.",
														"example": 1,
														"maximum": 65535,
														"minimum": 0,
														"type": "number"
													},
													"target": {
														"description": "target.",
														"example": ".",
														"type": "string"
													},
													"value": {
														"description": "value.",
														"example": "alpn=\"h3,h2\" ipv4hint=\"127.0.0.1\" ipv6hint=\"::1\"",
														"type": "string"
													}
												},
												"type": "object"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"SVCB"
												],
												"example": "SVCB",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"data"
								],
								"title": "SVCB Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "Formatted TLSA content. See 'data' to set TLSA properties.",
												"readOnly": true,
												"type": "string"
											},
											"data": {
												"description": "Components of a TLSA record.",
												"properties": {
													"certificate": {
														"description": "certificate.",
														"type": "string"
													},
													"matching_type": {
														"description": "Matching Type.",
														"example": 1,
														"maximum": 255,
														"minimum": 0,
														"type": "number"
													},
													"selector": {
														"description": "Selector.",
														"example": 0,
														"maximum": 255,
														"minimum": 0,
														"type": "number"
													},
													"usage": {
														"description": "Usage.",
														"example": 0,
														"maximum": 255,
														"minimum": 0,
														"type": "number"
													}
												},
												"type": "object"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"TLSA"
												],
												"example": "TLSA",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"data"
								],
								"title": "TLSA Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "Text content for the record.",
												"example": "example text content",
												"type": "string"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"TXT"
												],
												"example": "TXT",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"content"
								],
								"title": "TXT Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "Formatted URI content. See 'data' to set URI properties.",
												"readOnly": true,
												"type": "string"
											},
											"data": {
												"description": "Components of a URI record.",
												"properties": {
													"content": {
														"description": "The record content.",
														"example": "http://example.com/example.html",
														"type": "string"
													},
													"weight": {
														"description": "The record weight.",
														"example": 20,
														"maximum": 65535,
														"minimum": 0,
														"type": "number"
													}
												},
												"type": "object"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"priority": {
												"$ref": "#/components/schemas/priority-wGYGFwvJ"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"URI"
												],
												"example": "URI",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"data",
									"priority"
								],
								"title": "URI Record"
							}
						],
						"required": [
							"id",
							"type",
							"name",
							"content",
							"proxiable",
							"locked",
							"zone_name",
							"created_on",
							"modified_on"
						],
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"$ref": "#/components/schemas/api-response-common"
										},
										{
											"properties": {
												"result": {
													"anyOf": [
														{
															"type": "object"
														},
														{
															"type": "string"
														}
													]
												}
											}
										}
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"oneOf": [
												{
													"$ref": "#/components/schemas/ARecord"
												},
												{
													"$ref": "#/components/schemas/AAAARecord"
												},
												{
													"$ref": "#/components/schemas/CAARecord"
												},
												{
													"$ref": "#/components/schemas/CERTRecord"
												},
												{
													"$ref": "#/components/schemas/CNAMERecord"
												},
												{
													"$ref": "#/components/schemas/DNSKEYRecord"
												},
												{
													"$ref": "#/components/schemas/DSRecord"
												},
												{
													"$ref": "#/components/schemas/HTTPSRecord"
												},
												{
													"$ref": "#/components/schemas/LOCRecord"
												},
												{
													"$ref": "#/components/schemas/MXRecord"
												},
												{
													"$ref": "#/components/schemas/NAPTRRecord"
												},
												{
													"$ref": "#/components/schemas/NSRecord"
												},
												{
													"$ref": "#/components/schemas/PTRRecord"
												},
												{
													"$ref": "#/components/schemas/SMIMEARecord"
												},
												{
													"$ref": "#/components/schemas/SRVRecord"
												},
												{
													"$ref": "#/components/schemas/SSHFPRecord"
												},
												{
													"$ref": "#/components/schemas/SVCBRecord"
												},
												{
													"$ref": "#/components/schemas/TLSARecord"
												},
												{
													"$ref": "#/components/schemas/TXTRecord"
												},
												{
													"$ref": "#/components/schemas/URIRecord"
												}
											],
											"required": [
												"id",
												"type",
												"name",
												"content",
												"proxiable",
												"locked",
												"zone_name",
												"created_on",
												"modified_on"
											],
											"type": "object"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Create DNS Record response"
			},
			"4xx": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/api-response-common"
												},
												{
													"properties": {
														"result": {
															"anyOf": [
																{
																	"type": "object"
																},
																{
																	"type": "string"
																}
															]
														}
													}
												}
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"oneOf": [
														{
															"$ref": "#/components/schemas/ARecord"
														},
														{
															"$ref": "#/components/schemas/AAAARecord"
														},
														{
															"$ref": "#/components/schemas/CAARecord"
														},
														{
															"$ref": "#/components/schemas/CERTRecord"
														},
														{
															"$ref": "#/components/schemas/CNAMERecord"
														},
														{
															"$ref": "#/components/schemas/DNSKEYRecord"
														},
														{
															"$ref": "#/components/schemas/DSRecord"
														},
														{
															"$ref": "#/components/schemas/HTTPSRecord"
														},
														{
															"$ref": "#/components/schemas/LOCRecord"
														},
														{
															"$ref": "#/components/schemas/MXRecord"
														},
														{
															"$ref": "#/components/schemas/NAPTRRecord"
														},
														{
															"$ref": "#/components/schemas/NSRecord"
														},
														{
															"$ref": "#/components/schemas/PTRRecord"
														},
														{
															"$ref": "#/components/schemas/SMIMEARecord"
														},
														{
															"$ref": "#/components/schemas/SRVRecord"
														},
														{
															"$ref": "#/components/schemas/SSHFPRecord"
														},
														{
															"$ref": "#/components/schemas/SVCBRecord"
														},
														{
															"$ref": "#/components/schemas/TLSARecord"
														},
														{
															"$ref": "#/components/schemas/TXTRecord"
														},
														{
															"$ref": "#/components/schemas/URIRecord"
														}
													],
													"required": [
														"id",
														"type",
														"name",
														"content",
														"proxiable",
														"locked",
														"zone_name",
														"created_on",
														"modified_on"
													],
													"type": "object"
												}
											},
											"type": "object"
										}
									]
								},
								{
									"properties": {
										"errors": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": [
												{
													"code": 7003,
													"message": "No route for the URI"
												}
											],
											"minLength": 1
										},
										"messages": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": []
										},
										"result": {
											"enum": [
												null
											],
											"nullable": true,
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												false
											],
											"example": false,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Create DNS Record response failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Create DNS Record",
		"tags": [
			"DNS Records for a Zone"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"#dns_records:edit"
			]
		},
		"x-cfPlanAvailability": {
			"business": true,
			"enterprise": true,
			"free": true,
			"pro": true
		}
	},
	"POST /zones/{zone_identifier}/dns_records/import": {
		"description": "You can upload your [BIND config](https://en.wikipedia.org/wiki/Zone_file \"Zone file\") through this endpoint. It assumes that cURL is called from a location with bind_config.txt (valid BIND config) present.\n\nSee [the documentation](https://developers.cloudflare.com/dns/manage-dns-records/how-to/import-and-export/ \"Import and export records\") for more information.",
		"operationId": "dns-records-for-a-zone-import-dns-records",
		"parameters": [
			{
				"in": "path",
				"name": "zone_identifier",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"multipart/form-data": {
					"schema": {
						"properties": {
							"file": {
								"description": "BIND config to import.\n\n**Tip:** When using cURL, a file can be uploaded using `--form 'file=@bind_config.txt'`.\n",
								"example": "www.example.com. 300 IN  A 127.0.0.1",
								"type": "string"
							},
							"proxied": {
								"default": "false",
								"description": "Whether or not proxiable records should receive the performance and security benefits of Cloudflare.\n\nThe value should be either `true` or `false`.",
								"example": "true",
								"type": "string"
							}
						},
						"required": [
							"file"
						],
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"$ref": "#/components/schemas/api-response-common"
										},
										{
											"properties": {
												"result": {
													"anyOf": [
														{
															"type": "object"
														},
														{
															"type": "string"
														}
													]
												}
											}
										}
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"recs_added": {
													"description": "Number of DNS records added.",
													"example": 5,
													"type": "number"
												},
												"total_records_parsed": {
													"description": "Total number of DNS records parsed.",
													"example": 5,
													"type": "number"
												}
											},
											"type": "object"
										},
										"timing": {
											"properties": {
												"end_time": {
													"description": "When the file parsing ended.",
													"example": "2014-03-01T12:20:01Z",
													"format": "date-time",
													"type": "string"
												},
												"process_time": {
													"description": "Processing time of the file in seconds.",
													"example": 1,
													"type": "number"
												},
												"start_time": {
													"description": "When the file parsing started.",
													"example": "2014-03-01T12:20:00Z",
													"format": "date-time",
													"type": "string"
												}
											},
											"type": "object"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Import DNS Records response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/api-response-common"
												},
												{
													"properties": {
														"result": {
															"anyOf": [
																{
																	"type": "object"
																},
																{
																	"type": "string"
																}
															]
														}
													}
												}
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"properties": {
														"recs_added": {
															"description": "Number of DNS records added.",
															"example": 5,
															"type": "number"
														},
														"total_records_parsed": {
															"description": "Total number of DNS records parsed.",
															"example": 5,
															"type": "number"
														}
													},
													"type": "object"
												},
												"timing": {
													"properties": {
														"end_time": {
															"description": "When the file parsing ended.",
															"example": "2014-03-01T12:20:01Z",
															"format": "date-time",
															"type": "string"
														},
														"process_time": {
															"description": "Processing time of the file in seconds.",
															"example": 1,
															"type": "number"
														},
														"start_time": {
															"description": "When the file parsing started.",
															"example": "2014-03-01T12:20:00Z",
															"format": "date-time",
															"type": "string"
														}
													},
													"type": "object"
												}
											},
											"type": "object"
										}
									]
								},
								{
									"properties": {
										"errors": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": [
												{
													"code": 7003,
													"message": "No route for the URI"
												}
											],
											"minLength": 1
										},
										"messages": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": []
										},
										"result": {
											"enum": [
												null
											],
											"nullable": true,
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												false
											],
											"example": false,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Import DNS Records response failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Import DNS Records",
		"tags": [
			"DNS Records for a Zone"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"#dns_records:edit"
			]
		},
		"x-cfPlanAvailability": {
			"business": true,
			"enterprise": true,
			"free": true,
			"pro": true
		}
	},
	"POST /zones/{zone_identifier}/dns_records/scan": {
		"description": "Scan for common DNS records on your domain and automatically add them to your zone. Useful if you haven't updated your nameservers yet.",
		"operationId": "dns-records-for-a-zone-scan-dns-records",
		"parameters": [
			{
				"in": "path",
				"name": "zone_identifier",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"$ref": "#/components/schemas/api-response-common"
										},
										{
											"properties": {
												"result": {
													"anyOf": [
														{
															"type": "object"
														},
														{
															"type": "string"
														}
													]
												}
											}
										}
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"recs_added": {
													"description": "Number of DNS records added.",
													"example": 5,
													"type": "number"
												},
												"total_records_parsed": {
													"description": "Total number of DNS records parsed.",
													"example": 5,
													"type": "number"
												}
											},
											"type": "object"
										},
										"timing": {
											"properties": {
												"end_time": {
													"description": "When the file parsing ended.",
													"example": "2014-03-01T12:20:01Z",
													"format": "date-time",
													"type": "string"
												},
												"process_time": {
													"description": "Processing time of the file in seconds.",
													"example": 1,
													"type": "number"
												},
												"start_time": {
													"description": "When the file parsing started.",
													"example": "2014-03-01T12:20:00Z",
													"format": "date-time",
													"type": "string"
												}
											},
											"type": "object"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Scan DNS Records response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/api-response-common"
												},
												{
													"properties": {
														"result": {
															"anyOf": [
																{
																	"type": "object"
																},
																{
																	"type": "string"
																}
															]
														}
													}
												}
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"properties": {
														"recs_added": {
															"description": "Number of DNS records added.",
															"example": 5,
															"type": "number"
														},
														"total_records_parsed": {
															"description": "Total number of DNS records parsed.",
															"example": 5,
															"type": "number"
														}
													},
													"type": "object"
												},
												"timing": {
													"properties": {
														"end_time": {
															"description": "When the file parsing ended.",
															"example": "2014-03-01T12:20:01Z",
															"format": "date-time",
															"type": "string"
														},
														"process_time": {
															"description": "Processing time of the file in seconds.",
															"example": 1,
															"type": "number"
														},
														"start_time": {
															"description": "When the file parsing started.",
															"example": "2014-03-01T12:20:00Z",
															"format": "date-time",
															"type": "string"
														}
													},
													"type": "object"
												}
											},
											"type": "object"
										}
									]
								},
								{
									"properties": {
										"errors": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": [
												{
													"code": 7003,
													"message": "No route for the URI"
												}
											],
											"minLength": 1
										},
										"messages": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": []
										},
										"result": {
											"enum": [
												null
											],
											"nullable": true,
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												false
											],
											"example": false,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Scan DNS Records response failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Scan DNS Records",
		"tags": [
			"DNS Records for a Zone"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"#dns_records:edit"
			]
		},
		"x-cfPlanAvailability": {
			"business": true,
			"enterprise": true,
			"free": true,
			"pro": true
		}
	},
	"PUT /zones/{zone_identifier}/dns_records/{identifier}": {
		"description": "Update an existing DNS record.\n\nNotes:\n- A/AAAA records cannot exist on the same name as CNAME records.\n- NS records cannot exist on the same name as any other record type.\n- Domain names are always represented in Punycode, even if Unicode\n  characters were used when creating the record.\n",
		"operationId": "dns-records-for-a-zone-update-dns-record",
		"parameters": [
			{
				"in": "path",
				"name": "identifier",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "zone_identifier",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"oneOf": [
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "A valid IPv4 address.",
												"example": "198.51.100.4",
												"format": "ipv4",
												"type": "string"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"proxied": {
												"$ref": "#/components/schemas/proxied"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"A"
												],
												"example": "A",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"content"
								],
								"title": "A Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "A valid IPv6 address.",
												"example": "2400:cb00:2049::1",
												"format": "ipv6",
												"type": "string"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"proxied": {
												"$ref": "#/components/schemas/proxied"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"AAAA"
												],
												"example": "AAAA",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"content"
								],
								"title": "AAAA Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "Formatted CAA content. See 'data' to set CAA properties.",
												"readOnly": true,
												"type": "string"
											},
											"data": {
												"description": "Components of a CAA record.",
												"properties": {
													"flags": {
														"description": "Flags for the CAA record.",
														"example": 1,
														"maximum": 255,
														"minimum": 0,
														"type": "number"
													},
													"tag": {
														"description": "Name of the property controlled by this record (e.g.: issue, issuewild, iodef).",
														"example": "issue",
														"type": "string"
													},
													"value": {
														"description": "Value of the record. This field's semantics depend on the chosen tag.",
														"type": "string"
													}
												},
												"type": "object"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"CAA"
												],
												"example": "CAA",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"data"
								],
								"title": "CAA Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "Formatted CERT content. See 'data' to set CERT properties.",
												"readOnly": true,
												"type": "string"
											},
											"data": {
												"description": "Components of a CERT record.",
												"properties": {
													"algorithm": {
														"description": "Algorithm.",
														"example": 8,
														"maximum": 255,
														"minimum": 0,
														"type": "number"
													},
													"certificate": {
														"description": "Certificate.",
														"type": "string"
													},
													"key_tag": {
														"description": "Key Tag.",
														"example": 1,
														"maximum": 65535,
														"minimum": 0,
														"type": "number"
													},
													"type": {
														"description": "Type.",
														"example": 9,
														"maximum": 65535,
														"minimum": 0,
														"type": "number"
													}
												},
												"type": "object"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"CERT"
												],
												"example": "CERT",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"data"
								],
								"title": "CERT Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "A valid hostname. Must not match the record's name."
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"proxied": {
												"$ref": "#/components/schemas/proxied"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"CNAME"
												],
												"example": "CNAME",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"content"
								],
								"title": "CNAME Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "Formatted DNSKEY content. See 'data' to set DNSKEY properties.",
												"readOnly": true,
												"type": "string"
											},
											"data": {
												"description": "Components of a DNSKEY record.",
												"properties": {
													"algorithm": {
														"description": "Algorithm.",
														"example": 5,
														"maximum": 255,
														"minimum": 0,
														"type": "number"
													},
													"flags": {
														"description": "Flags.",
														"example": 1,
														"maximum": 65535,
														"minimum": 0,
														"type": "number"
													},
													"protocol": {
														"description": "Protocol.",
														"example": 3,
														"maximum": 255,
														"minimum": 0,
														"type": "number"
													},
													"public_key": {
														"description": "Public Key.",
														"type": "string"
													}
												},
												"type": "object"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"DNSKEY"
												],
												"example": "DNSKEY",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"data"
								],
								"title": "DNSKEY Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "Formatted DS content. See 'data' to set DS properties.",
												"readOnly": true,
												"type": "string"
											},
											"data": {
												"description": "Components of a DS record.",
												"properties": {
													"algorithm": {
														"description": "Algorithm.",
														"example": 3,
														"maximum": 255,
														"minimum": 0,
														"type": "number"
													},
													"digest": {
														"description": "Digest.",
														"type": "string"
													},
													"digest_type": {
														"description": "Digest Type.",
														"example": 1,
														"maximum": 255,
														"minimum": 0,
														"type": "number"
													},
													"key_tag": {
														"description": "Key Tag.",
														"example": 1,
														"maximum": 65535,
														"minimum": 0,
														"type": "number"
													}
												},
												"type": "object"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"DS"
												],
												"example": "DS",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"data"
								],
								"title": "DS Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "Formatted HTTPS content. See 'data' to set HTTPS properties.",
												"readOnly": true,
												"type": "string"
											},
											"data": {
												"description": "Components of a HTTPS record.",
												"properties": {
													"priority": {
														"description": "priority.",
														"example": 1,
														"maximum": 65535,
														"minimum": 0,
														"type": "number"
													},
													"target": {
														"description": "target.",
														"example": ".",
														"type": "string"
													},
													"value": {
														"description": "value.",
														"example": "alpn=\"h3,h2\" ipv4hint=\"127.0.0.1\" ipv6hint=\"::1\"",
														"type": "string"
													}
												},
												"type": "object"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"HTTPS"
												],
												"example": "HTTPS",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"data"
								],
								"title": "HTTPS Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "Formatted LOC content. See 'data' to set LOC properties.",
												"example": "IN LOC 37 46 46 N 122 23 35 W 0m 100m 0m 0m",
												"readOnly": true,
												"type": "string"
											},
											"data": {
												"description": "Components of a LOC record.",
												"properties": {
													"altitude": {
														"description": "Altitude of location in meters.",
														"example": 0,
														"maximum": 42849672.95,
														"minimum": -100000,
														"type": "number"
													},
													"lat_degrees": {
														"description": "Degrees of latitude.",
														"example": 37,
														"maximum": 90,
														"minimum": 0,
														"type": "number"
													},
													"lat_direction": {
														"description": "Latitude direction.",
														"enum": [
															"N",
															"S"
														],
														"example": "N"
													},
													"lat_minutes": {
														"default": 0,
														"description": "Minutes of latitude.",
														"example": 46,
														"maximum": 59,
														"minimum": 0,
														"type": "number"
													},
													"lat_seconds": {
														"default": 0,
														"description": "Seconds of latitude.",
														"example": 46,
														"maximum": 59.999,
														"minimum": 0,
														"type": "number"
													},
													"long_degrees": {
														"description": "Degrees of longitude.",
														"example": 122,
														"maximum": 180,
														"minimum": 0,
														"type": "number"
													},
													"long_direction": {
														"description": "Longitude direction.",
														"enum": [
															"E",
															"W"
														],
														"example": "W"
													},
													"long_minutes": {
														"default": 0,
														"description": "Minutes of longitude.",
														"example": 23,
														"maximum": 59,
														"minimum": 0,
														"type": "number"
													},
													"long_seconds": {
														"default": 0,
														"description": "Seconds of longitude.",
														"example": 35,
														"maximum": 59.999,
														"minimum": 0,
														"type": "number"
													},
													"precision_horz": {
														"default": 0,
														"description": "Horizontal precision of location.",
														"example": 0,
														"maximum": 90000000,
														"minimum": 0,
														"type": "number"
													},
													"precision_vert": {
														"default": 0,
														"description": "Vertical precision of location.",
														"example": 0,
														"maximum": 90000000,
														"minimum": 0,
														"type": "number"
													},
													"size": {
														"default": 0,
														"description": "Size of location in meters.",
														"example": 100,
														"maximum": 90000000,
														"minimum": 0,
														"type": "number"
													}
												},
												"type": "object"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"LOC"
												],
												"example": "LOC",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"data"
								],
								"title": "LOC Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "A valid mail server hostname.",
												"example": "mx.example.com",
												"format": "hostname",
												"type": "string"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"priority": {
												"$ref": "#/components/schemas/priority-wGYGFwvJ"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"MX"
												],
												"example": "MX",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"content",
									"priority"
								],
								"title": "MX Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "Formatted NAPTR content. See 'data' to set NAPTR properties.",
												"readOnly": true,
												"type": "string"
											},
											"data": {
												"description": "Components of a NAPTR record.",
												"properties": {
													"flags": {
														"description": "Flags.",
														"type": "string"
													},
													"order": {
														"description": "Order.",
														"example": 100,
														"maximum": 65535,
														"minimum": 0,
														"type": "number"
													},
													"preference": {
														"description": "Preference.",
														"example": 10,
														"maximum": 65535,
														"minimum": 0,
														"type": "number"
													},
													"regex": {
														"description": "Regex.",
														"type": "string"
													},
													"replacement": {
														"description": "Replacement.",
														"type": "string"
													},
													"service": {
														"description": "Service.",
														"type": "string"
													}
												},
												"type": "object"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"NAPTR"
												],
												"example": "NAPTR",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"data"
								],
								"title": "NAPTR Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "A valid name server host name.",
												"example": "ns1.example.com"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"NS"
												],
												"example": "NS",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"content"
								],
								"title": "NS Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "Domain name pointing to the address.",
												"example": "example.com",
												"type": "string"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"PTR"
												],
												"example": "PTR",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"content"
								],
								"title": "PTR Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "Formatted SMIMEA content. See 'data' to set SMIMEA properties.",
												"readOnly": true,
												"type": "string"
											},
											"data": {
												"description": "Components of a SMIMEA record.",
												"properties": {
													"certificate": {
														"description": "Certificate.",
														"type": "string"
													},
													"matching_type": {
														"description": "Matching Type.",
														"example": 0,
														"maximum": 255,
														"minimum": 0,
														"type": "number"
													},
													"selector": {
														"description": "Selector.",
														"example": 0,
														"maximum": 255,
														"minimum": 0,
														"type": "number"
													},
													"usage": {
														"description": "Usage.",
														"example": 3,
														"maximum": 255,
														"minimum": 0,
														"type": "number"
													}
												},
												"type": "object"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"SMIMEA"
												],
												"example": "SMIMEA",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"data"
								],
								"title": "SMIMEA Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "Priority, weight, port, and SRV target. See 'data' for setting the individual component values.",
												"example": "10 IN SRV 5 8806 example.com.",
												"readOnly": true,
												"type": "string"
											},
											"data": {
												"description": "Components of a SRV record.",
												"properties": {
													"name": {
														"description": "A valid hostname.",
														"example": "example.com",
														"format": "hostname",
														"type": "string"
													},
													"port": {
														"description": "The port of the service.",
														"example": 8806,
														"maximum": 65535,
														"minimum": 0,
														"type": "number"
													},
													"priority": {
														"$ref": "#/components/schemas/priority-wGYGFwvJ"
													},
													"proto": {
														"description": "A valid protocol.",
														"example": "_tcp",
														"type": "string"
													},
													"service": {
														"description": "A service type, prefixed with an underscore.",
														"example": "_sip",
														"type": "string"
													},
													"target": {
														"description": "A valid hostname.",
														"example": "example.com",
														"format": "hostname",
														"type": "string"
													},
													"weight": {
														"description": "The record weight.",
														"example": 5,
														"maximum": 65535,
														"minimum": 0,
														"type": "number"
													}
												},
												"type": "object"
											},
											"name": {
												"description": "Service, protocol, and SRV name content. See 'data' for setting the individual component values.",
												"example": "_sip._tcp.example.com",
												"maxLength": 255,
												"readOnly": true,
												"type": "string"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"SRV"
												],
												"example": "SRV",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"data"
								],
								"title": "SRV Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "Formatted SSHFP content. See 'data' to set SSHFP properties.",
												"readOnly": true,
												"type": "string"
											},
											"data": {
												"description": "Components of a SSHFP record.",
												"properties": {
													"algorithm": {
														"description": "algorithm.",
														"example": 2,
														"maximum": 255,
														"minimum": 0,
														"type": "number"
													},
													"fingerprint": {
														"description": "fingerprint.",
														"type": "string"
													},
													"type": {
														"description": "type.",
														"example": 1,
														"maximum": 255,
														"minimum": 0,
														"type": "number"
													}
												},
												"type": "object"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"SSHFP"
												],
												"example": "SSHFP",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"data"
								],
								"title": "SSHFP Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "Formatted SVCB content. See 'data' to set SVCB properties.",
												"readOnly": true,
												"type": "string"
											},
											"data": {
												"description": "Components of a SVCB record.",
												"properties": {
													"priority": {
														"description": "priority.",
														"example": 1,
														"maximum": 65535,
														"minimum": 0,
														"type": "number"
													},
													"target": {
														"description": "target.",
														"example": ".",
														"type": "string"
													},
													"value": {
														"description": "value.",
														"example": "alpn=\"h3,h2\" ipv4hint=\"127.0.0.1\" ipv6hint=\"::1\"",
														"type": "string"
													}
												},
												"type": "object"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"SVCB"
												],
												"example": "SVCB",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"data"
								],
								"title": "SVCB Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "Formatted TLSA content. See 'data' to set TLSA properties.",
												"readOnly": true,
												"type": "string"
											},
											"data": {
												"description": "Components of a TLSA record.",
												"properties": {
													"certificate": {
														"description": "certificate.",
														"type": "string"
													},
													"matching_type": {
														"description": "Matching Type.",
														"example": 1,
														"maximum": 255,
														"minimum": 0,
														"type": "number"
													},
													"selector": {
														"description": "Selector.",
														"example": 0,
														"maximum": 255,
														"minimum": 0,
														"type": "number"
													},
													"usage": {
														"description": "Usage.",
														"example": 0,
														"maximum": 255,
														"minimum": 0,
														"type": "number"
													}
												},
												"type": "object"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"TLSA"
												],
												"example": "TLSA",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"data"
								],
								"title": "TLSA Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "Text content for the record.",
												"example": "example text content",
												"type": "string"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"TXT"
												],
												"example": "TXT",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"content"
								],
								"title": "TXT Record"
							},
							{
								"allOf": [
									{
										"properties": {
											"content": {
												"description": "Formatted URI content. See 'data' to set URI properties.",
												"readOnly": true,
												"type": "string"
											},
											"data": {
												"description": "Components of a URI record.",
												"properties": {
													"content": {
														"description": "The record content.",
														"example": "http://example.com/example.html",
														"type": "string"
													},
													"weight": {
														"description": "The record weight.",
														"example": 20,
														"maximum": 65535,
														"minimum": 0,
														"type": "number"
													}
												},
												"type": "object"
											},
											"name": {
												"$ref": "#/components/schemas/name-gvsAs49W"
											},
											"priority": {
												"$ref": "#/components/schemas/priority-wGYGFwvJ"
											},
											"type": {
												"description": "Record type.",
												"enum": [
													"URI"
												],
												"example": "URI",
												"type": "string"
											}
										}
									},
									{
										"$ref": "#/components/schemas/base-52xoFTeg"
									}
								],
								"required": [
									"type",
									"name",
									"data",
									"priority"
								],
								"title": "URI Record"
							}
						],
						"required": [
							"id",
							"type",
							"name",
							"content",
							"proxiable",
							"locked",
							"zone_name",
							"created_on",
							"modified_on"
						],
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"$ref": "#/components/schemas/api-response-common"
										},
										{
											"properties": {
												"result": {
													"anyOf": [
														{
															"type": "object"
														},
														{
															"type": "string"
														}
													]
												}
											}
										}
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"oneOf": [
												{
													"$ref": "#/components/schemas/ARecord"
												},
												{
													"$ref": "#/components/schemas/AAAARecord"
												},
												{
													"$ref": "#/components/schemas/CAARecord"
												},
												{
													"$ref": "#/components/schemas/CERTRecord"
												},
												{
													"$ref": "#/components/schemas/CNAMERecord"
												},
												{
													"$ref": "#/components/schemas/DNSKEYRecord"
												},
												{
													"$ref": "#/components/schemas/DSRecord"
												},
												{
													"$ref": "#/components/schemas/HTTPSRecord"
												},
												{
													"$ref": "#/components/schemas/LOCRecord"
												},
												{
													"$ref": "#/components/schemas/MXRecord"
												},
												{
													"$ref": "#/components/schemas/NAPTRRecord"
												},
												{
													"$ref": "#/components/schemas/NSRecord"
												},
												{
													"$ref": "#/components/schemas/PTRRecord"
												},
												{
													"$ref": "#/components/schemas/SMIMEARecord"
												},
												{
													"$ref": "#/components/schemas/SRVRecord"
												},
												{
													"$ref": "#/components/schemas/SSHFPRecord"
												},
												{
													"$ref": "#/components/schemas/SVCBRecord"
												},
												{
													"$ref": "#/components/schemas/TLSARecord"
												},
												{
													"$ref": "#/components/schemas/TXTRecord"
												},
												{
													"$ref": "#/components/schemas/URIRecord"
												}
											],
											"required": [
												"id",
												"type",
												"name",
												"content",
												"proxiable",
												"locked",
												"zone_name",
												"created_on",
												"modified_on"
											],
											"type": "object"
										}
									},
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Update DNS Record response"
			},
			"4xx": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/api-response-common"
												},
												{
													"properties": {
														"result": {
															"anyOf": [
																{
																	"type": "object"
																},
																{
																	"type": "string"
																}
															]
														}
													}
												}
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"oneOf": [
														{
															"$ref": "#/components/schemas/ARecord"
														},
														{
															"$ref": "#/components/schemas/AAAARecord"
														},
														{
															"$ref": "#/components/schemas/CAARecord"
														},
														{
															"$ref": "#/components/schemas/CERTRecord"
														},
														{
															"$ref": "#/components/schemas/CNAMERecord"
														},
														{
															"$ref": "#/components/schemas/DNSKEYRecord"
														},
														{
															"$ref": "#/components/schemas/DSRecord"
														},
														{
															"$ref": "#/components/schemas/HTTPSRecord"
														},
														{
															"$ref": "#/components/schemas/LOCRecord"
														},
														{
															"$ref": "#/components/schemas/MXRecord"
														},
														{
															"$ref": "#/components/schemas/NAPTRRecord"
														},
														{
															"$ref": "#/components/schemas/NSRecord"
														},
														{
															"$ref": "#/components/schemas/PTRRecord"
														},
														{
															"$ref": "#/components/schemas/SMIMEARecord"
														},
														{
															"$ref": "#/components/schemas/SRVRecord"
														},
														{
															"$ref": "#/components/schemas/SSHFPRecord"
														},
														{
															"$ref": "#/components/schemas/SVCBRecord"
														},
														{
															"$ref": "#/components/schemas/TLSARecord"
														},
														{
															"$ref": "#/components/schemas/TXTRecord"
														},
														{
															"$ref": "#/components/schemas/URIRecord"
														}
													],
													"required": [
														"id",
														"type",
														"name",
														"content",
														"proxiable",
														"locked",
														"zone_name",
														"created_on",
														"modified_on"
													],
													"type": "object"
												}
											},
											"type": "object"
										}
									]
								},
								{
									"properties": {
										"errors": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": [
												{
													"code": 7003,
													"message": "No route for the URI"
												}
											],
											"minLength": 1
										},
										"messages": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": []
										},
										"result": {
											"enum": [
												null
											],
											"nullable": true,
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												false
											],
											"example": false,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Update DNS Record response failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Update DNS Record",
		"tags": [
			"DNS Records for a Zone"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"#dns_records:edit"
			]
		},
		"x-cfPlanAvailability": {
			"business": true,
			"enterprise": true,
			"free": true,
			"pro": true
		}
	}
}