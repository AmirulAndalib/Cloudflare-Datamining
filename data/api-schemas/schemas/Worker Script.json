{
	"DELETE /accounts/{account_id}/workers/scripts/{script_name}": {
		"description": "Delete your worker. This call has no response body on a successful delete.",
		"operationId": "worker-script-delete-worker",
		"parameters": [
			{
				"in": "path",
				"name": "script_name",
				"required": true,
				"schema": {
					"description": "Name of the script, used in URLs and route configuration.",
					"example": "this-is_my_script-01",
					"pattern": "^[a-z0-9_][a-z0-9-_]*$",
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"description": "If set to true, delete will not be stopped by associated service binding, durable object, or other binding. Any of these associated bindings/durable objects will be deleted along with the script.",
				"in": "query",
				"name": "force",
				"schema": {
					"type": "boolean"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {}
				},
				"description": "Delete Worker response"
			},
			"4XX": {
				"content": {
					"application/json": {}
				},
				"description": "Delete Worker response failure"
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Delete Worker",
		"tags": [
			"Worker Script"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"com.cloudflare.edge.worker.script.delete"
			]
		}
	},
	"GET /accounts/{account_id}/workers/scripts": {
		"description": "Fetch a list of uploaded workers.",
		"operationId": "worker-script-list-workers",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"items": {
												"properties": {
													"created_on": {
														"description": "When the script was created.",
														"example": "2017-01-01T00:00:00Z",
														"format": "date-time",
														"readOnly": true,
														"type": "string"
													},
													"etag": {
														"description": "Hashed script content, can be used in a If-None-Match header when updating.",
														"example": "ea95132c15732412d22c1476fa83f27a",
														"readOnly": true,
														"type": "string"
													},
													"id": {
														"description": "The id of the script in the Workers system. Usually the script name.",
														"example": "my-workers-script",
														"readOnly": true,
														"type": "string"
													},
													"logpush": {
														"description": "Whether Logpush is turned on for the Worker.",
														"example": false,
														"type": "boolean"
													},
													"modified_on": {
														"description": "When the script was last modified.",
														"example": "2017-01-01T00:00:00Z",
														"format": "date-time",
														"readOnly": true,
														"type": "string"
													},
													"placement_mode": {
														"description": "Specifies the placement mode for the Worker (e.g. 'smart').",
														"example": "smart",
														"type": "string"
													},
													"tail_consumers": {
														"description": "List of Workers that will consume logs from the attached Worker.",
														"items": {
															"description": "A reference to a script that will consume logs from the attached Worker.",
															"properties": {
																"environment": {
																	"description": "Optional environment if the Worker utilizes one.",
																	"example": "production",
																	"type": "string"
																},
																"namespace": {
																	"description": "Optional dispatch namespace the script belongs to.",
																	"example": "my-namespace",
																	"type": "string"
																},
																"service": {
																	"description": "Name of Worker that is to be the consumer.",
																	"example": "my-log-consumer",
																	"type": "string"
																}
															},
															"required": [
																"service"
															],
															"type": "object"
														},
														"type": "array"
													},
													"usage_model": {
														"description": "Specifies the usage model for the Worker (e.g. 'bundled' or 'unbound').",
														"example": "unbound",
														"pattern": "^(bundled|unbound)$",
														"type": "string"
													}
												}
											},
											"type": "array"
										}
									}
								}
							]
						}
					}
				},
				"description": "List Workers response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"properties": {
												"errors": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"messages": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"success": {
													"description": "Whether the API call was successful",
													"enum": [
														true
													],
													"example": true,
													"type": "boolean"
												}
											},
											"required": [
												"success",
												"errors",
												"messages"
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"items": {
														"properties": {
															"created_on": {
																"description": "When the script was created.",
																"example": "2017-01-01T00:00:00Z",
																"format": "date-time",
																"readOnly": true,
																"type": "string"
															},
															"etag": {
																"description": "Hashed script content, can be used in a If-None-Match header when updating.",
																"example": "ea95132c15732412d22c1476fa83f27a",
																"readOnly": true,
																"type": "string"
															},
															"id": {
																"description": "The id of the script in the Workers system. Usually the script name.",
																"example": "my-workers-script",
																"readOnly": true,
																"type": "string"
															},
															"logpush": {
																"description": "Whether Logpush is turned on for the Worker.",
																"example": false,
																"type": "boolean"
															},
															"modified_on": {
																"description": "When the script was last modified.",
																"example": "2017-01-01T00:00:00Z",
																"format": "date-time",
																"readOnly": true,
																"type": "string"
															},
															"placement_mode": {
																"description": "Specifies the placement mode for the Worker (e.g. 'smart').",
																"example": "smart",
																"type": "string"
															},
															"tail_consumers": {
																"description": "List of Workers that will consume logs from the attached Worker.",
																"items": {
																	"description": "A reference to a script that will consume logs from the attached Worker.",
																	"properties": {
																		"environment": {
																			"description": "Optional environment if the Worker utilizes one.",
																			"example": "production",
																			"type": "string"
																		},
																		"namespace": {
																			"description": "Optional dispatch namespace the script belongs to.",
																			"example": "my-namespace",
																			"type": "string"
																		},
																		"service": {
																			"description": "Name of Worker that is to be the consumer.",
																			"example": "my-log-consumer",
																			"type": "string"
																		}
																	},
																	"required": [
																		"service"
																	],
																	"type": "object"
																},
																"type": "array"
															},
															"usage_model": {
																"description": "Specifies the usage model for the Worker (e.g. 'bundled' or 'unbound').",
																"example": "unbound",
																"pattern": "^(bundled|unbound)$",
																"type": "string"
															}
														}
													},
													"type": "array"
												}
											}
										}
									]
								},
								{
									"properties": {
										"errors": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": [
												{
													"code": 7003,
													"message": "No route for the URI"
												}
											],
											"minLength": 1
										},
										"messages": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": []
										},
										"result": {
											"enum": [
												null
											],
											"nullable": true,
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												false
											],
											"example": false,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "List Workers response failure"
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "List Workers",
		"tags": [
			"Worker Script"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"com.cloudflare.edge.worker.script.list"
			]
		}
	},
	"GET /accounts/{account_id}/workers/scripts/{script_name}": {
		"description": "Fetch raw script content for your worker. Note this is the original script content, not JSON encoded.",
		"operationId": "worker-script-download-worker",
		"parameters": [
			{
				"in": "path",
				"name": "script_name",
				"required": true,
				"schema": {
					"description": "Name of the script, used in URLs and route configuration.",
					"example": "this-is_my_script-01",
					"pattern": "^[a-z0-9_][a-z0-9-_]*$",
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"undefined": {
						"schema": {
							"example": "addEventListener('fetch', event => { event.respondWith(fetch(event.request)) })"
						}
					}
				},
				"description": "Download Worker response"
			},
			"4XX": {
				"content": {
					"undefined": {
						"schema": {
							"example": "addEventListener('fetch', event => { event.respondWith(fetch(event.request)) })"
						}
					}
				},
				"description": "Download Worker response failure"
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Download Worker",
		"tags": [
			"Worker Script"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"com.cloudflare.edge.worker.script.read"
			]
		}
	},
	"GET /accounts/{account_id}/workers/scripts/{script_name}/content/v2": {
		"description": "Fetch script content only",
		"operationId": "worker-script-get-content",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "script_name",
				"required": true,
				"schema": {
					"description": "Name of the script, used in URLs and route configuration.",
					"example": "this-is_my_script-01",
					"pattern": "^[a-z0-9_][a-z0-9-_]*$",
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"string": {
						"schema": {
							"example": "addEventListener('fetch', event => { event.respondWith(fetch(event.request)) })"
						}
					}
				},
				"description": "Fetch script content"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"example": [],
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"example": [],
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"success": {
									"description": "Whether the API call was successful",
									"enum": [
										true
									],
									"example": true,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages"
							],
							"type": "object"
						}
					}
				},
				"description": "Fetch script content failure"
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Get script content",
		"tags": [
			"Worker Script"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"com.cloudflare.edge.worker.script.read"
			]
		}
	},
	"GET /accounts/{account_id}/workers/scripts/{script_name}/script-settings": {
		"description": "Get script-level settings when using [Worker Versions](https://developers.cloudflare.com/api/operations/worker-versions-list-versions). Includes Logpush and Tail Consumers.",
		"operationId": "worker-script-settings-get-settings",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "script_name",
				"required": true,
				"schema": {
					"description": "Name of the script, used in URLs and route configuration.",
					"example": "this-is_my_script-01",
					"pattern": "^[a-z0-9_][a-z0-9-_]*$",
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"logpush": {
													"description": "Whether Logpush is turned on for the Worker.",
													"example": false,
													"type": "boolean"
												},
												"tail_consumers": {
													"description": "List of Workers that will consume logs from the attached Worker.",
													"items": {
														"description": "A reference to a script that will consume logs from the attached Worker.",
														"properties": {
															"environment": {
																"description": "Optional environment if the Worker utilizes one.",
																"example": "production",
																"type": "string"
															},
															"namespace": {
																"description": "Optional dispatch namespace the script belongs to.",
																"example": "my-namespace",
																"type": "string"
															},
															"service": {
																"description": "Name of Worker that is to be the consumer.",
																"example": "my-log-consumer",
																"type": "string"
															}
														},
														"required": [
															"service"
														],
														"type": "object"
													},
													"type": "array"
												}
											},
											"type": "object"
										}
									}
								}
							]
						}
					}
				},
				"description": "Fetch script settings"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"example": [],
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"example": [],
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"success": {
									"description": "Whether the API call was successful",
									"enum": [
										true
									],
									"example": true,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages"
							],
							"type": "object"
						}
					}
				},
				"description": "Fetch script settings failure"
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Get Script Settings",
		"tags": [
			"Worker Script"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"com.cloudflare.edge.worker.script.read"
			]
		}
	},
	"GET /accounts/{account_id}/workers/scripts/{script_name}/settings": {
		"description": "Get metadata and config, such as bindings or usage model",
		"operationId": "worker-script-get-settings",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "script_name",
				"required": true,
				"schema": {
					"description": "Name of the script, used in URLs and route configuration.",
					"example": "this-is_my_script-01",
					"pattern": "^[a-z0-9_][a-z0-9-_]*$",
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"bindings": {
													"description": "List of bindings attached to this Worker",
													"items": {
														"description": "A binding to allow the Worker to communicate with resources",
														"oneOf": [
															{
																"properties": {
																	"name": {
																		"description": "A JavaScript variable name for the binding.",
																		"example": "myBinding",
																		"readOnly": true,
																		"type": "string"
																	},
																	"namespace_id": {
																		"description": "Namespace identifier tag.",
																		"example": "0f2ac74b498b48028cb68387c421e279",
																		"maxLength": 32,
																		"readOnly": true,
																		"type": "string"
																	},
																	"type": {
																		"description": "The class of resource that the binding provides.",
																		"enum": [
																			"kv_namespace"
																		],
																		"example": "kv_namespace",
																		"type": "string"
																	}
																},
																"required": [
																	"name",
																	"type",
																	"namespace_id"
																],
																"type": "object"
															},
															{
																"properties": {
																	"environment": {
																		"description": "Optional environment if the Worker utilizes one.",
																		"example": "production",
																		"type": "string"
																	},
																	"name": {
																		"description": "A JavaScript variable name for the binding.",
																		"example": "myBinding",
																		"readOnly": true,
																		"type": "string"
																	},
																	"service": {
																		"description": "Name of Worker to bind to",
																		"example": "my-worker",
																		"type": "string"
																	},
																	"type": {
																		"description": "The class of resource that the binding provides.",
																		"enum": [
																			"service"
																		],
																		"example": "service",
																		"type": "string"
																	}
																},
																"required": [
																	"name",
																	"type",
																	"service",
																	"environment"
																],
																"type": "object"
															},
															{
																"properties": {
																	"class_name": {
																		"description": "The exported class name of the Durable Object",
																		"example": "MyDurableObject",
																		"type": "string"
																	},
																	"environment": {
																		"description": "The environment of the script_name to bind to",
																		"example": "production",
																		"type": "string"
																	},
																	"name": {
																		"description": "A JavaScript variable name for the binding.",
																		"example": "myBinding",
																		"readOnly": true,
																		"type": "string"
																	},
																	"namespace_id": {
																		"description": "Namespace identifier tag.",
																		"example": "0f2ac74b498b48028cb68387c421e279",
																		"maxLength": 32,
																		"readOnly": true,
																		"type": "string"
																	},
																	"script_name": {
																		"description": "The script where the Durable Object is defined, if it is external to this Worker",
																		"example": "my-other-worker",
																		"type": "string"
																	},
																	"type": {
																		"description": "The class of resource that the binding provides.",
																		"enum": [
																			"durable_object_namespace"
																		],
																		"example": "durable_object_namespace",
																		"type": "string"
																	}
																},
																"required": [
																	"name",
																	"type",
																	"class_name"
																],
																"type": "object"
															},
															{
																"properties": {
																	"bucket_name": {
																		"description": "R2 bucket to bind to",
																		"example": "my-r2-bucket",
																		"type": "string"
																	},
																	"name": {
																		"description": "A JavaScript variable name for the binding.",
																		"example": "myBinding",
																		"readOnly": true,
																		"type": "string"
																	},
																	"type": {
																		"description": "The class of resource that the binding provides.",
																		"enum": [
																			"r2_bucket"
																		],
																		"example": "r2_bucket",
																		"type": "string"
																	}
																},
																"required": [
																	"name",
																	"type",
																	"bucket_name"
																],
																"type": "object"
															},
															{
																"properties": {
																	"name": {
																		"description": "A JavaScript variable name for the binding.",
																		"example": "myBinding",
																		"readOnly": true,
																		"type": "string"
																	},
																	"queue_name": {
																		"description": "Name of the Queue to bind to",
																		"example": "my-queue",
																		"type": "string"
																	},
																	"type": {
																		"description": "The class of resource that the binding provides.",
																		"enum": [
																			"queue"
																		],
																		"example": "queue",
																		"type": "string"
																	}
																},
																"required": [
																	"name",
																	"type",
																	"queue_name"
																],
																"type": "object"
															},
															{
																"properties": {
																	"binding": {
																		"description": "A JavaScript variable name for the binding.",
																		"example": "myBinding",
																		"readOnly": true,
																		"type": "string"
																	},
																	"id": {
																		"description": "ID of the D1 database to bind to",
																		"example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
																		"type": "string"
																	},
																	"name": {
																		"description": "The name of the D1 database associated with the 'id' provided.",
																		"example": "prod-database-auth",
																		"type": "string"
																	},
																	"type": {
																		"description": "The class of resource that the binding provides.",
																		"enum": [
																			"d1"
																		],
																		"example": "d1",
																		"type": "string"
																	}
																},
																"required": [
																	"id",
																	"name",
																	"type",
																	"binding"
																],
																"type": "object"
															},
															{
																"properties": {
																	"name": {
																		"description": "A JavaScript variable name for the binding.",
																		"example": "myBinding",
																		"readOnly": true,
																		"type": "string"
																	},
																	"namespace": {
																		"description": "Namespace to bind to",
																		"example": "my-namespace",
																		"type": "string"
																	},
																	"outbound": {
																		"description": "Outbound worker",
																		"properties": {
																			"params": {
																				"description": "Pass information from the Dispatch Worker to the Outbound Worker through the parameters",
																				"items": {
																					"example": "url",
																					"type": "string"
																				},
																				"type": "array"
																			},
																			"worker": {
																				"description": "Outbound worker",
																				"properties": {
																					"environment": {
																						"description": "Environment of the outbound worker",
																						"type": "string"
																					},
																					"service": {
																						"description": "Name of the outbound worker",
																						"type": "string"
																					}
																				},
																				"type": "object"
																			}
																		},
																		"type": "object"
																	},
																	"type": {
																		"description": "The class of resource that the binding provides.",
																		"enum": [
																			"dispatch_namespace"
																		],
																		"example": "dispatch_namespace",
																		"type": "string"
																	}
																},
																"required": [
																	"name",
																	"type",
																	"namespace"
																],
																"type": "object"
															},
															{
																"properties": {
																	"certificate_id": {
																		"description": "ID of the certificate to bind to",
																		"example": "efwu2n6s-q69d-2kr9-184j-4913e8h391k6",
																		"type": "string"
																	},
																	"name": {
																		"description": "A JavaScript variable name for the binding.",
																		"example": "myBinding",
																		"readOnly": true,
																		"type": "string"
																	},
																	"type": {
																		"description": "The class of resource that the binding provides.",
																		"enum": [
																			"mtls_certificate"
																		],
																		"example": "mtls_certificate",
																		"type": "string"
																	}
																},
																"required": [
																	"name",
																	"type",
																	"certificate"
																],
																"type": "object"
															}
														],
														"type": "object"
													},
													"type": "array"
												},
												"compatibility_date": {
													"description": "Opt your Worker into changes after this date",
													"example": "2022-04-05",
													"type": "string"
												},
												"compatibility_flags": {
													"description": "Opt your Worker into specific changes",
													"items": {
														"description": "A flag to opt into a specific change",
														"example": "formdata_parser_supports_files",
														"type": "string"
													},
													"type": "array"
												},
												"limits": {
													"description": "Limits to apply for this Worker.",
													"properties": {
														"cpu_ms": {
															"description": "The amount of CPU time this Worker can use in milliseconds.",
															"example": 50,
															"type": "integer"
														}
													},
													"type": "object"
												},
												"logpush": {
													"description": "Whether Logpush is turned on for the Worker.",
													"example": false,
													"type": "boolean"
												},
												"migrations": {
													"description": "Migrations to apply for Durable Objects associated with this Worker.\n",
													"oneOf": [
														{
															"allOf": [
																{
																	"properties": {
																		"new_tag": {
																			"description": "Tag to set as the latest migration tag.",
																			"example": "v2",
																			"type": "string"
																		},
																		"old_tag": {
																			"description": "Tag used to verify against the latest migration tag for this Worker. If they don't match, the upload is rejected.",
																			"example": "v1",
																			"type": "string"
																		}
																	},
																	"type": "object"
																},
																{
																	"properties": {
																		"deleted_classes": {
																			"description": "A list of classes to delete Durable Object namespaces from.",
																			"items": {
																				"type": "string"
																			},
																			"type": "array"
																		},
																		"new_classes": {
																			"description": "A list of classes to create Durable Object namespaces from.",
																			"items": {
																				"type": "string"
																			},
																			"type": "array"
																		},
																		"renamed_classes": {
																			"description": "A list of classes with Durable Object namespaces that were renamed.",
																			"items": {
																				"properties": {
																					"from": {
																						"type": "string"
																					},
																					"to": {
																						"type": "string"
																					}
																				},
																				"type": "object"
																			},
																			"type": "array"
																		},
																		"transferred_classes": {
																			"description": "A list of transfers for Durable Object namespaces from a different Worker and class to a class defined in this Worker.",
																			"items": {
																				"properties": {
																					"from": {
																						"type": "string"
																					},
																					"from_script": {
																						"type": "string"
																					},
																					"to": {
																						"type": "string"
																					}
																				},
																				"type": "object"
																			},
																			"type": "array"
																		}
																	},
																	"type": "object"
																}
															],
															"description": "A single set of migrations to apply."
														},
														{
															"allOf": [
																{
																	"properties": {
																		"new_tag": {
																			"description": "Tag to set as the latest migration tag.",
																			"example": "v2",
																			"type": "string"
																		},
																		"old_tag": {
																			"description": "Tag used to verify against the latest migration tag for this Worker. If they don't match, the upload is rejected.",
																			"example": "v1",
																			"type": "string"
																		}
																	},
																	"type": "object"
																},
																{
																	"properties": {
																		"steps": {
																			"description": "Migrations to apply in order.",
																			"items": {
																				"properties": {
																					"deleted_classes": {
																						"description": "A list of classes to delete Durable Object namespaces from.",
																						"items": {
																							"type": "string"
																						},
																						"type": "array"
																					},
																					"new_classes": {
																						"description": "A list of classes to create Durable Object namespaces from.",
																						"items": {
																							"type": "string"
																						},
																						"type": "array"
																					},
																					"renamed_classes": {
																						"description": "A list of classes with Durable Object namespaces that were renamed.",
																						"items": {
																							"properties": {
																								"from": {
																									"type": "string"
																								},
																								"to": {
																									"type": "string"
																								}
																							},
																							"type": "object"
																						},
																						"type": "array"
																					},
																					"transferred_classes": {
																						"description": "A list of transfers for Durable Object namespaces from a different Worker and class to a class defined in this Worker.",
																						"items": {
																							"properties": {
																								"from": {
																									"type": "string"
																								},
																								"from_script": {
																									"type": "string"
																								},
																								"to": {
																									"type": "string"
																								}
																							},
																							"type": "object"
																						},
																						"type": "array"
																					}
																				},
																				"type": "object"
																			},
																			"type": "array"
																		}
																	},
																	"type": "object"
																}
															]
														}
													]
												},
												"placement": {
													"properties": {
														"mode": {
															"description": "Enables [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement). Only `\"smart\"` is currently supported",
															"enum": [
																"smart"
															],
															"type": "string"
														}
													},
													"type": "object"
												},
												"tags": {
													"description": "Tags to help you manage your Workers",
													"items": {
														"description": "Tag to help you manage your Worker",
														"example": "my-tag",
														"type": "string"
													},
													"type": "array"
												},
												"tail_consumers": {
													"description": "List of Workers that will consume logs from the attached Worker.",
													"items": {
														"description": "A reference to a script that will consume logs from the attached Worker.",
														"properties": {
															"environment": {
																"description": "Optional environment if the Worker utilizes one.",
																"example": "production",
																"type": "string"
															},
															"namespace": {
																"description": "Optional dispatch namespace the script belongs to.",
																"example": "my-namespace",
																"type": "string"
															},
															"service": {
																"description": "Name of Worker that is to be the consumer.",
																"example": "my-log-consumer",
																"type": "string"
															}
														},
														"required": [
															"service"
														],
														"type": "object"
													},
													"type": "array"
												},
												"usage_model": {
													"description": "Specifies the usage model for the Worker (e.g. 'bundled' or 'unbound').",
													"example": "unbound",
													"pattern": "^(bundled|unbound)$",
													"type": "string"
												}
											},
											"type": "object"
										}
									}
								}
							]
						}
					}
				},
				"description": "Fetch settings"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"example": [],
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"example": [],
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"success": {
									"description": "Whether the API call was successful",
									"enum": [
										true
									],
									"example": true,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages"
							],
							"type": "object"
						}
					}
				},
				"description": "Fetch settings failure"
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Get Settings",
		"tags": [
			"Worker Script"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"com.cloudflare.edge.worker.script.read"
			]
		}
	},
	"GET /accounts/{account_id}/workers/scripts/{script_name}/usage-model": {
		"description": "Fetches the Usage Model for a given Worker.",
		"operationId": "worker-script-fetch-usage-model",
		"parameters": [
			{
				"in": "path",
				"name": "script_name",
				"required": true,
				"schema": {
					"description": "Name of the script, used in URLs and route configuration.",
					"example": "this-is_my_script-01",
					"pattern": "^[a-z0-9_][a-z0-9-_]*$",
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"usage_model": {
													"type": "string"
												}
											},
											"type": "object"
										}
									}
								}
							]
						}
					}
				},
				"description": "Fetch Usage Model response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"properties": {
												"errors": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"messages": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"success": {
													"description": "Whether the API call was successful",
													"enum": [
														true
													],
													"example": true,
													"type": "boolean"
												}
											},
											"required": [
												"success",
												"errors",
												"messages"
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"properties": {
														"usage_model": {
															"type": "string"
														}
													},
													"type": "object"
												}
											}
										}
									]
								},
								{
									"properties": {
										"errors": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": [
												{
													"code": 7003,
													"message": "No route for the URI"
												}
											],
											"minLength": 1
										},
										"messages": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": []
										},
										"result": {
											"enum": [
												null
											],
											"nullable": true,
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												false
											],
											"example": false,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Fetch Usage Model response failure"
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Fetch Usage Model",
		"tags": [
			"Worker Script"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"com.cloudflare.edge.worker.script.read"
			]
		}
	},
	"PATCH /accounts/{account_id}/workers/scripts/{script_name}/script-settings": {
		"description": "Patch script-level settings when using [Worker Versions](https://developers.cloudflare.com/api/operations/worker-versions-list-versions). Includes Logpush and Tail Consumers.",
		"operationId": "worker-script-settings-patch-settings",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "script_name",
				"required": true,
				"schema": {
					"description": "Name of the script, used in URLs and route configuration.",
					"example": "this-is_my_script-01",
					"pattern": "^[a-z0-9_][a-z0-9-_]*$",
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"properties": {
							"logpush": {
								"description": "Whether Logpush is turned on for the Worker.",
								"example": false,
								"type": "boolean"
							},
							"tail_consumers": {
								"description": "List of Workers that will consume logs from the attached Worker.",
								"items": {
									"description": "A reference to a script that will consume logs from the attached Worker.",
									"properties": {
										"environment": {
											"description": "Optional environment if the Worker utilizes one.",
											"example": "production",
											"type": "string"
										},
										"namespace": {
											"description": "Optional dispatch namespace the script belongs to.",
											"example": "my-namespace",
											"type": "string"
										},
										"service": {
											"description": "Name of Worker that is to be the consumer.",
											"example": "my-log-consumer",
											"type": "string"
										}
									},
									"required": [
										"service"
									],
									"type": "object"
								},
								"type": "array"
							}
						},
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"logpush": {
													"description": "Whether Logpush is turned on for the Worker.",
													"example": false,
													"type": "boolean"
												},
												"tail_consumers": {
													"description": "List of Workers that will consume logs from the attached Worker.",
													"items": {
														"description": "A reference to a script that will consume logs from the attached Worker.",
														"properties": {
															"environment": {
																"description": "Optional environment if the Worker utilizes one.",
																"example": "production",
																"type": "string"
															},
															"namespace": {
																"description": "Optional dispatch namespace the script belongs to.",
																"example": "my-namespace",
																"type": "string"
															},
															"service": {
																"description": "Name of Worker that is to be the consumer.",
																"example": "my-log-consumer",
																"type": "string"
															}
														},
														"required": [
															"service"
														],
														"type": "object"
													},
													"type": "array"
												}
											},
											"type": "object"
										}
									}
								}
							]
						}
					}
				},
				"description": "Patch script settings"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"example": [],
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"example": [],
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"success": {
									"description": "Whether the API call was successful",
									"enum": [
										true
									],
									"example": true,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages"
							],
							"type": "object"
						}
					}
				},
				"description": "Patch script settings failure"
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Patch Script Settings",
		"tags": [
			"Worker Script"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"com.cloudflare.edge.worker.script.create"
			]
		}
	},
	"PATCH /accounts/{account_id}/workers/scripts/{script_name}/settings": {
		"description": "Patch metadata or config, such as bindings or usage model",
		"operationId": "worker-script-patch-settings",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "script_name",
				"required": true,
				"schema": {
					"description": "Name of the script, used in URLs and route configuration.",
					"example": "this-is_my_script-01",
					"pattern": "^[a-z0-9_][a-z0-9-_]*$",
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"multipart/form-data": {
					"schema": {
						"properties": {
							"settings": {
								"properties": {
									"bindings": {
										"description": "List of bindings attached to this Worker",
										"items": {
											"description": "A binding to allow the Worker to communicate with resources",
											"oneOf": [
												{
													"properties": {
														"name": {
															"description": "A JavaScript variable name for the binding.",
															"example": "myBinding",
															"readOnly": true,
															"type": "string"
														},
														"namespace_id": {
															"description": "Namespace identifier tag.",
															"example": "0f2ac74b498b48028cb68387c421e279",
															"maxLength": 32,
															"readOnly": true,
															"type": "string"
														},
														"type": {
															"description": "The class of resource that the binding provides.",
															"enum": [
																"kv_namespace"
															],
															"example": "kv_namespace",
															"type": "string"
														}
													},
													"required": [
														"name",
														"type",
														"namespace_id"
													],
													"type": "object"
												},
												{
													"properties": {
														"environment": {
															"description": "Optional environment if the Worker utilizes one.",
															"example": "production",
															"type": "string"
														},
														"name": {
															"description": "A JavaScript variable name for the binding.",
															"example": "myBinding",
															"readOnly": true,
															"type": "string"
														},
														"service": {
															"description": "Name of Worker to bind to",
															"example": "my-worker",
															"type": "string"
														},
														"type": {
															"description": "The class of resource that the binding provides.",
															"enum": [
																"service"
															],
															"example": "service",
															"type": "string"
														}
													},
													"required": [
														"name",
														"type",
														"service",
														"environment"
													],
													"type": "object"
												},
												{
													"properties": {
														"class_name": {
															"description": "The exported class name of the Durable Object",
															"example": "MyDurableObject",
															"type": "string"
														},
														"environment": {
															"description": "The environment of the script_name to bind to",
															"example": "production",
															"type": "string"
														},
														"name": {
															"description": "A JavaScript variable name for the binding.",
															"example": "myBinding",
															"readOnly": true,
															"type": "string"
														},
														"namespace_id": {
															"description": "Namespace identifier tag.",
															"example": "0f2ac74b498b48028cb68387c421e279",
															"maxLength": 32,
															"readOnly": true,
															"type": "string"
														},
														"script_name": {
															"description": "The script where the Durable Object is defined, if it is external to this Worker",
															"example": "my-other-worker",
															"type": "string"
														},
														"type": {
															"description": "The class of resource that the binding provides.",
															"enum": [
																"durable_object_namespace"
															],
															"example": "durable_object_namespace",
															"type": "string"
														}
													},
													"required": [
														"name",
														"type",
														"class_name"
													],
													"type": "object"
												},
												{
													"properties": {
														"bucket_name": {
															"description": "R2 bucket to bind to",
															"example": "my-r2-bucket",
															"type": "string"
														},
														"name": {
															"description": "A JavaScript variable name for the binding.",
															"example": "myBinding",
															"readOnly": true,
															"type": "string"
														},
														"type": {
															"description": "The class of resource that the binding provides.",
															"enum": [
																"r2_bucket"
															],
															"example": "r2_bucket",
															"type": "string"
														}
													},
													"required": [
														"name",
														"type",
														"bucket_name"
													],
													"type": "object"
												},
												{
													"properties": {
														"name": {
															"description": "A JavaScript variable name for the binding.",
															"example": "myBinding",
															"readOnly": true,
															"type": "string"
														},
														"queue_name": {
															"description": "Name of the Queue to bind to",
															"example": "my-queue",
															"type": "string"
														},
														"type": {
															"description": "The class of resource that the binding provides.",
															"enum": [
																"queue"
															],
															"example": "queue",
															"type": "string"
														}
													},
													"required": [
														"name",
														"type",
														"queue_name"
													],
													"type": "object"
												},
												{
													"properties": {
														"binding": {
															"description": "A JavaScript variable name for the binding.",
															"example": "myBinding",
															"readOnly": true,
															"type": "string"
														},
														"id": {
															"description": "ID of the D1 database to bind to",
															"example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
															"type": "string"
														},
														"name": {
															"description": "The name of the D1 database associated with the 'id' provided.",
															"example": "prod-database-auth",
															"type": "string"
														},
														"type": {
															"description": "The class of resource that the binding provides.",
															"enum": [
																"d1"
															],
															"example": "d1",
															"type": "string"
														}
													},
													"required": [
														"id",
														"name",
														"type",
														"binding"
													],
													"type": "object"
												},
												{
													"properties": {
														"name": {
															"description": "A JavaScript variable name for the binding.",
															"example": "myBinding",
															"readOnly": true,
															"type": "string"
														},
														"namespace": {
															"description": "Namespace to bind to",
															"example": "my-namespace",
															"type": "string"
														},
														"outbound": {
															"description": "Outbound worker",
															"properties": {
																"params": {
																	"description": "Pass information from the Dispatch Worker to the Outbound Worker through the parameters",
																	"items": {
																		"example": "url",
																		"type": "string"
																	},
																	"type": "array"
																},
																"worker": {
																	"description": "Outbound worker",
																	"properties": {
																		"environment": {
																			"description": "Environment of the outbound worker",
																			"type": "string"
																		},
																		"service": {
																			"description": "Name of the outbound worker",
																			"type": "string"
																		}
																	},
																	"type": "object"
																}
															},
															"type": "object"
														},
														"type": {
															"description": "The class of resource that the binding provides.",
															"enum": [
																"dispatch_namespace"
															],
															"example": "dispatch_namespace",
															"type": "string"
														}
													},
													"required": [
														"name",
														"type",
														"namespace"
													],
													"type": "object"
												},
												{
													"properties": {
														"certificate_id": {
															"description": "ID of the certificate to bind to",
															"example": "efwu2n6s-q69d-2kr9-184j-4913e8h391k6",
															"type": "string"
														},
														"name": {
															"description": "A JavaScript variable name for the binding.",
															"example": "myBinding",
															"readOnly": true,
															"type": "string"
														},
														"type": {
															"description": "The class of resource that the binding provides.",
															"enum": [
																"mtls_certificate"
															],
															"example": "mtls_certificate",
															"type": "string"
														}
													},
													"required": [
														"name",
														"type",
														"certificate"
													],
													"type": "object"
												}
											],
											"type": "object"
										},
										"type": "array"
									},
									"compatibility_date": {
										"description": "Opt your Worker into changes after this date",
										"example": "2022-04-05",
										"type": "string"
									},
									"compatibility_flags": {
										"description": "Opt your Worker into specific changes",
										"items": {
											"description": "A flag to opt into a specific change",
											"example": "formdata_parser_supports_files",
											"type": "string"
										},
										"type": "array"
									},
									"limits": {
										"description": "Limits to apply for this Worker.",
										"properties": {
											"cpu_ms": {
												"description": "The amount of CPU time this Worker can use in milliseconds.",
												"example": 50,
												"type": "integer"
											}
										},
										"type": "object"
									},
									"logpush": {
										"description": "Whether Logpush is turned on for the Worker.",
										"example": false,
										"type": "boolean"
									},
									"migrations": {
										"description": "Migrations to apply for Durable Objects associated with this Worker.\n",
										"oneOf": [
											{
												"allOf": [
													{
														"properties": {
															"new_tag": {
																"description": "Tag to set as the latest migration tag.",
																"example": "v2",
																"type": "string"
															},
															"old_tag": {
																"description": "Tag used to verify against the latest migration tag for this Worker. If they don't match, the upload is rejected.",
																"example": "v1",
																"type": "string"
															}
														},
														"type": "object"
													},
													{
														"properties": {
															"deleted_classes": {
																"description": "A list of classes to delete Durable Object namespaces from.",
																"items": {
																	"type": "string"
																},
																"type": "array"
															},
															"new_classes": {
																"description": "A list of classes to create Durable Object namespaces from.",
																"items": {
																	"type": "string"
																},
																"type": "array"
															},
															"renamed_classes": {
																"description": "A list of classes with Durable Object namespaces that were renamed.",
																"items": {
																	"properties": {
																		"from": {
																			"type": "string"
																		},
																		"to": {
																			"type": "string"
																		}
																	},
																	"type": "object"
																},
																"type": "array"
															},
															"transferred_classes": {
																"description": "A list of transfers for Durable Object namespaces from a different Worker and class to a class defined in this Worker.",
																"items": {
																	"properties": {
																		"from": {
																			"type": "string"
																		},
																		"from_script": {
																			"type": "string"
																		},
																		"to": {
																			"type": "string"
																		}
																	},
																	"type": "object"
																},
																"type": "array"
															}
														},
														"type": "object"
													}
												],
												"description": "A single set of migrations to apply."
											},
											{
												"allOf": [
													{
														"properties": {
															"new_tag": {
																"description": "Tag to set as the latest migration tag.",
																"example": "v2",
																"type": "string"
															},
															"old_tag": {
																"description": "Tag used to verify against the latest migration tag for this Worker. If they don't match, the upload is rejected.",
																"example": "v1",
																"type": "string"
															}
														},
														"type": "object"
													},
													{
														"properties": {
															"steps": {
																"description": "Migrations to apply in order.",
																"items": {
																	"properties": {
																		"deleted_classes": {
																			"description": "A list of classes to delete Durable Object namespaces from.",
																			"items": {
																				"type": "string"
																			},
																			"type": "array"
																		},
																		"new_classes": {
																			"description": "A list of classes to create Durable Object namespaces from.",
																			"items": {
																				"type": "string"
																			},
																			"type": "array"
																		},
																		"renamed_classes": {
																			"description": "A list of classes with Durable Object namespaces that were renamed.",
																			"items": {
																				"properties": {
																					"from": {
																						"type": "string"
																					},
																					"to": {
																						"type": "string"
																					}
																				},
																				"type": "object"
																			},
																			"type": "array"
																		},
																		"transferred_classes": {
																			"description": "A list of transfers for Durable Object namespaces from a different Worker and class to a class defined in this Worker.",
																			"items": {
																				"properties": {
																					"from": {
																						"type": "string"
																					},
																					"from_script": {
																						"type": "string"
																					},
																					"to": {
																						"type": "string"
																					}
																				},
																				"type": "object"
																			},
																			"type": "array"
																		}
																	},
																	"type": "object"
																},
																"type": "array"
															}
														},
														"type": "object"
													}
												]
											}
										]
									},
									"placement": {
										"properties": {
											"mode": {
												"description": "Enables [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement). Only `\"smart\"` is currently supported",
												"enum": [
													"smart"
												],
												"type": "string"
											}
										},
										"type": "object"
									},
									"tags": {
										"description": "Tags to help you manage your Workers",
										"items": {
											"description": "Tag to help you manage your Worker",
											"example": "my-tag",
											"type": "string"
										},
										"type": "array"
									},
									"tail_consumers": {
										"description": "List of Workers that will consume logs from the attached Worker.",
										"items": {
											"description": "A reference to a script that will consume logs from the attached Worker.",
											"properties": {
												"environment": {
													"description": "Optional environment if the Worker utilizes one.",
													"example": "production",
													"type": "string"
												},
												"namespace": {
													"description": "Optional dispatch namespace the script belongs to.",
													"example": "my-namespace",
													"type": "string"
												},
												"service": {
													"description": "Name of Worker that is to be the consumer.",
													"example": "my-log-consumer",
													"type": "string"
												}
											},
											"required": [
												"service"
											],
											"type": "object"
										},
										"type": "array"
									},
									"usage_model": {
										"description": "Specifies the usage model for the Worker (e.g. 'bundled' or 'unbound').",
										"example": "unbound",
										"pattern": "^(bundled|unbound)$",
										"type": "string"
									}
								},
								"type": "object"
							}
						},
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"bindings": {
													"description": "List of bindings attached to this Worker",
													"items": {
														"description": "A binding to allow the Worker to communicate with resources",
														"oneOf": [
															{
																"properties": {
																	"name": {
																		"description": "A JavaScript variable name for the binding.",
																		"example": "myBinding",
																		"readOnly": true,
																		"type": "string"
																	},
																	"namespace_id": {
																		"description": "Namespace identifier tag.",
																		"example": "0f2ac74b498b48028cb68387c421e279",
																		"maxLength": 32,
																		"readOnly": true,
																		"type": "string"
																	},
																	"type": {
																		"description": "The class of resource that the binding provides.",
																		"enum": [
																			"kv_namespace"
																		],
																		"example": "kv_namespace",
																		"type": "string"
																	}
																},
																"required": [
																	"name",
																	"type",
																	"namespace_id"
																],
																"type": "object"
															},
															{
																"properties": {
																	"environment": {
																		"description": "Optional environment if the Worker utilizes one.",
																		"example": "production",
																		"type": "string"
																	},
																	"name": {
																		"description": "A JavaScript variable name for the binding.",
																		"example": "myBinding",
																		"readOnly": true,
																		"type": "string"
																	},
																	"service": {
																		"description": "Name of Worker to bind to",
																		"example": "my-worker",
																		"type": "string"
																	},
																	"type": {
																		"description": "The class of resource that the binding provides.",
																		"enum": [
																			"service"
																		],
																		"example": "service",
																		"type": "string"
																	}
																},
																"required": [
																	"name",
																	"type",
																	"service",
																	"environment"
																],
																"type": "object"
															},
															{
																"properties": {
																	"class_name": {
																		"description": "The exported class name of the Durable Object",
																		"example": "MyDurableObject",
																		"type": "string"
																	},
																	"environment": {
																		"description": "The environment of the script_name to bind to",
																		"example": "production",
																		"type": "string"
																	},
																	"name": {
																		"description": "A JavaScript variable name for the binding.",
																		"example": "myBinding",
																		"readOnly": true,
																		"type": "string"
																	},
																	"namespace_id": {
																		"description": "Namespace identifier tag.",
																		"example": "0f2ac74b498b48028cb68387c421e279",
																		"maxLength": 32,
																		"readOnly": true,
																		"type": "string"
																	},
																	"script_name": {
																		"description": "The script where the Durable Object is defined, if it is external to this Worker",
																		"example": "my-other-worker",
																		"type": "string"
																	},
																	"type": {
																		"description": "The class of resource that the binding provides.",
																		"enum": [
																			"durable_object_namespace"
																		],
																		"example": "durable_object_namespace",
																		"type": "string"
																	}
																},
																"required": [
																	"name",
																	"type",
																	"class_name"
																],
																"type": "object"
															},
															{
																"properties": {
																	"bucket_name": {
																		"description": "R2 bucket to bind to",
																		"example": "my-r2-bucket",
																		"type": "string"
																	},
																	"name": {
																		"description": "A JavaScript variable name for the binding.",
																		"example": "myBinding",
																		"readOnly": true,
																		"type": "string"
																	},
																	"type": {
																		"description": "The class of resource that the binding provides.",
																		"enum": [
																			"r2_bucket"
																		],
																		"example": "r2_bucket",
																		"type": "string"
																	}
																},
																"required": [
																	"name",
																	"type",
																	"bucket_name"
																],
																"type": "object"
															},
															{
																"properties": {
																	"name": {
																		"description": "A JavaScript variable name for the binding.",
																		"example": "myBinding",
																		"readOnly": true,
																		"type": "string"
																	},
																	"queue_name": {
																		"description": "Name of the Queue to bind to",
																		"example": "my-queue",
																		"type": "string"
																	},
																	"type": {
																		"description": "The class of resource that the binding provides.",
																		"enum": [
																			"queue"
																		],
																		"example": "queue",
																		"type": "string"
																	}
																},
																"required": [
																	"name",
																	"type",
																	"queue_name"
																],
																"type": "object"
															},
															{
																"properties": {
																	"binding": {
																		"description": "A JavaScript variable name for the binding.",
																		"example": "myBinding",
																		"readOnly": true,
																		"type": "string"
																	},
																	"id": {
																		"description": "ID of the D1 database to bind to",
																		"example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
																		"type": "string"
																	},
																	"name": {
																		"description": "The name of the D1 database associated with the 'id' provided.",
																		"example": "prod-database-auth",
																		"type": "string"
																	},
																	"type": {
																		"description": "The class of resource that the binding provides.",
																		"enum": [
																			"d1"
																		],
																		"example": "d1",
																		"type": "string"
																	}
																},
																"required": [
																	"id",
																	"name",
																	"type",
																	"binding"
																],
																"type": "object"
															},
															{
																"properties": {
																	"name": {
																		"description": "A JavaScript variable name for the binding.",
																		"example": "myBinding",
																		"readOnly": true,
																		"type": "string"
																	},
																	"namespace": {
																		"description": "Namespace to bind to",
																		"example": "my-namespace",
																		"type": "string"
																	},
																	"outbound": {
																		"description": "Outbound worker",
																		"properties": {
																			"params": {
																				"description": "Pass information from the Dispatch Worker to the Outbound Worker through the parameters",
																				"items": {
																					"example": "url",
																					"type": "string"
																				},
																				"type": "array"
																			},
																			"worker": {
																				"description": "Outbound worker",
																				"properties": {
																					"environment": {
																						"description": "Environment of the outbound worker",
																						"type": "string"
																					},
																					"service": {
																						"description": "Name of the outbound worker",
																						"type": "string"
																					}
																				},
																				"type": "object"
																			}
																		},
																		"type": "object"
																	},
																	"type": {
																		"description": "The class of resource that the binding provides.",
																		"enum": [
																			"dispatch_namespace"
																		],
																		"example": "dispatch_namespace",
																		"type": "string"
																	}
																},
																"required": [
																	"name",
																	"type",
																	"namespace"
																],
																"type": "object"
															},
															{
																"properties": {
																	"certificate_id": {
																		"description": "ID of the certificate to bind to",
																		"example": "efwu2n6s-q69d-2kr9-184j-4913e8h391k6",
																		"type": "string"
																	},
																	"name": {
																		"description": "A JavaScript variable name for the binding.",
																		"example": "myBinding",
																		"readOnly": true,
																		"type": "string"
																	},
																	"type": {
																		"description": "The class of resource that the binding provides.",
																		"enum": [
																			"mtls_certificate"
																		],
																		"example": "mtls_certificate",
																		"type": "string"
																	}
																},
																"required": [
																	"name",
																	"type",
																	"certificate"
																],
																"type": "object"
															}
														],
														"type": "object"
													},
													"type": "array"
												},
												"compatibility_date": {
													"description": "Opt your Worker into changes after this date",
													"example": "2022-04-05",
													"type": "string"
												},
												"compatibility_flags": {
													"description": "Opt your Worker into specific changes",
													"items": {
														"description": "A flag to opt into a specific change",
														"example": "formdata_parser_supports_files",
														"type": "string"
													},
													"type": "array"
												},
												"limits": {
													"description": "Limits to apply for this Worker.",
													"properties": {
														"cpu_ms": {
															"description": "The amount of CPU time this Worker can use in milliseconds.",
															"example": 50,
															"type": "integer"
														}
													},
													"type": "object"
												},
												"logpush": {
													"description": "Whether Logpush is turned on for the Worker.",
													"example": false,
													"type": "boolean"
												},
												"migrations": {
													"description": "Migrations to apply for Durable Objects associated with this Worker.\n",
													"oneOf": [
														{
															"allOf": [
																{
																	"properties": {
																		"new_tag": {
																			"description": "Tag to set as the latest migration tag.",
																			"example": "v2",
																			"type": "string"
																		},
																		"old_tag": {
																			"description": "Tag used to verify against the latest migration tag for this Worker. If they don't match, the upload is rejected.",
																			"example": "v1",
																			"type": "string"
																		}
																	},
																	"type": "object"
																},
																{
																	"properties": {
																		"deleted_classes": {
																			"description": "A list of classes to delete Durable Object namespaces from.",
																			"items": {
																				"type": "string"
																			},
																			"type": "array"
																		},
																		"new_classes": {
																			"description": "A list of classes to create Durable Object namespaces from.",
																			"items": {
																				"type": "string"
																			},
																			"type": "array"
																		},
																		"renamed_classes": {
																			"description": "A list of classes with Durable Object namespaces that were renamed.",
																			"items": {
																				"properties": {
																					"from": {
																						"type": "string"
																					},
																					"to": {
																						"type": "string"
																					}
																				},
																				"type": "object"
																			},
																			"type": "array"
																		},
																		"transferred_classes": {
																			"description": "A list of transfers for Durable Object namespaces from a different Worker and class to a class defined in this Worker.",
																			"items": {
																				"properties": {
																					"from": {
																						"type": "string"
																					},
																					"from_script": {
																						"type": "string"
																					},
																					"to": {
																						"type": "string"
																					}
																				},
																				"type": "object"
																			},
																			"type": "array"
																		}
																	},
																	"type": "object"
																}
															],
															"description": "A single set of migrations to apply."
														},
														{
															"allOf": [
																{
																	"properties": {
																		"new_tag": {
																			"description": "Tag to set as the latest migration tag.",
																			"example": "v2",
																			"type": "string"
																		},
																		"old_tag": {
																			"description": "Tag used to verify against the latest migration tag for this Worker. If they don't match, the upload is rejected.",
																			"example": "v1",
																			"type": "string"
																		}
																	},
																	"type": "object"
																},
																{
																	"properties": {
																		"steps": {
																			"description": "Migrations to apply in order.",
																			"items": {
																				"properties": {
																					"deleted_classes": {
																						"description": "A list of classes to delete Durable Object namespaces from.",
																						"items": {
																							"type": "string"
																						},
																						"type": "array"
																					},
																					"new_classes": {
																						"description": "A list of classes to create Durable Object namespaces from.",
																						"items": {
																							"type": "string"
																						},
																						"type": "array"
																					},
																					"renamed_classes": {
																						"description": "A list of classes with Durable Object namespaces that were renamed.",
																						"items": {
																							"properties": {
																								"from": {
																									"type": "string"
																								},
																								"to": {
																									"type": "string"
																								}
																							},
																							"type": "object"
																						},
																						"type": "array"
																					},
																					"transferred_classes": {
																						"description": "A list of transfers for Durable Object namespaces from a different Worker and class to a class defined in this Worker.",
																						"items": {
																							"properties": {
																								"from": {
																									"type": "string"
																								},
																								"from_script": {
																									"type": "string"
																								},
																								"to": {
																									"type": "string"
																								}
																							},
																							"type": "object"
																						},
																						"type": "array"
																					}
																				},
																				"type": "object"
																			},
																			"type": "array"
																		}
																	},
																	"type": "object"
																}
															]
														}
													]
												},
												"placement": {
													"properties": {
														"mode": {
															"description": "Enables [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement). Only `\"smart\"` is currently supported",
															"enum": [
																"smart"
															],
															"type": "string"
														}
													},
													"type": "object"
												},
												"tags": {
													"description": "Tags to help you manage your Workers",
													"items": {
														"description": "Tag to help you manage your Worker",
														"example": "my-tag",
														"type": "string"
													},
													"type": "array"
												},
												"tail_consumers": {
													"description": "List of Workers that will consume logs from the attached Worker.",
													"items": {
														"description": "A reference to a script that will consume logs from the attached Worker.",
														"properties": {
															"environment": {
																"description": "Optional environment if the Worker utilizes one.",
																"example": "production",
																"type": "string"
															},
															"namespace": {
																"description": "Optional dispatch namespace the script belongs to.",
																"example": "my-namespace",
																"type": "string"
															},
															"service": {
																"description": "Name of Worker that is to be the consumer.",
																"example": "my-log-consumer",
																"type": "string"
															}
														},
														"required": [
															"service"
														],
														"type": "object"
													},
													"type": "array"
												},
												"usage_model": {
													"description": "Specifies the usage model for the Worker (e.g. 'bundled' or 'unbound').",
													"example": "unbound",
													"pattern": "^(bundled|unbound)$",
													"type": "string"
												}
											},
											"type": "object"
										}
									}
								}
							]
						}
					}
				},
				"description": "Patch settings"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"example": [],
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"example": [],
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"success": {
									"description": "Whether the API call was successful",
									"enum": [
										true
									],
									"example": true,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages"
							],
							"type": "object"
						}
					}
				},
				"description": "Patch settings failure"
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Patch Settings",
		"tags": [
			"Worker Script"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"com.cloudflare.edge.worker.script.create"
			]
		}
	},
	"PUT /accounts/{account_id}/workers/scripts/{script_name}": {
		"description": "Upload a worker module. You can find more about the multipart metadata on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/.",
		"operationId": "worker-script-upload-worker-module",
		"parameters": [
			{
				"in": "path",
				"name": "script_name",
				"required": true,
				"schema": {
					"description": "Name of the script, used in URLs and route configuration.",
					"example": "this-is_my_script-01",
					"pattern": "^[a-z0-9_][a-z0-9-_]*$",
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"description": "Rollback to provided deployment based on deployment ID. Request body will only parse a \"message\" part. You can learn more about deployments [here](https://developers.cloudflare.com/workers/platform/deployments/).",
				"in": "query",
				"name": "rollback_to",
				"schema": {
					"description": "API Resource UUID tag.",
					"example": "f174e90a-fafe-4643-bbbc-4a0ed4fc8415",
					"maxLength": 36,
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/javascript": {
					"schema": {
						"description": "Raw javascript content comprising a Worker. Must be in service worker syntax.",
						"example": "addEventListener('fetch', (event) => event.respondWith(new Response('OK')))",
						"type": "string"
					}
				},
				"multipart/form-data": {
					"encoding": {
						"<any part name>": {
							"contentType": "application/javascript+module, text/javascript+module, application/javascript, text/javascript, application/wasm, text/plain, application/octet-stream, application/source-map"
						}
					},
					"schema": {
						"oneOf": [
							{
								"properties": {
									"<any part name>": {
										"description": "A module comprising a Worker script, often a javascript file. Multiple modules may be provided as separate named parts, but at least one module must be present and referenced in the metadata as `main_module` or `body_part` by part name. Source maps may also be included using the `application/source-map` content type.",
										"items": {
											"format": "binary",
											"type": "string"
										},
										"type": "array"
									},
									"metadata": {
										"description": "JSON encoded metadata about the uploaded parts and Worker configuration.",
										"properties": {
											"bindings": {
												"description": "List of bindings available to the worker.",
												"example": [
													{
														"name": "MY_ENV_VAR",
														"text": "my_data",
														"type": "plain_text"
													}
												],
												"items": {
													"type": "object"
												},
												"type": "array"
											},
											"body_part": {
												"description": "Name of the part in the multipart request that contains the script (e.g. the file adding a listener to the `fetch` event). Indicates a `service worker syntax` Worker.",
												"example": "worker.js",
												"type": "string"
											},
											"compatibility_date": {
												"description": "Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.",
												"example": "2023-07-25",
												"type": "string"
											},
											"compatibility_flags": {
												"description": "Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibility_date`.",
												"items": {
													"type": "string"
												},
												"type": "array"
											},
											"keep_bindings": {
												"description": "List of binding types to keep from previous_upload.",
												"items": {
													"type": "string"
												},
												"type": "array"
											},
											"logpush": {
												"description": "Whether Logpush is turned on for the Worker.",
												"example": false,
												"type": "boolean"
											},
											"main_module": {
												"description": "Name of the part in the multipart request that contains the main module (e.g. the file exporting a `fetch` handler). Indicates a `module syntax` Worker.",
												"example": "worker.js",
												"type": "string"
											},
											"migrations": {
												"description": "Migrations to apply for Durable Objects associated with this Worker.",
												"oneOf": [
													{
														"allOf": [
															{
																"properties": {
																	"new_tag": {
																		"description": "Tag to set as the latest migration tag.",
																		"example": "v2",
																		"type": "string"
																	},
																	"old_tag": {
																		"description": "Tag used to verify against the latest migration tag for this Worker. If they don't match, the upload is rejected.",
																		"example": "v1",
																		"type": "string"
																	}
																},
																"type": "object"
															},
															{
																"properties": {
																	"deleted_classes": {
																		"description": "A list of classes to delete Durable Object namespaces from.",
																		"items": {
																			"type": "string"
																		},
																		"type": "array"
																	},
																	"new_classes": {
																		"description": "A list of classes to create Durable Object namespaces from.",
																		"items": {
																			"type": "string"
																		},
																		"type": "array"
																	},
																	"renamed_classes": {
																		"description": "A list of classes with Durable Object namespaces that were renamed.",
																		"items": {
																			"properties": {
																				"from": {
																					"type": "string"
																				},
																				"to": {
																					"type": "string"
																				}
																			},
																			"type": "object"
																		},
																		"type": "array"
																	},
																	"transferred_classes": {
																		"description": "A list of transfers for Durable Object namespaces from a different Worker and class to a class defined in this Worker.",
																		"items": {
																			"properties": {
																				"from": {
																					"type": "string"
																				},
																				"from_script": {
																					"type": "string"
																				},
																				"to": {
																					"type": "string"
																				}
																			},
																			"type": "object"
																		},
																		"type": "array"
																	}
																},
																"type": "object"
															}
														],
														"description": "A single set of migrations to apply."
													},
													{
														"allOf": [
															{
																"properties": {
																	"new_tag": {
																		"description": "Tag to set as the latest migration tag.",
																		"example": "v2",
																		"type": "string"
																	},
																	"old_tag": {
																		"description": "Tag used to verify against the latest migration tag for this Worker. If they don't match, the upload is rejected.",
																		"example": "v1",
																		"type": "string"
																	}
																},
																"type": "object"
															},
															{
																"properties": {
																	"steps": {
																		"description": "Migrations to apply in order.",
																		"items": {
																			"properties": {
																				"deleted_classes": {
																					"description": "A list of classes to delete Durable Object namespaces from.",
																					"items": {
																						"type": "string"
																					},
																					"type": "array"
																				},
																				"new_classes": {
																					"description": "A list of classes to create Durable Object namespaces from.",
																					"items": {
																						"type": "string"
																					},
																					"type": "array"
																				},
																				"renamed_classes": {
																					"description": "A list of classes with Durable Object namespaces that were renamed.",
																					"items": {
																						"properties": {
																							"from": {
																								"type": "string"
																							},
																							"to": {
																								"type": "string"
																							}
																						},
																						"type": "object"
																					},
																					"type": "array"
																				},
																				"transferred_classes": {
																					"description": "A list of transfers for Durable Object namespaces from a different Worker and class to a class defined in this Worker.",
																					"items": {
																						"properties": {
																							"from": {
																								"type": "string"
																							},
																							"from_script": {
																								"type": "string"
																							},
																							"to": {
																								"type": "string"
																							}
																						},
																						"type": "object"
																					},
																					"type": "array"
																				}
																			},
																			"type": "object"
																		},
																		"type": "array"
																	}
																},
																"type": "object"
															}
														]
													}
												]
											},
											"placement": {
												"properties": {
													"mode": {
														"description": "Enables [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement). Only `\"smart\"` is currently supported",
														"enum": [
															"smart"
														],
														"type": "string"
													}
												},
												"type": "object"
											},
											"tags": {
												"description": "List of strings to use as tags for this Worker",
												"items": {
													"type": "string"
												},
												"type": "array"
											},
											"tail_consumers": {
												"description": "List of Workers that will consume logs from the attached Worker.",
												"items": {
													"description": "A reference to a script that will consume logs from the attached Worker.",
													"properties": {
														"environment": {
															"description": "Optional environment if the Worker utilizes one.",
															"example": "production",
															"type": "string"
														},
														"namespace": {
															"description": "Optional dispatch namespace the script belongs to.",
															"example": "my-namespace",
															"type": "string"
														},
														"service": {
															"description": "Name of Worker that is to be the consumer.",
															"example": "my-log-consumer",
															"type": "string"
														}
													},
													"required": [
														"service"
													],
													"type": "object"
												},
												"type": "array"
											},
											"usage_model": {
												"description": "Usage model to apply to invocations.",
												"enum": [
													"bundled",
													"unbound"
												],
												"type": "string"
											},
											"version_tags": {
												"description": "Key-value pairs to use as tags for this version of this Worker",
												"type": "object"
											}
										},
										"type": "object"
									}
								},
								"type": "object"
							},
							{
								"properties": {
									"message": {
										"description": "Rollback message to be associated with this deployment. Only parsed when query param `\"rollback_to\"` is present.",
										"type": "string"
									}
								},
								"type": "object"
							}
						]
					}
				},
				"text/javascript": {
					"schema": {
						"description": "Raw javascript content comprising a Worker. Must be in service worker syntax.",
						"example": "addEventListener('fetch', (event) => event.respondWith(new Response('OK')))",
						"type": "string"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"allOf": [
												{
													"properties": {
														"errors": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"messages": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"success": {
															"description": "Whether the API call was successful",
															"enum": [
																true
															],
															"example": true,
															"type": "boolean"
														}
													},
													"required": [
														"success",
														"errors",
														"messages"
													],
													"type": "object"
												}
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"allOf": [
														{
															"properties": {
																"created_on": {
																	"description": "When the script was created.",
																	"example": "2017-01-01T00:00:00Z",
																	"format": "date-time",
																	"readOnly": true,
																	"type": "string"
																},
																"etag": {
																	"description": "Hashed script content, can be used in a If-None-Match header when updating.",
																	"example": "ea95132c15732412d22c1476fa83f27a",
																	"readOnly": true,
																	"type": "string"
																},
																"id": {
																	"description": "The id of the script in the Workers system. Usually the script name.",
																	"example": "my-workers-script",
																	"readOnly": true,
																	"type": "string"
																},
																"logpush": {
																	"description": "Whether Logpush is turned on for the Worker.",
																	"example": false,
																	"type": "boolean"
																},
																"modified_on": {
																	"description": "When the script was last modified.",
																	"example": "2017-01-01T00:00:00Z",
																	"format": "date-time",
																	"readOnly": true,
																	"type": "string"
																},
																"placement_mode": {
																	"description": "Specifies the placement mode for the Worker (e.g. 'smart').",
																	"example": "smart",
																	"type": "string"
																},
																"tail_consumers": {
																	"description": "List of Workers that will consume logs from the attached Worker.",
																	"items": {
																		"description": "A reference to a script that will consume logs from the attached Worker.",
																		"properties": {
																			"environment": {
																				"description": "Optional environment if the Worker utilizes one.",
																				"example": "production",
																				"type": "string"
																			},
																			"namespace": {
																				"description": "Optional dispatch namespace the script belongs to.",
																				"example": "my-namespace",
																				"type": "string"
																			},
																			"service": {
																				"description": "Name of Worker that is to be the consumer.",
																				"example": "my-log-consumer",
																				"type": "string"
																			}
																		},
																		"required": [
																			"service"
																		],
																		"type": "object"
																	},
																	"type": "array"
																},
																"usage_model": {
																	"description": "Specifies the usage model for the Worker (e.g. 'bundled' or 'unbound').",
																	"example": "unbound",
																	"pattern": "^(bundled|unbound)$",
																	"type": "string"
																}
															}
														},
														{
															"properties": {
																"startup_time_ms": {
																	"example": 10,
																	"type": "integer"
																}
															}
														}
													]
												}
											},
											"x-cfLinkErrors": {
												"10001": "Unsupported or unexpected Content Type",
												"10002": "Unexpected internal server error",
												"10003": "Missing required URL parameter",
												"10004": "Malformed URL parameter",
												"10006": "Unparseable script body",
												"10007": "Resource not found (similar to HTTP 404)",
												"10014": "Internal error while attempting authorization checks",
												"10015": "The current account is not authorized to use workers",
												"10018": "Attempted to update a script where the e-tag does not match",
												"10021": "Script content failed validation checks, but was otherwise parseable",
												"10023": "Unauthorized access attempt",
												"10027": "Script body was too large",
												"10075": "Requires a Workers Paid plan"
											}
										}
									]
								},
								{
									"example": {
										"errors": [],
										"messages": [],
										"result": {
											"created_on": "2022-05-05T05:15:11.602148Z",
											"etag": "777f24a43bef5f69174aa69ceaf1dea67968d510a31d1vw3e49d34a0187c06d1",
											"handlers": [
												"fetch"
											],
											"id": "this-is_my_script-01",
											"logpush": false,
											"modified_on": "2022-05-20T19:02:56.446492Z",
											"placement_mode": "smart",
											"startup_time_ms": 10,
											"tail_consumers": [
												{
													"environment": "production",
													"service": "my-log-consumer"
												}
											],
											"usage_model": "bundled"
										},
										"success": true
									}
								}
							]
						}
					}
				},
				"description": "Upload Worker Module response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"example": {
										"errors": [],
										"messages": [],
										"result": {
											"created_on": "2022-05-05T05:15:11.602148Z",
											"etag": "777f24a43bef5f69174aa69ceaf1dea67968d510a31d1vw3e49d34a0187c06d1",
											"handlers": [
												"fetch"
											],
											"id": "this-is_my_script-01",
											"logpush": false,
											"modified_on": "2022-05-20T19:02:56.446492Z",
											"tail_consumers": [
												{
													"environment": "production",
													"service": "my-log-consumer"
												}
											],
											"usage_model": "bundled"
										},
										"success": true
									}
								},
								{
									"properties": {
										"errors": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": [
												{
													"code": 7003,
													"message": "No route for the URI"
												}
											],
											"minLength": 1
										},
										"messages": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": []
										},
										"result": {
											"enum": [
												null
											],
											"nullable": true,
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												false
											],
											"example": false,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Upload Worker Module response failure"
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Upload Worker Module",
		"tags": [
			"Worker Script"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"com.cloudflare.edge.worker.script.create"
			]
		}
	},
	"PUT /accounts/{account_id}/workers/scripts/{script_name}/content": {
		"description": "Put script content without touching config or metadata",
		"operationId": "worker-script-put-content",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "script_name",
				"required": true,
				"schema": {
					"description": "Name of the script, used in URLs and route configuration.",
					"example": "this-is_my_script-01",
					"pattern": "^[a-z0-9_][a-z0-9-_]*$",
					"type": "string"
				}
			},
			{
				"description": "The multipart name of a script upload part containing script content in service worker format. Alternative to including in a metadata part.",
				"in": "header",
				"name": "CF-WORKER-BODY-PART",
				"schema": {
					"type": "string"
				}
			},
			{
				"description": "The multipart name of a script upload part containing script content in es module format. Alternative to including in a metadata part.",
				"in": "header",
				"name": "CF-WORKER-MAIN-MODULE-PART",
				"schema": {
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"multipart/form-data": {
					"encoding": {
						"<any part name>": {
							"contentType": "application/javascript+module, text/javascript+module, application/javascript, text/javascript, application/wasm, text/plain, application/octet-stream, application/source-map"
						}
					},
					"schema": {
						"properties": {
							"<any part name>": {
								"description": "A module comprising a Worker script, often a javascript file. Multiple modules may be provided as separate named parts, but at least one module must be present. This should be referenced either in the metadata as `main_module` (esm)/`body_part` (service worker) or as a header `CF-WORKER-MAIN-MODULE-PART` (esm) /`CF-WORKER-BODY-PART` (service worker) by part name. Source maps may also be included using the `application/source-map` content type.",
								"items": {
									"format": "binary",
									"type": "string"
								},
								"type": "array"
							},
							"metadata": {
								"description": "JSON encoded metadata about the uploaded parts and Worker configuration.",
								"properties": {
									"body_part": {
										"description": "Name of the part in the multipart request that contains the script (e.g. the file adding a listener to the `fetch` event). Indicates a `service worker syntax` Worker.",
										"example": "worker.js",
										"type": "string"
									},
									"main_module": {
										"description": "Name of the part in the multipart request that contains the main module (e.g. the file exporting a `fetch` handler). Indicates a `module syntax` Worker.",
										"example": "worker.js",
										"type": "string"
									}
								},
								"type": "object"
							}
						},
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"properties": {
												"errors": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"messages": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"success": {
													"description": "Whether the API call was successful",
													"enum": [
														true
													],
													"example": true,
													"type": "boolean"
												}
											},
											"required": [
												"success",
												"errors",
												"messages"
											],
											"type": "object"
										}
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"created_on": {
													"description": "When the script was created.",
													"example": "2017-01-01T00:00:00Z",
													"format": "date-time",
													"readOnly": true,
													"type": "string"
												},
												"etag": {
													"description": "Hashed script content, can be used in a If-None-Match header when updating.",
													"example": "ea95132c15732412d22c1476fa83f27a",
													"readOnly": true,
													"type": "string"
												},
												"id": {
													"description": "The id of the script in the Workers system. Usually the script name.",
													"example": "my-workers-script",
													"readOnly": true,
													"type": "string"
												},
												"logpush": {
													"description": "Whether Logpush is turned on for the Worker.",
													"example": false,
													"type": "boolean"
												},
												"modified_on": {
													"description": "When the script was last modified.",
													"example": "2017-01-01T00:00:00Z",
													"format": "date-time",
													"readOnly": true,
													"type": "string"
												},
												"placement_mode": {
													"description": "Specifies the placement mode for the Worker (e.g. 'smart').",
													"example": "smart",
													"type": "string"
												},
												"tail_consumers": {
													"description": "List of Workers that will consume logs from the attached Worker.",
													"items": {
														"description": "A reference to a script that will consume logs from the attached Worker.",
														"properties": {
															"environment": {
																"description": "Optional environment if the Worker utilizes one.",
																"example": "production",
																"type": "string"
															},
															"namespace": {
																"description": "Optional dispatch namespace the script belongs to.",
																"example": "my-namespace",
																"type": "string"
															},
															"service": {
																"description": "Name of Worker that is to be the consumer.",
																"example": "my-log-consumer",
																"type": "string"
															}
														},
														"required": [
															"service"
														],
														"type": "object"
													},
													"type": "array"
												},
												"usage_model": {
													"description": "Specifies the usage model for the Worker (e.g. 'bundled' or 'unbound').",
													"example": "unbound",
													"pattern": "^(bundled|unbound)$",
													"type": "string"
												}
											}
										}
									},
									"x-cfLinkErrors": {
										"10001": "Unsupported or unexpected Content Type",
										"10002": "Unexpected internal server error",
										"10003": "Missing required URL parameter",
										"10004": "Malformed URL parameter",
										"10006": "Unparseable script body",
										"10007": "Resource not found (similar to HTTP 404)",
										"10014": "Internal error while attempting authorization checks",
										"10015": "The current account is not authorized to use workers",
										"10018": "Attempted to update a script where the e-tag does not match",
										"10021": "Script content failed validation checks, but was otherwise parseable",
										"10023": "Unauthorized access attempt",
										"10027": "Script body was too large",
										"10075": "Requires a Workers Paid plan"
									}
								}
							]
						}
					}
				},
				"description": "Put script content"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Put script content failure"
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Put script content",
		"tags": [
			"Worker Script"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"com.cloudflare.edge.worker.script.create"
			]
		}
	},
	"PUT /accounts/{account_id}/workers/scripts/{script_name}/usage-model": {
		"description": "Updates the Usage Model for a given Worker. Requires a Workers Paid subscription.",
		"operationId": "worker-script-update-usage-model",
		"parameters": [
			{
				"in": "path",
				"name": "script_name",
				"required": true,
				"schema": {
					"description": "Name of the script, used in URLs and route configuration.",
					"example": "this-is_my_script-01",
					"pattern": "^[a-z0-9_][a-z0-9-_]*$",
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"properties": {
							"usage_model": {
								"type": "string"
							}
						},
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"usage_model": {
													"type": "string"
												}
											},
											"type": "object"
										}
									}
								}
							]
						}
					}
				},
				"description": "Update Usage Model response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"properties": {
												"errors": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"messages": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"success": {
													"description": "Whether the API call was successful",
													"enum": [
														true
													],
													"example": true,
													"type": "boolean"
												}
											},
											"required": [
												"success",
												"errors",
												"messages"
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"properties": {
														"usage_model": {
															"type": "string"
														}
													},
													"type": "object"
												}
											}
										}
									]
								},
								{
									"properties": {
										"errors": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": [
												{
													"code": 7003,
													"message": "No route for the URI"
												}
											],
											"minLength": 1
										},
										"messages": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": []
										},
										"result": {
											"enum": [
												null
											],
											"nullable": true,
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												false
											],
											"example": false,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Update Usage Model response failure"
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Update Usage Model",
		"tags": [
			"Worker Script"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"com.cloudflare.edge.worker.script.create"
			]
		}
	}
}