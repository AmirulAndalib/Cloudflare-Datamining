{
	"DELETE /accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}": {
		"description": "Delete a Workers for Platforms namespace.",
		"operationId": "namespace-worker-delete-namespace",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "dispatch_namespace",
				"required": true,
				"schema": {
					"description": "Name of the Workers for Platforms dispatch namespace.",
					"example": "my-dispatch-namespace",
					"pattern": "^.+$",
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"enum": [
												null
											],
											"nullable": true,
											"type": "object"
										}
									}
								}
							]
						}
					}
				},
				"description": "Delete a Workers for Platforms namespace."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"example": [],
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"example": [],
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"success": {
									"description": "Whether the API call was successful",
									"enum": [
										true
									],
									"example": true,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages"
							],
							"type": "object"
						}
					}
				},
				"description": "Failure to delete Workers for Platforms namespace."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Delete dispatch namespace",
		"tags": [
			"Workers for Platforms"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"com.cloudflare.edge.worker.script.delete"
			]
		}
	},
	"DELETE /accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}/scripts/{script_name}": {
		"description": "Delete a worker from a Workers for Platforms namespace. This call has no response body on a successful delete.",
		"operationId": "namespace-worker-script-delete-worker",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "dispatch_namespace",
				"required": true,
				"schema": {
					"description": "Name of the Workers for Platforms dispatch namespace.",
					"example": "my-dispatch-namespace",
					"pattern": "^.+$",
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "script_name",
				"required": true,
				"schema": {
					"description": "Name of the script, used in URLs and route configuration.",
					"example": "this-is_my_script-01",
					"pattern": "^[a-z0-9_][a-z0-9-_]*$",
					"type": "string"
				}
			},
			{
				"description": "If set to true, delete will not be stopped by associated service binding, durable object, or other binding. Any of these associated bindings/durable objects will be deleted along with the script.",
				"in": "query",
				"name": "force",
				"schema": {
					"type": "boolean"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {}
				},
				"description": "Delete Worker response"
			},
			"4XX": {
				"content": {
					"application/json": {}
				},
				"description": "Delete Worker response failure"
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Delete Worker",
		"tags": [
			"Workers for Platforms"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"com.cloudflare.edge.worker.script.delete"
			]
		}
	},
	"DELETE /accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}/scripts/{script_name}/tags/{tag}": {
		"description": "Delete script tag for a script uploaded to a Workers for Platforms namespace.",
		"operationId": "namespace-worker-delete-script-tag",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "dispatch_namespace",
				"required": true,
				"schema": {
					"description": "Name of the Workers for Platforms dispatch namespace.",
					"example": "my-dispatch-namespace",
					"pattern": "^.+$",
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "script_name",
				"required": true,
				"schema": {
					"description": "Name of the script, used in URLs and route configuration.",
					"example": "this-is_my_script-01",
					"pattern": "^[a-z0-9_][a-z0-9-_]*$",
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "tag",
				"required": true,
				"schema": {
					"description": "Tag to help you manage your Worker",
					"example": "my-tag",
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"enum": [
												null
											],
											"nullable": true,
											"type": "object"
										}
									}
								}
							]
						}
					}
				},
				"description": "Delete script tag"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"example": [],
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"example": [],
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"success": {
									"description": "Whether the API call was successful",
									"enum": [
										true
									],
									"example": true,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages"
							],
							"type": "object"
						}
					}
				},
				"description": "Delete script tag failure"
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Delete Script Tag",
		"tags": [
			"Workers for Platforms"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"com.cloudflare.edge.worker.script.edit"
			]
		}
	},
	"GET /accounts/{account_id}/workers/dispatch/namespaces": {
		"description": "Fetch a list of Workers for Platforms namespaces.",
		"operationId": "namespace-worker-list",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"items": {
												"properties": {
													"created_by": {
														"description": "Identifier",
														"example": "023e105f4ecef8ad9ca31a8372d0c353",
														"maxLength": 32,
														"type": "string"
													},
													"created_on": {
														"description": "When the script was created.",
														"example": "2017-01-01T00:00:00Z",
														"format": "date-time",
														"readOnly": true,
														"type": "string"
													},
													"modified_by": {
														"description": "Identifier",
														"example": "023e105f4ecef8ad9ca31a8372d0c353",
														"maxLength": 32,
														"type": "string"
													},
													"modified_on": {
														"description": "When the script was last modified.",
														"example": "2017-01-01T00:00:00Z",
														"format": "date-time",
														"readOnly": true,
														"type": "string"
													},
													"namespace_id": {
														"description": "API Resource UUID tag.",
														"example": "f174e90a-fafe-4643-bbbc-4a0ed4fc8415",
														"maxLength": 36,
														"type": "string"
													},
													"namespace_name": {
														"description": "Name of the Workers for Platforms dispatch namespace.",
														"example": "my-dispatch-namespace",
														"pattern": "^.+$",
														"type": "string"
													},
													"script_count": {
														"description": "The current number of scripts in this Dispatch Namespace",
														"example": 800,
														"type": "integer"
													}
												}
											},
											"type": "array"
										}
									}
								}
							]
						}
					}
				},
				"description": "Fetch a list of Workers for Platforms namespaces."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"example": [],
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"example": [],
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"success": {
									"description": "Whether the API call was successful",
									"enum": [
										true
									],
									"example": true,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages"
							],
							"type": "object"
						}
					}
				},
				"description": "Failure to get list of Workers for Platforms namespaces."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "List dispatch namespaces",
		"tags": [
			"Workers for Platforms"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"com.cloudflare.edge.worker.script.read"
			]
		}
	},
	"GET /accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}": {
		"description": "Get a Workers for Platforms namespace.",
		"operationId": "namespace-worker-get-namespace",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "dispatch_namespace",
				"required": true,
				"schema": {
					"description": "Name of the Workers for Platforms dispatch namespace.",
					"example": "my-dispatch-namespace",
					"pattern": "^.+$",
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"created_by": {
													"description": "Identifier",
													"example": "023e105f4ecef8ad9ca31a8372d0c353",
													"maxLength": 32,
													"type": "string"
												},
												"created_on": {
													"description": "When the script was created.",
													"example": "2017-01-01T00:00:00Z",
													"format": "date-time",
													"readOnly": true,
													"type": "string"
												},
												"modified_by": {
													"description": "Identifier",
													"example": "023e105f4ecef8ad9ca31a8372d0c353",
													"maxLength": 32,
													"type": "string"
												},
												"modified_on": {
													"description": "When the script was last modified.",
													"example": "2017-01-01T00:00:00Z",
													"format": "date-time",
													"readOnly": true,
													"type": "string"
												},
												"namespace_id": {
													"description": "API Resource UUID tag.",
													"example": "f174e90a-fafe-4643-bbbc-4a0ed4fc8415",
													"maxLength": 36,
													"type": "string"
												},
												"namespace_name": {
													"description": "Name of the Workers for Platforms dispatch namespace.",
													"example": "my-dispatch-namespace",
													"pattern": "^.+$",
													"type": "string"
												},
												"script_count": {
													"description": "The current number of scripts in this Dispatch Namespace",
													"example": 800,
													"type": "integer"
												}
											}
										}
									}
								}
							]
						}
					}
				},
				"description": "Get a Workers for Platforms namespace."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"example": [],
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"example": [],
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"success": {
									"description": "Whether the API call was successful",
									"enum": [
										true
									],
									"example": true,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages"
							],
							"type": "object"
						}
					}
				},
				"description": "Failure to get Workers for Platforms namespace."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Get dispatch namespace",
		"tags": [
			"Workers for Platforms"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"com.cloudflare.edge.worker.script.read"
			]
		}
	},
	"GET /accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}/scripts/{script_name}": {
		"description": "Fetch information about a script uploaded to a Workers for Platforms namespace.",
		"operationId": "namespace-worker-script-worker-details",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "dispatch_namespace",
				"required": true,
				"schema": {
					"description": "Name of the Workers for Platforms dispatch namespace.",
					"example": "my-dispatch-namespace",
					"pattern": "^.+$",
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "script_name",
				"required": true,
				"schema": {
					"description": "Name of the script, used in URLs and route configuration.",
					"example": "this-is_my_script-01",
					"pattern": "^[a-z0-9_][a-z0-9-_]*$",
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"description": "Details about a worker uploaded to a Workers for Platforms namespace.",
											"properties": {
												"created_on": {
													"description": "When the script was created.",
													"example": "2017-01-01T00:00:00Z",
													"format": "date-time",
													"readOnly": true,
													"type": "string"
												},
												"dispatch_namespace": {
													"description": "Name of the Workers for Platforms dispatch namespace.",
													"example": "my-dispatch-namespace",
													"pattern": "^.+$",
													"type": "string"
												},
												"modified_on": {
													"description": "When the script was last modified.",
													"example": "2017-01-01T00:00:00Z",
													"format": "date-time",
													"readOnly": true,
													"type": "string"
												},
												"script": {
													"properties": {
														"created_on": {
															"description": "When the script was created.",
															"example": "2017-01-01T00:00:00Z",
															"format": "date-time",
															"readOnly": true,
															"type": "string"
														},
														"etag": {
															"description": "Hashed script content, can be used in a If-None-Match header when updating.",
															"example": "ea95132c15732412d22c1476fa83f27a",
															"readOnly": true,
															"type": "string"
														},
														"has_assets": {
															"description": "Whether a Worker contains assets.",
															"example": false,
															"type": "boolean"
														},
														"has_modules": {
															"description": "Whether a Worker contains modules.",
															"example": false,
															"type": "boolean"
														},
														"id": {
															"description": "The id of the script in the Workers system. Usually the script name.",
															"example": "my-workers-script",
															"readOnly": true,
															"type": "string"
														},
														"logpush": {
															"description": "Whether Logpush is turned on for the Worker.",
															"example": false,
															"type": "boolean"
														},
														"modified_on": {
															"description": "When the script was last modified.",
															"example": "2017-01-01T00:00:00Z",
															"format": "date-time",
															"readOnly": true,
															"type": "string"
														},
														"placement_mode": {
															"description": "Specifies the placement mode for the Worker (e.g. 'smart').",
															"example": "smart",
															"type": "string"
														},
														"tail_consumers": {
															"description": "List of Workers that will consume logs from the attached Worker.",
															"items": {
																"description": "A reference to a script that will consume logs from the attached Worker.",
																"properties": {
																	"environment": {
																		"description": "Optional environment if the Worker utilizes one.",
																		"example": "production",
																		"type": "string"
																	},
																	"namespace": {
																		"description": "Optional dispatch namespace the script belongs to.",
																		"example": "my-namespace",
																		"type": "string"
																	},
																	"service": {
																		"description": "Name of Worker that is to be the consumer.",
																		"example": "my-log-consumer",
																		"type": "string"
																	}
																},
																"required": [
																	"service"
																],
																"type": "object"
															},
															"type": "array"
														},
														"usage_model": {
															"description": "Specifies the usage model for the Worker (e.g. 'bundled' or 'unbound').",
															"example": "unbound",
															"pattern": "^(bundled|unbound)$",
															"type": "string"
														}
													}
												}
											},
											"type": "object"
										}
									}
								}
							]
						}
					}
				},
				"description": "Worker Details Response (Workers for Platforms)"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"example": [],
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"example": [],
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"success": {
									"description": "Whether the API call was successful",
									"enum": [
										true
									],
									"example": true,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages"
							],
							"type": "object"
						}
					}
				},
				"description": "Worker Details Failure (Workers for Platforms)"
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Worker Details",
		"tags": [
			"Workers for Platforms"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"com.cloudflare.edge.worker.script.read"
			]
		}
	},
	"GET /accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}/scripts/{script_name}/bindings": {
		"description": "Fetch script bindings from a script uploaded to a Workers for Platforms namespace.",
		"operationId": "namespace-worker-get-script-bindings",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "dispatch_namespace",
				"required": true,
				"schema": {
					"description": "Name of the Workers for Platforms dispatch namespace.",
					"example": "my-dispatch-namespace",
					"pattern": "^.+$",
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "script_name",
				"required": true,
				"schema": {
					"description": "Name of the script, used in URLs and route configuration.",
					"example": "this-is_my_script-01",
					"pattern": "^[a-z0-9_][a-z0-9-_]*$",
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"description": "List of bindings attached to this Worker",
											"items": {
												"description": "A binding to allow the Worker to communicate with resources",
												"oneOf": [
													{
														"properties": {
															"name": {
																"description": "A JavaScript variable name for the binding.",
																"example": "myBinding",
																"readOnly": true,
																"type": "string"
															},
															"namespace_id": {
																"description": "Namespace identifier tag.",
																"example": "0f2ac74b498b48028cb68387c421e279",
																"maxLength": 32,
																"readOnly": true,
																"type": "string"
															},
															"type": {
																"description": "The class of resource that the binding provides.",
																"enum": [
																	"kv_namespace"
																],
																"example": "kv_namespace",
																"type": "string"
															}
														},
														"required": [
															"name",
															"type",
															"namespace_id"
														],
														"type": "object"
													},
													{
														"properties": {
															"environment": {
																"description": "Optional environment if the Worker utilizes one.",
																"example": "production",
																"type": "string"
															},
															"name": {
																"description": "A JavaScript variable name for the binding.",
																"example": "myBinding",
																"readOnly": true,
																"type": "string"
															},
															"service": {
																"description": "Name of Worker to bind to",
																"example": "my-worker",
																"type": "string"
															},
															"type": {
																"description": "The class of resource that the binding provides.",
																"enum": [
																	"service"
																],
																"example": "service",
																"type": "string"
															}
														},
														"required": [
															"name",
															"type",
															"service",
															"environment"
														],
														"type": "object"
													},
													{
														"properties": {
															"class_name": {
																"description": "The exported class name of the Durable Object",
																"example": "MyDurableObject",
																"type": "string"
															},
															"environment": {
																"description": "The environment of the script_name to bind to",
																"example": "production",
																"type": "string"
															},
															"name": {
																"description": "A JavaScript variable name for the binding.",
																"example": "myBinding",
																"readOnly": true,
																"type": "string"
															},
															"namespace_id": {
																"description": "Namespace identifier tag.",
																"example": "0f2ac74b498b48028cb68387c421e279",
																"maxLength": 32,
																"readOnly": true,
																"type": "string"
															},
															"script_name": {
																"description": "The script where the Durable Object is defined, if it is external to this Worker",
																"example": "my-other-worker",
																"type": "string"
															},
															"type": {
																"description": "The class of resource that the binding provides.",
																"enum": [
																	"durable_object_namespace"
																],
																"example": "durable_object_namespace",
																"type": "string"
															}
														},
														"required": [
															"name",
															"type",
															"class_name"
														],
														"type": "object"
													},
													{
														"properties": {
															"bucket_name": {
																"description": "R2 bucket to bind to",
																"example": "my-r2-bucket",
																"type": "string"
															},
															"name": {
																"description": "A JavaScript variable name for the binding.",
																"example": "myBinding",
																"readOnly": true,
																"type": "string"
															},
															"type": {
																"description": "The class of resource that the binding provides.",
																"enum": [
																	"r2_bucket"
																],
																"example": "r2_bucket",
																"type": "string"
															}
														},
														"required": [
															"name",
															"type",
															"bucket_name"
														],
														"type": "object"
													},
													{
														"properties": {
															"name": {
																"description": "A JavaScript variable name for the binding.",
																"example": "myBinding",
																"readOnly": true,
																"type": "string"
															},
															"queue_name": {
																"description": "Name of the Queue to bind to",
																"example": "my-queue",
																"type": "string"
															},
															"type": {
																"description": "The class of resource that the binding provides.",
																"enum": [
																	"queue"
																],
																"example": "queue",
																"type": "string"
															}
														},
														"required": [
															"name",
															"type",
															"queue_name"
														],
														"type": "object"
													},
													{
														"properties": {
															"binding": {
																"description": "A JavaScript variable name for the binding.",
																"example": "myBinding",
																"readOnly": true,
																"type": "string"
															},
															"id": {
																"description": "ID of the D1 database to bind to",
																"example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
																"type": "string"
															},
															"name": {
																"description": "The name of the D1 database associated with the 'id' provided.",
																"example": "prod-database-auth",
																"type": "string"
															},
															"type": {
																"description": "The class of resource that the binding provides.",
																"enum": [
																	"d1"
																],
																"example": "d1",
																"type": "string"
															}
														},
														"required": [
															"id",
															"name",
															"type",
															"binding"
														],
														"type": "object"
													},
													{
														"properties": {
															"name": {
																"description": "A JavaScript variable name for the binding.",
																"example": "myBinding",
																"readOnly": true,
																"type": "string"
															},
															"namespace": {
																"description": "Namespace to bind to",
																"example": "my-namespace",
																"type": "string"
															},
															"outbound": {
																"description": "Outbound worker",
																"properties": {
																	"params": {
																		"description": "Pass information from the Dispatch Worker to the Outbound Worker through the parameters",
																		"items": {
																			"example": "url",
																			"type": "string"
																		},
																		"type": "array"
																	},
																	"worker": {
																		"description": "Outbound worker",
																		"properties": {
																			"environment": {
																				"description": "Environment of the outbound worker",
																				"type": "string"
																			},
																			"service": {
																				"description": "Name of the outbound worker",
																				"type": "string"
																			}
																		},
																		"type": "object"
																	}
																},
																"type": "object"
															},
															"type": {
																"description": "The class of resource that the binding provides.",
																"enum": [
																	"dispatch_namespace"
																],
																"example": "dispatch_namespace",
																"type": "string"
															}
														},
														"required": [
															"name",
															"type",
															"namespace"
														],
														"type": "object"
													},
													{
														"properties": {
															"certificate_id": {
																"description": "ID of the certificate to bind to",
																"example": "efwu2n6s-q69d-2kr9-184j-4913e8h391k6",
																"type": "string"
															},
															"name": {
																"description": "A JavaScript variable name for the binding.",
																"example": "myBinding",
																"readOnly": true,
																"type": "string"
															},
															"type": {
																"description": "The class of resource that the binding provides.",
																"enum": [
																	"mtls_certificate"
																],
																"example": "mtls_certificate",
																"type": "string"
															}
														},
														"required": [
															"name",
															"type",
															"certificate_id"
														],
														"type": "object"
													},
													{
														"properties": {
															"name": {
																"description": "A JavaScript variable name for the binding.",
																"example": "myBinding",
																"readOnly": true,
																"type": "string"
															},
															"type": {
																"description": "The class of resource that the binding provides.",
																"enum": [
																	"assets"
																],
																"example": "assets",
																"type": "string"
															}
														},
														"required": [
															"name",
															"type"
														],
														"type": "object"
													}
												],
												"type": "object"
											},
											"type": "array"
										}
									}
								}
							]
						}
					}
				},
				"description": "Fetch script bindings (Workers for Platforms)"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"example": [],
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"example": [],
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"success": {
									"description": "Whether the API call was successful",
									"enum": [
										true
									],
									"example": true,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages"
							],
							"type": "object"
						}
					}
				},
				"description": "Fetch script bindings failure (Workers for Platforms)"
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Get Script Bindings",
		"tags": [
			"Workers for Platforms"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"com.cloudflare.edge.worker.script.read"
			]
		}
	},
	"GET /accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}/scripts/{script_name}/content": {
		"description": "Fetch script content from a script uploaded to a Workers for Platforms namespace.",
		"operationId": "namespace-worker-get-script-content",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "dispatch_namespace",
				"required": true,
				"schema": {
					"description": "Name of the Workers for Platforms dispatch namespace.",
					"example": "my-dispatch-namespace",
					"pattern": "^.+$",
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "script_name",
				"required": true,
				"schema": {
					"description": "Name of the script, used in URLs and route configuration.",
					"example": "this-is_my_script-01",
					"pattern": "^[a-z0-9_][a-z0-9-_]*$",
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"string": {
						"schema": {
							"example": "export default {\n  fetch(req) {\n    return new Response(\"Hello, World!\")\n  }\n}\n"
						}
					}
				},
				"description": "Get script content"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"example": [],
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"example": [],
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"success": {
									"description": "Whether the API call was successful",
									"enum": [
										true
									],
									"example": true,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages"
							],
							"type": "object"
						}
					}
				},
				"description": "Get script content failure"
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Get Script Content",
		"tags": [
			"Workers for Platforms"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"com.cloudflare.edge.worker.script.read"
			]
		}
	},
	"GET /accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}/scripts/{script_name}/secrets": {
		"description": "List secrets from a script uploaded to a Workers for Platforms namespace.",
		"operationId": "namespace-worker-list-script-secrets",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "dispatch_namespace",
				"required": true,
				"schema": {
					"description": "Name of the Workers for Platforms dispatch namespace.",
					"example": "my-dispatch-namespace",
					"pattern": "^.+$",
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "script_name",
				"required": true,
				"schema": {
					"description": "Name of the script, used in URLs and route configuration.",
					"example": "this-is_my_script-01",
					"pattern": "^[a-z0-9_][a-z0-9-_]*$",
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"items": {
												"properties": {
													"name": {
														"description": "The name of this secret, this is what will be used to access it inside the Worker.",
														"example": "MY_SECRET",
														"type": "string"
													},
													"type": {
														"description": "The type of secret.",
														"enum": [
															"secret_text"
														],
														"example": "secret_text",
														"type": "string"
													}
												},
												"type": "object"
											},
											"type": "array"
										}
									}
								}
							]
						}
					}
				},
				"description": "List script secrets"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"example": [],
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"example": [],
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"success": {
									"description": "Whether the API call was successful",
									"enum": [
										true
									],
									"example": true,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages"
							],
							"type": "object"
						}
					}
				},
				"description": "List script secrets failure"
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "List Script Secrets",
		"tags": [
			"Workers for Platforms"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"com.cloudflare.edge.worker.script.read"
			]
		}
	},
	"GET /accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}/scripts/{script_name}/secrets/{secret_name}": {
		"description": "Get secret from a script uploaded to a Workers for Platforms namespace.",
		"operationId": "namespace-worker-get-script-secrets",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "dispatch_namespace",
				"required": true,
				"schema": {
					"description": "Name of the Workers for Platforms dispatch namespace.",
					"example": "my-dispatch-namespace",
					"pattern": "^.+$",
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "script_name",
				"required": true,
				"schema": {
					"description": "Name of the script, used in URLs and route configuration.",
					"example": "this-is_my_script-01",
					"pattern": "^[a-z0-9_][a-z0-9-_]*$",
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "secret_name",
				"required": true,
				"schema": {
					"description": "A JavaScript variable name for the secret binding.",
					"example": "mySecret",
					"readOnly": true,
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"name": {
													"description": "The name of this secret, this is what will be used to access it inside the Worker.",
													"example": "MY_SECRET",
													"type": "string"
												},
												"type": {
													"description": "The type of secret.",
													"enum": [
														"secret_text"
													],
													"example": "secret_text",
													"type": "string"
												}
											},
											"type": "object"
										}
									}
								}
							]
						}
					}
				},
				"description": "Get script secret"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"example": [],
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"example": [],
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"success": {
									"description": "Whether the API call was successful",
									"enum": [
										true
									],
									"example": true,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages"
							],
							"type": "object"
						}
					}
				},
				"description": "Get script secret failure"
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Get Script Secret",
		"tags": [
			"Workers for Platforms"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"com.cloudflare.edge.worker.script.read"
			]
		}
	},
	"GET /accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}/scripts/{script_name}/settings": {
		"description": "Get script settings from a script uploaded to a Workers for Platforms namespace.",
		"operationId": "namespace-worker-get-script-settings",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "dispatch_namespace",
				"required": true,
				"schema": {
					"description": "Name of the Workers for Platforms dispatch namespace.",
					"example": "my-dispatch-namespace",
					"pattern": "^.+$",
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "script_name",
				"required": true,
				"schema": {
					"description": "Name of the script, used in URLs and route configuration.",
					"example": "this-is_my_script-01",
					"pattern": "^[a-z0-9_][a-z0-9-_]*$",
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"bindings": {
													"description": "List of bindings attached to this Worker",
													"items": {
														"description": "A binding to allow the Worker to communicate with resources",
														"oneOf": [
															{
																"properties": {
																	"name": {
																		"description": "A JavaScript variable name for the binding.",
																		"example": "myBinding",
																		"readOnly": true,
																		"type": "string"
																	},
																	"namespace_id": {
																		"description": "Namespace identifier tag.",
																		"example": "0f2ac74b498b48028cb68387c421e279",
																		"maxLength": 32,
																		"readOnly": true,
																		"type": "string"
																	},
																	"type": {
																		"description": "The class of resource that the binding provides.",
																		"enum": [
																			"kv_namespace"
																		],
																		"example": "kv_namespace",
																		"type": "string"
																	}
																},
																"required": [
																	"name",
																	"type",
																	"namespace_id"
																],
																"type": "object"
															},
															{
																"properties": {
																	"environment": {
																		"description": "Optional environment if the Worker utilizes one.",
																		"example": "production",
																		"type": "string"
																	},
																	"name": {
																		"description": "A JavaScript variable name for the binding.",
																		"example": "myBinding",
																		"readOnly": true,
																		"type": "string"
																	},
																	"service": {
																		"description": "Name of Worker to bind to",
																		"example": "my-worker",
																		"type": "string"
																	},
																	"type": {
																		"description": "The class of resource that the binding provides.",
																		"enum": [
																			"service"
																		],
																		"example": "service",
																		"type": "string"
																	}
																},
																"required": [
																	"name",
																	"type",
																	"service",
																	"environment"
																],
																"type": "object"
															},
															{
																"properties": {
																	"class_name": {
																		"description": "The exported class name of the Durable Object",
																		"example": "MyDurableObject",
																		"type": "string"
																	},
																	"environment": {
																		"description": "The environment of the script_name to bind to",
																		"example": "production",
																		"type": "string"
																	},
																	"name": {
																		"description": "A JavaScript variable name for the binding.",
																		"example": "myBinding",
																		"readOnly": true,
																		"type": "string"
																	},
																	"namespace_id": {
																		"description": "Namespace identifier tag.",
																		"example": "0f2ac74b498b48028cb68387c421e279",
																		"maxLength": 32,
																		"readOnly": true,
																		"type": "string"
																	},
																	"script_name": {
																		"description": "The script where the Durable Object is defined, if it is external to this Worker",
																		"example": "my-other-worker",
																		"type": "string"
																	},
																	"type": {
																		"description": "The class of resource that the binding provides.",
																		"enum": [
																			"durable_object_namespace"
																		],
																		"example": "durable_object_namespace",
																		"type": "string"
																	}
																},
																"required": [
																	"name",
																	"type",
																	"class_name"
																],
																"type": "object"
															},
															{
																"properties": {
																	"bucket_name": {
																		"description": "R2 bucket to bind to",
																		"example": "my-r2-bucket",
																		"type": "string"
																	},
																	"name": {
																		"description": "A JavaScript variable name for the binding.",
																		"example": "myBinding",
																		"readOnly": true,
																		"type": "string"
																	},
																	"type": {
																		"description": "The class of resource that the binding provides.",
																		"enum": [
																			"r2_bucket"
																		],
																		"example": "r2_bucket",
																		"type": "string"
																	}
																},
																"required": [
																	"name",
																	"type",
																	"bucket_name"
																],
																"type": "object"
															},
															{
																"properties": {
																	"name": {
																		"description": "A JavaScript variable name for the binding.",
																		"example": "myBinding",
																		"readOnly": true,
																		"type": "string"
																	},
																	"queue_name": {
																		"description": "Name of the Queue to bind to",
																		"example": "my-queue",
																		"type": "string"
																	},
																	"type": {
																		"description": "The class of resource that the binding provides.",
																		"enum": [
																			"queue"
																		],
																		"example": "queue",
																		"type": "string"
																	}
																},
																"required": [
																	"name",
																	"type",
																	"queue_name"
																],
																"type": "object"
															},
															{
																"properties": {
																	"binding": {
																		"description": "A JavaScript variable name for the binding.",
																		"example": "myBinding",
																		"readOnly": true,
																		"type": "string"
																	},
																	"id": {
																		"description": "ID of the D1 database to bind to",
																		"example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
																		"type": "string"
																	},
																	"name": {
																		"description": "The name of the D1 database associated with the 'id' provided.",
																		"example": "prod-database-auth",
																		"type": "string"
																	},
																	"type": {
																		"description": "The class of resource that the binding provides.",
																		"enum": [
																			"d1"
																		],
																		"example": "d1",
																		"type": "string"
																	}
																},
																"required": [
																	"id",
																	"name",
																	"type",
																	"binding"
																],
																"type": "object"
															},
															{
																"properties": {
																	"name": {
																		"description": "A JavaScript variable name for the binding.",
																		"example": "myBinding",
																		"readOnly": true,
																		"type": "string"
																	},
																	"namespace": {
																		"description": "Namespace to bind to",
																		"example": "my-namespace",
																		"type": "string"
																	},
																	"outbound": {
																		"description": "Outbound worker",
																		"properties": {
																			"params": {
																				"description": "Pass information from the Dispatch Worker to the Outbound Worker through the parameters",
																				"items": {
																					"example": "url",
																					"type": "string"
																				},
																				"type": "array"
																			},
																			"worker": {
																				"description": "Outbound worker",
																				"properties": {
																					"environment": {
																						"description": "Environment of the outbound worker",
																						"type": "string"
																					},
																					"service": {
																						"description": "Name of the outbound worker",
																						"type": "string"
																					}
																				},
																				"type": "object"
																			}
																		},
																		"type": "object"
																	},
																	"type": {
																		"description": "The class of resource that the binding provides.",
																		"enum": [
																			"dispatch_namespace"
																		],
																		"example": "dispatch_namespace",
																		"type": "string"
																	}
																},
																"required": [
																	"name",
																	"type",
																	"namespace"
																],
																"type": "object"
															},
															{
																"properties": {
																	"certificate_id": {
																		"description": "ID of the certificate to bind to",
																		"example": "efwu2n6s-q69d-2kr9-184j-4913e8h391k6",
																		"type": "string"
																	},
																	"name": {
																		"description": "A JavaScript variable name for the binding.",
																		"example": "myBinding",
																		"readOnly": true,
																		"type": "string"
																	},
																	"type": {
																		"description": "The class of resource that the binding provides.",
																		"enum": [
																			"mtls_certificate"
																		],
																		"example": "mtls_certificate",
																		"type": "string"
																	}
																},
																"required": [
																	"name",
																	"type",
																	"certificate_id"
																],
																"type": "object"
															},
															{
																"properties": {
																	"name": {
																		"description": "A JavaScript variable name for the binding.",
																		"example": "myBinding",
																		"readOnly": true,
																		"type": "string"
																	},
																	"type": {
																		"description": "The class of resource that the binding provides.",
																		"enum": [
																			"assets"
																		],
																		"example": "assets",
																		"type": "string"
																	}
																},
																"required": [
																	"name",
																	"type"
																],
																"type": "object"
															}
														],
														"type": "object"
													},
													"type": "array"
												},
												"compatibility_date": {
													"description": "Opt your Worker into changes after this date",
													"example": "2022-04-05",
													"type": "string"
												},
												"compatibility_flags": {
													"description": "Opt your Worker into specific changes",
													"items": {
														"description": "A flag to opt into a specific change",
														"example": "formdata_parser_supports_files",
														"type": "string"
													},
													"type": "array"
												},
												"limits": {
													"description": "Limits to apply for this Worker.",
													"properties": {
														"cpu_ms": {
															"description": "The amount of CPU time this Worker can use in milliseconds.",
															"example": 50,
															"type": "integer"
														}
													},
													"type": "object"
												},
												"logpush": {
													"description": "Whether Logpush is turned on for the Worker.",
													"example": false,
													"type": "boolean"
												},
												"migrations": {
													"description": "Migrations to apply for Durable Objects associated with this Worker.\n",
													"oneOf": [
														{
															"allOf": [
																{
																	"properties": {
																		"new_tag": {
																			"description": "Tag to set as the latest migration tag.",
																			"example": "v2",
																			"type": "string"
																		},
																		"old_tag": {
																			"description": "Tag used to verify against the latest migration tag for this Worker. If they don't match, the upload is rejected.",
																			"example": "v1",
																			"type": "string"
																		}
																	},
																	"type": "object"
																},
																{
																	"properties": {
																		"deleted_classes": {
																			"description": "A list of classes to delete Durable Object namespaces from.",
																			"items": {
																				"type": "string"
																			},
																			"type": "array"
																		},
																		"new_classes": {
																			"description": "A list of classes to create Durable Object namespaces from.",
																			"items": {
																				"type": "string"
																			},
																			"type": "array"
																		},
																		"new_sqlite_classes": {
																			"description": "A list of classes to create Durable Object namespaces with SQLite from.",
																			"items": {
																				"type": "string"
																			},
																			"type": "array"
																		},
																		"renamed_classes": {
																			"description": "A list of classes with Durable Object namespaces that were renamed.",
																			"items": {
																				"properties": {
																					"from": {
																						"type": "string"
																					},
																					"to": {
																						"type": "string"
																					}
																				},
																				"type": "object"
																			},
																			"type": "array"
																		},
																		"transferred_classes": {
																			"description": "A list of transfers for Durable Object namespaces from a different Worker and class to a class defined in this Worker.",
																			"items": {
																				"properties": {
																					"from": {
																						"type": "string"
																					},
																					"from_script": {
																						"type": "string"
																					},
																					"to": {
																						"type": "string"
																					}
																				},
																				"type": "object"
																			},
																			"type": "array"
																		}
																	},
																	"type": "object"
																}
															],
															"description": "A single set of migrations to apply."
														},
														{
															"allOf": [
																{
																	"properties": {
																		"new_tag": {
																			"description": "Tag to set as the latest migration tag.",
																			"example": "v2",
																			"type": "string"
																		},
																		"old_tag": {
																			"description": "Tag used to verify against the latest migration tag for this Worker. If they don't match, the upload is rejected.",
																			"example": "v1",
																			"type": "string"
																		}
																	},
																	"type": "object"
																},
																{
																	"properties": {
																		"steps": {
																			"description": "Migrations to apply in order.",
																			"items": {
																				"properties": {
																					"deleted_classes": {
																						"description": "A list of classes to delete Durable Object namespaces from.",
																						"items": {
																							"type": "string"
																						},
																						"type": "array"
																					},
																					"new_classes": {
																						"description": "A list of classes to create Durable Object namespaces from.",
																						"items": {
																							"type": "string"
																						},
																						"type": "array"
																					},
																					"new_sqlite_classes": {
																						"description": "A list of classes to create Durable Object namespaces with SQLite from.",
																						"items": {
																							"type": "string"
																						},
																						"type": "array"
																					},
																					"renamed_classes": {
																						"description": "A list of classes with Durable Object namespaces that were renamed.",
																						"items": {
																							"properties": {
																								"from": {
																									"type": "string"
																								},
																								"to": {
																									"type": "string"
																								}
																							},
																							"type": "object"
																						},
																						"type": "array"
																					},
																					"transferred_classes": {
																						"description": "A list of transfers for Durable Object namespaces from a different Worker and class to a class defined in this Worker.",
																						"items": {
																							"properties": {
																								"from": {
																									"type": "string"
																								},
																								"from_script": {
																									"type": "string"
																								},
																								"to": {
																									"type": "string"
																								}
																							},
																							"type": "object"
																						},
																						"type": "array"
																					}
																				},
																				"type": "object"
																			},
																			"type": "array"
																		}
																	},
																	"type": "object"
																}
															]
														}
													]
												},
												"observability": {
													"description": "Observability settings for the Worker.",
													"properties": {
														"enabled": {
															"description": "Whether observability is enabled for the Worker.",
															"example": true,
															"type": "boolean"
														},
														"head_sampling_rate": {
															"description": "The sampling rate for incoming requests. From 0 to 1 (1 = 100%, 0.1 = 10%). Default is 1.",
															"example": 0.1,
															"nullable": true,
															"type": "number"
														}
													},
													"required": [
														"enabled"
													],
													"type": "object"
												},
												"placement": {
													"properties": {
														"mode": {
															"description": "Enables [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement). Only `\"smart\"` is currently supported",
															"enum": [
																"smart"
															],
															"type": "string"
														}
													},
													"type": "object"
												},
												"tags": {
													"description": "Tags to help you manage your Workers",
													"items": {
														"description": "Tag to help you manage your Worker",
														"example": "my-tag",
														"type": "string"
													},
													"type": "array"
												},
												"tail_consumers": {
													"description": "List of Workers that will consume logs from the attached Worker.",
													"items": {
														"description": "A reference to a script that will consume logs from the attached Worker.",
														"properties": {
															"environment": {
																"description": "Optional environment if the Worker utilizes one.",
																"example": "production",
																"type": "string"
															},
															"namespace": {
																"description": "Optional dispatch namespace the script belongs to.",
																"example": "my-namespace",
																"type": "string"
															},
															"service": {
																"description": "Name of Worker that is to be the consumer.",
																"example": "my-log-consumer",
																"type": "string"
															}
														},
														"required": [
															"service"
														],
														"type": "object"
													},
													"type": "array"
												},
												"usage_model": {
													"description": "Specifies the usage model for the Worker (e.g. 'bundled' or 'unbound').",
													"example": "unbound",
													"pattern": "^(bundled|unbound)$",
													"type": "string"
												}
											},
											"type": "object"
										}
									}
								}
							]
						}
					}
				},
				"description": "Fetch script settings"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"example": [],
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"example": [],
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"success": {
									"description": "Whether the API call was successful",
									"enum": [
										true
									],
									"example": true,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages"
							],
							"type": "object"
						}
					}
				},
				"description": "Fetch script settings failure"
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Get Script Settings",
		"tags": [
			"Workers for Platforms"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"com.cloudflare.edge.worker.script.read"
			]
		}
	},
	"GET /accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}/scripts/{script_name}/tags": {
		"description": "Fetch tags from a script uploaded to a Workers for Platforms namespace.",
		"operationId": "namespace-worker-get-script-tags",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "dispatch_namespace",
				"required": true,
				"schema": {
					"description": "Name of the Workers for Platforms dispatch namespace.",
					"example": "my-dispatch-namespace",
					"pattern": "^.+$",
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "script_name",
				"required": true,
				"schema": {
					"description": "Name of the script, used in URLs and route configuration.",
					"example": "this-is_my_script-01",
					"pattern": "^[a-z0-9_][a-z0-9-_]*$",
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"example": [
												"free",
												"customer"
											],
											"items": {
												"description": "Tag to help you manage your Worker",
												"example": "my-tag",
												"type": "string"
											},
											"type": "array"
										}
									}
								}
							]
						}
					}
				},
				"description": "Fetch script tags"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"example": [],
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"example": [],
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"success": {
									"description": "Whether the API call was successful",
									"enum": [
										true
									],
									"example": true,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages"
							],
							"type": "object"
						}
					}
				},
				"description": "Fetch script tags failure"
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Get Script Tags",
		"tags": [
			"Workers for Platforms"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"com.cloudflare.edge.worker.script.read"
			]
		}
	},
	"PATCH /accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}/scripts/{script_name}/settings": {
		"description": "Patch script metadata, such as bindings",
		"operationId": "namespace-worker-patch-script-settings",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "dispatch_namespace",
				"required": true,
				"schema": {
					"description": "Name of the Workers for Platforms dispatch namespace.",
					"example": "my-dispatch-namespace",
					"pattern": "^.+$",
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "script_name",
				"required": true,
				"schema": {
					"description": "Name of the script, used in URLs and route configuration.",
					"example": "this-is_my_script-01",
					"pattern": "^[a-z0-9_][a-z0-9-_]*$",
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"multipart/form-data": {
					"schema": {
						"properties": {
							"settings": {
								"properties": {
									"bindings": {
										"description": "List of bindings attached to this Worker",
										"items": {
											"description": "A binding to allow the Worker to communicate with resources",
											"oneOf": [
												{
													"properties": {
														"name": {
															"description": "A JavaScript variable name for the binding.",
															"example": "myBinding",
															"readOnly": true,
															"type": "string"
														},
														"namespace_id": {
															"description": "Namespace identifier tag.",
															"example": "0f2ac74b498b48028cb68387c421e279",
															"maxLength": 32,
															"readOnly": true,
															"type": "string"
														},
														"type": {
															"description": "The class of resource that the binding provides.",
															"enum": [
																"kv_namespace"
															],
															"example": "kv_namespace",
															"type": "string"
														}
													},
													"required": [
														"name",
														"type",
														"namespace_id"
													],
													"type": "object"
												},
												{
													"properties": {
														"environment": {
															"description": "Optional environment if the Worker utilizes one.",
															"example": "production",
															"type": "string"
														},
														"name": {
															"description": "A JavaScript variable name for the binding.",
															"example": "myBinding",
															"readOnly": true,
															"type": "string"
														},
														"service": {
															"description": "Name of Worker to bind to",
															"example": "my-worker",
															"type": "string"
														},
														"type": {
															"description": "The class of resource that the binding provides.",
															"enum": [
																"service"
															],
															"example": "service",
															"type": "string"
														}
													},
													"required": [
														"name",
														"type",
														"service",
														"environment"
													],
													"type": "object"
												},
												{
													"properties": {
														"class_name": {
															"description": "The exported class name of the Durable Object",
															"example": "MyDurableObject",
															"type": "string"
														},
														"environment": {
															"description": "The environment of the script_name to bind to",
															"example": "production",
															"type": "string"
														},
														"name": {
															"description": "A JavaScript variable name for the binding.",
															"example": "myBinding",
															"readOnly": true,
															"type": "string"
														},
														"namespace_id": {
															"description": "Namespace identifier tag.",
															"example": "0f2ac74b498b48028cb68387c421e279",
															"maxLength": 32,
															"readOnly": true,
															"type": "string"
														},
														"script_name": {
															"description": "The script where the Durable Object is defined, if it is external to this Worker",
															"example": "my-other-worker",
															"type": "string"
														},
														"type": {
															"description": "The class of resource that the binding provides.",
															"enum": [
																"durable_object_namespace"
															],
															"example": "durable_object_namespace",
															"type": "string"
														}
													},
													"required": [
														"name",
														"type",
														"class_name"
													],
													"type": "object"
												},
												{
													"properties": {
														"bucket_name": {
															"description": "R2 bucket to bind to",
															"example": "my-r2-bucket",
															"type": "string"
														},
														"name": {
															"description": "A JavaScript variable name for the binding.",
															"example": "myBinding",
															"readOnly": true,
															"type": "string"
														},
														"type": {
															"description": "The class of resource that the binding provides.",
															"enum": [
																"r2_bucket"
															],
															"example": "r2_bucket",
															"type": "string"
														}
													},
													"required": [
														"name",
														"type",
														"bucket_name"
													],
													"type": "object"
												},
												{
													"properties": {
														"name": {
															"description": "A JavaScript variable name for the binding.",
															"example": "myBinding",
															"readOnly": true,
															"type": "string"
														},
														"queue_name": {
															"description": "Name of the Queue to bind to",
															"example": "my-queue",
															"type": "string"
														},
														"type": {
															"description": "The class of resource that the binding provides.",
															"enum": [
																"queue"
															],
															"example": "queue",
															"type": "string"
														}
													},
													"required": [
														"name",
														"type",
														"queue_name"
													],
													"type": "object"
												},
												{
													"properties": {
														"binding": {
															"description": "A JavaScript variable name for the binding.",
															"example": "myBinding",
															"readOnly": true,
															"type": "string"
														},
														"id": {
															"description": "ID of the D1 database to bind to",
															"example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
															"type": "string"
														},
														"name": {
															"description": "The name of the D1 database associated with the 'id' provided.",
															"example": "prod-database-auth",
															"type": "string"
														},
														"type": {
															"description": "The class of resource that the binding provides.",
															"enum": [
																"d1"
															],
															"example": "d1",
															"type": "string"
														}
													},
													"required": [
														"id",
														"name",
														"type",
														"binding"
													],
													"type": "object"
												},
												{
													"properties": {
														"name": {
															"description": "A JavaScript variable name for the binding.",
															"example": "myBinding",
															"readOnly": true,
															"type": "string"
														},
														"namespace": {
															"description": "Namespace to bind to",
															"example": "my-namespace",
															"type": "string"
														},
														"outbound": {
															"description": "Outbound worker",
															"properties": {
																"params": {
																	"description": "Pass information from the Dispatch Worker to the Outbound Worker through the parameters",
																	"items": {
																		"example": "url",
																		"type": "string"
																	},
																	"type": "array"
																},
																"worker": {
																	"description": "Outbound worker",
																	"properties": {
																		"environment": {
																			"description": "Environment of the outbound worker",
																			"type": "string"
																		},
																		"service": {
																			"description": "Name of the outbound worker",
																			"type": "string"
																		}
																	},
																	"type": "object"
																}
															},
															"type": "object"
														},
														"type": {
															"description": "The class of resource that the binding provides.",
															"enum": [
																"dispatch_namespace"
															],
															"example": "dispatch_namespace",
															"type": "string"
														}
													},
													"required": [
														"name",
														"type",
														"namespace"
													],
													"type": "object"
												},
												{
													"properties": {
														"certificate_id": {
															"description": "ID of the certificate to bind to",
															"example": "efwu2n6s-q69d-2kr9-184j-4913e8h391k6",
															"type": "string"
														},
														"name": {
															"description": "A JavaScript variable name for the binding.",
															"example": "myBinding",
															"readOnly": true,
															"type": "string"
														},
														"type": {
															"description": "The class of resource that the binding provides.",
															"enum": [
																"mtls_certificate"
															],
															"example": "mtls_certificate",
															"type": "string"
														}
													},
													"required": [
														"name",
														"type",
														"certificate_id"
													],
													"type": "object"
												},
												{
													"properties": {
														"name": {
															"description": "A JavaScript variable name for the binding.",
															"example": "myBinding",
															"readOnly": true,
															"type": "string"
														},
														"type": {
															"description": "The class of resource that the binding provides.",
															"enum": [
																"assets"
															],
															"example": "assets",
															"type": "string"
														}
													},
													"required": [
														"name",
														"type"
													],
													"type": "object"
												}
											],
											"type": "object"
										},
										"type": "array"
									},
									"compatibility_date": {
										"description": "Opt your Worker into changes after this date",
										"example": "2022-04-05",
										"type": "string"
									},
									"compatibility_flags": {
										"description": "Opt your Worker into specific changes",
										"items": {
											"description": "A flag to opt into a specific change",
											"example": "formdata_parser_supports_files",
											"type": "string"
										},
										"type": "array"
									},
									"limits": {
										"description": "Limits to apply for this Worker.",
										"properties": {
											"cpu_ms": {
												"description": "The amount of CPU time this Worker can use in milliseconds.",
												"example": 50,
												"type": "integer"
											}
										},
										"type": "object"
									},
									"logpush": {
										"description": "Whether Logpush is turned on for the Worker.",
										"example": false,
										"type": "boolean"
									},
									"migrations": {
										"description": "Migrations to apply for Durable Objects associated with this Worker.\n",
										"oneOf": [
											{
												"allOf": [
													{
														"properties": {
															"new_tag": {
																"description": "Tag to set as the latest migration tag.",
																"example": "v2",
																"type": "string"
															},
															"old_tag": {
																"description": "Tag used to verify against the latest migration tag for this Worker. If they don't match, the upload is rejected.",
																"example": "v1",
																"type": "string"
															}
														},
														"type": "object"
													},
													{
														"properties": {
															"deleted_classes": {
																"description": "A list of classes to delete Durable Object namespaces from.",
																"items": {
																	"type": "string"
																},
																"type": "array"
															},
															"new_classes": {
																"description": "A list of classes to create Durable Object namespaces from.",
																"items": {
																	"type": "string"
																},
																"type": "array"
															},
															"new_sqlite_classes": {
																"description": "A list of classes to create Durable Object namespaces with SQLite from.",
																"items": {
																	"type": "string"
																},
																"type": "array"
															},
															"renamed_classes": {
																"description": "A list of classes with Durable Object namespaces that were renamed.",
																"items": {
																	"properties": {
																		"from": {
																			"type": "string"
																		},
																		"to": {
																			"type": "string"
																		}
																	},
																	"type": "object"
																},
																"type": "array"
															},
															"transferred_classes": {
																"description": "A list of transfers for Durable Object namespaces from a different Worker and class to a class defined in this Worker.",
																"items": {
																	"properties": {
																		"from": {
																			"type": "string"
																		},
																		"from_script": {
																			"type": "string"
																		},
																		"to": {
																			"type": "string"
																		}
																	},
																	"type": "object"
																},
																"type": "array"
															}
														},
														"type": "object"
													}
												],
												"description": "A single set of migrations to apply."
											},
											{
												"allOf": [
													{
														"properties": {
															"new_tag": {
																"description": "Tag to set as the latest migration tag.",
																"example": "v2",
																"type": "string"
															},
															"old_tag": {
																"description": "Tag used to verify against the latest migration tag for this Worker. If they don't match, the upload is rejected.",
																"example": "v1",
																"type": "string"
															}
														},
														"type": "object"
													},
													{
														"properties": {
															"steps": {
																"description": "Migrations to apply in order.",
																"items": {
																	"properties": {
																		"deleted_classes": {
																			"description": "A list of classes to delete Durable Object namespaces from.",
																			"items": {
																				"type": "string"
																			},
																			"type": "array"
																		},
																		"new_classes": {
																			"description": "A list of classes to create Durable Object namespaces from.",
																			"items": {
																				"type": "string"
																			},
																			"type": "array"
																		},
																		"new_sqlite_classes": {
																			"description": "A list of classes to create Durable Object namespaces with SQLite from.",
																			"items": {
																				"type": "string"
																			},
																			"type": "array"
																		},
																		"renamed_classes": {
																			"description": "A list of classes with Durable Object namespaces that were renamed.",
																			"items": {
																				"properties": {
																					"from": {
																						"type": "string"
																					},
																					"to": {
																						"type": "string"
																					}
																				},
																				"type": "object"
																			},
																			"type": "array"
																		},
																		"transferred_classes": {
																			"description": "A list of transfers for Durable Object namespaces from a different Worker and class to a class defined in this Worker.",
																			"items": {
																				"properties": {
																					"from": {
																						"type": "string"
																					},
																					"from_script": {
																						"type": "string"
																					},
																					"to": {
																						"type": "string"
																					}
																				},
																				"type": "object"
																			},
																			"type": "array"
																		}
																	},
																	"type": "object"
																},
																"type": "array"
															}
														},
														"type": "object"
													}
												]
											}
										]
									},
									"observability": {
										"description": "Observability settings for the Worker.",
										"properties": {
											"enabled": {
												"description": "Whether observability is enabled for the Worker.",
												"example": true,
												"type": "boolean"
											},
											"head_sampling_rate": {
												"description": "The sampling rate for incoming requests. From 0 to 1 (1 = 100%, 0.1 = 10%). Default is 1.",
												"example": 0.1,
												"nullable": true,
												"type": "number"
											}
										},
										"required": [
											"enabled"
										],
										"type": "object"
									},
									"placement": {
										"properties": {
											"mode": {
												"description": "Enables [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement). Only `\"smart\"` is currently supported",
												"enum": [
													"smart"
												],
												"type": "string"
											}
										},
										"type": "object"
									},
									"tags": {
										"description": "Tags to help you manage your Workers",
										"items": {
											"description": "Tag to help you manage your Worker",
											"example": "my-tag",
											"type": "string"
										},
										"type": "array"
									},
									"tail_consumers": {
										"description": "List of Workers that will consume logs from the attached Worker.",
										"items": {
											"description": "A reference to a script that will consume logs from the attached Worker.",
											"properties": {
												"environment": {
													"description": "Optional environment if the Worker utilizes one.",
													"example": "production",
													"type": "string"
												},
												"namespace": {
													"description": "Optional dispatch namespace the script belongs to.",
													"example": "my-namespace",
													"type": "string"
												},
												"service": {
													"description": "Name of Worker that is to be the consumer.",
													"example": "my-log-consumer",
													"type": "string"
												}
											},
											"required": [
												"service"
											],
											"type": "object"
										},
										"type": "array"
									},
									"usage_model": {
										"description": "Specifies the usage model for the Worker (e.g. 'bundled' or 'unbound').",
										"example": "unbound",
										"pattern": "^(bundled|unbound)$",
										"type": "string"
									}
								},
								"type": "object"
							}
						},
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"bindings": {
													"description": "List of bindings attached to this Worker",
													"items": {
														"description": "A binding to allow the Worker to communicate with resources",
														"oneOf": [
															{
																"properties": {
																	"name": {
																		"description": "A JavaScript variable name for the binding.",
																		"example": "myBinding",
																		"readOnly": true,
																		"type": "string"
																	},
																	"namespace_id": {
																		"description": "Namespace identifier tag.",
																		"example": "0f2ac74b498b48028cb68387c421e279",
																		"maxLength": 32,
																		"readOnly": true,
																		"type": "string"
																	},
																	"type": {
																		"description": "The class of resource that the binding provides.",
																		"enum": [
																			"kv_namespace"
																		],
																		"example": "kv_namespace",
																		"type": "string"
																	}
																},
																"required": [
																	"name",
																	"type",
																	"namespace_id"
																],
																"type": "object"
															},
															{
																"properties": {
																	"environment": {
																		"description": "Optional environment if the Worker utilizes one.",
																		"example": "production",
																		"type": "string"
																	},
																	"name": {
																		"description": "A JavaScript variable name for the binding.",
																		"example": "myBinding",
																		"readOnly": true,
																		"type": "string"
																	},
																	"service": {
																		"description": "Name of Worker to bind to",
																		"example": "my-worker",
																		"type": "string"
																	},
																	"type": {
																		"description": "The class of resource that the binding provides.",
																		"enum": [
																			"service"
																		],
																		"example": "service",
																		"type": "string"
																	}
																},
																"required": [
																	"name",
																	"type",
																	"service",
																	"environment"
																],
																"type": "object"
															},
															{
																"properties": {
																	"class_name": {
																		"description": "The exported class name of the Durable Object",
																		"example": "MyDurableObject",
																		"type": "string"
																	},
																	"environment": {
																		"description": "The environment of the script_name to bind to",
																		"example": "production",
																		"type": "string"
																	},
																	"name": {
																		"description": "A JavaScript variable name for the binding.",
																		"example": "myBinding",
																		"readOnly": true,
																		"type": "string"
																	},
																	"namespace_id": {
																		"description": "Namespace identifier tag.",
																		"example": "0f2ac74b498b48028cb68387c421e279",
																		"maxLength": 32,
																		"readOnly": true,
																		"type": "string"
																	},
																	"script_name": {
																		"description": "The script where the Durable Object is defined, if it is external to this Worker",
																		"example": "my-other-worker",
																		"type": "string"
																	},
																	"type": {
																		"description": "The class of resource that the binding provides.",
																		"enum": [
																			"durable_object_namespace"
																		],
																		"example": "durable_object_namespace",
																		"type": "string"
																	}
																},
																"required": [
																	"name",
																	"type",
																	"class_name"
																],
																"type": "object"
															},
															{
																"properties": {
																	"bucket_name": {
																		"description": "R2 bucket to bind to",
																		"example": "my-r2-bucket",
																		"type": "string"
																	},
																	"name": {
																		"description": "A JavaScript variable name for the binding.",
																		"example": "myBinding",
																		"readOnly": true,
																		"type": "string"
																	},
																	"type": {
																		"description": "The class of resource that the binding provides.",
																		"enum": [
																			"r2_bucket"
																		],
																		"example": "r2_bucket",
																		"type": "string"
																	}
																},
																"required": [
																	"name",
																	"type",
																	"bucket_name"
																],
																"type": "object"
															},
															{
																"properties": {
																	"name": {
																		"description": "A JavaScript variable name for the binding.",
																		"example": "myBinding",
																		"readOnly": true,
																		"type": "string"
																	},
																	"queue_name": {
																		"description": "Name of the Queue to bind to",
																		"example": "my-queue",
																		"type": "string"
																	},
																	"type": {
																		"description": "The class of resource that the binding provides.",
																		"enum": [
																			"queue"
																		],
																		"example": "queue",
																		"type": "string"
																	}
																},
																"required": [
																	"name",
																	"type",
																	"queue_name"
																],
																"type": "object"
															},
															{
																"properties": {
																	"binding": {
																		"description": "A JavaScript variable name for the binding.",
																		"example": "myBinding",
																		"readOnly": true,
																		"type": "string"
																	},
																	"id": {
																		"description": "ID of the D1 database to bind to",
																		"example": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
																		"type": "string"
																	},
																	"name": {
																		"description": "The name of the D1 database associated with the 'id' provided.",
																		"example": "prod-database-auth",
																		"type": "string"
																	},
																	"type": {
																		"description": "The class of resource that the binding provides.",
																		"enum": [
																			"d1"
																		],
																		"example": "d1",
																		"type": "string"
																	}
																},
																"required": [
																	"id",
																	"name",
																	"type",
																	"binding"
																],
																"type": "object"
															},
															{
																"properties": {
																	"name": {
																		"description": "A JavaScript variable name for the binding.",
																		"example": "myBinding",
																		"readOnly": true,
																		"type": "string"
																	},
																	"namespace": {
																		"description": "Namespace to bind to",
																		"example": "my-namespace",
																		"type": "string"
																	},
																	"outbound": {
																		"description": "Outbound worker",
																		"properties": {
																			"params": {
																				"description": "Pass information from the Dispatch Worker to the Outbound Worker through the parameters",
																				"items": {
																					"example": "url",
																					"type": "string"
																				},
																				"type": "array"
																			},
																			"worker": {
																				"description": "Outbound worker",
																				"properties": {
																					"environment": {
																						"description": "Environment of the outbound worker",
																						"type": "string"
																					},
																					"service": {
																						"description": "Name of the outbound worker",
																						"type": "string"
																					}
																				},
																				"type": "object"
																			}
																		},
																		"type": "object"
																	},
																	"type": {
																		"description": "The class of resource that the binding provides.",
																		"enum": [
																			"dispatch_namespace"
																		],
																		"example": "dispatch_namespace",
																		"type": "string"
																	}
																},
																"required": [
																	"name",
																	"type",
																	"namespace"
																],
																"type": "object"
															},
															{
																"properties": {
																	"certificate_id": {
																		"description": "ID of the certificate to bind to",
																		"example": "efwu2n6s-q69d-2kr9-184j-4913e8h391k6",
																		"type": "string"
																	},
																	"name": {
																		"description": "A JavaScript variable name for the binding.",
																		"example": "myBinding",
																		"readOnly": true,
																		"type": "string"
																	},
																	"type": {
																		"description": "The class of resource that the binding provides.",
																		"enum": [
																			"mtls_certificate"
																		],
																		"example": "mtls_certificate",
																		"type": "string"
																	}
																},
																"required": [
																	"name",
																	"type",
																	"certificate_id"
																],
																"type": "object"
															},
															{
																"properties": {
																	"name": {
																		"description": "A JavaScript variable name for the binding.",
																		"example": "myBinding",
																		"readOnly": true,
																		"type": "string"
																	},
																	"type": {
																		"description": "The class of resource that the binding provides.",
																		"enum": [
																			"assets"
																		],
																		"example": "assets",
																		"type": "string"
																	}
																},
																"required": [
																	"name",
																	"type"
																],
																"type": "object"
															}
														],
														"type": "object"
													},
													"type": "array"
												},
												"compatibility_date": {
													"description": "Opt your Worker into changes after this date",
													"example": "2022-04-05",
													"type": "string"
												},
												"compatibility_flags": {
													"description": "Opt your Worker into specific changes",
													"items": {
														"description": "A flag to opt into a specific change",
														"example": "formdata_parser_supports_files",
														"type": "string"
													},
													"type": "array"
												},
												"limits": {
													"description": "Limits to apply for this Worker.",
													"properties": {
														"cpu_ms": {
															"description": "The amount of CPU time this Worker can use in milliseconds.",
															"example": 50,
															"type": "integer"
														}
													},
													"type": "object"
												},
												"logpush": {
													"description": "Whether Logpush is turned on for the Worker.",
													"example": false,
													"type": "boolean"
												},
												"migrations": {
													"description": "Migrations to apply for Durable Objects associated with this Worker.\n",
													"oneOf": [
														{
															"allOf": [
																{
																	"properties": {
																		"new_tag": {
																			"description": "Tag to set as the latest migration tag.",
																			"example": "v2",
																			"type": "string"
																		},
																		"old_tag": {
																			"description": "Tag used to verify against the latest migration tag for this Worker. If they don't match, the upload is rejected.",
																			"example": "v1",
																			"type": "string"
																		}
																	},
																	"type": "object"
																},
																{
																	"properties": {
																		"deleted_classes": {
																			"description": "A list of classes to delete Durable Object namespaces from.",
																			"items": {
																				"type": "string"
																			},
																			"type": "array"
																		},
																		"new_classes": {
																			"description": "A list of classes to create Durable Object namespaces from.",
																			"items": {
																				"type": "string"
																			},
																			"type": "array"
																		},
																		"new_sqlite_classes": {
																			"description": "A list of classes to create Durable Object namespaces with SQLite from.",
																			"items": {
																				"type": "string"
																			},
																			"type": "array"
																		},
																		"renamed_classes": {
																			"description": "A list of classes with Durable Object namespaces that were renamed.",
																			"items": {
																				"properties": {
																					"from": {
																						"type": "string"
																					},
																					"to": {
																						"type": "string"
																					}
																				},
																				"type": "object"
																			},
																			"type": "array"
																		},
																		"transferred_classes": {
																			"description": "A list of transfers for Durable Object namespaces from a different Worker and class to a class defined in this Worker.",
																			"items": {
																				"properties": {
																					"from": {
																						"type": "string"
																					},
																					"from_script": {
																						"type": "string"
																					},
																					"to": {
																						"type": "string"
																					}
																				},
																				"type": "object"
																			},
																			"type": "array"
																		}
																	},
																	"type": "object"
																}
															],
															"description": "A single set of migrations to apply."
														},
														{
															"allOf": [
																{
																	"properties": {
																		"new_tag": {
																			"description": "Tag to set as the latest migration tag.",
																			"example": "v2",
																			"type": "string"
																		},
																		"old_tag": {
																			"description": "Tag used to verify against the latest migration tag for this Worker. If they don't match, the upload is rejected.",
																			"example": "v1",
																			"type": "string"
																		}
																	},
																	"type": "object"
																},
																{
																	"properties": {
																		"steps": {
																			"description": "Migrations to apply in order.",
																			"items": {
																				"properties": {
																					"deleted_classes": {
																						"description": "A list of classes to delete Durable Object namespaces from.",
																						"items": {
																							"type": "string"
																						},
																						"type": "array"
																					},
																					"new_classes": {
																						"description": "A list of classes to create Durable Object namespaces from.",
																						"items": {
																							"type": "string"
																						},
																						"type": "array"
																					},
																					"new_sqlite_classes": {
																						"description": "A list of classes to create Durable Object namespaces with SQLite from.",
																						"items": {
																							"type": "string"
																						},
																						"type": "array"
																					},
																					"renamed_classes": {
																						"description": "A list of classes with Durable Object namespaces that were renamed.",
																						"items": {
																							"properties": {
																								"from": {
																									"type": "string"
																								},
																								"to": {
																									"type": "string"
																								}
																							},
																							"type": "object"
																						},
																						"type": "array"
																					},
																					"transferred_classes": {
																						"description": "A list of transfers for Durable Object namespaces from a different Worker and class to a class defined in this Worker.",
																						"items": {
																							"properties": {
																								"from": {
																									"type": "string"
																								},
																								"from_script": {
																									"type": "string"
																								},
																								"to": {
																									"type": "string"
																								}
																							},
																							"type": "object"
																						},
																						"type": "array"
																					}
																				},
																				"type": "object"
																			},
																			"type": "array"
																		}
																	},
																	"type": "object"
																}
															]
														}
													]
												},
												"observability": {
													"description": "Observability settings for the Worker.",
													"properties": {
														"enabled": {
															"description": "Whether observability is enabled for the Worker.",
															"example": true,
															"type": "boolean"
														},
														"head_sampling_rate": {
															"description": "The sampling rate for incoming requests. From 0 to 1 (1 = 100%, 0.1 = 10%). Default is 1.",
															"example": 0.1,
															"nullable": true,
															"type": "number"
														}
													},
													"required": [
														"enabled"
													],
													"type": "object"
												},
												"placement": {
													"properties": {
														"mode": {
															"description": "Enables [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement). Only `\"smart\"` is currently supported",
															"enum": [
																"smart"
															],
															"type": "string"
														}
													},
													"type": "object"
												},
												"tags": {
													"description": "Tags to help you manage your Workers",
													"items": {
														"description": "Tag to help you manage your Worker",
														"example": "my-tag",
														"type": "string"
													},
													"type": "array"
												},
												"tail_consumers": {
													"description": "List of Workers that will consume logs from the attached Worker.",
													"items": {
														"description": "A reference to a script that will consume logs from the attached Worker.",
														"properties": {
															"environment": {
																"description": "Optional environment if the Worker utilizes one.",
																"example": "production",
																"type": "string"
															},
															"namespace": {
																"description": "Optional dispatch namespace the script belongs to.",
																"example": "my-namespace",
																"type": "string"
															},
															"service": {
																"description": "Name of Worker that is to be the consumer.",
																"example": "my-log-consumer",
																"type": "string"
															}
														},
														"required": [
															"service"
														],
														"type": "object"
													},
													"type": "array"
												},
												"usage_model": {
													"description": "Specifies the usage model for the Worker (e.g. 'bundled' or 'unbound').",
													"example": "unbound",
													"pattern": "^(bundled|unbound)$",
													"type": "string"
												}
											},
											"type": "object"
										}
									}
								}
							]
						}
					}
				},
				"description": "Patch script settings"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"example": [],
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"example": [],
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"success": {
									"description": "Whether the API call was successful",
									"enum": [
										true
									],
									"example": true,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages"
							],
							"type": "object"
						}
					}
				},
				"description": "Patch script settings failure"
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Patch Script Settings",
		"tags": [
			"Workers for Platforms"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"com.cloudflare.edge.worker.script.create"
			]
		}
	},
	"POST /accounts/{account_id}/workers/dispatch/namespaces": {
		"description": "Create a new Workers for Platforms namespace.",
		"operationId": "namespace-worker-create",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"properties": {
							"name": {
								"description": "The name of the dispatch namespace",
								"example": "my-dispatch-namespace",
								"type": "string"
							}
						},
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"created_by": {
													"description": "Identifier",
													"example": "023e105f4ecef8ad9ca31a8372d0c353",
													"maxLength": 32,
													"type": "string"
												},
												"created_on": {
													"description": "When the script was created.",
													"example": "2017-01-01T00:00:00Z",
													"format": "date-time",
													"readOnly": true,
													"type": "string"
												},
												"modified_by": {
													"description": "Identifier",
													"example": "023e105f4ecef8ad9ca31a8372d0c353",
													"maxLength": 32,
													"type": "string"
												},
												"modified_on": {
													"description": "When the script was last modified.",
													"example": "2017-01-01T00:00:00Z",
													"format": "date-time",
													"readOnly": true,
													"type": "string"
												},
												"namespace_id": {
													"description": "API Resource UUID tag.",
													"example": "f174e90a-fafe-4643-bbbc-4a0ed4fc8415",
													"maxLength": 36,
													"type": "string"
												},
												"namespace_name": {
													"description": "Name of the Workers for Platforms dispatch namespace.",
													"example": "my-dispatch-namespace",
													"pattern": "^.+$",
													"type": "string"
												},
												"script_count": {
													"description": "The current number of scripts in this Dispatch Namespace",
													"example": 800,
													"type": "integer"
												}
											}
										}
									}
								}
							]
						}
					}
				},
				"description": "Fetch a list of Workers for Platforms namespaces."
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"example": [],
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"example": [],
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"success": {
									"description": "Whether the API call was successful",
									"enum": [
										true
									],
									"example": true,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages"
							],
							"type": "object"
						}
					}
				},
				"description": "Failure to get list of Workers for Platforms namespaces."
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Create dispatch namespace",
		"tags": [
			"Workers for Platforms"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"com.cloudflare.edge.worker.script.create"
			]
		}
	},
	"PUT /accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}/scripts/{script_name}": {
		"description": "Upload a worker module to a Workers for Platforms namespace. You can find more about the multipart metadata on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/.",
		"operationId": "namespace-worker-script-upload-worker-module",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "dispatch_namespace",
				"required": true,
				"schema": {
					"description": "Name of the Workers for Platforms dispatch namespace.",
					"example": "my-dispatch-namespace",
					"pattern": "^.+$",
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "script_name",
				"required": true,
				"schema": {
					"description": "Name of the script, used in URLs and route configuration.",
					"example": "this-is_my_script-01",
					"pattern": "^[a-z0-9_][a-z0-9-_]*$",
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/javascript": {
					"schema": {
						"description": "Raw javascript content comprising a Worker. Must be in service worker syntax.",
						"example": "addEventListener('fetch', (event) => event.respondWith(new Response('OK')))",
						"type": "string"
					}
				},
				"multipart/form-data": {
					"encoding": {
						"<any part name>": {
							"contentType": "application/javascript+module, text/javascript+module, application/javascript, text/javascript, application/wasm, text/plain, application/octet-stream, application/source-map"
						}
					},
					"schema": {
						"oneOf": [
							{
								"properties": {
									"<any part name>": {
										"description": "A module comprising a Worker script, often a javascript file. Multiple modules may be provided as separate named parts, but at least one module must be present and referenced in the metadata as `main_module` or `body_part` by part name. Source maps may also be included using the `application/source-map` content type.",
										"items": {
											"format": "binary",
											"type": "string"
										},
										"type": "array"
									},
									"metadata": {
										"description": "JSON encoded metadata about the uploaded parts and Worker configuration.",
										"properties": {
											"assets": {
												"description": "Configuration for assets within a Worker",
												"properties": {
													"config": {
														"description": "Configuration for assets within a Worker.",
														"properties": {
															"html_handling": {
																"description": "Determines the redirects and rewrites of requests for HTML content.",
																"enum": [
																	"auto-trailing-slash",
																	"force-trailing-slash",
																	"drop-trailing-slash",
																	"none"
																],
																"example": "auto-trailing-slash",
																"type": "string"
															},
															"not_found_handling": {
																"description": "Determines the response when a request does not match a static asset, and there is no Worker script.",
																"enum": [
																	"none",
																	"404-page",
																	"single-page-application"
																],
																"example": "404-page",
																"type": "string"
															}
														},
														"type": "object"
													},
													"jwt": {
														"description": "Token provided upon successful upload of all files from a registered manifest.",
														"type": "string"
													}
												},
												"type": "object"
											},
											"bindings": {
												"description": "List of bindings available to the worker.",
												"example": [
													{
														"name": "MY_ENV_VAR",
														"text": "my_data",
														"type": "plain_text"
													}
												],
												"items": {
													"additionalProperties": {
														"x-stainless-any": true
													},
													"properties": {
														"name": {
															"description": "Name of the binding variable.",
															"type": "string"
														},
														"type": {
															"description": "Type of binding. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.",
															"type": "string"
														}
													},
													"type": "object"
												},
												"type": "array"
											},
											"body_part": {
												"description": "Name of the part in the multipart request that contains the script (e.g. the file adding a listener to the `fetch` event). Indicates a `service worker syntax` Worker.",
												"example": "worker.js",
												"type": "string"
											},
											"compatibility_date": {
												"description": "Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.",
												"example": "2023-07-25",
												"type": "string"
											},
											"compatibility_flags": {
												"description": "Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibility_date`.",
												"items": {
													"type": "string"
												},
												"type": "array"
											},
											"keep_assets": {
												"description": "Retain assets which exist for a previously uploaded Worker version; used in lieu of providing a completion token.",
												"example": false,
												"type": "boolean"
											},
											"keep_bindings": {
												"description": "List of binding types to keep from previous_upload.",
												"items": {
													"type": "string"
												},
												"type": "array"
											},
											"logpush": {
												"description": "Whether Logpush is turned on for the Worker.",
												"example": false,
												"type": "boolean"
											},
											"main_module": {
												"description": "Name of the part in the multipart request that contains the main module (e.g. the file exporting a `fetch` handler). Indicates a `module syntax` Worker.",
												"example": "worker.js",
												"type": "string"
											},
											"migrations": {
												"description": "Migrations to apply for Durable Objects associated with this Worker.",
												"oneOf": [
													{
														"allOf": [
															{
																"properties": {
																	"new_tag": {
																		"description": "Tag to set as the latest migration tag.",
																		"example": "v2",
																		"type": "string"
																	},
																	"old_tag": {
																		"description": "Tag used to verify against the latest migration tag for this Worker. If they don't match, the upload is rejected.",
																		"example": "v1",
																		"type": "string"
																	}
																},
																"type": "object"
															},
															{
																"properties": {
																	"deleted_classes": {
																		"description": "A list of classes to delete Durable Object namespaces from.",
																		"items": {
																			"type": "string"
																		},
																		"type": "array"
																	},
																	"new_classes": {
																		"description": "A list of classes to create Durable Object namespaces from.",
																		"items": {
																			"type": "string"
																		},
																		"type": "array"
																	},
																	"new_sqlite_classes": {
																		"description": "A list of classes to create Durable Object namespaces with SQLite from.",
																		"items": {
																			"type": "string"
																		},
																		"type": "array"
																	},
																	"renamed_classes": {
																		"description": "A list of classes with Durable Object namespaces that were renamed.",
																		"items": {
																			"properties": {
																				"from": {
																					"type": "string"
																				},
																				"to": {
																					"type": "string"
																				}
																			},
																			"type": "object"
																		},
																		"type": "array"
																	},
																	"transferred_classes": {
																		"description": "A list of transfers for Durable Object namespaces from a different Worker and class to a class defined in this Worker.",
																		"items": {
																			"properties": {
																				"from": {
																					"type": "string"
																				},
																				"from_script": {
																					"type": "string"
																				},
																				"to": {
																					"type": "string"
																				}
																			},
																			"type": "object"
																		},
																		"type": "array"
																	}
																},
																"type": "object"
															}
														],
														"description": "A single set of migrations to apply."
													},
													{
														"allOf": [
															{
																"properties": {
																	"new_tag": {
																		"description": "Tag to set as the latest migration tag.",
																		"example": "v2",
																		"type": "string"
																	},
																	"old_tag": {
																		"description": "Tag used to verify against the latest migration tag for this Worker. If they don't match, the upload is rejected.",
																		"example": "v1",
																		"type": "string"
																	}
																},
																"type": "object"
															},
															{
																"properties": {
																	"steps": {
																		"description": "Migrations to apply in order.",
																		"items": {
																			"properties": {
																				"deleted_classes": {
																					"description": "A list of classes to delete Durable Object namespaces from.",
																					"items": {
																						"type": "string"
																					},
																					"type": "array"
																				},
																				"new_classes": {
																					"description": "A list of classes to create Durable Object namespaces from.",
																					"items": {
																						"type": "string"
																					},
																					"type": "array"
																				},
																				"new_sqlite_classes": {
																					"description": "A list of classes to create Durable Object namespaces with SQLite from.",
																					"items": {
																						"type": "string"
																					},
																					"type": "array"
																				},
																				"renamed_classes": {
																					"description": "A list of classes with Durable Object namespaces that were renamed.",
																					"items": {
																						"properties": {
																							"from": {
																								"type": "string"
																							},
																							"to": {
																								"type": "string"
																							}
																						},
																						"type": "object"
																					},
																					"type": "array"
																				},
																				"transferred_classes": {
																					"description": "A list of transfers for Durable Object namespaces from a different Worker and class to a class defined in this Worker.",
																					"items": {
																						"properties": {
																							"from": {
																								"type": "string"
																							},
																							"from_script": {
																								"type": "string"
																							},
																							"to": {
																								"type": "string"
																							}
																						},
																						"type": "object"
																					},
																					"type": "array"
																				}
																			},
																			"type": "object"
																		},
																		"type": "array"
																	}
																},
																"type": "object"
															}
														]
													}
												]
											},
											"observability": {
												"description": "Observability settings for the Worker.",
												"properties": {
													"enabled": {
														"description": "Whether observability is enabled for the Worker.",
														"example": true,
														"type": "boolean"
													},
													"head_sampling_rate": {
														"description": "The sampling rate for incoming requests. From 0 to 1 (1 = 100%, 0.1 = 10%). Default is 1.",
														"example": 0.1,
														"nullable": true,
														"type": "number"
													}
												},
												"required": [
													"enabled"
												],
												"type": "object"
											},
											"placement": {
												"properties": {
													"mode": {
														"description": "Enables [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement). Only `\"smart\"` is currently supported",
														"enum": [
															"smart"
														],
														"type": "string"
													}
												},
												"type": "object"
											},
											"tags": {
												"description": "List of strings to use as tags for this Worker.",
												"items": {
													"type": "string"
												},
												"type": "array"
											},
											"tail_consumers": {
												"description": "List of Workers that will consume logs from the attached Worker.",
												"items": {
													"description": "A reference to a script that will consume logs from the attached Worker.",
													"properties": {
														"environment": {
															"description": "Optional environment if the Worker utilizes one.",
															"example": "production",
															"type": "string"
														},
														"namespace": {
															"description": "Optional dispatch namespace the script belongs to.",
															"example": "my-namespace",
															"type": "string"
														},
														"service": {
															"description": "Name of Worker that is to be the consumer.",
															"example": "my-log-consumer",
															"type": "string"
														}
													},
													"required": [
														"service"
													],
													"type": "object"
												},
												"type": "array"
											},
											"usage_model": {
												"description": "Usage model to apply to invocations.",
												"enum": [
													"bundled",
													"unbound"
												],
												"type": "string"
											},
											"version_tags": {
												"additionalProperties": {
													"type": "string"
												},
												"description": "Key-value pairs to use as tags for this version of this Worker.",
												"type": "object"
											}
										},
										"type": "object"
									}
								},
								"type": "object"
							},
							{
								"properties": {
									"message": {
										"description": "Rollback message to be associated with this deployment. Only parsed when query param `\"rollback_to\"` is present.",
										"type": "string"
									}
								},
								"type": "object"
							}
						]
					}
				},
				"text/javascript": {
					"schema": {
						"description": "Raw javascript content comprising a Worker. Must be in service worker syntax.",
						"example": "addEventListener('fetch', (event) => event.respondWith(new Response('OK')))",
						"type": "string"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"allOf": [
												{
													"properties": {
														"errors": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"messages": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"success": {
															"description": "Whether the API call was successful",
															"enum": [
																true
															],
															"example": true,
															"type": "boolean"
														}
													},
													"required": [
														"success",
														"errors",
														"messages"
													],
													"type": "object"
												}
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"allOf": [
														{
															"properties": {
																"created_on": {
																	"description": "When the script was created.",
																	"example": "2017-01-01T00:00:00Z",
																	"format": "date-time",
																	"readOnly": true,
																	"type": "string"
																},
																"etag": {
																	"description": "Hashed script content, can be used in a If-None-Match header when updating.",
																	"example": "ea95132c15732412d22c1476fa83f27a",
																	"readOnly": true,
																	"type": "string"
																},
																"has_assets": {
																	"description": "Whether a Worker contains assets.",
																	"example": false,
																	"type": "boolean"
																},
																"has_modules": {
																	"description": "Whether a Worker contains modules.",
																	"example": false,
																	"type": "boolean"
																},
																"id": {
																	"description": "The id of the script in the Workers system. Usually the script name.",
																	"example": "my-workers-script",
																	"readOnly": true,
																	"type": "string"
																},
																"logpush": {
																	"description": "Whether Logpush is turned on for the Worker.",
																	"example": false,
																	"type": "boolean"
																},
																"modified_on": {
																	"description": "When the script was last modified.",
																	"example": "2017-01-01T00:00:00Z",
																	"format": "date-time",
																	"readOnly": true,
																	"type": "string"
																},
																"placement_mode": {
																	"description": "Specifies the placement mode for the Worker (e.g. 'smart').",
																	"example": "smart",
																	"type": "string"
																},
																"tail_consumers": {
																	"description": "List of Workers that will consume logs from the attached Worker.",
																	"items": {
																		"description": "A reference to a script that will consume logs from the attached Worker.",
																		"properties": {
																			"environment": {
																				"description": "Optional environment if the Worker utilizes one.",
																				"example": "production",
																				"type": "string"
																			},
																			"namespace": {
																				"description": "Optional dispatch namespace the script belongs to.",
																				"example": "my-namespace",
																				"type": "string"
																			},
																			"service": {
																				"description": "Name of Worker that is to be the consumer.",
																				"example": "my-log-consumer",
																				"type": "string"
																			}
																		},
																		"required": [
																			"service"
																		],
																		"type": "object"
																	},
																	"type": "array"
																},
																"usage_model": {
																	"description": "Specifies the usage model for the Worker (e.g. 'bundled' or 'unbound').",
																	"example": "unbound",
																	"pattern": "^(bundled|unbound)$",
																	"type": "string"
																}
															}
														},
														{
															"properties": {
																"startup_time_ms": {
																	"example": 10,
																	"type": "integer"
																}
															}
														}
													]
												}
											},
											"x-cfLinkErrors": {
												"10001": "Unsupported or unexpected Content Type",
												"10002": "Unexpected internal server error",
												"10003": "Missing required URL parameter",
												"10004": "Malformed URL parameter",
												"10006": "Unparseable script body",
												"10007": "Resource not found (similar to HTTP 404)",
												"10014": "Internal error while attempting authorization checks",
												"10015": "The current account is not authorized to use workers",
												"10018": "Attempted to update a script where the e-tag does not match",
												"10021": "Script content failed validation checks, but was otherwise parseable",
												"10023": "Unauthorized access attempt",
												"10027": "Script body was too large",
												"10075": "Requires a Workers Paid plan"
											}
										}
									]
								},
								{
									"example": {
										"errors": [],
										"messages": [],
										"result": {
											"created_on": "2022-05-05T05:15:11.602148Z",
											"etag": "777f24a43bef5f69174aa69ceaf1dea67968d510a31d1vw3e49d34a0187c06d1",
											"handlers": [
												"fetch"
											],
											"id": "this-is_my_script-01",
											"logpush": false,
											"modified_on": "2022-05-20T19:02:56.446492Z",
											"placement_mode": "smart",
											"startup_time_ms": 10,
											"tail_consumers": [
												{
													"environment": "production",
													"service": "my-log-consumer"
												}
											],
											"usage_model": "bundled"
										},
										"success": true
									}
								}
							]
						}
					}
				},
				"description": "Upload Worker Module response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"example": {
										"errors": [],
										"messages": [],
										"result": {
											"created_on": "2022-05-05T05:15:11.602148Z",
											"etag": "777f24a43bef5f69174aa69ceaf1dea67968d510a31d1vw3e49d34a0187c06d1",
											"handlers": [
												"fetch"
											],
											"id": "this-is_my_script-01",
											"logpush": false,
											"modified_on": "2022-05-20T19:02:56.446492Z",
											"tail_consumers": [
												{
													"environment": "production",
													"service": "my-log-consumer"
												}
											],
											"usage_model": "bundled"
										},
										"success": true
									}
								},
								{
									"properties": {
										"errors": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": [
												{
													"code": 7003,
													"message": "No route for the URI"
												}
											],
											"minLength": 1
										},
										"messages": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": []
										},
										"result": {
											"enum": [
												null
											],
											"nullable": true,
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												false
											],
											"example": false,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Upload Worker Module response failure"
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Upload Worker Module",
		"tags": [
			"Workers for Platforms"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"com.cloudflare.edge.worker.script.create"
			]
		}
	},
	"PUT /accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}/scripts/{script_name}/content": {
		"description": "Put script content for a script uploaded to a Workers for Platforms namespace.",
		"operationId": "namespace-worker-put-script-content",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "dispatch_namespace",
				"required": true,
				"schema": {
					"description": "Name of the Workers for Platforms dispatch namespace.",
					"example": "my-dispatch-namespace",
					"pattern": "^.+$",
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "script_name",
				"required": true,
				"schema": {
					"description": "Name of the script, used in URLs and route configuration.",
					"example": "this-is_my_script-01",
					"pattern": "^[a-z0-9_][a-z0-9-_]*$",
					"type": "string"
				}
			},
			{
				"description": "The multipart name of a script upload part containing script content in service worker format. Alternative to including in a metadata part.",
				"in": "header",
				"name": "CF-WORKER-BODY-PART",
				"schema": {
					"type": "string"
				}
			},
			{
				"description": "The multipart name of a script upload part containing script content in es module format. Alternative to including in a metadata part.",
				"in": "header",
				"name": "CF-WORKER-MAIN-MODULE-PART",
				"schema": {
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"multipart/form-data": {
					"encoding": {
						"<any part name>": {
							"contentType": "application/javascript+module, text/javascript+module, application/javascript, text/javascript, application/wasm, text/plain, application/octet-stream, application/source-map"
						}
					},
					"schema": {
						"properties": {
							"<any part name>": {
								"description": "A module comprising a Worker script, often a javascript file. Multiple modules may be provided as separate named parts, but at least one module must be present. This should be referenced either in the metadata as `main_module` (esm)/`body_part` (service worker) or as a header `CF-WORKER-MAIN-MODULE-PART` (esm) /`CF-WORKER-BODY-PART` (service worker) by part name. Source maps may also be included using the `application/source-map` content type.",
								"items": {
									"format": "binary",
									"type": "string"
								},
								"type": "array"
							},
							"metadata": {
								"description": "JSON encoded metadata about the uploaded parts and Worker configuration.",
								"properties": {
									"body_part": {
										"description": "Name of the part in the multipart request that contains the script (e.g. the file adding a listener to the `fetch` event). Indicates a `service worker syntax` Worker.",
										"example": "worker.js",
										"type": "string"
									},
									"main_module": {
										"description": "Name of the part in the multipart request that contains the main module (e.g. the file exporting a `fetch` handler). Indicates a `module syntax` Worker.",
										"example": "worker.js",
										"type": "string"
									}
								},
								"type": "object"
							}
						},
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"properties": {
												"errors": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"messages": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"success": {
													"description": "Whether the API call was successful",
													"enum": [
														true
													],
													"example": true,
													"type": "boolean"
												}
											},
											"required": [
												"success",
												"errors",
												"messages"
											],
											"type": "object"
										}
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"created_on": {
													"description": "When the script was created.",
													"example": "2017-01-01T00:00:00Z",
													"format": "date-time",
													"readOnly": true,
													"type": "string"
												},
												"etag": {
													"description": "Hashed script content, can be used in a If-None-Match header when updating.",
													"example": "ea95132c15732412d22c1476fa83f27a",
													"readOnly": true,
													"type": "string"
												},
												"has_assets": {
													"description": "Whether a Worker contains assets.",
													"example": false,
													"type": "boolean"
												},
												"has_modules": {
													"description": "Whether a Worker contains modules.",
													"example": false,
													"type": "boolean"
												},
												"id": {
													"description": "The id of the script in the Workers system. Usually the script name.",
													"example": "my-workers-script",
													"readOnly": true,
													"type": "string"
												},
												"logpush": {
													"description": "Whether Logpush is turned on for the Worker.",
													"example": false,
													"type": "boolean"
												},
												"modified_on": {
													"description": "When the script was last modified.",
													"example": "2017-01-01T00:00:00Z",
													"format": "date-time",
													"readOnly": true,
													"type": "string"
												},
												"placement_mode": {
													"description": "Specifies the placement mode for the Worker (e.g. 'smart').",
													"example": "smart",
													"type": "string"
												},
												"tail_consumers": {
													"description": "List of Workers that will consume logs from the attached Worker.",
													"items": {
														"description": "A reference to a script that will consume logs from the attached Worker.",
														"properties": {
															"environment": {
																"description": "Optional environment if the Worker utilizes one.",
																"example": "production",
																"type": "string"
															},
															"namespace": {
																"description": "Optional dispatch namespace the script belongs to.",
																"example": "my-namespace",
																"type": "string"
															},
															"service": {
																"description": "Name of Worker that is to be the consumer.",
																"example": "my-log-consumer",
																"type": "string"
															}
														},
														"required": [
															"service"
														],
														"type": "object"
													},
													"type": "array"
												},
												"usage_model": {
													"description": "Specifies the usage model for the Worker (e.g. 'bundled' or 'unbound').",
													"example": "unbound",
													"pattern": "^(bundled|unbound)$",
													"type": "string"
												}
											}
										}
									},
									"x-cfLinkErrors": {
										"10001": "Unsupported or unexpected Content Type",
										"10002": "Unexpected internal server error",
										"10003": "Missing required URL parameter",
										"10004": "Malformed URL parameter",
										"10006": "Unparseable script body",
										"10007": "Resource not found (similar to HTTP 404)",
										"10014": "Internal error while attempting authorization checks",
										"10015": "The current account is not authorized to use workers",
										"10018": "Attempted to update a script where the e-tag does not match",
										"10021": "Script content failed validation checks, but was otherwise parseable",
										"10023": "Unauthorized access attempt",
										"10027": "Script body was too large",
										"10075": "Requires a Workers Paid plan"
									}
								}
							]
						}
					}
				},
				"description": "Put script content (Workers for Platforms)"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"example": [],
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"example": [],
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"success": {
									"description": "Whether the API call was successful",
									"enum": [
										true
									],
									"example": true,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages"
							],
							"type": "object"
						}
					}
				},
				"description": "Put script content failure (Workers for Platforms)"
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Put Script Content",
		"tags": [
			"Workers for Platforms"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"com.cloudflare.edge.worker.script.create"
			]
		}
	},
	"PUT /accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}/scripts/{script_name}/secrets": {
		"description": "Put secrets to a script uploaded to a Workers for Platforms namespace.",
		"operationId": "namespace-worker-put-script-secrets",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "dispatch_namespace",
				"required": true,
				"schema": {
					"description": "Name of the Workers for Platforms dispatch namespace.",
					"example": "my-dispatch-namespace",
					"pattern": "^.+$",
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "script_name",
				"required": true,
				"schema": {
					"description": "Name of the script, used in URLs and route configuration.",
					"example": "this-is_my_script-01",
					"pattern": "^[a-z0-9_][a-z0-9-_]*$",
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"properties": {
							"name": {
								"description": "The name of this secret, this is what will be used to access it inside the Worker.",
								"example": "MY_SECRET",
								"type": "string"
							},
							"text": {
								"description": "The value of the secret.",
								"example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9",
								"type": "string"
							},
							"type": {
								"description": "The type of secret to put.",
								"enum": [
									"secret_text"
								],
								"example": "secret_text",
								"type": "string"
							}
						},
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"name": {
													"description": "The name of this secret, this is what will be used to access it inside the Worker.",
													"example": "MY_SECRET",
													"type": "string"
												},
												"type": {
													"description": "The type of secret.",
													"enum": [
														"secret_text"
													],
													"example": "secret_text",
													"type": "string"
												}
											},
											"type": "object"
										}
									}
								}
							]
						}
					}
				},
				"description": "Fetch script bindings (Workers for Platforms)"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"example": [],
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"example": [],
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"success": {
									"description": "Whether the API call was successful",
									"enum": [
										true
									],
									"example": true,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages"
							],
							"type": "object"
						}
					}
				},
				"description": "Fetch script bindings failure (Workers for Platforms)"
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Put Script Secrets",
		"tags": [
			"Workers for Platforms"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"com.cloudflare.edge.worker.script.edit"
			]
		}
	},
	"PUT /accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}/scripts/{script_name}/tags": {
		"description": "Put script tags for a script uploaded to a Workers for Platforms namespace.",
		"operationId": "namespace-worker-put-script-tags",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "dispatch_namespace",
				"required": true,
				"schema": {
					"description": "Name of the Workers for Platforms dispatch namespace.",
					"example": "my-dispatch-namespace",
					"pattern": "^.+$",
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "script_name",
				"required": true,
				"schema": {
					"description": "Name of the script, used in URLs and route configuration.",
					"example": "this-is_my_script-01",
					"pattern": "^[a-z0-9_][a-z0-9-_]*$",
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"description": "Tags to help you manage your Workers",
						"items": {
							"description": "Tag to help you manage your Worker",
							"example": "my-tag",
							"type": "string"
						},
						"type": "array"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"example": [
												"my-tag"
											],
											"items": {
												"description": "Tag to help you manage your Worker",
												"example": "my-tag",
												"type": "string"
											},
											"type": "array"
										}
									}
								}
							]
						}
					}
				},
				"description": "Fetch script tags"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"example": [],
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"example": [],
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"success": {
									"description": "Whether the API call was successful",
									"enum": [
										true
									],
									"example": true,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages"
							],
							"type": "object"
						}
					}
				},
				"description": "Fetch script tags failure"
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Put Script Tags",
		"tags": [
			"Workers for Platforms"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"com.cloudflare.edge.worker.script.edit"
			]
		}
	},
	"PUT /accounts/{account_id}/workers/dispatch/namespaces/{dispatch_namespace}/scripts/{script_name}/tags/{tag}": {
		"description": "Put a single tag on a script uploaded to a Workers for Platforms namespace.",
		"operationId": "namespace-worker-put-script-tag",
		"parameters": [
			{
				"in": "path",
				"name": "account_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "dispatch_namespace",
				"required": true,
				"schema": {
					"description": "Name of the Workers for Platforms dispatch namespace.",
					"example": "my-dispatch-namespace",
					"pattern": "^.+$",
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "script_name",
				"required": true,
				"schema": {
					"description": "Name of the script, used in URLs and route configuration.",
					"example": "this-is_my_script-01",
					"pattern": "^[a-z0-9_][a-z0-9-_]*$",
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "tag",
				"required": true,
				"schema": {
					"description": "Tag to help you manage your Worker",
					"example": "my-tag",
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"enum": [
												null
											],
											"nullable": true,
											"type": "object"
										}
									}
								}
							]
						}
					}
				},
				"description": "Put script tag"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"example": [],
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"messages": {
									"example": [],
									"items": {
										"properties": {
											"code": {
												"minimum": 1000,
												"type": "integer"
											},
											"message": {
												"type": "string"
											}
										},
										"required": [
											"code",
											"message"
										],
										"type": "object",
										"uniqueItems": true
									},
									"type": "array"
								},
								"success": {
									"description": "Whether the API call was successful",
									"enum": [
										true
									],
									"example": true,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages"
							],
							"type": "object"
						}
					}
				},
				"description": "Put script tag failure"
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Put Script Tag",
		"tags": [
			"Workers for Platforms"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"com.cloudflare.edge.worker.script.read"
			]
		}
	}
}