{
	"DELETE /zones/{zone_id}/cache/variants": {
		"description": "Variant support enables caching variants of images with certain file extensions in addition to the original. This only applies when the origin server sends the 'Vary: Accept' response header. If the origin server sends 'Vary: Accept' but does not serve the variant requested, the response will not be cached. This will be indicated with BYPASS cache status in the response headers.",
		"operationId": "zone-cache-settings-delete-variants-setting",
		"parameters": [
			{
				"in": "path",
				"name": "zone_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"allOf": [
												{
													"properties": {
														"errors": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"messages": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"result": {
															"anyOf": [
																{
																	"type": "object"
																},
																{
																	"items": {},
																	"type": "array"
																},
																{
																	"type": "string"
																}
															]
														},
														"success": {
															"description": "Whether the API call was successful",
															"enum": [
																true
															],
															"example": true,
															"type": "boolean"
														}
													},
													"required": [
														"success",
														"errors",
														"messages",
														"result"
													],
													"type": "object"
												},
												{
													"properties": {
														"result": {
															"anyOf": [
																{
																	"nullable": true,
																	"type": "object"
																},
																{
																	"nullable": true,
																	"type": "string"
																}
															]
														}
													}
												}
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"type": "object"
												}
											}
										}
									]
								},
								{
									"properties": {
										"result": {
											"allOf": [
												{
													"properties": {
														"id": {
															"description": "Identifier of the zone setting.",
															"type": "string"
														},
														"modified_on": {
															"description": "last time this setting was modified.",
															"example": "2014-01-01T05:20:00.12345Z",
															"format": "date-time",
															"nullable": true,
															"readOnly": true,
															"type": "string"
														}
													},
													"required": [
														"id",
														"modified_on"
													]
												},
												{
													"properties": {
														"id": {
															"description": "ID of the zone setting.",
															"enum": [
																"variants"
															],
															"example": "variants"
														}
													}
												}
											],
											"description": "Variant support enables caching variants of images with certain file extensions in addition to the original. This only applies when the origin server sends the 'Vary: Accept' response header. If the origin server sends 'Vary: Accept' but does not serve the variant requested, the response will not be cached. This will be indicated with BYPASS cache status in the response headers.",
											"title": "Variants Caching"
										}
									}
								}
							]
						}
					}
				},
				"description": "Delete variants setting response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"allOf": [
												{
													"allOf": [
														{
															"properties": {
																"errors": {
																	"example": [],
																	"items": {
																		"properties": {
																			"code": {
																				"minimum": 1000,
																				"type": "integer"
																			},
																			"message": {
																				"type": "string"
																			}
																		},
																		"required": [
																			"code",
																			"message"
																		],
																		"type": "object",
																		"uniqueItems": true
																	},
																	"type": "array"
																},
																"messages": {
																	"example": [],
																	"items": {
																		"properties": {
																			"code": {
																				"minimum": 1000,
																				"type": "integer"
																			},
																			"message": {
																				"type": "string"
																			}
																		},
																		"required": [
																			"code",
																			"message"
																		],
																		"type": "object",
																		"uniqueItems": true
																	},
																	"type": "array"
																},
																"result": {
																	"anyOf": [
																		{
																			"type": "object"
																		},
																		{
																			"items": {},
																			"type": "array"
																		},
																		{
																			"type": "string"
																		}
																	]
																},
																"success": {
																	"description": "Whether the API call was successful",
																	"enum": [
																		true
																	],
																	"example": true,
																	"type": "boolean"
																}
															},
															"required": [
																"success",
																"errors",
																"messages",
																"result"
															],
															"type": "object"
														},
														{
															"properties": {
																"result": {
																	"anyOf": [
																		{
																			"nullable": true,
																			"type": "object"
																		},
																		{
																			"nullable": true,
																			"type": "string"
																		}
																	]
																}
															}
														}
													],
													"type": "object"
												},
												{
													"properties": {
														"result": {
															"type": "object"
														}
													}
												}
											]
										},
										{
											"properties": {
												"result": {
													"allOf": [
														{
															"properties": {
																"id": {
																	"description": "Identifier of the zone setting.",
																	"type": "string"
																},
																"modified_on": {
																	"description": "last time this setting was modified.",
																	"example": "2014-01-01T05:20:00.12345Z",
																	"format": "date-time",
																	"nullable": true,
																	"readOnly": true,
																	"type": "string"
																}
															},
															"required": [
																"id",
																"modified_on"
															]
														},
														{
															"properties": {
																"id": {
																	"description": "ID of the zone setting.",
																	"enum": [
																		"variants"
																	],
																	"example": "variants"
																}
															}
														}
													],
													"description": "Variant support enables caching variants of images with certain file extensions in addition to the original. This only applies when the origin server sends the 'Vary: Accept' response header. If the origin server sends 'Vary: Accept' but does not serve the variant requested, the response will not be cached. This will be indicated with BYPASS cache status in the response headers.",
													"title": "Variants Caching"
												}
											}
										}
									]
								},
								{
									"properties": {
										"errors": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": [
												{
													"code": 7003,
													"message": "No route for the URI"
												}
											],
											"minLength": 1
										},
										"messages": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": []
										},
										"result": {
											"enum": [
												null
											],
											"nullable": true,
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												false
											],
											"example": false,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Delete variants setting response failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Delete variants setting",
		"tags": [
			"Zone Cache Settings"
		],
		"x-api-token-group": [
			"Zone Settings Write",
			"Zone Write"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"#zone_settings:edit"
			]
		},
		"x-cfPlanAvailability": {
			"business": true,
			"enterprise": true,
			"free": false,
			"pro": true
		}
	},
	"GET /zones/{zone_id}/cache/cache_reserve": {
		"description": "Increase cache lifetimes by automatically storing all cacheable files into Cloudflare's persistent object storage buckets. Requires Cache Reserve subscription. Note: using Tiered Cache with Cache Reserve is highly recommended to reduce Reserve operations costs. See the [developer docs](https://developers.cloudflare.com/cache/about/cache-reserve) for more information.",
		"operationId": "zone-cache-settings-get-cache-reserve-setting",
		"parameters": [
			{
				"in": "path",
				"name": "zone_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"examples": {
							"off": {
								"value": {
									"errors": [],
									"messages": [],
									"result": {
										"editable": true,
										"id": "cache_reserve",
										"value": "off"
									},
									"success": true
								}
							}
						},
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"allOf": [
												{
													"properties": {
														"errors": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"messages": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"result": {
															"anyOf": [
																{
																	"type": "object"
																},
																{
																	"items": {},
																	"type": "array"
																},
																{
																	"type": "string"
																}
															]
														},
														"success": {
															"description": "Whether the API call was successful",
															"enum": [
																true
															],
															"example": true,
															"type": "boolean"
														}
													},
													"required": [
														"success",
														"errors",
														"messages",
														"result"
													],
													"type": "object"
												},
												{
													"properties": {
														"result": {
															"anyOf": [
																{
																	"nullable": true,
																	"type": "object"
																},
																{
																	"nullable": true,
																	"type": "string"
																}
															]
														}
													}
												}
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"type": "object"
												}
											}
										}
									]
								},
								{
									"properties": {
										"result": {
											"allOf": [
												{
													"allOf": [
														{
															"properties": {
																"id": {
																	"description": "Identifier of the zone setting.",
																	"type": "string"
																},
																"modified_on": {
																	"description": "last time this setting was modified.",
																	"example": "2014-01-01T05:20:00.12345Z",
																	"format": "date-time",
																	"nullable": true,
																	"readOnly": true,
																	"type": "string"
																}
															},
															"required": [
																"id",
																"modified_on"
															]
														},
														{
															"properties": {
																"id": {
																	"description": "ID of the zone setting.",
																	"enum": [
																		"cache_reserve"
																	],
																	"example": "cache_reserve"
																}
															}
														}
													],
													"description": "Increase cache lifetimes by automatically storing all cacheable files into Cloudflare's persistent object storage buckets. Requires Cache Reserve subscription. Note: using Tiered Cache with Cache Reserve is highly recommended to reduce Reserve operations costs. See the [developer docs](https://developers.cloudflare.com/cache/about/cache-reserve) for more information.",
													"title": "Cache Reserve"
												},
												{
													"properties": {
														"value": {
															"default": "off",
															"description": "Value of the Cache Reserve zone setting.",
															"enum": [
																"on",
																"off"
															],
															"type": "string"
														}
													},
													"required": [
														"value"
													]
												}
											]
										}
									}
								}
							]
						}
					}
				},
				"description": "Get Cache Reserve setting response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"examples": {
							"Error": {
								"value": {
									"errors": [
										{
											"code": 12345,
											"message": "Some error message"
										}
									],
									"messages": [],
									"result": null,
									"success": false
								}
							}
						},
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"allOf": [
												{
													"allOf": [
														{
															"properties": {
																"errors": {
																	"example": [],
																	"items": {
																		"properties": {
																			"code": {
																				"minimum": 1000,
																				"type": "integer"
																			},
																			"message": {
																				"type": "string"
																			}
																		},
																		"required": [
																			"code",
																			"message"
																		],
																		"type": "object",
																		"uniqueItems": true
																	},
																	"type": "array"
																},
																"messages": {
																	"example": [],
																	"items": {
																		"properties": {
																			"code": {
																				"minimum": 1000,
																				"type": "integer"
																			},
																			"message": {
																				"type": "string"
																			}
																		},
																		"required": [
																			"code",
																			"message"
																		],
																		"type": "object",
																		"uniqueItems": true
																	},
																	"type": "array"
																},
																"result": {
																	"anyOf": [
																		{
																			"type": "object"
																		},
																		{
																			"items": {},
																			"type": "array"
																		},
																		{
																			"type": "string"
																		}
																	]
																},
																"success": {
																	"description": "Whether the API call was successful",
																	"enum": [
																		true
																	],
																	"example": true,
																	"type": "boolean"
																}
															},
															"required": [
																"success",
																"errors",
																"messages",
																"result"
															],
															"type": "object"
														},
														{
															"properties": {
																"result": {
																	"anyOf": [
																		{
																			"nullable": true,
																			"type": "object"
																		},
																		{
																			"nullable": true,
																			"type": "string"
																		}
																	]
																}
															}
														}
													],
													"type": "object"
												},
												{
													"properties": {
														"result": {
															"type": "object"
														}
													}
												}
											]
										},
										{
											"properties": {
												"result": {
													"allOf": [
														{
															"allOf": [
																{
																	"properties": {
																		"id": {
																			"description": "Identifier of the zone setting.",
																			"type": "string"
																		},
																		"modified_on": {
																			"description": "last time this setting was modified.",
																			"example": "2014-01-01T05:20:00.12345Z",
																			"format": "date-time",
																			"nullable": true,
																			"readOnly": true,
																			"type": "string"
																		}
																	},
																	"required": [
																		"id",
																		"modified_on"
																	]
																},
																{
																	"properties": {
																		"id": {
																			"description": "ID of the zone setting.",
																			"enum": [
																				"cache_reserve"
																			],
																			"example": "cache_reserve"
																		}
																	}
																}
															],
															"description": "Increase cache lifetimes by automatically storing all cacheable files into Cloudflare's persistent object storage buckets. Requires Cache Reserve subscription. Note: using Tiered Cache with Cache Reserve is highly recommended to reduce Reserve operations costs. See the [developer docs](https://developers.cloudflare.com/cache/about/cache-reserve) for more information.",
															"title": "Cache Reserve"
														},
														{
															"properties": {
																"value": {
																	"default": "off",
																	"description": "Value of the Cache Reserve zone setting.",
																	"enum": [
																		"on",
																		"off"
																	],
																	"type": "string"
																}
															},
															"required": [
																"value"
															]
														}
													]
												}
											}
										}
									]
								},
								{
									"properties": {
										"errors": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": [
												{
													"code": 7003,
													"message": "No route for the URI"
												}
											],
											"minLength": 1
										},
										"messages": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": []
										},
										"result": {
											"enum": [
												null
											],
											"nullable": true,
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												false
											],
											"example": false,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Get Cache Reserve setting response failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Get Cache Reserve setting",
		"tags": [
			"Zone Cache Settings"
		],
		"x-api-token-group": [
			"Zone Settings Write",
			"Zone Settings Read",
			"Zone Read",
			"Zone Write"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"#zone_settings:read"
			]
		},
		"x-cfPlanAvailability": {
			"business": true,
			"enterprise": true,
			"free": true,
			"pro": true
		}
	},
	"GET /zones/{zone_id}/cache/cache_reserve_clear": {
		"description": "You can use Cache Reserve Clear to clear your Cache Reserve, but you must first disable Cache Reserve. In most cases, this will be accomplished within 24 hours. You cannot re-enable Cache Reserve while this process is ongoing. Keep in mind that you cannot undo or cancel this operation.",
		"operationId": "zone-cache-settings-get-cache-reserve-clear",
		"parameters": [
			{
				"in": "path",
				"name": "zone_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"examples": {
							"Completed": {
								"value": {
									"errors": [],
									"messages": [],
									"result": {
										"end_ts": "2023-10-02T12:00:00.12345Z",
										"id": "cache_reserve_clear",
										"start_ts": "2023-10-02T10:00:00.12345Z",
										"state": "Completed"
									},
									"success": true
								}
							},
							"In-progress": {
								"value": {
									"errors": [],
									"messages": [],
									"result": {
										"id": "cache_reserve_clear",
										"start_ts": "2023-10-02T10:00:00.12345Z",
										"state": "In-progress"
									},
									"success": true
								}
							}
						},
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"allOf": [
												{
													"properties": {
														"errors": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"messages": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"result": {
															"anyOf": [
																{
																	"type": "object"
																},
																{
																	"items": {},
																	"type": "array"
																},
																{
																	"type": "string"
																}
															]
														},
														"success": {
															"description": "Whether the API call was successful",
															"enum": [
																true
															],
															"example": true,
															"type": "boolean"
														}
													},
													"required": [
														"success",
														"errors",
														"messages",
														"result"
													],
													"type": "object"
												},
												{
													"properties": {
														"result": {
															"anyOf": [
																{
																	"nullable": true,
																	"type": "object"
																},
																{
																	"nullable": true,
																	"type": "string"
																}
															]
														}
													}
												}
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"type": "object"
												}
											}
										}
									]
								},
								{
									"properties": {
										"result": {
											"allOf": [
												{
													"allOf": [
														{
															"properties": {
																"id": {
																	"description": "Identifier of the zone setting.",
																	"type": "string"
																},
																"modified_on": {
																	"description": "last time this setting was modified.",
																	"example": "2014-01-01T05:20:00.12345Z",
																	"format": "date-time",
																	"nullable": true,
																	"readOnly": true,
																	"type": "string"
																}
															},
															"required": [
																"id",
																"modified_on"
															]
														},
														{
															"properties": {
																"id": {
																	"description": "ID of the zone setting.",
																	"enum": [
																		"cache_reserve_clear"
																	],
																	"example": "cache_reserve_clear"
																}
															}
														}
													],
													"description": "You can use Cache Reserve Clear to clear your Cache Reserve, but you must first disable Cache Reserve. In most cases, this will be accomplished within 24 hours. You cannot re-enable Cache Reserve while this process is ongoing. Keep in mind that you cannot undo or cancel this operation.",
													"title": "Cache Reserve Clear"
												},
												{
													"properties": {
														"end_ts": {
															"description": "The time that the latest Cache Reserve Clear operation completed.",
															"example": "2023-10-02T12:00:00.12345Z",
															"format": "date-time",
															"type": "string"
														},
														"start_ts": {
															"description": "The time that the latest Cache Reserve Clear operation started.",
															"example": "2023-10-02T10:00:00.12345Z",
															"format": "date-time",
															"type": "string"
														},
														"state": {
															"description": "The current state of the Cache Reserve Clear operation.",
															"enum": [
																"In-progress",
																"Completed"
															],
															"example": "In-progress",
															"type": "string"
														}
													},
													"required": [
														"state",
														"start_ts"
													]
												}
											]
										}
									}
								}
							]
						}
					}
				},
				"description": "Get Cache Reserve Clear response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"examples": {
							"Not found": {
								"value": {
									"errors": [
										{
											"code": 1142,
											"message": "Unable to retrieve cache_reserve_clear setting value. The zone setting does not exist because you never performed a Cache Reserve Clear operation."
										}
									],
									"messages": [],
									"result": null,
									"success": false
								}
							}
						},
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"allOf": [
												{
													"allOf": [
														{
															"properties": {
																"errors": {
																	"example": [],
																	"items": {
																		"properties": {
																			"code": {
																				"minimum": 1000,
																				"type": "integer"
																			},
																			"message": {
																				"type": "string"
																			}
																		},
																		"required": [
																			"code",
																			"message"
																		],
																		"type": "object",
																		"uniqueItems": true
																	},
																	"type": "array"
																},
																"messages": {
																	"example": [],
																	"items": {
																		"properties": {
																			"code": {
																				"minimum": 1000,
																				"type": "integer"
																			},
																			"message": {
																				"type": "string"
																			}
																		},
																		"required": [
																			"code",
																			"message"
																		],
																		"type": "object",
																		"uniqueItems": true
																	},
																	"type": "array"
																},
																"result": {
																	"anyOf": [
																		{
																			"type": "object"
																		},
																		{
																			"items": {},
																			"type": "array"
																		},
																		{
																			"type": "string"
																		}
																	]
																},
																"success": {
																	"description": "Whether the API call was successful",
																	"enum": [
																		true
																	],
																	"example": true,
																	"type": "boolean"
																}
															},
															"required": [
																"success",
																"errors",
																"messages",
																"result"
															],
															"type": "object"
														},
														{
															"properties": {
																"result": {
																	"anyOf": [
																		{
																			"nullable": true,
																			"type": "object"
																		},
																		{
																			"nullable": true,
																			"type": "string"
																		}
																	]
																}
															}
														}
													],
													"type": "object"
												},
												{
													"properties": {
														"result": {
															"type": "object"
														}
													}
												}
											]
										},
										{
											"properties": {
												"result": {
													"allOf": [
														{
															"allOf": [
																{
																	"properties": {
																		"id": {
																			"description": "Identifier of the zone setting.",
																			"type": "string"
																		},
																		"modified_on": {
																			"description": "last time this setting was modified.",
																			"example": "2014-01-01T05:20:00.12345Z",
																			"format": "date-time",
																			"nullable": true,
																			"readOnly": true,
																			"type": "string"
																		}
																	},
																	"required": [
																		"id",
																		"modified_on"
																	]
																},
																{
																	"properties": {
																		"id": {
																			"description": "ID of the zone setting.",
																			"enum": [
																				"cache_reserve_clear"
																			],
																			"example": "cache_reserve_clear"
																		}
																	}
																}
															],
															"description": "You can use Cache Reserve Clear to clear your Cache Reserve, but you must first disable Cache Reserve. In most cases, this will be accomplished within 24 hours. You cannot re-enable Cache Reserve while this process is ongoing. Keep in mind that you cannot undo or cancel this operation.",
															"title": "Cache Reserve Clear"
														},
														{
															"properties": {
																"end_ts": {
																	"description": "The time that the latest Cache Reserve Clear operation completed.",
																	"example": "2023-10-02T12:00:00.12345Z",
																	"format": "date-time",
																	"type": "string"
																},
																"start_ts": {
																	"description": "The time that the latest Cache Reserve Clear operation started.",
																	"example": "2023-10-02T10:00:00.12345Z",
																	"format": "date-time",
																	"type": "string"
																},
																"state": {
																	"description": "The current state of the Cache Reserve Clear operation.",
																	"enum": [
																		"In-progress",
																		"Completed"
																	],
																	"example": "In-progress",
																	"type": "string"
																}
															},
															"required": [
																"state",
																"start_ts"
															]
														}
													]
												}
											}
										}
									]
								},
								{
									"properties": {
										"errors": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": [
												{
													"code": 7003,
													"message": "No route for the URI"
												}
											],
											"minLength": 1
										},
										"messages": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": []
										},
										"result": {
											"enum": [
												null
											],
											"nullable": true,
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												false
											],
											"example": false,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Get Cache Reserve Clear failure response"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Get Cache Reserve Clear",
		"tags": [
			"Zone Cache Settings"
		],
		"x-api-token-group": [
			"Zone Settings Write",
			"Zone Settings Read",
			"Zone Read",
			"Zone Write"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"#zone_settings:read"
			]
		},
		"x-cfPlanAvailability": {
			"business": true,
			"enterprise": true,
			"free": true,
			"pro": true
		}
	},
	"GET /zones/{zone_id}/cache/regional_tiered_cache": {
		"description": "Instructs Cloudflare to check a regional hub data center on the way to your upper tier. This can help improve performance for smart and custom tiered cache topologies.",
		"operationId": "zone-cache-settings-get-regional-tiered-cache-setting",
		"parameters": [
			{
				"in": "path",
				"name": "zone_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"allOf": [
												{
													"properties": {
														"errors": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"messages": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"result": {
															"anyOf": [
																{
																	"type": "object"
																},
																{
																	"items": {},
																	"type": "array"
																},
																{
																	"type": "string"
																}
															]
														},
														"success": {
															"description": "Whether the API call was successful",
															"enum": [
																true
															],
															"example": true,
															"type": "boolean"
														}
													},
													"required": [
														"success",
														"errors",
														"messages",
														"result"
													],
													"type": "object"
												},
												{
													"properties": {
														"result": {
															"anyOf": [
																{
																	"nullable": true,
																	"type": "object"
																},
																{
																	"nullable": true,
																	"type": "string"
																}
															]
														}
													}
												}
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"type": "object"
												}
											}
										}
									]
								},
								{
									"properties": {
										"result": {
											"allOf": [
												{
													"allOf": [
														{
															"properties": {
																"id": {
																	"description": "Identifier of the zone setting.",
																	"type": "string"
																},
																"modified_on": {
																	"description": "last time this setting was modified.",
																	"example": "2014-01-01T05:20:00.12345Z",
																	"format": "date-time",
																	"nullable": true,
																	"readOnly": true,
																	"type": "string"
																}
															},
															"required": [
																"id",
																"modified_on"
															]
														},
														{
															"properties": {
																"id": {
																	"description": "ID of the zone setting.",
																	"enum": [
																		"tc_regional"
																	],
																	"example": "tc_regional"
																}
															}
														}
													],
													"description": "Instructs Cloudflare to check a regional hub data center on the way to your upper tier. This can help improve performance for smart and custom tiered cache topologies.",
													"title": "Regional Tiered Cache"
												},
												{
													"properties": {
														"value": {
															"allOf": [
																{
																	"properties": {
																		"id": {
																			"description": "Identifier of the zone setting.",
																			"type": "string"
																		},
																		"modified_on": {
																			"description": "last time this setting was modified.",
																			"example": "2014-01-01T05:20:00.12345Z",
																			"format": "date-time",
																			"nullable": true,
																			"readOnly": true,
																			"type": "string"
																		}
																	},
																	"required": [
																		"id",
																		"modified_on"
																	]
																},
																{
																	"properties": {
																		"id": {
																			"description": "ID of the zone setting.",
																			"enum": [
																				"tc_regional"
																			],
																			"example": "tc_regional"
																		}
																	}
																}
															],
															"description": "Instructs Cloudflare to check a regional hub data center on the way to your upper tier. This can help improve performance for smart and custom tiered cache topologies.",
															"title": "Regional Tiered Cache"
														}
													},
													"required": [
														"value"
													]
												}
											]
										}
									}
								}
							]
						}
					}
				},
				"description": "Get Regional Tiered Cache setting response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"allOf": [
												{
													"allOf": [
														{
															"properties": {
																"errors": {
																	"example": [],
																	"items": {
																		"properties": {
																			"code": {
																				"minimum": 1000,
																				"type": "integer"
																			},
																			"message": {
																				"type": "string"
																			}
																		},
																		"required": [
																			"code",
																			"message"
																		],
																		"type": "object",
																		"uniqueItems": true
																	},
																	"type": "array"
																},
																"messages": {
																	"example": [],
																	"items": {
																		"properties": {
																			"code": {
																				"minimum": 1000,
																				"type": "integer"
																			},
																			"message": {
																				"type": "string"
																			}
																		},
																		"required": [
																			"code",
																			"message"
																		],
																		"type": "object",
																		"uniqueItems": true
																	},
																	"type": "array"
																},
																"result": {
																	"anyOf": [
																		{
																			"type": "object"
																		},
																		{
																			"items": {},
																			"type": "array"
																		},
																		{
																			"type": "string"
																		}
																	]
																},
																"success": {
																	"description": "Whether the API call was successful",
																	"enum": [
																		true
																	],
																	"example": true,
																	"type": "boolean"
																}
															},
															"required": [
																"success",
																"errors",
																"messages",
																"result"
															],
															"type": "object"
														},
														{
															"properties": {
																"result": {
																	"anyOf": [
																		{
																			"nullable": true,
																			"type": "object"
																		},
																		{
																			"nullable": true,
																			"type": "string"
																		}
																	]
																}
															}
														}
													],
													"type": "object"
												},
												{
													"properties": {
														"result": {
															"type": "object"
														}
													}
												}
											]
										},
										{
											"properties": {
												"result": {
													"allOf": [
														{
															"allOf": [
																{
																	"properties": {
																		"id": {
																			"description": "Identifier of the zone setting.",
																			"type": "string"
																		},
																		"modified_on": {
																			"description": "last time this setting was modified.",
																			"example": "2014-01-01T05:20:00.12345Z",
																			"format": "date-time",
																			"nullable": true,
																			"readOnly": true,
																			"type": "string"
																		}
																	},
																	"required": [
																		"id",
																		"modified_on"
																	]
																},
																{
																	"properties": {
																		"id": {
																			"description": "ID of the zone setting.",
																			"enum": [
																				"tc_regional"
																			],
																			"example": "tc_regional"
																		}
																	}
																}
															],
															"description": "Instructs Cloudflare to check a regional hub data center on the way to your upper tier. This can help improve performance for smart and custom tiered cache topologies.",
															"title": "Regional Tiered Cache"
														},
														{
															"properties": {
																"value": {
																	"allOf": [
																		{
																			"properties": {
																				"id": {
																					"description": "Identifier of the zone setting.",
																					"type": "string"
																				},
																				"modified_on": {
																					"description": "last time this setting was modified.",
																					"example": "2014-01-01T05:20:00.12345Z",
																					"format": "date-time",
																					"nullable": true,
																					"readOnly": true,
																					"type": "string"
																				}
																			},
																			"required": [
																				"id",
																				"modified_on"
																			]
																		},
																		{
																			"properties": {
																				"id": {
																					"description": "ID of the zone setting.",
																					"enum": [
																						"tc_regional"
																					],
																					"example": "tc_regional"
																				}
																			}
																		}
																	],
																	"description": "Instructs Cloudflare to check a regional hub data center on the way to your upper tier. This can help improve performance for smart and custom tiered cache topologies.",
																	"title": "Regional Tiered Cache"
																}
															},
															"required": [
																"value"
															]
														}
													]
												}
											}
										}
									]
								},
								{
									"properties": {
										"errors": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": [
												{
													"code": 7003,
													"message": "No route for the URI"
												}
											],
											"minLength": 1
										},
										"messages": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": []
										},
										"result": {
											"enum": [
												null
											],
											"nullable": true,
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												false
											],
											"example": false,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Get Regional Tiered Cache setting response failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Get Regional Tiered Cache setting",
		"tags": [
			"Zone Cache Settings"
		],
		"x-api-token-group": [
			"Zone Settings Write",
			"Zone Settings Read",
			"Zone Read",
			"Zone Write"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"#zone_settings:read"
			]
		},
		"x-cfPlanAvailability": {
			"business": false,
			"enterprise": true,
			"free": false,
			"pro": false
		}
	},
	"GET /zones/{zone_id}/cache/variants": {
		"description": "Variant support enables caching variants of images with certain file extensions in addition to the original. This only applies when the origin server sends the 'Vary: Accept' response header. If the origin server sends 'Vary: Accept' but does not serve the variant requested, the response will not be cached. This will be indicated with BYPASS cache status in the response headers.",
		"operationId": "zone-cache-settings-get-variants-setting",
		"parameters": [
			{
				"in": "path",
				"name": "zone_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"allOf": [
												{
													"properties": {
														"errors": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"messages": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"result": {
															"anyOf": [
																{
																	"type": "object"
																},
																{
																	"items": {},
																	"type": "array"
																},
																{
																	"type": "string"
																}
															]
														},
														"success": {
															"description": "Whether the API call was successful",
															"enum": [
																true
															],
															"example": true,
															"type": "boolean"
														}
													},
													"required": [
														"success",
														"errors",
														"messages",
														"result"
													],
													"type": "object"
												},
												{
													"properties": {
														"result": {
															"anyOf": [
																{
																	"nullable": true,
																	"type": "object"
																},
																{
																	"nullable": true,
																	"type": "string"
																}
															]
														}
													}
												}
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"type": "object"
												}
											}
										}
									]
								},
								{
									"properties": {
										"result": {
											"allOf": [
												{
													"allOf": [
														{
															"properties": {
																"id": {
																	"description": "Identifier of the zone setting.",
																	"type": "string"
																},
																"modified_on": {
																	"description": "last time this setting was modified.",
																	"example": "2014-01-01T05:20:00.12345Z",
																	"format": "date-time",
																	"nullable": true,
																	"readOnly": true,
																	"type": "string"
																}
															},
															"required": [
																"id",
																"modified_on"
															]
														},
														{
															"properties": {
																"id": {
																	"description": "ID of the zone setting.",
																	"enum": [
																		"variants"
																	],
																	"example": "variants"
																}
															}
														}
													],
													"description": "Variant support enables caching variants of images with certain file extensions in addition to the original. This only applies when the origin server sends the 'Vary: Accept' response header. If the origin server sends 'Vary: Accept' but does not serve the variant requested, the response will not be cached. This will be indicated with BYPASS cache status in the response headers.",
													"title": "Variants Caching"
												},
												{
													"properties": {
														"value": {
															"description": "Value of the zone setting.",
															"properties": {
																"avif": {
																	"description": "List of strings with the MIME types of all the variants that should be served for avif.",
																	"example": [
																		"image/webp",
																		"image/jpeg"
																	],
																	"items": {
																		"type": "string"
																	},
																	"type": "array",
																	"uniqueItems": true
																},
																"bmp": {
																	"description": "List of strings with the MIME types of all the variants that should be served for bmp.",
																	"example": [
																		"image/webp",
																		"image/jpeg"
																	],
																	"items": {
																		"type": "string"
																	},
																	"type": "array",
																	"uniqueItems": true
																},
																"gif": {
																	"description": "List of strings with the MIME types of all the variants that should be served for gif.",
																	"example": [
																		"image/webp",
																		"image/jpeg"
																	],
																	"items": {
																		"type": "string"
																	},
																	"type": "array",
																	"uniqueItems": true
																},
																"jp2": {
																	"description": "List of strings with the MIME types of all the variants that should be served for jp2.",
																	"example": [
																		"image/webp",
																		"image/avif"
																	],
																	"items": {
																		"type": "string"
																	},
																	"type": "array",
																	"uniqueItems": true
																},
																"jpeg": {
																	"description": "List of strings with the MIME types of all the variants that should be served for jpeg.",
																	"example": [
																		"image/webp",
																		"image/avif"
																	],
																	"items": {
																		"type": "string"
																	},
																	"type": "array",
																	"uniqueItems": true
																},
																"jpg": {
																	"description": "List of strings with the MIME types of all the variants that should be served for jpg.",
																	"example": [
																		"image/webp",
																		"image/avif"
																	],
																	"items": {
																		"type": "string"
																	},
																	"type": "array",
																	"uniqueItems": true
																},
																"jpg2": {
																	"description": "List of strings with the MIME types of all the variants that should be served for jpg2.",
																	"example": [
																		"image/webp",
																		"image/avif"
																	],
																	"items": {
																		"type": "string"
																	},
																	"type": "array",
																	"uniqueItems": true
																},
																"png": {
																	"description": "List of strings with the MIME types of all the variants that should be served for png.",
																	"example": [
																		"image/webp",
																		"image/avif"
																	],
																	"items": {
																		"type": "string"
																	},
																	"type": "array",
																	"uniqueItems": true
																},
																"tif": {
																	"description": "List of strings with the MIME types of all the variants that should be served for tif.",
																	"example": [
																		"image/webp",
																		"image/avif"
																	],
																	"items": {
																		"type": "string"
																	},
																	"type": "array",
																	"uniqueItems": true
																},
																"tiff": {
																	"description": "List of strings with the MIME types of all the variants that should be served for tiff.",
																	"example": [
																		"image/webp",
																		"image/avif"
																	],
																	"items": {
																		"type": "string"
																	},
																	"type": "array",
																	"uniqueItems": true
																},
																"webp": {
																	"description": "List of strings with the MIME types of all the variants that should be served for webp.",
																	"example": [
																		"image/jpeg",
																		"image/avif"
																	],
																	"items": {
																		"type": "string"
																	},
																	"type": "array",
																	"uniqueItems": true
																}
															},
															"type": "object"
														}
													},
													"required": [
														"value"
													]
												}
											]
										}
									}
								}
							]
						}
					}
				},
				"description": "Get variants setting response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"allOf": [
												{
													"allOf": [
														{
															"properties": {
																"errors": {
																	"example": [],
																	"items": {
																		"properties": {
																			"code": {
																				"minimum": 1000,
																				"type": "integer"
																			},
																			"message": {
																				"type": "string"
																			}
																		},
																		"required": [
																			"code",
																			"message"
																		],
																		"type": "object",
																		"uniqueItems": true
																	},
																	"type": "array"
																},
																"messages": {
																	"example": [],
																	"items": {
																		"properties": {
																			"code": {
																				"minimum": 1000,
																				"type": "integer"
																			},
																			"message": {
																				"type": "string"
																			}
																		},
																		"required": [
																			"code",
																			"message"
																		],
																		"type": "object",
																		"uniqueItems": true
																	},
																	"type": "array"
																},
																"result": {
																	"anyOf": [
																		{
																			"type": "object"
																		},
																		{
																			"items": {},
																			"type": "array"
																		},
																		{
																			"type": "string"
																		}
																	]
																},
																"success": {
																	"description": "Whether the API call was successful",
																	"enum": [
																		true
																	],
																	"example": true,
																	"type": "boolean"
																}
															},
															"required": [
																"success",
																"errors",
																"messages",
																"result"
															],
															"type": "object"
														},
														{
															"properties": {
																"result": {
																	"anyOf": [
																		{
																			"nullable": true,
																			"type": "object"
																		},
																		{
																			"nullable": true,
																			"type": "string"
																		}
																	]
																}
															}
														}
													],
													"type": "object"
												},
												{
													"properties": {
														"result": {
															"type": "object"
														}
													}
												}
											]
										},
										{
											"properties": {
												"result": {
													"allOf": [
														{
															"allOf": [
																{
																	"properties": {
																		"id": {
																			"description": "Identifier of the zone setting.",
																			"type": "string"
																		},
																		"modified_on": {
																			"description": "last time this setting was modified.",
																			"example": "2014-01-01T05:20:00.12345Z",
																			"format": "date-time",
																			"nullable": true,
																			"readOnly": true,
																			"type": "string"
																		}
																	},
																	"required": [
																		"id",
																		"modified_on"
																	]
																},
																{
																	"properties": {
																		"id": {
																			"description": "ID of the zone setting.",
																			"enum": [
																				"variants"
																			],
																			"example": "variants"
																		}
																	}
																}
															],
															"description": "Variant support enables caching variants of images with certain file extensions in addition to the original. This only applies when the origin server sends the 'Vary: Accept' response header. If the origin server sends 'Vary: Accept' but does not serve the variant requested, the response will not be cached. This will be indicated with BYPASS cache status in the response headers.",
															"title": "Variants Caching"
														},
														{
															"properties": {
																"value": {
																	"description": "Value of the zone setting.",
																	"properties": {
																		"avif": {
																			"description": "List of strings with the MIME types of all the variants that should be served for avif.",
																			"example": [
																				"image/webp",
																				"image/jpeg"
																			],
																			"items": {
																				"type": "string"
																			},
																			"type": "array",
																			"uniqueItems": true
																		},
																		"bmp": {
																			"description": "List of strings with the MIME types of all the variants that should be served for bmp.",
																			"example": [
																				"image/webp",
																				"image/jpeg"
																			],
																			"items": {
																				"type": "string"
																			},
																			"type": "array",
																			"uniqueItems": true
																		},
																		"gif": {
																			"description": "List of strings with the MIME types of all the variants that should be served for gif.",
																			"example": [
																				"image/webp",
																				"image/jpeg"
																			],
																			"items": {
																				"type": "string"
																			},
																			"type": "array",
																			"uniqueItems": true
																		},
																		"jp2": {
																			"description": "List of strings with the MIME types of all the variants that should be served for jp2.",
																			"example": [
																				"image/webp",
																				"image/avif"
																			],
																			"items": {
																				"type": "string"
																			},
																			"type": "array",
																			"uniqueItems": true
																		},
																		"jpeg": {
																			"description": "List of strings with the MIME types of all the variants that should be served for jpeg.",
																			"example": [
																				"image/webp",
																				"image/avif"
																			],
																			"items": {
																				"type": "string"
																			},
																			"type": "array",
																			"uniqueItems": true
																		},
																		"jpg": {
																			"description": "List of strings with the MIME types of all the variants that should be served for jpg.",
																			"example": [
																				"image/webp",
																				"image/avif"
																			],
																			"items": {
																				"type": "string"
																			},
																			"type": "array",
																			"uniqueItems": true
																		},
																		"jpg2": {
																			"description": "List of strings with the MIME types of all the variants that should be served for jpg2.",
																			"example": [
																				"image/webp",
																				"image/avif"
																			],
																			"items": {
																				"type": "string"
																			},
																			"type": "array",
																			"uniqueItems": true
																		},
																		"png": {
																			"description": "List of strings with the MIME types of all the variants that should be served for png.",
																			"example": [
																				"image/webp",
																				"image/avif"
																			],
																			"items": {
																				"type": "string"
																			},
																			"type": "array",
																			"uniqueItems": true
																		},
																		"tif": {
																			"description": "List of strings with the MIME types of all the variants that should be served for tif.",
																			"example": [
																				"image/webp",
																				"image/avif"
																			],
																			"items": {
																				"type": "string"
																			},
																			"type": "array",
																			"uniqueItems": true
																		},
																		"tiff": {
																			"description": "List of strings with the MIME types of all the variants that should be served for tiff.",
																			"example": [
																				"image/webp",
																				"image/avif"
																			],
																			"items": {
																				"type": "string"
																			},
																			"type": "array",
																			"uniqueItems": true
																		},
																		"webp": {
																			"description": "List of strings with the MIME types of all the variants that should be served for webp.",
																			"example": [
																				"image/jpeg",
																				"image/avif"
																			],
																			"items": {
																				"type": "string"
																			},
																			"type": "array",
																			"uniqueItems": true
																		}
																	},
																	"type": "object"
																}
															},
															"required": [
																"value"
															]
														}
													]
												}
											}
										}
									]
								},
								{
									"properties": {
										"errors": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": [
												{
													"code": 7003,
													"message": "No route for the URI"
												}
											],
											"minLength": 1
										},
										"messages": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": []
										},
										"result": {
											"enum": [
												null
											],
											"nullable": true,
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												false
											],
											"example": false,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Get variants setting response failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Get variants setting",
		"tags": [
			"Zone Cache Settings"
		],
		"x-api-token-group": [
			"Zone Settings Write",
			"Zone Settings Read",
			"Zone Read",
			"Zone Write"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"#zone_settings:read"
			]
		},
		"x-cfPlanAvailability": {
			"business": true,
			"enterprise": true,
			"free": false,
			"pro": true
		}
	},
	"GET /zones/{zone_id}/settings/origin_max_http_version": {
		"description": "Origin Max HTTP Setting Version sets the highest HTTP version Cloudflare will attempt to use with your origin. This setting allows Cloudflare to make HTTP/2 requests to your origin. (Refer to [Enable HTTP/2 to Origin](https://developers.cloudflare.com/cache/how-to/enable-http2-to-origin/), for more information.). The default value is \"2\" for all plan types except ENT where it is \"1\"",
		"operationId": "zone-cache-settings-get-origin-max-http-version-setting",
		"parameters": [
			{
				"in": "path",
				"name": "zone_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"examples": {
							"max_http_version_2": {
								"value": {
									"errors": [],
									"messages": [],
									"result": {
										"editable": true,
										"id": "origin_max_http_version",
										"value": "2"
									},
									"success": true
								}
							}
						},
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"allOf": [
												{
													"properties": {
														"errors": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"messages": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"result": {
															"anyOf": [
																{
																	"type": "object"
																},
																{
																	"items": {},
																	"type": "array"
																},
																{
																	"type": "string"
																}
															]
														},
														"success": {
															"description": "Whether the API call was successful",
															"enum": [
																true
															],
															"example": true,
															"type": "boolean"
														}
													},
													"required": [
														"success",
														"errors",
														"messages",
														"result"
													],
													"type": "object"
												},
												{
													"properties": {
														"result": {
															"anyOf": [
																{
																	"nullable": true,
																	"type": "object"
																},
																{
																	"nullable": true,
																	"type": "string"
																}
															]
														}
													}
												}
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"type": "object"
												}
											}
										}
									]
								},
								{
									"properties": {
										"result": {
											"allOf": [
												{
													"allOf": [
														{
															"properties": {
																"id": {
																	"description": "Identifier of the zone setting.",
																	"type": "string"
																},
																"modified_on": {
																	"description": "last time this setting was modified.",
																	"example": "2014-01-01T05:20:00.12345Z",
																	"format": "date-time",
																	"nullable": true,
																	"readOnly": true,
																	"type": "string"
																}
															},
															"required": [
																"id",
																"modified_on"
															]
														},
														{
															"properties": {
																"id": {
																	"description": "Value of the zone setting.",
																	"enum": [
																		"origin_max_http_version"
																	],
																	"example": "origin_max_http_version"
																}
															}
														}
													],
													"description": "Origin Max HTTP Setting Version sets the highest HTTP version Cloudflare will attempt to use with your origin. This setting allows Cloudflare to make HTTP/2 requests to your origin. (Refer to [Enable HTTP/2 to Origin](https://developers.cloudflare.com/cache/how-to/enable-http2-to-origin/), for more information.). The default value is \"2\" for all plan types except ENT where it is \"1\"",
													"title": "Origin Max HTTP Version"
												},
												{
													"properties": {
														"value": {
															"description": "Value of the Origin Max HTTP Version Setting.",
															"enum": [
																"2",
																"1"
															],
															"type": "string"
														}
													},
													"required": [
														"value"
													]
												}
											]
										}
									}
								}
							]
						}
					}
				},
				"description": "Get Origin Max HTTP Version Setting Response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"examples": {
							"Error": {
								"value": {
									"errors": [
										{
											"code": 12345,
											"message": "Some error message"
										}
									],
									"messages": [],
									"result": null,
									"success": false
								}
							}
						},
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"allOf": [
												{
													"allOf": [
														{
															"properties": {
																"errors": {
																	"example": [],
																	"items": {
																		"properties": {
																			"code": {
																				"minimum": 1000,
																				"type": "integer"
																			},
																			"message": {
																				"type": "string"
																			}
																		},
																		"required": [
																			"code",
																			"message"
																		],
																		"type": "object",
																		"uniqueItems": true
																	},
																	"type": "array"
																},
																"messages": {
																	"example": [],
																	"items": {
																		"properties": {
																			"code": {
																				"minimum": 1000,
																				"type": "integer"
																			},
																			"message": {
																				"type": "string"
																			}
																		},
																		"required": [
																			"code",
																			"message"
																		],
																		"type": "object",
																		"uniqueItems": true
																	},
																	"type": "array"
																},
																"result": {
																	"anyOf": [
																		{
																			"type": "object"
																		},
																		{
																			"items": {},
																			"type": "array"
																		},
																		{
																			"type": "string"
																		}
																	]
																},
																"success": {
																	"description": "Whether the API call was successful",
																	"enum": [
																		true
																	],
																	"example": true,
																	"type": "boolean"
																}
															},
															"required": [
																"success",
																"errors",
																"messages",
																"result"
															],
															"type": "object"
														},
														{
															"properties": {
																"result": {
																	"anyOf": [
																		{
																			"nullable": true,
																			"type": "object"
																		},
																		{
																			"nullable": true,
																			"type": "string"
																		}
																	]
																}
															}
														}
													],
													"type": "object"
												},
												{
													"properties": {
														"result": {
															"type": "object"
														}
													}
												}
											]
										},
										{
											"properties": {
												"result": {
													"allOf": [
														{
															"allOf": [
																{
																	"properties": {
																		"id": {
																			"description": "Identifier of the zone setting.",
																			"type": "string"
																		},
																		"modified_on": {
																			"description": "last time this setting was modified.",
																			"example": "2014-01-01T05:20:00.12345Z",
																			"format": "date-time",
																			"nullable": true,
																			"readOnly": true,
																			"type": "string"
																		}
																	},
																	"required": [
																		"id",
																		"modified_on"
																	]
																},
																{
																	"properties": {
																		"id": {
																			"description": "Value of the zone setting.",
																			"enum": [
																				"origin_max_http_version"
																			],
																			"example": "origin_max_http_version"
																		}
																	}
																}
															],
															"description": "Origin Max HTTP Setting Version sets the highest HTTP version Cloudflare will attempt to use with your origin. This setting allows Cloudflare to make HTTP/2 requests to your origin. (Refer to [Enable HTTP/2 to Origin](https://developers.cloudflare.com/cache/how-to/enable-http2-to-origin/), for more information.). The default value is \"2\" for all plan types except ENT where it is \"1\"",
															"title": "Origin Max HTTP Version"
														},
														{
															"properties": {
																"value": {
																	"description": "Value of the Origin Max HTTP Version Setting.",
																	"enum": [
																		"2",
																		"1"
																	],
																	"type": "string"
																}
															},
															"required": [
																"value"
															]
														}
													]
												}
											}
										}
									]
								},
								{
									"properties": {
										"errors": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": [
												{
													"code": 7003,
													"message": "No route for the URI"
												}
											],
											"minLength": 1
										},
										"messages": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": []
										},
										"result": {
											"enum": [
												null
											],
											"nullable": true,
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												false
											],
											"example": false,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Get Origin Max HTTP Version Setting Response Failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Get Origin Max HTTP Version Setting",
		"tags": [
			"Zone Cache Settings"
		],
		"x-api-token-group": [
			"Zone Settings Write",
			"Zone Settings Read",
			"Zone Read",
			"Zone Write"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"#zone_settings:read"
			]
		},
		"x-cfPlanAvailability": {
			"business": true,
			"enterprise": true,
			"free": true,
			"pro": true
		}
	},
	"PATCH /zones/{zone_id}/cache/cache_reserve": {
		"description": "Increase cache lifetimes by automatically storing all cacheable files into Cloudflare's persistent object storage buckets. Requires Cache Reserve subscription. Note: using Tiered Cache with Cache Reserve is highly recommended to reduce Reserve operations costs. See the [developer docs](https://developers.cloudflare.com/cache/about/cache-reserve) for more information.",
		"operationId": "zone-cache-settings-change-cache-reserve-setting",
		"parameters": [
			{
				"in": "path",
				"name": "zone_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"properties": {
							"value": {
								"default": "off",
								"description": "Value of the Cache Reserve zone setting.",
								"enum": [
									"on",
									"off"
								],
								"type": "string"
							}
						},
						"required": [
							"value"
						]
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"examples": {
							"off": {
								"value": {
									"errors": [],
									"messages": [],
									"result": {
										"editable": true,
										"id": "cache_reserve",
										"value": "off"
									},
									"success": true
								}
							}
						},
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"allOf": [
												{
													"properties": {
														"errors": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"messages": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"result": {
															"anyOf": [
																{
																	"type": "object"
																},
																{
																	"items": {},
																	"type": "array"
																},
																{
																	"type": "string"
																}
															]
														},
														"success": {
															"description": "Whether the API call was successful",
															"enum": [
																true
															],
															"example": true,
															"type": "boolean"
														}
													},
													"required": [
														"success",
														"errors",
														"messages",
														"result"
													],
													"type": "object"
												},
												{
													"properties": {
														"result": {
															"anyOf": [
																{
																	"nullable": true,
																	"type": "object"
																},
																{
																	"nullable": true,
																	"type": "string"
																}
															]
														}
													}
												}
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"type": "object"
												}
											}
										}
									]
								},
								{
									"properties": {
										"result": {
											"allOf": [
												{
													"allOf": [
														{
															"properties": {
																"id": {
																	"description": "Identifier of the zone setting.",
																	"type": "string"
																},
																"modified_on": {
																	"description": "last time this setting was modified.",
																	"example": "2014-01-01T05:20:00.12345Z",
																	"format": "date-time",
																	"nullable": true,
																	"readOnly": true,
																	"type": "string"
																}
															},
															"required": [
																"id",
																"modified_on"
															]
														},
														{
															"properties": {
																"id": {
																	"description": "ID of the zone setting.",
																	"enum": [
																		"cache_reserve"
																	],
																	"example": "cache_reserve"
																}
															}
														}
													],
													"description": "Increase cache lifetimes by automatically storing all cacheable files into Cloudflare's persistent object storage buckets. Requires Cache Reserve subscription. Note: using Tiered Cache with Cache Reserve is highly recommended to reduce Reserve operations costs. See the [developer docs](https://developers.cloudflare.com/cache/about/cache-reserve) for more information.",
													"title": "Cache Reserve"
												},
												{
													"properties": {
														"value": {
															"default": "off",
															"description": "Value of the Cache Reserve zone setting.",
															"enum": [
																"on",
																"off"
															],
															"type": "string"
														}
													},
													"required": [
														"value"
													]
												}
											]
										}
									}
								}
							]
						}
					}
				},
				"description": "Change Cache Reserve setting response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"examples": {
							"Denied": {
								"value": {
									"errors": [
										{
											"code": 1153,
											"message": "Cache Reserve cannot be enabled because a deletion is already in progress."
										}
									],
									"messages": [],
									"result": null,
									"success": false
								}
							}
						},
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"allOf": [
												{
													"allOf": [
														{
															"properties": {
																"errors": {
																	"example": [],
																	"items": {
																		"properties": {
																			"code": {
																				"minimum": 1000,
																				"type": "integer"
																			},
																			"message": {
																				"type": "string"
																			}
																		},
																		"required": [
																			"code",
																			"message"
																		],
																		"type": "object",
																		"uniqueItems": true
																	},
																	"type": "array"
																},
																"messages": {
																	"example": [],
																	"items": {
																		"properties": {
																			"code": {
																				"minimum": 1000,
																				"type": "integer"
																			},
																			"message": {
																				"type": "string"
																			}
																		},
																		"required": [
																			"code",
																			"message"
																		],
																		"type": "object",
																		"uniqueItems": true
																	},
																	"type": "array"
																},
																"result": {
																	"anyOf": [
																		{
																			"type": "object"
																		},
																		{
																			"items": {},
																			"type": "array"
																		},
																		{
																			"type": "string"
																		}
																	]
																},
																"success": {
																	"description": "Whether the API call was successful",
																	"enum": [
																		true
																	],
																	"example": true,
																	"type": "boolean"
																}
															},
															"required": [
																"success",
																"errors",
																"messages",
																"result"
															],
															"type": "object"
														},
														{
															"properties": {
																"result": {
																	"anyOf": [
																		{
																			"nullable": true,
																			"type": "object"
																		},
																		{
																			"nullable": true,
																			"type": "string"
																		}
																	]
																}
															}
														}
													],
													"type": "object"
												},
												{
													"properties": {
														"result": {
															"type": "object"
														}
													}
												}
											]
										},
										{
											"properties": {
												"result": {
													"allOf": [
														{
															"allOf": [
																{
																	"properties": {
																		"id": {
																			"description": "Identifier of the zone setting.",
																			"type": "string"
																		},
																		"modified_on": {
																			"description": "last time this setting was modified.",
																			"example": "2014-01-01T05:20:00.12345Z",
																			"format": "date-time",
																			"nullable": true,
																			"readOnly": true,
																			"type": "string"
																		}
																	},
																	"required": [
																		"id",
																		"modified_on"
																	]
																},
																{
																	"properties": {
																		"id": {
																			"description": "ID of the zone setting.",
																			"enum": [
																				"cache_reserve"
																			],
																			"example": "cache_reserve"
																		}
																	}
																}
															],
															"description": "Increase cache lifetimes by automatically storing all cacheable files into Cloudflare's persistent object storage buckets. Requires Cache Reserve subscription. Note: using Tiered Cache with Cache Reserve is highly recommended to reduce Reserve operations costs. See the [developer docs](https://developers.cloudflare.com/cache/about/cache-reserve) for more information.",
															"title": "Cache Reserve"
														},
														{
															"properties": {
																"value": {
																	"default": "off",
																	"description": "Value of the Cache Reserve zone setting.",
																	"enum": [
																		"on",
																		"off"
																	],
																	"type": "string"
																}
															},
															"required": [
																"value"
															]
														}
													]
												}
											}
										}
									]
								},
								{
									"properties": {
										"errors": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": [
												{
													"code": 7003,
													"message": "No route for the URI"
												}
											],
											"minLength": 1
										},
										"messages": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": []
										},
										"result": {
											"enum": [
												null
											],
											"nullable": true,
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												false
											],
											"example": false,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Change Cache Reserve setting response failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Change Cache Reserve setting",
		"tags": [
			"Zone Cache Settings"
		],
		"x-api-token-group": [
			"Zone Settings Write",
			"Zone Write"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"#zone_settings:edit"
			]
		},
		"x-cfPlanAvailability": {
			"business": true,
			"enterprise": true,
			"free": true,
			"pro": true
		}
	},
	"PATCH /zones/{zone_id}/cache/regional_tiered_cache": {
		"description": "Instructs Cloudflare to check a regional hub data center on the way to your upper tier. This can help improve performance for smart and custom tiered cache topologies.",
		"operationId": "zone-cache-settings-change-regional-tiered-cache-setting",
		"parameters": [
			{
				"in": "path",
				"name": "zone_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"properties": {
							"value": {
								"default": "off",
								"description": "Value of the Regional Tiered Cache zone setting.",
								"enum": [
									"on",
									"off"
								],
								"type": "string"
							}
						},
						"required": [
							"value"
						]
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"allOf": [
												{
													"properties": {
														"errors": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"messages": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"result": {
															"anyOf": [
																{
																	"type": "object"
																},
																{
																	"items": {},
																	"type": "array"
																},
																{
																	"type": "string"
																}
															]
														},
														"success": {
															"description": "Whether the API call was successful",
															"enum": [
																true
															],
															"example": true,
															"type": "boolean"
														}
													},
													"required": [
														"success",
														"errors",
														"messages",
														"result"
													],
													"type": "object"
												},
												{
													"properties": {
														"result": {
															"anyOf": [
																{
																	"nullable": true,
																	"type": "object"
																},
																{
																	"nullable": true,
																	"type": "string"
																}
															]
														}
													}
												}
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"type": "object"
												}
											}
										}
									]
								},
								{
									"properties": {
										"result": {
											"allOf": [
												{
													"allOf": [
														{
															"properties": {
																"id": {
																	"description": "Identifier of the zone setting.",
																	"type": "string"
																},
																"modified_on": {
																	"description": "last time this setting was modified.",
																	"example": "2014-01-01T05:20:00.12345Z",
																	"format": "date-time",
																	"nullable": true,
																	"readOnly": true,
																	"type": "string"
																}
															},
															"required": [
																"id",
																"modified_on"
															]
														},
														{
															"properties": {
																"id": {
																	"description": "ID of the zone setting.",
																	"enum": [
																		"tc_regional"
																	],
																	"example": "tc_regional"
																}
															}
														}
													],
													"description": "Instructs Cloudflare to check a regional hub data center on the way to your upper tier. This can help improve performance for smart and custom tiered cache topologies.",
													"title": "Regional Tiered Cache"
												},
												{
													"properties": {
														"value": {
															"allOf": [
																{
																	"properties": {
																		"id": {
																			"description": "Identifier of the zone setting.",
																			"type": "string"
																		},
																		"modified_on": {
																			"description": "last time this setting was modified.",
																			"example": "2014-01-01T05:20:00.12345Z",
																			"format": "date-time",
																			"nullable": true,
																			"readOnly": true,
																			"type": "string"
																		}
																	},
																	"required": [
																		"id",
																		"modified_on"
																	]
																},
																{
																	"properties": {
																		"id": {
																			"description": "ID of the zone setting.",
																			"enum": [
																				"tc_regional"
																			],
																			"example": "tc_regional"
																		}
																	}
																}
															],
															"description": "Instructs Cloudflare to check a regional hub data center on the way to your upper tier. This can help improve performance for smart and custom tiered cache topologies.",
															"title": "Regional Tiered Cache"
														}
													},
													"required": [
														"value"
													]
												}
											]
										}
									}
								}
							]
						}
					}
				},
				"description": "Change Regional Tiered Cache setting response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"allOf": [
												{
													"allOf": [
														{
															"properties": {
																"errors": {
																	"example": [],
																	"items": {
																		"properties": {
																			"code": {
																				"minimum": 1000,
																				"type": "integer"
																			},
																			"message": {
																				"type": "string"
																			}
																		},
																		"required": [
																			"code",
																			"message"
																		],
																		"type": "object",
																		"uniqueItems": true
																	},
																	"type": "array"
																},
																"messages": {
																	"example": [],
																	"items": {
																		"properties": {
																			"code": {
																				"minimum": 1000,
																				"type": "integer"
																			},
																			"message": {
																				"type": "string"
																			}
																		},
																		"required": [
																			"code",
																			"message"
																		],
																		"type": "object",
																		"uniqueItems": true
																	},
																	"type": "array"
																},
																"result": {
																	"anyOf": [
																		{
																			"type": "object"
																		},
																		{
																			"items": {},
																			"type": "array"
																		},
																		{
																			"type": "string"
																		}
																	]
																},
																"success": {
																	"description": "Whether the API call was successful",
																	"enum": [
																		true
																	],
																	"example": true,
																	"type": "boolean"
																}
															},
															"required": [
																"success",
																"errors",
																"messages",
																"result"
															],
															"type": "object"
														},
														{
															"properties": {
																"result": {
																	"anyOf": [
																		{
																			"nullable": true,
																			"type": "object"
																		},
																		{
																			"nullable": true,
																			"type": "string"
																		}
																	]
																}
															}
														}
													],
													"type": "object"
												},
												{
													"properties": {
														"result": {
															"type": "object"
														}
													}
												}
											]
										},
										{
											"properties": {
												"result": {
													"allOf": [
														{
															"allOf": [
																{
																	"properties": {
																		"id": {
																			"description": "Identifier of the zone setting.",
																			"type": "string"
																		},
																		"modified_on": {
																			"description": "last time this setting was modified.",
																			"example": "2014-01-01T05:20:00.12345Z",
																			"format": "date-time",
																			"nullable": true,
																			"readOnly": true,
																			"type": "string"
																		}
																	},
																	"required": [
																		"id",
																		"modified_on"
																	]
																},
																{
																	"properties": {
																		"id": {
																			"description": "ID of the zone setting.",
																			"enum": [
																				"tc_regional"
																			],
																			"example": "tc_regional"
																		}
																	}
																}
															],
															"description": "Instructs Cloudflare to check a regional hub data center on the way to your upper tier. This can help improve performance for smart and custom tiered cache topologies.",
															"title": "Regional Tiered Cache"
														},
														{
															"properties": {
																"value": {
																	"allOf": [
																		{
																			"properties": {
																				"id": {
																					"description": "Identifier of the zone setting.",
																					"type": "string"
																				},
																				"modified_on": {
																					"description": "last time this setting was modified.",
																					"example": "2014-01-01T05:20:00.12345Z",
																					"format": "date-time",
																					"nullable": true,
																					"readOnly": true,
																					"type": "string"
																				}
																			},
																			"required": [
																				"id",
																				"modified_on"
																			]
																		},
																		{
																			"properties": {
																				"id": {
																					"description": "ID of the zone setting.",
																					"enum": [
																						"tc_regional"
																					],
																					"example": "tc_regional"
																				}
																			}
																		}
																	],
																	"description": "Instructs Cloudflare to check a regional hub data center on the way to your upper tier. This can help improve performance for smart and custom tiered cache topologies.",
																	"title": "Regional Tiered Cache"
																}
															},
															"required": [
																"value"
															]
														}
													]
												}
											}
										}
									]
								},
								{
									"properties": {
										"errors": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": [
												{
													"code": 7003,
													"message": "No route for the URI"
												}
											],
											"minLength": 1
										},
										"messages": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": []
										},
										"result": {
											"enum": [
												null
											],
											"nullable": true,
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												false
											],
											"example": false,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Change Regional Tiered Cache setting response failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Change Regional Tiered Cache setting",
		"tags": [
			"Zone Cache Settings"
		],
		"x-api-token-group": [
			"Zone Settings Write",
			"Zone Write"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"#zone_settings:edit"
			]
		},
		"x-cfPlanAvailability": {
			"business": false,
			"enterprise": true,
			"free": false,
			"pro": false
		}
	},
	"PATCH /zones/{zone_id}/cache/variants": {
		"description": "Variant support enables caching variants of images with certain file extensions in addition to the original. This only applies when the origin server sends the 'Vary: Accept' response header. If the origin server sends 'Vary: Accept' but does not serve the variant requested, the response will not be cached. This will be indicated with BYPASS cache status in the response headers.",
		"operationId": "zone-cache-settings-change-variants-setting",
		"parameters": [
			{
				"in": "path",
				"name": "zone_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"properties": {
							"value": {
								"description": "Value of the zone setting.",
								"properties": {
									"avif": {
										"description": "List of strings with the MIME types of all the variants that should be served for avif.",
										"example": [
											"image/webp",
											"image/jpeg"
										],
										"items": {
											"type": "string"
										},
										"type": "array",
										"uniqueItems": true
									},
									"bmp": {
										"description": "List of strings with the MIME types of all the variants that should be served for bmp.",
										"example": [
											"image/webp",
											"image/jpeg"
										],
										"items": {
											"type": "string"
										},
										"type": "array",
										"uniqueItems": true
									},
									"gif": {
										"description": "List of strings with the MIME types of all the variants that should be served for gif.",
										"example": [
											"image/webp",
											"image/jpeg"
										],
										"items": {
											"type": "string"
										},
										"type": "array",
										"uniqueItems": true
									},
									"jp2": {
										"description": "List of strings with the MIME types of all the variants that should be served for jp2.",
										"example": [
											"image/webp",
											"image/avif"
										],
										"items": {
											"type": "string"
										},
										"type": "array",
										"uniqueItems": true
									},
									"jpeg": {
										"description": "List of strings with the MIME types of all the variants that should be served for jpeg.",
										"example": [
											"image/webp",
											"image/avif"
										],
										"items": {
											"type": "string"
										},
										"type": "array",
										"uniqueItems": true
									},
									"jpg": {
										"description": "List of strings with the MIME types of all the variants that should be served for jpg.",
										"example": [
											"image/webp",
											"image/avif"
										],
										"items": {
											"type": "string"
										},
										"type": "array",
										"uniqueItems": true
									},
									"jpg2": {
										"description": "List of strings with the MIME types of all the variants that should be served for jpg2.",
										"example": [
											"image/webp",
											"image/avif"
										],
										"items": {
											"type": "string"
										},
										"type": "array",
										"uniqueItems": true
									},
									"png": {
										"description": "List of strings with the MIME types of all the variants that should be served for png.",
										"example": [
											"image/webp",
											"image/avif"
										],
										"items": {
											"type": "string"
										},
										"type": "array",
										"uniqueItems": true
									},
									"tif": {
										"description": "List of strings with the MIME types of all the variants that should be served for tif.",
										"example": [
											"image/webp",
											"image/avif"
										],
										"items": {
											"type": "string"
										},
										"type": "array",
										"uniqueItems": true
									},
									"tiff": {
										"description": "List of strings with the MIME types of all the variants that should be served for tiff.",
										"example": [
											"image/webp",
											"image/avif"
										],
										"items": {
											"type": "string"
										},
										"type": "array",
										"uniqueItems": true
									},
									"webp": {
										"description": "List of strings with the MIME types of all the variants that should be served for webp.",
										"example": [
											"image/jpeg",
											"image/avif"
										],
										"items": {
											"type": "string"
										},
										"type": "array",
										"uniqueItems": true
									}
								},
								"type": "object"
							}
						},
						"required": [
							"value"
						]
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"allOf": [
												{
													"properties": {
														"errors": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"messages": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"result": {
															"anyOf": [
																{
																	"type": "object"
																},
																{
																	"items": {},
																	"type": "array"
																},
																{
																	"type": "string"
																}
															]
														},
														"success": {
															"description": "Whether the API call was successful",
															"enum": [
																true
															],
															"example": true,
															"type": "boolean"
														}
													},
													"required": [
														"success",
														"errors",
														"messages",
														"result"
													],
													"type": "object"
												},
												{
													"properties": {
														"result": {
															"anyOf": [
																{
																	"nullable": true,
																	"type": "object"
																},
																{
																	"nullable": true,
																	"type": "string"
																}
															]
														}
													}
												}
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"type": "object"
												}
											}
										}
									]
								},
								{
									"properties": {
										"result": {
											"allOf": [
												{
													"allOf": [
														{
															"properties": {
																"id": {
																	"description": "Identifier of the zone setting.",
																	"type": "string"
																},
																"modified_on": {
																	"description": "last time this setting was modified.",
																	"example": "2014-01-01T05:20:00.12345Z",
																	"format": "date-time",
																	"nullable": true,
																	"readOnly": true,
																	"type": "string"
																}
															},
															"required": [
																"id",
																"modified_on"
															]
														},
														{
															"properties": {
																"id": {
																	"description": "ID of the zone setting.",
																	"enum": [
																		"variants"
																	],
																	"example": "variants"
																}
															}
														}
													],
													"description": "Variant support enables caching variants of images with certain file extensions in addition to the original. This only applies when the origin server sends the 'Vary: Accept' response header. If the origin server sends 'Vary: Accept' but does not serve the variant requested, the response will not be cached. This will be indicated with BYPASS cache status in the response headers.",
													"title": "Variants Caching"
												},
												{
													"properties": {
														"value": {
															"description": "Value of the zone setting.",
															"properties": {
																"avif": {
																	"description": "List of strings with the MIME types of all the variants that should be served for avif.",
																	"example": [
																		"image/webp",
																		"image/jpeg"
																	],
																	"items": {
																		"type": "string"
																	},
																	"type": "array",
																	"uniqueItems": true
																},
																"bmp": {
																	"description": "List of strings with the MIME types of all the variants that should be served for bmp.",
																	"example": [
																		"image/webp",
																		"image/jpeg"
																	],
																	"items": {
																		"type": "string"
																	},
																	"type": "array",
																	"uniqueItems": true
																},
																"gif": {
																	"description": "List of strings with the MIME types of all the variants that should be served for gif.",
																	"example": [
																		"image/webp",
																		"image/jpeg"
																	],
																	"items": {
																		"type": "string"
																	},
																	"type": "array",
																	"uniqueItems": true
																},
																"jp2": {
																	"description": "List of strings with the MIME types of all the variants that should be served for jp2.",
																	"example": [
																		"image/webp",
																		"image/avif"
																	],
																	"items": {
																		"type": "string"
																	},
																	"type": "array",
																	"uniqueItems": true
																},
																"jpeg": {
																	"description": "List of strings with the MIME types of all the variants that should be served for jpeg.",
																	"example": [
																		"image/webp",
																		"image/avif"
																	],
																	"items": {
																		"type": "string"
																	},
																	"type": "array",
																	"uniqueItems": true
																},
																"jpg": {
																	"description": "List of strings with the MIME types of all the variants that should be served for jpg.",
																	"example": [
																		"image/webp",
																		"image/avif"
																	],
																	"items": {
																		"type": "string"
																	},
																	"type": "array",
																	"uniqueItems": true
																},
																"jpg2": {
																	"description": "List of strings with the MIME types of all the variants that should be served for jpg2.",
																	"example": [
																		"image/webp",
																		"image/avif"
																	],
																	"items": {
																		"type": "string"
																	},
																	"type": "array",
																	"uniqueItems": true
																},
																"png": {
																	"description": "List of strings with the MIME types of all the variants that should be served for png.",
																	"example": [
																		"image/webp",
																		"image/avif"
																	],
																	"items": {
																		"type": "string"
																	},
																	"type": "array",
																	"uniqueItems": true
																},
																"tif": {
																	"description": "List of strings with the MIME types of all the variants that should be served for tif.",
																	"example": [
																		"image/webp",
																		"image/avif"
																	],
																	"items": {
																		"type": "string"
																	},
																	"type": "array",
																	"uniqueItems": true
																},
																"tiff": {
																	"description": "List of strings with the MIME types of all the variants that should be served for tiff.",
																	"example": [
																		"image/webp",
																		"image/avif"
																	],
																	"items": {
																		"type": "string"
																	},
																	"type": "array",
																	"uniqueItems": true
																},
																"webp": {
																	"description": "List of strings with the MIME types of all the variants that should be served for webp.",
																	"example": [
																		"image/jpeg",
																		"image/avif"
																	],
																	"items": {
																		"type": "string"
																	},
																	"type": "array",
																	"uniqueItems": true
																}
															},
															"type": "object"
														}
													},
													"required": [
														"value"
													]
												}
											]
										}
									}
								}
							]
						}
					}
				},
				"description": "Change variants setting response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"allOf": [
												{
													"allOf": [
														{
															"properties": {
																"errors": {
																	"example": [],
																	"items": {
																		"properties": {
																			"code": {
																				"minimum": 1000,
																				"type": "integer"
																			},
																			"message": {
																				"type": "string"
																			}
																		},
																		"required": [
																			"code",
																			"message"
																		],
																		"type": "object",
																		"uniqueItems": true
																	},
																	"type": "array"
																},
																"messages": {
																	"example": [],
																	"items": {
																		"properties": {
																			"code": {
																				"minimum": 1000,
																				"type": "integer"
																			},
																			"message": {
																				"type": "string"
																			}
																		},
																		"required": [
																			"code",
																			"message"
																		],
																		"type": "object",
																		"uniqueItems": true
																	},
																	"type": "array"
																},
																"result": {
																	"anyOf": [
																		{
																			"type": "object"
																		},
																		{
																			"items": {},
																			"type": "array"
																		},
																		{
																			"type": "string"
																		}
																	]
																},
																"success": {
																	"description": "Whether the API call was successful",
																	"enum": [
																		true
																	],
																	"example": true,
																	"type": "boolean"
																}
															},
															"required": [
																"success",
																"errors",
																"messages",
																"result"
															],
															"type": "object"
														},
														{
															"properties": {
																"result": {
																	"anyOf": [
																		{
																			"nullable": true,
																			"type": "object"
																		},
																		{
																			"nullable": true,
																			"type": "string"
																		}
																	]
																}
															}
														}
													],
													"type": "object"
												},
												{
													"properties": {
														"result": {
															"type": "object"
														}
													}
												}
											]
										},
										{
											"properties": {
												"result": {
													"allOf": [
														{
															"allOf": [
																{
																	"properties": {
																		"id": {
																			"description": "Identifier of the zone setting.",
																			"type": "string"
																		},
																		"modified_on": {
																			"description": "last time this setting was modified.",
																			"example": "2014-01-01T05:20:00.12345Z",
																			"format": "date-time",
																			"nullable": true,
																			"readOnly": true,
																			"type": "string"
																		}
																	},
																	"required": [
																		"id",
																		"modified_on"
																	]
																},
																{
																	"properties": {
																		"id": {
																			"description": "ID of the zone setting.",
																			"enum": [
																				"variants"
																			],
																			"example": "variants"
																		}
																	}
																}
															],
															"description": "Variant support enables caching variants of images with certain file extensions in addition to the original. This only applies when the origin server sends the 'Vary: Accept' response header. If the origin server sends 'Vary: Accept' but does not serve the variant requested, the response will not be cached. This will be indicated with BYPASS cache status in the response headers.",
															"title": "Variants Caching"
														},
														{
															"properties": {
																"value": {
																	"description": "Value of the zone setting.",
																	"properties": {
																		"avif": {
																			"description": "List of strings with the MIME types of all the variants that should be served for avif.",
																			"example": [
																				"image/webp",
																				"image/jpeg"
																			],
																			"items": {
																				"type": "string"
																			},
																			"type": "array",
																			"uniqueItems": true
																		},
																		"bmp": {
																			"description": "List of strings with the MIME types of all the variants that should be served for bmp.",
																			"example": [
																				"image/webp",
																				"image/jpeg"
																			],
																			"items": {
																				"type": "string"
																			},
																			"type": "array",
																			"uniqueItems": true
																		},
																		"gif": {
																			"description": "List of strings with the MIME types of all the variants that should be served for gif.",
																			"example": [
																				"image/webp",
																				"image/jpeg"
																			],
																			"items": {
																				"type": "string"
																			},
																			"type": "array",
																			"uniqueItems": true
																		},
																		"jp2": {
																			"description": "List of strings with the MIME types of all the variants that should be served for jp2.",
																			"example": [
																				"image/webp",
																				"image/avif"
																			],
																			"items": {
																				"type": "string"
																			},
																			"type": "array",
																			"uniqueItems": true
																		},
																		"jpeg": {
																			"description": "List of strings with the MIME types of all the variants that should be served for jpeg.",
																			"example": [
																				"image/webp",
																				"image/avif"
																			],
																			"items": {
																				"type": "string"
																			},
																			"type": "array",
																			"uniqueItems": true
																		},
																		"jpg": {
																			"description": "List of strings with the MIME types of all the variants that should be served for jpg.",
																			"example": [
																				"image/webp",
																				"image/avif"
																			],
																			"items": {
																				"type": "string"
																			},
																			"type": "array",
																			"uniqueItems": true
																		},
																		"jpg2": {
																			"description": "List of strings with the MIME types of all the variants that should be served for jpg2.",
																			"example": [
																				"image/webp",
																				"image/avif"
																			],
																			"items": {
																				"type": "string"
																			},
																			"type": "array",
																			"uniqueItems": true
																		},
																		"png": {
																			"description": "List of strings with the MIME types of all the variants that should be served for png.",
																			"example": [
																				"image/webp",
																				"image/avif"
																			],
																			"items": {
																				"type": "string"
																			},
																			"type": "array",
																			"uniqueItems": true
																		},
																		"tif": {
																			"description": "List of strings with the MIME types of all the variants that should be served for tif.",
																			"example": [
																				"image/webp",
																				"image/avif"
																			],
																			"items": {
																				"type": "string"
																			},
																			"type": "array",
																			"uniqueItems": true
																		},
																		"tiff": {
																			"description": "List of strings with the MIME types of all the variants that should be served for tiff.",
																			"example": [
																				"image/webp",
																				"image/avif"
																			],
																			"items": {
																				"type": "string"
																			},
																			"type": "array",
																			"uniqueItems": true
																		},
																		"webp": {
																			"description": "List of strings with the MIME types of all the variants that should be served for webp.",
																			"example": [
																				"image/jpeg",
																				"image/avif"
																			],
																			"items": {
																				"type": "string"
																			},
																			"type": "array",
																			"uniqueItems": true
																		}
																	},
																	"type": "object"
																}
															},
															"required": [
																"value"
															]
														}
													]
												}
											}
										}
									]
								},
								{
									"properties": {
										"errors": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": [
												{
													"code": 7003,
													"message": "No route for the URI"
												}
											],
											"minLength": 1
										},
										"messages": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": []
										},
										"result": {
											"enum": [
												null
											],
											"nullable": true,
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												false
											],
											"example": false,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Change variants setting response failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Change variants setting",
		"tags": [
			"Zone Cache Settings"
		],
		"x-api-token-group": [
			"Zone Settings Write",
			"Zone Write"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"#zone_settings:edit"
			]
		},
		"x-cfPlanAvailability": {
			"business": true,
			"enterprise": true,
			"free": false,
			"pro": true
		}
	},
	"PATCH /zones/{zone_id}/settings/origin_max_http_version": {
		"description": "Origin Max HTTP Setting Version sets the highest HTTP version Cloudflare will attempt to use with your origin. This setting allows Cloudflare to make HTTP/2 requests to your origin. (Refer to [Enable HTTP/2 to Origin](https://developers.cloudflare.com/cache/how-to/enable-http2-to-origin/), for more information.). The default value is \"2\" for all plan types except ENT where it is \"1\"",
		"operationId": "zone-cache-settings-change-origin-max-http-version-setting",
		"parameters": [
			{
				"in": "path",
				"name": "zone_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"properties": {
							"value": {
								"description": "Value of the Origin Max HTTP Version Setting.",
								"enum": [
									"2",
									"1"
								],
								"type": "string"
							}
						},
						"required": [
							"value"
						]
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"examples": {
							"max_http_version_2": {
								"value": {
									"errors": [],
									"messages": [],
									"result": {
										"editable": true,
										"id": "origin_max_http_version",
										"value": "2"
									},
									"success": true
								}
							}
						},
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"allOf": [
												{
													"properties": {
														"errors": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"messages": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"result": {
															"anyOf": [
																{
																	"type": "object"
																},
																{
																	"items": {},
																	"type": "array"
																},
																{
																	"type": "string"
																}
															]
														},
														"success": {
															"description": "Whether the API call was successful",
															"enum": [
																true
															],
															"example": true,
															"type": "boolean"
														}
													},
													"required": [
														"success",
														"errors",
														"messages",
														"result"
													],
													"type": "object"
												},
												{
													"properties": {
														"result": {
															"anyOf": [
																{
																	"nullable": true,
																	"type": "object"
																},
																{
																	"nullable": true,
																	"type": "string"
																}
															]
														}
													}
												}
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"type": "object"
												}
											}
										}
									]
								},
								{
									"properties": {
										"result": {
											"allOf": [
												{
													"allOf": [
														{
															"properties": {
																"id": {
																	"description": "Identifier of the zone setting.",
																	"type": "string"
																},
																"modified_on": {
																	"description": "last time this setting was modified.",
																	"example": "2014-01-01T05:20:00.12345Z",
																	"format": "date-time",
																	"nullable": true,
																	"readOnly": true,
																	"type": "string"
																}
															},
															"required": [
																"id",
																"modified_on"
															]
														},
														{
															"properties": {
																"id": {
																	"description": "Value of the zone setting.",
																	"enum": [
																		"origin_max_http_version"
																	],
																	"example": "origin_max_http_version"
																}
															}
														}
													],
													"description": "Origin Max HTTP Setting Version sets the highest HTTP version Cloudflare will attempt to use with your origin. This setting allows Cloudflare to make HTTP/2 requests to your origin. (Refer to [Enable HTTP/2 to Origin](https://developers.cloudflare.com/cache/how-to/enable-http2-to-origin/), for more information.). The default value is \"2\" for all plan types except ENT where it is \"1\"",
													"title": "Origin Max HTTP Version"
												},
												{
													"properties": {
														"value": {
															"description": "Value of the Origin Max HTTP Version Setting.",
															"enum": [
																"2",
																"1"
															],
															"type": "string"
														}
													},
													"required": [
														"value"
													]
												}
											]
										}
									}
								}
							]
						}
					}
				},
				"description": "Change Origin Max HTTP Version Setting Response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"examples": {
							"Error": {
								"value": {
									"errors": [
										{
											"code": 12345,
											"message": "Some error message"
										}
									],
									"messages": [],
									"result": null,
									"success": false
								}
							}
						},
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"allOf": [
												{
													"allOf": [
														{
															"properties": {
																"errors": {
																	"example": [],
																	"items": {
																		"properties": {
																			"code": {
																				"minimum": 1000,
																				"type": "integer"
																			},
																			"message": {
																				"type": "string"
																			}
																		},
																		"required": [
																			"code",
																			"message"
																		],
																		"type": "object",
																		"uniqueItems": true
																	},
																	"type": "array"
																},
																"messages": {
																	"example": [],
																	"items": {
																		"properties": {
																			"code": {
																				"minimum": 1000,
																				"type": "integer"
																			},
																			"message": {
																				"type": "string"
																			}
																		},
																		"required": [
																			"code",
																			"message"
																		],
																		"type": "object",
																		"uniqueItems": true
																	},
																	"type": "array"
																},
																"result": {
																	"anyOf": [
																		{
																			"type": "object"
																		},
																		{
																			"items": {},
																			"type": "array"
																		},
																		{
																			"type": "string"
																		}
																	]
																},
																"success": {
																	"description": "Whether the API call was successful",
																	"enum": [
																		true
																	],
																	"example": true,
																	"type": "boolean"
																}
															},
															"required": [
																"success",
																"errors",
																"messages",
																"result"
															],
															"type": "object"
														},
														{
															"properties": {
																"result": {
																	"anyOf": [
																		{
																			"nullable": true,
																			"type": "object"
																		},
																		{
																			"nullable": true,
																			"type": "string"
																		}
																	]
																}
															}
														}
													],
													"type": "object"
												},
												{
													"properties": {
														"result": {
															"type": "object"
														}
													}
												}
											]
										},
										{
											"properties": {
												"result": {
													"allOf": [
														{
															"allOf": [
																{
																	"properties": {
																		"id": {
																			"description": "Identifier of the zone setting.",
																			"type": "string"
																		},
																		"modified_on": {
																			"description": "last time this setting was modified.",
																			"example": "2014-01-01T05:20:00.12345Z",
																			"format": "date-time",
																			"nullable": true,
																			"readOnly": true,
																			"type": "string"
																		}
																	},
																	"required": [
																		"id",
																		"modified_on"
																	]
																},
																{
																	"properties": {
																		"id": {
																			"description": "Value of the zone setting.",
																			"enum": [
																				"origin_max_http_version"
																			],
																			"example": "origin_max_http_version"
																		}
																	}
																}
															],
															"description": "Origin Max HTTP Setting Version sets the highest HTTP version Cloudflare will attempt to use with your origin. This setting allows Cloudflare to make HTTP/2 requests to your origin. (Refer to [Enable HTTP/2 to Origin](https://developers.cloudflare.com/cache/how-to/enable-http2-to-origin/), for more information.). The default value is \"2\" for all plan types except ENT where it is \"1\"",
															"title": "Origin Max HTTP Version"
														},
														{
															"properties": {
																"value": {
																	"description": "Value of the Origin Max HTTP Version Setting.",
																	"enum": [
																		"2",
																		"1"
																	],
																	"type": "string"
																}
															},
															"required": [
																"value"
															]
														}
													]
												}
											}
										}
									]
								},
								{
									"properties": {
										"errors": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": [
												{
													"code": 7003,
													"message": "No route for the URI"
												}
											],
											"minLength": 1
										},
										"messages": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": []
										},
										"result": {
											"enum": [
												null
											],
											"nullable": true,
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												false
											],
											"example": false,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Change Origin Max HTTP Version Response Failure"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Change Origin Max HTTP Version Setting",
		"tags": [
			"Zone Cache Settings"
		],
		"x-api-token-group": [
			"Zone Settings Write",
			"Zone Write"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"#zone_settings:edit"
			]
		},
		"x-cfPlanAvailability": {
			"business": true,
			"enterprise": true,
			"free": true,
			"pro": true
		}
	},
	"POST /zones/{zone_id}/cache/cache_reserve_clear": {
		"description": "You can use Cache Reserve Clear to clear your Cache Reserve, but you must first disable Cache Reserve. In most cases, this will be accomplished within 24 hours. You cannot re-enable Cache Reserve while this process is ongoing. Keep in mind that you cannot undo or cancel this operation.",
		"operationId": "zone-cache-settings-start-cache-reserve-clear",
		"parameters": [
			{
				"in": "path",
				"name": "zone_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"readOnly": true,
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"example": "{}"
				}
			},
			"description": "The request body is currently not used.",
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"examples": {
							"In-progress": {
								"value": {
									"errors": [],
									"messages": [],
									"result": {
										"id": "cache_reserve_clear",
										"start_ts": "2023-10-02T10:00:00.12345Z",
										"state": "In-progress"
									},
									"success": true
								}
							}
						},
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"allOf": [
												{
													"properties": {
														"errors": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"messages": {
															"example": [],
															"items": {
																"properties": {
																	"code": {
																		"minimum": 1000,
																		"type": "integer"
																	},
																	"message": {
																		"type": "string"
																	}
																},
																"required": [
																	"code",
																	"message"
																],
																"type": "object",
																"uniqueItems": true
															},
															"type": "array"
														},
														"result": {
															"anyOf": [
																{
																	"type": "object"
																},
																{
																	"items": {},
																	"type": "array"
																},
																{
																	"type": "string"
																}
															]
														},
														"success": {
															"description": "Whether the API call was successful",
															"enum": [
																true
															],
															"example": true,
															"type": "boolean"
														}
													},
													"required": [
														"success",
														"errors",
														"messages",
														"result"
													],
													"type": "object"
												},
												{
													"properties": {
														"result": {
															"anyOf": [
																{
																	"nullable": true,
																	"type": "object"
																},
																{
																	"nullable": true,
																	"type": "string"
																}
															]
														}
													}
												}
											],
											"type": "object"
										},
										{
											"properties": {
												"result": {
													"type": "object"
												}
											}
										}
									]
								},
								{
									"properties": {
										"result": {
											"allOf": [
												{
													"allOf": [
														{
															"properties": {
																"id": {
																	"description": "Identifier of the zone setting.",
																	"type": "string"
																},
																"modified_on": {
																	"description": "last time this setting was modified.",
																	"example": "2014-01-01T05:20:00.12345Z",
																	"format": "date-time",
																	"nullable": true,
																	"readOnly": true,
																	"type": "string"
																}
															},
															"required": [
																"id",
																"modified_on"
															]
														},
														{
															"properties": {
																"id": {
																	"description": "ID of the zone setting.",
																	"enum": [
																		"cache_reserve_clear"
																	],
																	"example": "cache_reserve_clear"
																}
															}
														}
													],
													"description": "You can use Cache Reserve Clear to clear your Cache Reserve, but you must first disable Cache Reserve. In most cases, this will be accomplished within 24 hours. You cannot re-enable Cache Reserve while this process is ongoing. Keep in mind that you cannot undo or cancel this operation.",
													"title": "Cache Reserve Clear"
												},
												{
													"properties": {
														"end_ts": {
															"description": "The time that the latest Cache Reserve Clear operation completed.",
															"example": "2023-10-02T12:00:00.12345Z",
															"format": "date-time",
															"type": "string"
														},
														"start_ts": {
															"description": "The time that the latest Cache Reserve Clear operation started.",
															"example": "2023-10-02T10:00:00.12345Z",
															"format": "date-time",
															"type": "string"
														},
														"state": {
															"description": "The current state of the Cache Reserve Clear operation.",
															"enum": [
																"In-progress",
																"Completed"
															],
															"example": "In-progress",
															"type": "string"
														}
													},
													"required": [
														"state",
														"start_ts"
													]
												}
											]
										}
									}
								}
							]
						}
					}
				},
				"description": "Start Cache Reserve Clear response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"examples": {
							"Rejected": {
								"value": {
									"errors": [
										{
											"code": 1152,
											"message": "Turn off Cache Reserve sync to proceed with deletion."
										}
									],
									"messages": [],
									"result": null,
									"success": false
								}
							}
						},
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"allOf": [
												{
													"allOf": [
														{
															"properties": {
																"errors": {
																	"example": [],
																	"items": {
																		"properties": {
																			"code": {
																				"minimum": 1000,
																				"type": "integer"
																			},
																			"message": {
																				"type": "string"
																			}
																		},
																		"required": [
																			"code",
																			"message"
																		],
																		"type": "object",
																		"uniqueItems": true
																	},
																	"type": "array"
																},
																"messages": {
																	"example": [],
																	"items": {
																		"properties": {
																			"code": {
																				"minimum": 1000,
																				"type": "integer"
																			},
																			"message": {
																				"type": "string"
																			}
																		},
																		"required": [
																			"code",
																			"message"
																		],
																		"type": "object",
																		"uniqueItems": true
																	},
																	"type": "array"
																},
																"result": {
																	"anyOf": [
																		{
																			"type": "object"
																		},
																		{
																			"items": {},
																			"type": "array"
																		},
																		{
																			"type": "string"
																		}
																	]
																},
																"success": {
																	"description": "Whether the API call was successful",
																	"enum": [
																		true
																	],
																	"example": true,
																	"type": "boolean"
																}
															},
															"required": [
																"success",
																"errors",
																"messages",
																"result"
															],
															"type": "object"
														},
														{
															"properties": {
																"result": {
																	"anyOf": [
																		{
																			"nullable": true,
																			"type": "object"
																		},
																		{
																			"nullable": true,
																			"type": "string"
																		}
																	]
																}
															}
														}
													],
													"type": "object"
												},
												{
													"properties": {
														"result": {
															"type": "object"
														}
													}
												}
											]
										},
										{
											"properties": {
												"result": {
													"allOf": [
														{
															"allOf": [
																{
																	"properties": {
																		"id": {
																			"description": "Identifier of the zone setting.",
																			"type": "string"
																		},
																		"modified_on": {
																			"description": "last time this setting was modified.",
																			"example": "2014-01-01T05:20:00.12345Z",
																			"format": "date-time",
																			"nullable": true,
																			"readOnly": true,
																			"type": "string"
																		}
																	},
																	"required": [
																		"id",
																		"modified_on"
																	]
																},
																{
																	"properties": {
																		"id": {
																			"description": "ID of the zone setting.",
																			"enum": [
																				"cache_reserve_clear"
																			],
																			"example": "cache_reserve_clear"
																		}
																	}
																}
															],
															"description": "You can use Cache Reserve Clear to clear your Cache Reserve, but you must first disable Cache Reserve. In most cases, this will be accomplished within 24 hours. You cannot re-enable Cache Reserve while this process is ongoing. Keep in mind that you cannot undo or cancel this operation.",
															"title": "Cache Reserve Clear"
														},
														{
															"properties": {
																"end_ts": {
																	"description": "The time that the latest Cache Reserve Clear operation completed.",
																	"example": "2023-10-02T12:00:00.12345Z",
																	"format": "date-time",
																	"type": "string"
																},
																"start_ts": {
																	"description": "The time that the latest Cache Reserve Clear operation started.",
																	"example": "2023-10-02T10:00:00.12345Z",
																	"format": "date-time",
																	"type": "string"
																},
																"state": {
																	"description": "The current state of the Cache Reserve Clear operation.",
																	"enum": [
																		"In-progress",
																		"Completed"
																	],
																	"example": "In-progress",
																	"type": "string"
																}
															},
															"required": [
																"state",
																"start_ts"
															]
														}
													]
												}
											}
										}
									]
								},
								{
									"properties": {
										"errors": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": [
												{
													"code": 7003,
													"message": "No route for the URI"
												}
											],
											"minLength": 1
										},
										"messages": {
											"allOf": [
												{
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												}
											],
											"example": []
										},
										"result": {
											"enum": [
												null
											],
											"nullable": true,
											"type": "object"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												false
											],
											"example": false,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages",
										"result"
									],
									"type": "object"
								}
							]
						}
					}
				},
				"description": "Start Cache Reserve Clear failure response"
			}
		},
		"security": [
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Start Cache Reserve Clear",
		"tags": [
			"Zone Cache Settings"
		],
		"x-api-token-group": [
			"Zone Settings Write",
			"Zone Write"
		],
		"x-cfPermissionsRequired": {
			"enum": [
				"#zone_settings:edit"
			]
		},
		"x-cfPlanAvailability": {
			"business": true,
			"enterprise": true,
			"free": true,
			"pro": true
		}
	}
}