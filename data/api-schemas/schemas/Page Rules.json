{
	"DELETE /zones/{zone_id}/pagerules/{pagerule_id}": {
		"description": "Deletes an existing Page Rule.",
		"operationId": "page-rules-delete-a-page-rule",
		"parameters": [
			{
				"in": "path",
				"name": "pagerule_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "zone_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"nullable": true,
											"properties": {
												"id": {
													"description": "Identifier",
													"example": "023e105f4ecef8ad9ca31a8372d0c353",
													"maxLength": 32,
													"type": "string"
												}
											},
											"required": [
												"id"
											],
											"type": "object"
										}
									}
								}
							],
							"type": "object"
						}
					}
				},
				"description": "Delete a Page Rule response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Delete a Page Rule response failure"
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Delete a Page Rule",
		"tags": [
			"Page Rules"
		]
	},
	"GET /zones/{zone_id}/pagerules": {
		"description": "Fetches Page Rules in a zone.",
		"operationId": "page-rules-list-page-rules",
		"parameters": [
			{
				"in": "path",
				"name": "zone_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "order",
				"schema": {
					"default": "priority",
					"description": "The field used to sort returned Page Rules.",
					"enum": [
						"status",
						"priority"
					],
					"example": "status",
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "direction",
				"schema": {
					"default": "desc",
					"description": "The direction used to sort returned Page Rules.",
					"enum": [
						"asc",
						"desc"
					],
					"example": "desc",
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "match",
				"schema": {
					"default": "all",
					"description": "When set to `all`, all the search requirements must match. When set to `any`, only one of the search requirements has to match.",
					"enum": [
						"any",
						"all"
					],
					"type": "string"
				}
			},
			{
				"in": "query",
				"name": "status",
				"schema": {
					"default": "disabled",
					"description": "The status of the Page Rule.",
					"enum": [
						"active",
						"disabled"
					],
					"example": "active",
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"properties": {
										"errors": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"messages": {
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										},
										"success": {
											"description": "Whether the API call was successful",
											"enum": [
												true
											],
											"example": true,
											"type": "boolean"
										}
									},
									"required": [
										"success",
										"errors",
										"messages"
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"items": {
												"properties": {
													"actions": {
														"description": "The set of actions to perform if the targets of this rule match the\nrequest. Actions can redirect to another URL or override settings, but\nnot both.\n",
														"example": [
															{
																"id": "browser_check",
																"value": "on"
															}
														],
														"items": {
															"anyOf": [
																{
																	"properties": {
																		"id": {
																			"description": "Redirects one URL to another using an `HTTP 301/302` redirect. Refer\nto [Wildcard matching and referencing](https://developers.cloudflare.com/rules/page-rules/reference/wildcard-matching/).\n",
																			"enum": [
																				"forwarding_url"
																			],
																			"example": "forwarding_url"
																		},
																		"value": {
																			"properties": {
																				"status_code": {
																					"description": "The status code to use for the URL redirect. 301 is a permanent\nredirect. 302 is a temporary redirect.\n",
																					"enum": [
																						301,
																						302
																					],
																					"example": "temporary",
																					"type": "integer"
																				},
																				"url": {
																					"description": "The URL to redirect the request to.\nNotes: ${num} refers to the position of '*' in the constraint value.",
																					"example": "http://www.example.com/somewhere/$1/astring/$2/anotherstring/$3",
																					"maxLength": 1500,
																					"type": "string"
																				}
																			}
																		}
																	},
																	"type": "object"
																}
															]
														},
														"type": "array"
													},
													"created_on": {
														"description": "The timestamp of when the Page Rule was created.",
														"example": "2014-01-01T05:20:00.12345Z",
														"format": "date-time",
														"readOnly": true,
														"type": "string"
													},
													"id": {
														"description": "Identifier",
														"example": "023e105f4ecef8ad9ca31a8372d0c353",
														"maxLength": 32,
														"type": "string"
													},
													"modified_on": {
														"description": "The timestamp of when the Page Rule was last modified.",
														"example": "2014-01-01T05:20:00.12345Z",
														"format": "date-time",
														"readOnly": true,
														"type": "string"
													},
													"priority": {
														"default": 1,
														"description": "The priority of the rule, used to define which Page Rule is processed\nover another. A higher number indicates a higher priority. For example,\nif you have a catch-all Page Rule (rule A: `/images/*`) but want a more\nspecific Page Rule to take precedence (rule B: `/images/special/*`),\nspecify a higher priority for rule B so it overrides rule A.\n",
														"type": "integer"
													},
													"status": {
														"default": "disabled",
														"description": "The status of the Page Rule.",
														"enum": [
															"active",
															"disabled"
														],
														"example": "active",
														"type": "string"
													},
													"targets": {
														"description": "The rule targets to evaluate on each request.",
														"example": [
															{
																"constraint": {
																	"operator": "matches",
																	"value": "*example.com/images/*"
																},
																"target": "url"
															}
														],
														"items": {
															"description": "A request condition target.",
															"oneOf": [
																{
																	"description": "URL target.",
																	"properties": {
																		"constraint": {
																			"allOf": [
																				{
																					"description": "String constraint.",
																					"properties": {
																						"operator": {
																							"default": "contains",
																							"description": "The matches operator can use asterisks and pipes as wildcard and 'or' operators.",
																							"enum": [
																								"matches",
																								"contains",
																								"equals",
																								"not_equal",
																								"not_contain"
																							]
																						},
																						"value": {
																							"description": "The value to apply the operator to.",
																							"type": "string"
																						}
																					},
																					"required": [
																						"operator",
																						"value"
																					],
																					"type": "object"
																				},
																				{
																					"properties": {
																						"value": {
																							"description": "The URL pattern to match against the current request. The pattern may contain up to four asterisks ('*') as placeholders.",
																							"example": "*example.com/images/*",
																							"pattern": "^(https?://)?(([-a-zA-Z0-9*]*\\.)+[-a-zA-Z0-9]{2,20})(:(8080|8443|443|80))?(/[\\S]+)?$",
																							"type": "string"
																						}
																					}
																				}
																			],
																			"description": "The constraint of a target.",
																			"type": "object"
																		},
																		"target": {
																			"description": "A target based on the URL of the request.",
																			"enum": [
																				"url"
																			],
																			"example": "url"
																		}
																	},
																	"type": "object"
																}
															],
															"required": [
																"target",
																"constraint"
															]
														},
														"type": "array"
													}
												},
												"required": [
													"id",
													"targets",
													"actions",
													"priority",
													"status",
													"modified_on",
													"created_on"
												],
												"type": "object"
											},
											"type": "array"
										}
									}
								}
							]
						}
					}
				},
				"description": "List Page Rules response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "List Page Rules response failure"
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "List Page Rules",
		"tags": [
			"Page Rules"
		]
	},
	"GET /zones/{zone_id}/pagerules/{pagerule_id}": {
		"description": "Fetches the details of a Page Rule.",
		"operationId": "page-rules-get-a-page-rule",
		"parameters": [
			{
				"in": "path",
				"name": "pagerule_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "zone_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			}
		],
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"properties": {
												"errors": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"messages": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"success": {
													"description": "Whether the API call was successful",
													"enum": [
														true
													],
													"example": true,
													"type": "boolean"
												}
											},
											"required": [
												"success",
												"errors",
												"messages"
											],
											"type": "object"
										}
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"actions": {
													"description": "The set of actions to perform if the targets of this rule match the\nrequest. Actions can redirect to another URL or override settings, but\nnot both.\n",
													"example": [
														{
															"id": "browser_check",
															"value": "on"
														}
													],
													"items": {
														"anyOf": [
															{
																"properties": {
																	"id": {
																		"description": "Redirects one URL to another using an `HTTP 301/302` redirect. Refer\nto [Wildcard matching and referencing](https://developers.cloudflare.com/rules/page-rules/reference/wildcard-matching/).\n",
																		"enum": [
																			"forwarding_url"
																		],
																		"example": "forwarding_url"
																	},
																	"value": {
																		"properties": {
																			"status_code": {
																				"description": "The status code to use for the URL redirect. 301 is a permanent\nredirect. 302 is a temporary redirect.\n",
																				"enum": [
																					301,
																					302
																				],
																				"example": "temporary",
																				"type": "integer"
																			},
																			"url": {
																				"description": "The URL to redirect the request to.\nNotes: ${num} refers to the position of '*' in the constraint value.",
																				"example": "http://www.example.com/somewhere/$1/astring/$2/anotherstring/$3",
																				"maxLength": 1500,
																				"type": "string"
																			}
																		}
																	}
																},
																"type": "object"
															}
														]
													},
													"type": "array"
												},
												"created_on": {
													"description": "The timestamp of when the Page Rule was created.",
													"example": "2014-01-01T05:20:00.12345Z",
													"format": "date-time",
													"readOnly": true,
													"type": "string"
												},
												"id": {
													"description": "Identifier",
													"example": "023e105f4ecef8ad9ca31a8372d0c353",
													"maxLength": 32,
													"type": "string"
												},
												"modified_on": {
													"description": "The timestamp of when the Page Rule was last modified.",
													"example": "2014-01-01T05:20:00.12345Z",
													"format": "date-time",
													"readOnly": true,
													"type": "string"
												},
												"priority": {
													"default": 1,
													"description": "The priority of the rule, used to define which Page Rule is processed\nover another. A higher number indicates a higher priority. For example,\nif you have a catch-all Page Rule (rule A: `/images/*`) but want a more\nspecific Page Rule to take precedence (rule B: `/images/special/*`),\nspecify a higher priority for rule B so it overrides rule A.\n",
													"type": "integer"
												},
												"status": {
													"default": "disabled",
													"description": "The status of the Page Rule.",
													"enum": [
														"active",
														"disabled"
													],
													"example": "active",
													"type": "string"
												},
												"targets": {
													"description": "The rule targets to evaluate on each request.",
													"example": [
														{
															"constraint": {
																"operator": "matches",
																"value": "*example.com/images/*"
															},
															"target": "url"
														}
													],
													"items": {
														"description": "A request condition target.",
														"oneOf": [
															{
																"description": "URL target.",
																"properties": {
																	"constraint": {
																		"allOf": [
																			{
																				"description": "String constraint.",
																				"properties": {
																					"operator": {
																						"default": "contains",
																						"description": "The matches operator can use asterisks and pipes as wildcard and 'or' operators.",
																						"enum": [
																							"matches",
																							"contains",
																							"equals",
																							"not_equal",
																							"not_contain"
																						]
																					},
																					"value": {
																						"description": "The value to apply the operator to.",
																						"type": "string"
																					}
																				},
																				"required": [
																					"operator",
																					"value"
																				],
																				"type": "object"
																			},
																			{
																				"properties": {
																					"value": {
																						"description": "The URL pattern to match against the current request. The pattern may contain up to four asterisks ('*') as placeholders.",
																						"example": "*example.com/images/*",
																						"pattern": "^(https?://)?(([-a-zA-Z0-9*]*\\.)+[-a-zA-Z0-9]{2,20})(:(8080|8443|443|80))?(/[\\S]+)?$",
																						"type": "string"
																					}
																				}
																			}
																		],
																		"description": "The constraint of a target.",
																		"type": "object"
																	},
																	"target": {
																		"description": "A target based on the URL of the request.",
																		"enum": [
																			"url"
																		],
																		"example": "url"
																	}
																},
																"type": "object"
															}
														],
														"required": [
															"target",
															"constraint"
														]
													},
													"type": "array"
												}
											},
											"required": [
												"id",
												"targets",
												"actions",
												"priority",
												"status",
												"modified_on",
												"created_on"
											],
											"type": "object"
										}
									}
								}
							]
						}
					}
				},
				"description": "Get a Page Rule response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Get a Page Rule response failure"
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Get a Page Rule",
		"tags": [
			"Page Rules"
		]
	},
	"PATCH /zones/{zone_id}/pagerules/{pagerule_id}": {
		"description": "Updates one or more fields of an existing Page Rule.",
		"operationId": "page-rules-edit-a-page-rule",
		"parameters": [
			{
				"in": "path",
				"name": "pagerule_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "zone_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"properties": {
							"actions": {
								"description": "The set of actions to perform if the targets of this rule match the\nrequest. Actions can redirect to another URL or override settings, but\nnot both.\n",
								"example": [
									{
										"id": "browser_check",
										"value": "on"
									}
								],
								"items": {
									"anyOf": [
										{
											"properties": {
												"id": {
													"description": "Redirects one URL to another using an `HTTP 301/302` redirect. Refer\nto [Wildcard matching and referencing](https://developers.cloudflare.com/rules/page-rules/reference/wildcard-matching/).\n",
													"enum": [
														"forwarding_url"
													],
													"example": "forwarding_url"
												},
												"value": {
													"properties": {
														"status_code": {
															"description": "The status code to use for the URL redirect. 301 is a permanent\nredirect. 302 is a temporary redirect.\n",
															"enum": [
																301,
																302
															],
															"example": "temporary",
															"type": "integer"
														},
														"url": {
															"description": "The URL to redirect the request to.\nNotes: ${num} refers to the position of '*' in the constraint value.",
															"example": "http://www.example.com/somewhere/$1/astring/$2/anotherstring/$3",
															"maxLength": 1500,
															"type": "string"
														}
													}
												}
											},
											"type": "object"
										}
									]
								},
								"type": "array"
							},
							"priority": {
								"default": 1,
								"description": "The priority of the rule, used to define which Page Rule is processed\nover another. A higher number indicates a higher priority. For example,\nif you have a catch-all Page Rule (rule A: `/images/*`) but want a more\nspecific Page Rule to take precedence (rule B: `/images/special/*`),\nspecify a higher priority for rule B so it overrides rule A.\n",
								"type": "integer"
							},
							"status": {
								"default": "disabled",
								"description": "The status of the Page Rule.",
								"enum": [
									"active",
									"disabled"
								],
								"example": "active",
								"type": "string"
							},
							"targets": {
								"description": "The rule targets to evaluate on each request.",
								"example": [
									{
										"constraint": {
											"operator": "matches",
											"value": "*example.com/images/*"
										},
										"target": "url"
									}
								],
								"items": {
									"description": "A request condition target.",
									"oneOf": [
										{
											"description": "URL target.",
											"properties": {
												"constraint": {
													"allOf": [
														{
															"description": "String constraint.",
															"properties": {
																"operator": {
																	"default": "contains",
																	"description": "The matches operator can use asterisks and pipes as wildcard and 'or' operators.",
																	"enum": [
																		"matches",
																		"contains",
																		"equals",
																		"not_equal",
																		"not_contain"
																	]
																},
																"value": {
																	"description": "The value to apply the operator to.",
																	"type": "string"
																}
															},
															"required": [
																"operator",
																"value"
															],
															"type": "object"
														},
														{
															"properties": {
																"value": {
																	"description": "The URL pattern to match against the current request. The pattern may contain up to four asterisks ('*') as placeholders.",
																	"example": "*example.com/images/*",
																	"pattern": "^(https?://)?(([-a-zA-Z0-9*]*\\.)+[-a-zA-Z0-9]{2,20})(:(8080|8443|443|80))?(/[\\S]+)?$",
																	"type": "string"
																}
															}
														}
													],
													"description": "The constraint of a target.",
													"type": "object"
												},
												"target": {
													"description": "A target based on the URL of the request.",
													"enum": [
														"url"
													],
													"example": "url"
												}
											},
											"type": "object"
										}
									],
									"required": [
										"target",
										"constraint"
									]
								},
								"type": "array"
							}
						},
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"properties": {
												"errors": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"messages": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"success": {
													"description": "Whether the API call was successful",
													"enum": [
														true
													],
													"example": true,
													"type": "boolean"
												}
											},
											"required": [
												"success",
												"errors",
												"messages"
											],
											"type": "object"
										}
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"actions": {
													"description": "The set of actions to perform if the targets of this rule match the\nrequest. Actions can redirect to another URL or override settings, but\nnot both.\n",
													"example": [
														{
															"id": "browser_check",
															"value": "on"
														}
													],
													"items": {
														"anyOf": [
															{
																"properties": {
																	"id": {
																		"description": "Redirects one URL to another using an `HTTP 301/302` redirect. Refer\nto [Wildcard matching and referencing](https://developers.cloudflare.com/rules/page-rules/reference/wildcard-matching/).\n",
																		"enum": [
																			"forwarding_url"
																		],
																		"example": "forwarding_url"
																	},
																	"value": {
																		"properties": {
																			"status_code": {
																				"description": "The status code to use for the URL redirect. 301 is a permanent\nredirect. 302 is a temporary redirect.\n",
																				"enum": [
																					301,
																					302
																				],
																				"example": "temporary",
																				"type": "integer"
																			},
																			"url": {
																				"description": "The URL to redirect the request to.\nNotes: ${num} refers to the position of '*' in the constraint value.",
																				"example": "http://www.example.com/somewhere/$1/astring/$2/anotherstring/$3",
																				"maxLength": 1500,
																				"type": "string"
																			}
																		}
																	}
																},
																"type": "object"
															}
														]
													},
													"type": "array"
												},
												"created_on": {
													"description": "The timestamp of when the Page Rule was created.",
													"example": "2014-01-01T05:20:00.12345Z",
													"format": "date-time",
													"readOnly": true,
													"type": "string"
												},
												"id": {
													"description": "Identifier",
													"example": "023e105f4ecef8ad9ca31a8372d0c353",
													"maxLength": 32,
													"type": "string"
												},
												"modified_on": {
													"description": "The timestamp of when the Page Rule was last modified.",
													"example": "2014-01-01T05:20:00.12345Z",
													"format": "date-time",
													"readOnly": true,
													"type": "string"
												},
												"priority": {
													"default": 1,
													"description": "The priority of the rule, used to define which Page Rule is processed\nover another. A higher number indicates a higher priority. For example,\nif you have a catch-all Page Rule (rule A: `/images/*`) but want a more\nspecific Page Rule to take precedence (rule B: `/images/special/*`),\nspecify a higher priority for rule B so it overrides rule A.\n",
													"type": "integer"
												},
												"status": {
													"default": "disabled",
													"description": "The status of the Page Rule.",
													"enum": [
														"active",
														"disabled"
													],
													"example": "active",
													"type": "string"
												},
												"targets": {
													"description": "The rule targets to evaluate on each request.",
													"example": [
														{
															"constraint": {
																"operator": "matches",
																"value": "*example.com/images/*"
															},
															"target": "url"
														}
													],
													"items": {
														"description": "A request condition target.",
														"oneOf": [
															{
																"description": "URL target.",
																"properties": {
																	"constraint": {
																		"allOf": [
																			{
																				"description": "String constraint.",
																				"properties": {
																					"operator": {
																						"default": "contains",
																						"description": "The matches operator can use asterisks and pipes as wildcard and 'or' operators.",
																						"enum": [
																							"matches",
																							"contains",
																							"equals",
																							"not_equal",
																							"not_contain"
																						]
																					},
																					"value": {
																						"description": "The value to apply the operator to.",
																						"type": "string"
																					}
																				},
																				"required": [
																					"operator",
																					"value"
																				],
																				"type": "object"
																			},
																			{
																				"properties": {
																					"value": {
																						"description": "The URL pattern to match against the current request. The pattern may contain up to four asterisks ('*') as placeholders.",
																						"example": "*example.com/images/*",
																						"pattern": "^(https?://)?(([-a-zA-Z0-9*]*\\.)+[-a-zA-Z0-9]{2,20})(:(8080|8443|443|80))?(/[\\S]+)?$",
																						"type": "string"
																					}
																				}
																			}
																		],
																		"description": "The constraint of a target.",
																		"type": "object"
																	},
																	"target": {
																		"description": "A target based on the URL of the request.",
																		"enum": [
																			"url"
																		],
																		"example": "url"
																	}
																},
																"type": "object"
															}
														],
														"required": [
															"target",
															"constraint"
														]
													},
													"type": "array"
												}
											},
											"required": [
												"id",
												"targets",
												"actions",
												"priority",
												"status",
												"modified_on",
												"created_on"
											],
											"type": "object"
										}
									}
								}
							]
						}
					}
				},
				"description": "Edit a Page Rule response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Edit a Page Rule response failure"
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Edit a Page Rule",
		"tags": [
			"Page Rules"
		]
	},
	"POST /zones/{zone_id}/pagerules": {
		"description": "Creates a new Page Rule.",
		"operationId": "page-rules-create-a-page-rule",
		"parameters": [
			{
				"in": "path",
				"name": "zone_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"properties": {
							"actions": {
								"description": "The set of actions to perform if the targets of this rule match the\nrequest. Actions can redirect to another URL or override settings, but\nnot both.\n",
								"example": [
									{
										"id": "browser_check",
										"value": "on"
									}
								],
								"items": {
									"anyOf": [
										{
											"properties": {
												"id": {
													"description": "Redirects one URL to another using an `HTTP 301/302` redirect. Refer\nto [Wildcard matching and referencing](https://developers.cloudflare.com/rules/page-rules/reference/wildcard-matching/).\n",
													"enum": [
														"forwarding_url"
													],
													"example": "forwarding_url"
												},
												"value": {
													"properties": {
														"status_code": {
															"description": "The status code to use for the URL redirect. 301 is a permanent\nredirect. 302 is a temporary redirect.\n",
															"enum": [
																301,
																302
															],
															"example": "temporary",
															"type": "integer"
														},
														"url": {
															"description": "The URL to redirect the request to.\nNotes: ${num} refers to the position of '*' in the constraint value.",
															"example": "http://www.example.com/somewhere/$1/astring/$2/anotherstring/$3",
															"maxLength": 1500,
															"type": "string"
														}
													}
												}
											},
											"type": "object"
										}
									]
								},
								"type": "array"
							},
							"priority": {
								"default": 1,
								"description": "The priority of the rule, used to define which Page Rule is processed\nover another. A higher number indicates a higher priority. For example,\nif you have a catch-all Page Rule (rule A: `/images/*`) but want a more\nspecific Page Rule to take precedence (rule B: `/images/special/*`),\nspecify a higher priority for rule B so it overrides rule A.\n",
								"type": "integer"
							},
							"status": {
								"default": "disabled",
								"description": "The status of the Page Rule.",
								"enum": [
									"active",
									"disabled"
								],
								"example": "active",
								"type": "string"
							},
							"targets": {
								"description": "The rule targets to evaluate on each request.",
								"example": [
									{
										"constraint": {
											"operator": "matches",
											"value": "*example.com/images/*"
										},
										"target": "url"
									}
								],
								"items": {
									"description": "A request condition target.",
									"oneOf": [
										{
											"description": "URL target.",
											"properties": {
												"constraint": {
													"allOf": [
														{
															"description": "String constraint.",
															"properties": {
																"operator": {
																	"default": "contains",
																	"description": "The matches operator can use asterisks and pipes as wildcard and 'or' operators.",
																	"enum": [
																		"matches",
																		"contains",
																		"equals",
																		"not_equal",
																		"not_contain"
																	]
																},
																"value": {
																	"description": "The value to apply the operator to.",
																	"type": "string"
																}
															},
															"required": [
																"operator",
																"value"
															],
															"type": "object"
														},
														{
															"properties": {
																"value": {
																	"description": "The URL pattern to match against the current request. The pattern may contain up to four asterisks ('*') as placeholders.",
																	"example": "*example.com/images/*",
																	"pattern": "^(https?://)?(([-a-zA-Z0-9*]*\\.)+[-a-zA-Z0-9]{2,20})(:(8080|8443|443|80))?(/[\\S]+)?$",
																	"type": "string"
																}
															}
														}
													],
													"description": "The constraint of a target.",
													"type": "object"
												},
												"target": {
													"description": "A target based on the URL of the request.",
													"enum": [
														"url"
													],
													"example": "url"
												}
											},
											"type": "object"
										}
									],
									"required": [
										"target",
										"constraint"
									]
								},
								"type": "array"
							}
						},
						"required": [
							"targets",
							"actions"
						],
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"properties": {
												"errors": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"messages": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"success": {
													"description": "Whether the API call was successful",
													"enum": [
														true
													],
													"example": true,
													"type": "boolean"
												}
											},
											"required": [
												"success",
												"errors",
												"messages"
											],
											"type": "object"
										}
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"actions": {
													"description": "The set of actions to perform if the targets of this rule match the\nrequest. Actions can redirect to another URL or override settings, but\nnot both.\n",
													"example": [
														{
															"id": "browser_check",
															"value": "on"
														}
													],
													"items": {
														"anyOf": [
															{
																"properties": {
																	"id": {
																		"description": "Redirects one URL to another using an `HTTP 301/302` redirect. Refer\nto [Wildcard matching and referencing](https://developers.cloudflare.com/rules/page-rules/reference/wildcard-matching/).\n",
																		"enum": [
																			"forwarding_url"
																		],
																		"example": "forwarding_url"
																	},
																	"value": {
																		"properties": {
																			"status_code": {
																				"description": "The status code to use for the URL redirect. 301 is a permanent\nredirect. 302 is a temporary redirect.\n",
																				"enum": [
																					301,
																					302
																				],
																				"example": "temporary",
																				"type": "integer"
																			},
																			"url": {
																				"description": "The URL to redirect the request to.\nNotes: ${num} refers to the position of '*' in the constraint value.",
																				"example": "http://www.example.com/somewhere/$1/astring/$2/anotherstring/$3",
																				"maxLength": 1500,
																				"type": "string"
																			}
																		}
																	}
																},
																"type": "object"
															}
														]
													},
													"type": "array"
												},
												"created_on": {
													"description": "The timestamp of when the Page Rule was created.",
													"example": "2014-01-01T05:20:00.12345Z",
													"format": "date-time",
													"readOnly": true,
													"type": "string"
												},
												"id": {
													"description": "Identifier",
													"example": "023e105f4ecef8ad9ca31a8372d0c353",
													"maxLength": 32,
													"type": "string"
												},
												"modified_on": {
													"description": "The timestamp of when the Page Rule was last modified.",
													"example": "2014-01-01T05:20:00.12345Z",
													"format": "date-time",
													"readOnly": true,
													"type": "string"
												},
												"priority": {
													"default": 1,
													"description": "The priority of the rule, used to define which Page Rule is processed\nover another. A higher number indicates a higher priority. For example,\nif you have a catch-all Page Rule (rule A: `/images/*`) but want a more\nspecific Page Rule to take precedence (rule B: `/images/special/*`),\nspecify a higher priority for rule B so it overrides rule A.\n",
													"type": "integer"
												},
												"status": {
													"default": "disabled",
													"description": "The status of the Page Rule.",
													"enum": [
														"active",
														"disabled"
													],
													"example": "active",
													"type": "string"
												},
												"targets": {
													"description": "The rule targets to evaluate on each request.",
													"example": [
														{
															"constraint": {
																"operator": "matches",
																"value": "*example.com/images/*"
															},
															"target": "url"
														}
													],
													"items": {
														"description": "A request condition target.",
														"oneOf": [
															{
																"description": "URL target.",
																"properties": {
																	"constraint": {
																		"allOf": [
																			{
																				"description": "String constraint.",
																				"properties": {
																					"operator": {
																						"default": "contains",
																						"description": "The matches operator can use asterisks and pipes as wildcard and 'or' operators.",
																						"enum": [
																							"matches",
																							"contains",
																							"equals",
																							"not_equal",
																							"not_contain"
																						]
																					},
																					"value": {
																						"description": "The value to apply the operator to.",
																						"type": "string"
																					}
																				},
																				"required": [
																					"operator",
																					"value"
																				],
																				"type": "object"
																			},
																			{
																				"properties": {
																					"value": {
																						"description": "The URL pattern to match against the current request. The pattern may contain up to four asterisks ('*') as placeholders.",
																						"example": "*example.com/images/*",
																						"pattern": "^(https?://)?(([-a-zA-Z0-9*]*\\.)+[-a-zA-Z0-9]{2,20})(:(8080|8443|443|80))?(/[\\S]+)?$",
																						"type": "string"
																					}
																				}
																			}
																		],
																		"description": "The constraint of a target.",
																		"type": "object"
																	},
																	"target": {
																		"description": "A target based on the URL of the request.",
																		"enum": [
																			"url"
																		],
																		"example": "url"
																	}
																},
																"type": "object"
															}
														],
														"required": [
															"target",
															"constraint"
														]
													},
													"type": "array"
												}
											},
											"required": [
												"id",
												"targets",
												"actions",
												"priority",
												"status",
												"modified_on",
												"created_on"
											],
											"type": "object"
										}
									}
								}
							]
						}
					}
				},
				"description": "Create a Page Rule response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Create a Page Rule response failure"
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Create a Page Rule",
		"tags": [
			"Page Rules"
		]
	},
	"PUT /zones/{zone_id}/pagerules/{pagerule_id}": {
		"description": "Replaces the configuration of an existing Page Rule. The configuration of the updated Page Rule will exactly match the data passed in the API request.",
		"operationId": "page-rules-update-a-page-rule",
		"parameters": [
			{
				"in": "path",
				"name": "pagerule_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			},
			{
				"in": "path",
				"name": "zone_id",
				"required": true,
				"schema": {
					"description": "Identifier",
					"example": "023e105f4ecef8ad9ca31a8372d0c353",
					"maxLength": 32,
					"type": "string"
				}
			}
		],
		"requestBody": {
			"content": {
				"application/json": {
					"schema": {
						"properties": {
							"actions": {
								"description": "The set of actions to perform if the targets of this rule match the\nrequest. Actions can redirect to another URL or override settings, but\nnot both.\n",
								"example": [
									{
										"id": "browser_check",
										"value": "on"
									}
								],
								"items": {
									"anyOf": [
										{
											"properties": {
												"id": {
													"description": "Redirects one URL to another using an `HTTP 301/302` redirect. Refer\nto [Wildcard matching and referencing](https://developers.cloudflare.com/rules/page-rules/reference/wildcard-matching/).\n",
													"enum": [
														"forwarding_url"
													],
													"example": "forwarding_url"
												},
												"value": {
													"properties": {
														"status_code": {
															"description": "The status code to use for the URL redirect. 301 is a permanent\nredirect. 302 is a temporary redirect.\n",
															"enum": [
																301,
																302
															],
															"example": "temporary",
															"type": "integer"
														},
														"url": {
															"description": "The URL to redirect the request to.\nNotes: ${num} refers to the position of '*' in the constraint value.",
															"example": "http://www.example.com/somewhere/$1/astring/$2/anotherstring/$3",
															"maxLength": 1500,
															"type": "string"
														}
													}
												}
											},
											"type": "object"
										}
									]
								},
								"type": "array"
							},
							"priority": {
								"default": 1,
								"description": "The priority of the rule, used to define which Page Rule is processed\nover another. A higher number indicates a higher priority. For example,\nif you have a catch-all Page Rule (rule A: `/images/*`) but want a more\nspecific Page Rule to take precedence (rule B: `/images/special/*`),\nspecify a higher priority for rule B so it overrides rule A.\n",
								"type": "integer"
							},
							"status": {
								"default": "disabled",
								"description": "The status of the Page Rule.",
								"enum": [
									"active",
									"disabled"
								],
								"example": "active",
								"type": "string"
							},
							"targets": {
								"description": "The rule targets to evaluate on each request.",
								"example": [
									{
										"constraint": {
											"operator": "matches",
											"value": "*example.com/images/*"
										},
										"target": "url"
									}
								],
								"items": {
									"description": "A request condition target.",
									"oneOf": [
										{
											"description": "URL target.",
											"properties": {
												"constraint": {
													"allOf": [
														{
															"description": "String constraint.",
															"properties": {
																"operator": {
																	"default": "contains",
																	"description": "The matches operator can use asterisks and pipes as wildcard and 'or' operators.",
																	"enum": [
																		"matches",
																		"contains",
																		"equals",
																		"not_equal",
																		"not_contain"
																	]
																},
																"value": {
																	"description": "The value to apply the operator to.",
																	"type": "string"
																}
															},
															"required": [
																"operator",
																"value"
															],
															"type": "object"
														},
														{
															"properties": {
																"value": {
																	"description": "The URL pattern to match against the current request. The pattern may contain up to four asterisks ('*') as placeholders.",
																	"example": "*example.com/images/*",
																	"pattern": "^(https?://)?(([-a-zA-Z0-9*]*\\.)+[-a-zA-Z0-9]{2,20})(:(8080|8443|443|80))?(/[\\S]+)?$",
																	"type": "string"
																}
															}
														}
													],
													"description": "The constraint of a target.",
													"type": "object"
												},
												"target": {
													"description": "A target based on the URL of the request.",
													"enum": [
														"url"
													],
													"example": "url"
												}
											},
											"type": "object"
										}
									],
									"required": [
										"target",
										"constraint"
									]
								},
								"type": "array"
							}
						},
						"required": [
							"targets",
							"actions"
						],
						"type": "object"
					}
				}
			},
			"required": true
		},
		"responses": {
			"200": {
				"content": {
					"application/json": {
						"schema": {
							"allOf": [
								{
									"allOf": [
										{
											"properties": {
												"errors": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"messages": {
													"example": [],
													"items": {
														"properties": {
															"code": {
																"minimum": 1000,
																"type": "integer"
															},
															"message": {
																"type": "string"
															}
														},
														"required": [
															"code",
															"message"
														],
														"type": "object",
														"uniqueItems": true
													},
													"type": "array"
												},
												"success": {
													"description": "Whether the API call was successful",
													"enum": [
														true
													],
													"example": true,
													"type": "boolean"
												}
											},
											"required": [
												"success",
												"errors",
												"messages"
											],
											"type": "object"
										}
									],
									"type": "object"
								},
								{
									"properties": {
										"result": {
											"properties": {
												"actions": {
													"description": "The set of actions to perform if the targets of this rule match the\nrequest. Actions can redirect to another URL or override settings, but\nnot both.\n",
													"example": [
														{
															"id": "browser_check",
															"value": "on"
														}
													],
													"items": {
														"anyOf": [
															{
																"properties": {
																	"id": {
																		"description": "Redirects one URL to another using an `HTTP 301/302` redirect. Refer\nto [Wildcard matching and referencing](https://developers.cloudflare.com/rules/page-rules/reference/wildcard-matching/).\n",
																		"enum": [
																			"forwarding_url"
																		],
																		"example": "forwarding_url"
																	},
																	"value": {
																		"properties": {
																			"status_code": {
																				"description": "The status code to use for the URL redirect. 301 is a permanent\nredirect. 302 is a temporary redirect.\n",
																				"enum": [
																					301,
																					302
																				],
																				"example": "temporary",
																				"type": "integer"
																			},
																			"url": {
																				"description": "The URL to redirect the request to.\nNotes: ${num} refers to the position of '*' in the constraint value.",
																				"example": "http://www.example.com/somewhere/$1/astring/$2/anotherstring/$3",
																				"maxLength": 1500,
																				"type": "string"
																			}
																		}
																	}
																},
																"type": "object"
															}
														]
													},
													"type": "array"
												},
												"created_on": {
													"description": "The timestamp of when the Page Rule was created.",
													"example": "2014-01-01T05:20:00.12345Z",
													"format": "date-time",
													"readOnly": true,
													"type": "string"
												},
												"id": {
													"description": "Identifier",
													"example": "023e105f4ecef8ad9ca31a8372d0c353",
													"maxLength": 32,
													"type": "string"
												},
												"modified_on": {
													"description": "The timestamp of when the Page Rule was last modified.",
													"example": "2014-01-01T05:20:00.12345Z",
													"format": "date-time",
													"readOnly": true,
													"type": "string"
												},
												"priority": {
													"default": 1,
													"description": "The priority of the rule, used to define which Page Rule is processed\nover another. A higher number indicates a higher priority. For example,\nif you have a catch-all Page Rule (rule A: `/images/*`) but want a more\nspecific Page Rule to take precedence (rule B: `/images/special/*`),\nspecify a higher priority for rule B so it overrides rule A.\n",
													"type": "integer"
												},
												"status": {
													"default": "disabled",
													"description": "The status of the Page Rule.",
													"enum": [
														"active",
														"disabled"
													],
													"example": "active",
													"type": "string"
												},
												"targets": {
													"description": "The rule targets to evaluate on each request.",
													"example": [
														{
															"constraint": {
																"operator": "matches",
																"value": "*example.com/images/*"
															},
															"target": "url"
														}
													],
													"items": {
														"description": "A request condition target.",
														"oneOf": [
															{
																"description": "URL target.",
																"properties": {
																	"constraint": {
																		"allOf": [
																			{
																				"description": "String constraint.",
																				"properties": {
																					"operator": {
																						"default": "contains",
																						"description": "The matches operator can use asterisks and pipes as wildcard and 'or' operators.",
																						"enum": [
																							"matches",
																							"contains",
																							"equals",
																							"not_equal",
																							"not_contain"
																						]
																					},
																					"value": {
																						"description": "The value to apply the operator to.",
																						"type": "string"
																					}
																				},
																				"required": [
																					"operator",
																					"value"
																				],
																				"type": "object"
																			},
																			{
																				"properties": {
																					"value": {
																						"description": "The URL pattern to match against the current request. The pattern may contain up to four asterisks ('*') as placeholders.",
																						"example": "*example.com/images/*",
																						"pattern": "^(https?://)?(([-a-zA-Z0-9*]*\\.)+[-a-zA-Z0-9]{2,20})(:(8080|8443|443|80))?(/[\\S]+)?$",
																						"type": "string"
																					}
																				}
																			}
																		],
																		"description": "The constraint of a target.",
																		"type": "object"
																	},
																	"target": {
																		"description": "A target based on the URL of the request.",
																		"enum": [
																			"url"
																		],
																		"example": "url"
																	}
																},
																"type": "object"
															}
														],
														"required": [
															"target",
															"constraint"
														]
													},
													"type": "array"
												}
											},
											"required": [
												"id",
												"targets",
												"actions",
												"priority",
												"status",
												"modified_on",
												"created_on"
											],
											"type": "object"
										}
									}
								}
							]
						}
					}
				},
				"description": "Update a Page Rule response"
			},
			"4XX": {
				"content": {
					"application/json": {
						"schema": {
							"properties": {
								"errors": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": [
										{
											"code": 7003,
											"message": "No route for the URI"
										}
									],
									"minLength": 1
								},
								"messages": {
									"allOf": [
										{
											"example": [],
											"items": {
												"properties": {
													"code": {
														"minimum": 1000,
														"type": "integer"
													},
													"message": {
														"type": "string"
													}
												},
												"required": [
													"code",
													"message"
												],
												"type": "object",
												"uniqueItems": true
											},
											"type": "array"
										}
									],
									"example": []
								},
								"result": {
									"enum": [
										null
									],
									"nullable": true,
									"type": "object"
								},
								"success": {
									"description": "Whether the API call was successful",
									"enum": [
										false
									],
									"example": false,
									"type": "boolean"
								}
							},
							"required": [
								"success",
								"errors",
								"messages",
								"result"
							],
							"type": "object"
						}
					}
				},
				"description": "Update a Page Rule response failure"
			}
		},
		"security": [
			{
				"api_token": []
			},
			{
				"api_email": [],
				"api_key": []
			}
		],
		"summary": "Update a Page Rule",
		"tags": [
			"Page Rules"
		]
	}
}