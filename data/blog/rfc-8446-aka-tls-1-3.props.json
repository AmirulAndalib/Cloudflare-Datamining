{
	"locale": "en-us",
	"post": {
		"access": true,
		"authors": [
			{
				"id": "5d1644b141acde0011a94f31",
				"name": "Nick Sullivan",
				"slug": "nick-sullivan",
				"profile_image": "https://blog-cloudflare-com-assets.storage.googleapis.com/2019/09/BJ4NgXVj_400x400.jpg",
				"cover_image": "http://blog.cloudflare.com/content/images/2018/08/Screen-Shot-2018-07-18-at-4.29.24-PM.jpg",
				"bio": "Nick Sullivan was Head of Research (& Cryptography) at Cloudflare until 2023. He is passionate about improving security and privacy through cutting-edge research and the development of open standards.",
				"website": "https://crypto.dance",
				"location": "San Francisco",
				"facebook": null,
				"twitter": "@grittygrease",
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/nick-sullivan/"
			}
		],
		"canonical_url": null,
		"codeinjection_foot": null,
		"codeinjection_head": null,
		"comment_id": "5b6b29ffd05e8000bf5aba27",
		"comments": false,
		"created_at": "2018-08-08T18:35:59.000+01:00",
		"custom_excerpt": "TLS 1.3 (RFC 8446) was published today. This article provides a deep dive into the changes introduced in TLS 1.3 and its impact on the future of internet security.",
		"custom_template": null,
		"email_subject": null,
		"excerpt": "TLS 1.3 (RFC 8446) was published today. This article provides a deep dive into the changes introduced in TLS 1.3 and its impact on the future of internet security.",
		"feature_image": "http://blog.cloudflare.com/content/images/2018/08/image5-1.png",
		"feature_image_alt": null,
		"feature_image_caption": null,
		"featured": false,
		"frontmatter": null,
		"html": "<!--kg-card-begin: markdown--><p>For the last five years, the Internet Engineering Task Force (IETF), the standards body that defines internet protocols, has been working on standardizing the latest version of one of its most important security protocols: Transport Layer Security (TLS). TLS is used to secure the web (and much more!), providing encryption and ensuring the authenticity of every HTTPS website and API. The latest version of TLS, TLS 1.3 (<a href=\"https://www.rfc-editor.org/rfc/pdfrfc/rfc8446.txt.pdf\">RFC 8446</a>) was published today. It is the first major overhaul of the protocol, bringing significant security and performance improvements. This article provides a deep dive into the changes introduced in TLS 1.3 and its impact on the future of internet security.</p>\n<h3 id=\"anevolution\">An evolution</h3>\n<p>One major way Cloudflare provides <a href=\"https://www.cloudflare.com/application-services/solutions/api-security/\">security</a> is by supporting HTTPS for websites and web services such as APIs. With HTTPS (the “S” stands for secure) the communication between your browser and the server travels over an encrypted and authenticated channel. Serving your content over HTTPS instead of HTTP provides confidence to the visitor that the content they see is presented by the legitimate content owner and that the communication is safe from eavesdropping. This is a big deal in a world where online privacy is more important than ever.</p>\n<p>The machinery under the hood that makes HTTPS secure is a protocol called TLS. It has its roots in a protocol called Secure Sockets Layer (SSL) developed in the mid-nineties at Netscape. By the end of the 1990s, Netscape handed SSL over to the IETF, who renamed it TLS and have been the stewards of the protocol ever since. Many people still refer to web encryption as SSL, even though the vast majority of services have switched over to supporting TLS only. The term SSL continues to have popular appeal and Cloudflare has kept the term alive through product names like <a href=\"http://blog.cloudflare.com/keyless-ssl-the-nitty-gritty-technical-details/\">Keyless SSL</a> and <a href=\"http://blog.cloudflare.com/introducing-universal-ssl/\">Universal SSL</a>.</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2018/08/image5.png\" alt=\"Timeline\" loading=\"lazy\"></p>\n<p>In the IETF, protocols are called RFCs. TLS 1.0 was RFC 2246, TLS 1.1 was RFC 4346, and TLS 1.2 was RFC 5246. Today, TLS 1.3 was published as RFC 8446. RFCs are generally published in order, keeping 46 as part of the RFC number is a nice touch.</p>\n<h3 id=\"tls12wearsparachutepantsandshoulderpads\">TLS 1.2 wears parachute pants and shoulder pads</h3>\n<p><img src=\"http://blog.cloudflare.com/content/images/2018/08/image11.jpg\" alt=\"MC Hammer\" loading=\"lazy\"><br>\n<small><a href=\"https://memegenerator.net/Mc-Hammer-Pants\">MC Hammer</a>, like SSL, was popular in the 90s</small></p>\n<p>Over the last few years, TLS has seen its fair share of problems. First of all, there have been problems with the code that implements TLS, including <a href=\"http://blog.cloudflare.com/answering-the-critical-question-can-you-get-private-ssl-keys-using-heartbleed/\">Heartbleed</a>, <a href=\"https://www.imperialviolet.org/2014/09/26/pkcs1.html\">BERserk</a>, <a href=\"https://gotofail.com/\">goto fail;</a>, and more. These issues are not fundamental to the protocol and mostly resulted from a lack of testing. Tools like <a href=\"https://github.com/RUB-NDS/TLS-Attacker\">TLS Attacker</a> and <a href=\"https://security.googleblog.com/2016/12/project-wycheproof.html\">Project Wycheproof</a> have helped improve the robustness of TLS implementation, but the more challenging problems faced by TLS have had to do with the protocol itself.</p>\n<p>TLS was designed by engineers using tools from mathematicians. Many of the early design decisions from the days of SSL were made using heuristics and an incomplete understanding of how to design robust security protocols. That said, this isn’t the fault of the protocol designers (Paul Kocher, Phil Karlton, Alan Freier, Tim Dierks, Christopher Allen and others), as the entire industry was still learning how to do this properly. When TLS was designed, formal papers on the design of secure authentication protocols like Hugo Krawczyk’s landmark <a href=\"http://webee.technion.ac.il/~hugo/sigma-pdf.pdf\">SIGMA</a> paper were still years away. TLS was 90s crypto: It meant well and seemed cool at the time, but the modern cryptographer’s design palette has moved on.</p>\n<p>Many of the design flaws were discovered using <a href=\"https://en.wikipedia.org/wiki/Formal_verification\">formal verification</a>. Academics attempted to prove certain security properties of TLS, but instead found counter-examples that were turned into real vulnerabilities. These weaknesses range from the purely theoretical (<a href=\"https://access.redhat.com/articles/2112261\">SLOTH</a> and <a href=\"https://eprint.iacr.org/2018/298.pdf\">CurveSwap</a>), to feasible for highly resourced attackers (<a href=\"https://weakdh.org/imperfect-forward-secrecy-ccs15.pdf\">WeakDH</a>, <a href=\"http://blog.cloudflare.com/logjam-the-latest-tls-vulnerability-explained/\">LogJam</a>, <a href=\"https://censys.io/blog/freak\">FREAK</a>, <a href=\"https://nakedsecurity.sophos.com/2016/08/25/anatomy-of-a-cryptographic-collision-the-sweet32-attack/\">SWEET32</a>), to practical and dangerous (<a href=\"https://en.wikipedia.org/wiki/POODLE\">POODLE</a>, <a href=\"https://robotattack.org/\">ROBOT</a>).</p>\n<h3 id=\"tls12isslow\">TLS 1.2 is slow</h3>\n<p>Encryption has always been important online, but historically it was only used for things like logging in or sending credit card information, leaving most other data exposed. There has been a major trend in the last few years towards using HTTPS for all traffic on the Internet. This has the positive effect of protecting more of what we do online from eavesdroppers and <a href=\"http://blog.cloudflare.com/an-introduction-to-javascript-based-ddos/\">injection attacks</a>, but has the downside that new connections get a bit slower.</p>\n<p>For a browser and web server to agree on a key, they need to exchange cryptographic data. The exchange, called the “handshake” in TLS, has remained largely unchanged since TLS was standardized in 1999. The handshake requires two additional round-trips between the browser and the server before encrypted data can be sent (or one when resuming a previous connection). The additional cost of the TLS handshake for HTTPS results in a noticeable hit to latency compared to an HTTP alone. This additional delay can negatively impact performance-focused applications.</p>\n<h3 id=\"definingtls13\">Defining TLS 1.3</h3>\n<p>Unsatisfied with the outdated design of TLS 1.2 and two-round-trip overhead, the IETF set about defining a new version of TLS. In August 2013, Eric Rescorla laid out a wishlist of features for the new protocol:<br>\n<a href=\"https://www.ietf.org/proceedings/87/slides/slides-87-tls-5.pdf\">https://www.ietf.org/proceedings/87/slides/slides-87-tls-5.pdf</a></p>\n<p>After <a href=\"https://www.ietf.org/mail-archive/web/tls/current/msg20938.html\">some debate</a>, it was decided that this new version of TLS was to be called TLS 1.3. The main issues that drove the design of TLS 1.3 were mostly the same as those presented five years ago:</p>\n<ul>\n<li>reducing handshake latency</li>\n<li>encrypting more of the handshake</li>\n<li>improving resiliency to cross-protocol attacks</li>\n<li>removing legacy features</li>\n</ul>\n<p>The specification was shaped by volunteers through an open design process, and after four years of diligent work and vigorous debate, TLS 1.3 is now in its final form: RFC 8446.  As adoption increases, the new protocol will make the internet both faster and more secure.</p>\n<p>In this blog post I will focus on the two main advantages TLS 1.3 has over previous versions: security and performance.</p>\n<h3 id=\"trimmingthehedges\">Trimming the hedges</h3>\n<p><img src=\"http://blog.cloudflare.com/content/images/2018/08/image10.jpg\" alt=\"hedge\" loading=\"lazy\"><br>\n<small><a href=\"https://commons.wikimedia.org/wiki/File:Williton_Highbridge_Nursery_topiary_garden.jpg\">Creative Commons Attribution-Share Alike 3.0</a></small></p>\n<p>In the last two decades, we as a society have learned a lot about how to write secure cryptographic protocols. The parade of cleverly-named attacks from POODLE to Lucky13 to SLOTH to LogJam showed that even TLS 1.2 contains antiquated ideas from the early days of cryptographic design. One of the design goals of TLS 1.3 was to correct previous mistakes by removing potentially dangerous design elements.</p>\n<h4 id=\"fixingkeyexchange\">Fixing key exchange</h4>\n<p>TLS is a so-called “hybrid” cryptosystem. This means it uses both symmetric key cryptography (encryption and decryption keys are the same) and public key cryptography (encryption and decryption keys are different). Hybrid schemes are the predominant form of encryption used on the Internet and are used in <a href=\"https://en.wikipedia.org/wiki/Secure_Shell\">SSH</a>, <a href=\"https://en.wikipedia.org/wiki/IPsec\">IPsec</a>, <a href=\"https://en.wikipedia.org/wiki/Signal_Protocol\">Signal</a>, <a href=\"https://www.wireguard.com/\">WireGuard</a> and other protocols. In hybrid cryptosystems, public key cryptography is used to establish a shared secret between both parties, and the shared secret is used to create symmetric keys that can be used to encrypt the data exchanged.</p>\n<p>As a general rule, public key crypto is slow and expensive (microseconds to milliseconds per operation) and symmetric key crypto is fast and cheap (nanoseconds per operation). Hybrid encryption schemes let you send a lot of encrypted data with very little overhead by only doing the expensive part once. Much of the work in TLS 1.3 has been about improving the part of the handshake, where public keys are used to establish symmetric keys.</p>\n<h4 id=\"rsakeyexchange\">RSA key exchange</h4>\n<p>The public key portion of TLS is about establishing a shared secret. There are two main ways of doing this with public key cryptography. The simpler way is with public-key encryption: one party encrypts the shared secret with the other party’s public key and sends it along. The other party then uses its private key to decrypt the shared secret and ... voila! They both share the same secret. This technique was discovered in 1977 by Rivest, Shamir and Adelman and is called RSA key exchange. In TLS’s RSA key exchange, the shared secret is decided by the client, who then encrypts it to the server’s public key (extracted from the certificate) and sends it to the server.</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2018/08/image4.png\" alt=\"image4\" loading=\"lazy\"></p>\n<p>The other form of key exchange available in TLS is based on another form of public-key cryptography, invented by Diffie and Hellman in 1976, so-called Diffie-Hellman key agreement. In Diffie-Hellman, the client and server both start by creating a public-private key pair. They then send the public portion of their key share to the other party. When each party receives the public key share of the other, they combine it with their own private key and end up with the same value: the pre-main secret. The server then uses a digital signature to ensure the exchange hasn’t been tampered with. This key exchange is called “ephemeral” if the client and server both choose a new key pair for every exchange.</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2018/08/image3.png\" alt=\"image3\" loading=\"lazy\"></p>\n<p>Both modes result in the client and server having a shared secret, but RSA mode has a serious downside: it’s not <a href=\"http://blog.cloudflare.com/staying-on-top-of-tls-attacks/\">forward secret</a>. That means that if someone records the encrypted conversation and then gets ahold of the RSA private key of the server, they can decrypt the conversation. This even applies if the conversation was recorded and the key is obtained some time well into the future. In a world where national governments are recording encrypted conversations and using exploits like <a href=\"https://en.wikipedia.org/wiki/Heartbleed\">Heartbleed</a> to steal private keys, this is a realistic threat.</p>\n<p>RSA key exchange has been problematic for some time, and not just because it’s not forward-secret. It’s also notoriously difficult to do correctly. In 1998, Daniel Bleichenbacher discovered a vulnerability in the way RSA encryption was done in SSL and created what’s called the “million-message attack,” which allows an attacker to perform an RSA private key operation with a server’s private key by sending a million or so well-crafted messages and looking for differences in the error codes returned. The attack has been refined over the years and in some cases only requires thousands of messages, making it feasible to do from a laptop. It was recently discovered that major websites (including facebook.com) were also vulnerable to a variant of Bleichenbacher’s attack called the <a href=\"https://robotattack.org/\">ROBOT attack</a> as recently as 2017.</p>\n<p>To reduce the risks caused by non-forward secret connections and million-message attacks, RSA encryption was removed from TLS 1.3, leaving ephemeral Diffie-Hellman as the only key exchange mechanism. Removing RSA key exchange brings other advantages, as we will discuss in the performance section below.</p>\n<h4 id=\"diffiehellmannamedgroups\">Diffie-Hellman named groups</h4>\n<p>When it comes to cryptography, giving too many options leads to the wrong option being chosen. This principle is most evident when it comes to choosing Diffie-Hellman parameters. In previous versions of TLS, the choice of the Diffie-Hellman parameters was up to the participants. This resulted in some implementations choosing incorrectly, resulting in vulnerable implementations being deployed. TLS 1.3 takes this choice away.</p>\n<p>Diffie-Hellman is a powerful tool, but not all Diffie-Hellman parameters are “safe” to use. The security of Diffie-Hellman depends on the difficulty of a specific mathematical problem called the <a href=\"https://en.wikipedia.org/wiki/Discrete_logarithm\">discrete logarithm problem</a>. If you can solve the discrete logarithm problem for a set of parameters, you can extract the private key and break the security of the protocol. Generally speaking, the bigger the numbers used, the harder it is to solve the discrete logarithm problem. So if you choose small DH parameters, you’re in trouble.</p>\n<p>The LogJam and WeakDH attacks of 2015 showed that many TLS servers could be tricked into using small numbers for Diffie-Hellman, allowing an attacker to break the security of the protocol and decrypt conversations.</p>\n<p>Diffie-Hellman also requires the parameters to have certain other mathematical properties. In 2016, Antonio Sanso found an <a href=\"http://arstechnica.com/security/2016/01/high-severity-bug-in-openssl-allows-attackers-to-decrypt-https-traffic/\">issue in OpenSSL</a> where parameters were chosen that lacked the right mathematical properties, resulting in another vulnerability.</p>\n<p>TLS 1.3 takes the opinionated route, restricting the Diffie-Hellman parameters to ones that are known to be secure. However, it still leaves several options; permitting only one option makes it difficult to update TLS in case these parameters are found to be insecure some time in the future.</p>\n<h3 id=\"fixingciphers\">Fixing ciphers</h3>\n<p>The other half of a hybrid crypto scheme is the actual encryption of data. This is done by combining an authentication code and a symmetric cipher for which each party knows the key. As I’ll describe, there are many ways to encrypt data, most of which are wrong.</p>\n<h4 id=\"cbcmodeciphers\">CBC mode ciphers</h4>\n<p>In the last section we described TLS as a hybrid encryption scheme, with a public key part and a symmetric key part. The public key part is not the only one that has caused trouble over the years. The symmetric key portion has also had its fair share of issues. In any secure communication scheme, you need both encryption (to keep things private) and integrity (to make sure people don’t modify, add, or delete pieces of the conversation). Symmetric key encryption is used to provide both encryption and integrity, but in TLS 1.2 and earlier, these two pieces were combined in the wrong way, leading to security vulnerabilities.</p>\n<p>An algorithm that performs symmetric encryption and decryption is called a symmetric cipher. Symmetric ciphers usually come in two main forms: block ciphers and stream ciphers.</p>\n<p>A stream cipher takes a fixed-size key and uses it to create a stream of pseudo-random data of arbitrary length, called a key stream. To encrypt with a stream cipher, you take your message and combine it with the key stream by XORing each bit of the key stream with the corresponding bit of your message.. To decrypt, you take the encrypted message and XOR it with the key stream. Examples of pure stream ciphers are RC4 and ChaCha20. Stream ciphers are popular because they’re simple to implement and fast in software.</p>\n<p>A block cipher is different than a stream cipher because it only encrypts fixed-sized messages. If you want to encrypt a message that is shorter or longer than the block size, you have to do a bit of work. For shorter messages, you have to add some extra data to the end of the message. For longer messages, you can either split your message up into blocks the cipher can encrypt and then use a block cipher mode to combine the pieces together somehow. Alternatively, you can turn your block cipher into a stream cipher by encrypting a sequence of counters with a block cipher and using that as the stream. This is called “counter mode”. One popular way of encrypting arbitrary length data with a block cipher is a mode called cipher block chaining (CBC).</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2018/08/image9.png\" alt=\"encryption\" loading=\"lazy\"><br>\n<img src=\"http://blog.cloudflare.com/content/images/2018/08/image7.png\" alt=\"decryption\" loading=\"lazy\"></p>\n<p>In order to prevent people from tampering with data, encryption is not enough. Data also needs to be integrity-protected. For CBC-mode ciphers, this is done using something called a message-authentication code (MAC), which is like a fancy checksum with a key. Cryptographically strong MACs have the property that finding a MAC value that matches an input is practically impossible unless you know the secret key. There are two ways to combine MACs and CBC-mode ciphers. Either you encrypt first and then MAC the ciphertext, or you MAC the plaintext first and then encrypt the whole thing. In TLS, they chose the latter, MAC-then-Encrypt, which turned out to be the wrong choice.</p>\n<p>You can blame this choice for <a href=\"https://www.youtube.com/watch?v=-_8-2pDFvmg\">BEAST</a>, as well as a slew of padding oracle vulnerabilities such as <a href=\"http://www.isg.rhul.ac.uk/tls/Lucky13.html\">Lucky 13</a> and <a href=\"https://eprint.iacr.org/2015/1129\">Lucky Microseconds</a>. Read my <a href=\"http://blog.cloudflare.com/padding-oracles-and-the-decline-of-cbc-mode-ciphersuites/\">previous post on the subject</a> for a comprehensive explanation of these flaws. The interaction between CBC mode and padding was also the cause of the widely publicized <a href=\"http://blog.cloudflare.com/sslv3-support-disabled-by-default-due-to-vulnerability/\">POODLE vulnerability</a> in SSLv3 and some implementations of TLS.</p>\n<p>RC4 is a classic stream cipher designed by Ron Rivest (the “R” of RSA) that was broadly supported since the early days of TLS. In 2013, it was found to have <a href=\"http://www.isg.rhul.ac.uk/tls/\">measurable biases</a> that could be leveraged to allow attackers to decrypt messages.</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2018/08/image2.png\" alt=\"image2\" loading=\"lazy\"><br>\n<small>AEAD Mode</small></p>\n<p>In TLS 1.3, all the troublesome ciphers and cipher modes have been removed. You can no longer use CBC-mode ciphers or insecure stream ciphers such as RC4. The only type of symmetric crypto allowed in TLS 1.3 is a new construction called <a href=\"http://blog.cloudflare.com/it-takes-two-to-chacha-poly/\">AEAD (authenticated encryption with additional data)</a>, which combines encryption and integrity into one seamless operation.</p>\n<h3 id=\"fixingdigitalsignatures\">Fixing digital signatures</h3>\n<p>Another important part of TLS is authentication. In every connection, the server authenticates itself to the client using a digital certificate, which has a public key. In RSA-encryption mode, the server proves its ownership of the private key by decrypting the pre-main secret and computing a MAC over the transcript of the conversation. In Diffie-Hellman mode, the server proves ownership of the private key using a digital signature. If you’ve been following this blog post so far, it should be easy to guess that this was done incorrectly too.</p>\n<h4 id=\"pkcs1v15\">PKCS#1v1.5</h4>\n<p>Daniel Bleichenbacher has made a living identifying problems with RSA in TLS. In 2006, he devised a pen-and-paper attack against RSA signatures as used in TLS. It was later discovered that major TLS implemenations including those of NSS and OpenSSL <a href=\"https://www.ietf.org/mail-archive/web/openpgp/current/msg00999.html\">were vulnerable to this attack</a>. This issue again had to do with how difficult it is to implement padding correctly, in this case, the PKCS#1 v1.5 padding used in RSA signatures. In TLS 1.3, PKCS#1 v1.5 is removed in favor of the newer design <a href=\"https://en.wikipedia.org/wiki/Probabilistic_signature_scheme\">RSA-PSS</a>.</p>\n<h4 id=\"signingtheentiretranscript\">Signing the entire transcript</h4>\n<p>We described earlier how the server uses a digital signature to prove that the key exchange hasn’t been tampered with. In TLS 1.2 and earlier, the server’s signature only covers part of the handshake. The other parts of the handshake, specifically the parts that are used to negotiate which symmetric cipher to use, are not signed by the private key. Instead, a symmetric MAC is used to ensure that the handshake was not tampered with. This oversight resulted in a number of high-profile vulnerabilities (FREAK, LogJam, etc.). In TLS 1.3 these are prevented because the server signs the entire handshake transcript.</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2018/08/image1.png\" alt=\"tls12\" loading=\"lazy\"></p>\n<p>The FREAK, LogJam and CurveSwap attacks took advantage of two things:</p>\n<ol>\n<li>the fact that intentionally weak ciphers from the 1990s (called export ciphers) were still supported in many browsers and servers, and</li>\n<li>the fact that the part of the handshake used to negotiate which cipher was used was not digitally signed.</li>\n</ol>\n<p>The on-path attacker can swap out the supported ciphers (or supported groups, or supported curves) from the client with an easily crackable choice that the server supports. They then break the key and forge two finished messages to make both parties think they’ve agreed on a transcript.</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2018/08/image13.png\" alt=\"FREAK\" loading=\"lazy\"></p>\n<p>These attacks are called downgrade attacks, and they allow attackers to force two participants to use the weakest cipher supported by both parties, even if more secure ciphers are supported. In this style of attack, the perpetrator sits in the middle of the handshake and changes the list of supported ciphers advertised from the client to the server to only include weak export ciphers. The server then chooses one of the weak ciphers, and the attacker figures out the key with a brute-force attack, allowing the attacker to forge the MACs on the handshake. In TLS 1.3, this type of downgrade attack is impossible because the server now signs the entire handshake, including the cipher negotiation.</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2018/08/image14.png\" alt=\"signed transcript\" loading=\"lazy\"></p>\n<h3 id=\"betterlivingthroughsimplification\">Better living through simplification</h3>\n<p>TLS 1.3 is a much more elegant and secure protocol with the removal of the insecure features listed above. This hedge-trimming allowed the protocol to be simplified in ways that make it easier to understand, and faster.</p>\n<h4 id=\"nomoretakeoutmenu\">No more take-out menu</h4>\n<p>In previous versions of TLS, the main negotiation mechanism was the ciphersuite. A ciphersuite encompassed almost everything that could be negotiated about a connection:</p>\n<ul>\n<li>type of certificates supported</li>\n<li>hash function used for deriving keys (e.g., SHA1, SHA256, ...)</li>\n<li>MAC function (e.g., HMAC with SHA1, SHA256, …)</li>\n<li>key exchange algorithm (e.g., RSA, ECDHE, …)</li>\n<li>cipher (e.g., AES, RC4, ...)</li>\n<li>cipher mode, if applicable (e.g., CBC)</li>\n</ul>\n<p>Ciphersuites in previous versions of TLS had grown into monstrously large alphabet soups. Examples of commonly used cipher suites are: DHE-RC4-MD5 or ECDHE-ECDSA-AES-GCM-SHA256. Each ciphersuite was represented by a code point in a table maintained by an organization called the Internet Assigned Numbers Authority (IANA). Every time a new cipher was introduced, a new set of combinations needed to be added to the list. This resulted in a combinatorial explosion of code points representing every valid choice of these parameters. It had become a bit of a mess.</p>\n<p><img alt=\"take-out menu\" src=\"http://blog.cloudflare.com/content/images/2018/08/image8.png\" style=\"width: 300px\"><center>TLS 1.2</center><br>\n<img alt=\"prix fixe\" src=\"http://blog.cloudflare.com/content/images/2018/08/image16.png\" style=\"width: 150px\"></p>\n<center>TLS 1.3</center>\n<br><br>\nTLS 1.3 removes many of these legacy features, allowing for a clean split between three orthogonal negotiations:\n<ul>\n<li>Cipher + HKDF Hash</li>\n<li>Key Exchange</li>\n<li>Signature Algorithm</li>\n</ul>\n<p><img src=\"http://blog.cloudflare.com/content/images/2018/08/image6.png\" alt=\"negotiation\" loading=\"lazy\"></p>\n<p>This simplified cipher suite negotiation and radically reduced set of negotiation parameters opens up a new possibility. This possibility enables the TLS 1.3 handshake latency to drop from two round-trips to only one round-trip, providing the performance boost that will ensure that TLS 1.3 will be popular and widely adopted.</p>\n<h3 id=\"performance\">Performance</h3>\n<p>When establishing a new connection to a server that you haven’t seen before, it takes two round-trips before data can be sent on the connection. This is not particularly noticeable in locations where the server and client are geographically close to each other, but it can make a big difference on mobile networks where latency can be as high as 200ms, an amount that is noticeable for humans.</p>\n<h3 id=\"1rttmode\">1-RTT mode</h3>\n<p>TLS 1.3 now has a radically simpler cipher negotiation model and a reduced set of key agreement options (no RSA, no user-defined DH parameters). This means that every connection will use a DH-based key agreement and the parameters supported by the server are likely easy to guess (ECDHE with X25519 or P-256). Because of this limited set of choices, the client can simply choose to send DH key shares in the first message instead of waiting until the server has confirmed which key shares it is willing to support. That way, the server can learn the shared secret and send encrypted data one round trip earlier. Chrome’s implementation of TLS 1.3, for example, sends an X25519 keyshare in the first message to the server.</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2018/08/image3.png\" alt=\"DH in 1.2\" loading=\"lazy\"><br>\n<img src=\"http://blog.cloudflare.com/content/images/2018/08/image15.png\" alt=\"DH in 1.3\" loading=\"lazy\"></p>\n<p>In the rare situation that the server does not support one of the key shares sent by the client, the server can send a new message, the HelloRetryRequest, to let the client know which groups it supports. Because the list has been trimmed down so much, this is not expected to be a common occurrence.</p>\n<h3 id=\"0rttresumption\">0-RTT resumption</h3>\n<p>A further optimization was inspired by the <a href=\"https://docs.google.com/document/u/1/d/1g5nIXAIkN_Y-7XJW5K45IblHd_L2f5LTaDUDwvZ5L6g/edit\">QUIC protocol</a>. It lets clients send encrypted data in their first message to the server, resulting in no additional latency cost compared to unencrypted HTTP. This is a big deal, and once TLS 1.3 is widely deployed, the encrypted web is sure to feel much snappier than before.</p>\n<p>In TLS 1.2, there are two ways to resume a connection, <a href=\"http://blog.cloudflare.com/tls-session-resumption-full-speed-and-secure/\">session ids and session tickets</a>. In TLS 1.3 these are combined to form a new mode called PSK (pre-shared key) resumption. The idea is that after a session is established, the client and server can derive a shared secret called the “resumption main secret”. This can either be stored on the server with an id (session id style) or encrypted by a key known only to the server (session ticket style). This session ticket is sent to the client and redeemed when resuming a connection.</p>\n<p>For resumed connections, both parties share a resumption main secret so key exchange is not necessary except for providing forward secrecy. The next time the client connects to the server, it can take the secret from the previous session and use it to encrypt application data to send to the server, along with the session ticket. Something as amazing as sending encrypted data on the first flight does come with its downfalls.</p>\n<h3 id=\"replayability\">Replayability</h3>\n<p>There is no interactivity in 0-RTT data. It’s sent by the client, and consumed by the server without any interactions. This is great for performance, but comes at a cost: replayability. If an attacker captures a 0-RTT packet that was sent to server, they can replay it and there’s a chance that the server will accept it as valid. This can have interesting negative consequences.</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2018/08/0-rtt-attack-@2x.png\" alt=\"0-rtt-attack-@2x\" loading=\"lazy\"></p>\n<p>An example of dangerous replayed data is anything that changes state on the server. If you increment a counter, perform a database transaction, or do anything that has a permanent effect, it’s risky to put it in 0-RTT data.</p>\n<p>As a client, you can try to protect against this by only putting “safe” requests into the 0-RTT data. In this context, “safe” means that the request won’t change server state. In HTTP, different methods are supposed to have different semantics. HTTP GET requests are supposed to be safe, so a browser can usually protect HTTPS servers against replay attacks by only sending GET requests in 0-RTT. Since most page loads start with a GET of “/” this results in faster page load time.</p>\n<p>Problems start to happen when data sent in 0-RTT are used for state-changing requests. To help prevent against this failure case, TLS 1.3 also includes the time elapsed value in the session ticket. If this diverges too much, the client is either approaching the speed of light, or the value has been replayed. In either case, it’s prudent for the server to reject the 0-RTT data.</p>\n<p>For more details about 0-RTT, and the improvements to session resumption in TLS 1.3, check out <a href=\"http://blog.cloudflare.com/introducing-0-rtt/\">this previous blog post</a>.</p>\n<h3 id=\"deployability\">Deployability</h3>\n<p>TLS 1.3 was a radical departure from TLS 1.2 and earlier, but in order to be deployed widely, it has to be backwards compatible with existing software. One of the reasons TLS 1.3 has taken so long to go from draft to final publication was the fact that some existing software (namely middleboxes) wasn’t playing nicely with the new changes. Even minor changes to the TLS 1.3 protocol that were visible on the wire (such as eliminating the redundant ChangeCipherSpec message, bumping the version from 0x0303 to 0x0304) ended up causing connection issues for some people.</p>\n<p>Despite the fact that future flexibility was built into the TLS spec, some implementations made incorrect assumptions about how to handle future TLS versions. The phenomenon responsible for this change is called <em>ossification</em> and I explore it more fully in the context of TLS in my previous post about <a href=\"http://blog.cloudflare.com/why-tls-1-3-isnt-in-browsers-yet/\">why TLS 1.3 isn’t deployed yet</a>. To accommodate these changes, TLS 1.3 was modified to look a lot like TLS 1.2 session resumption (at least on the wire). This resulted in a much more functional, but less aesthetically pleasing protocol. This is the price you pay for upgrading one of the most widely deployed protocols online.</p>\n<h3 id=\"conclusions\">Conclusions</h3>\n<p>TLS 1.3 is a modern security protocol built with modern tools like <a href=\"http://tls13tamarin.github.io/TLS13Tamarin/\">formal</a> <a href=\"https://eprint.iacr.org/2016/081\">analysis</a> that retains its backwards compatibility. It has been tested widely and iterated upon using real world deployment data. It’s a cleaner, faster, and more secure protocol ready to become the de facto two-party encryption protocol online. Draft 28 of TLS 1.3 is enabled by default for <a href=\"http://blog.cloudflare.com/you-get-tls-1-3-you-get-tls-1-3-everyone-gets-tls-1-3/\">all Cloudflare customers</a>, and we will be rolling out the final version soon.</p>\n<p>Publishing TLS 1.3 is a huge accomplishment. It is one the best recent examples of how it is possible to take 20 years of deployed legacy code and change it on the fly, resulting in a better internet for everyone. TLS 1.3 has been debated and analyzed for the last three years and it’s now ready for prime time. Welcome, RFC 8446.</p>\n<!--kg-card-end: markdown-->",
		"id": "5d16453b41acde0011a95727",
		"meta_description": null,
		"meta_title": null,
		"og_description": null,
		"og_image": null,
		"og_title": null,
		"primary_author": {
			"id": "5d1644b141acde0011a94f31",
			"name": "Nick Sullivan",
			"slug": "nick-sullivan",
			"profile_image": "https://blog-cloudflare-com-assets.storage.googleapis.com/2019/09/BJ4NgXVj_400x400.jpg",
			"cover_image": "http://blog.cloudflare.com/content/images/2018/08/Screen-Shot-2018-07-18-at-4.29.24-PM.jpg",
			"bio": "Nick Sullivan was Head of Research (& Cryptography) at Cloudflare until 2023. He is passionate about improving security and privacy through cutting-edge research and the development of open standards.",
			"website": "https://crypto.dance",
			"location": "San Francisco",
			"facebook": null,
			"twitter": "@grittygrease",
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/nick-sullivan/"
		},
		"primary_tag": {
			"id": "5d16450341acde0011a951af",
			"name": "Encryption",
			"slug": "encryption",
			"description": null,
			"feature_image": null,
			"visibility": "public",
			"meta_title": null,
			"meta_description": null,
			"og_image": null,
			"og_title": null,
			"og_description": null,
			"twitter_image": null,
			"twitter_title": null,
			"twitter_description": null,
			"codeinjection_head": null,
			"codeinjection_foot": null,
			"canonical_url": null,
			"accent_color": null,
			"url": "http://blog.cloudflare.com/tag/encryption/"
		},
		"published_at": "2018-08-11T00:00:00.000+01:00",
		"reading_time": 19,
		"slug": "rfc-8446-aka-tls-1-3",
		"tags": [
			{
				"id": "5d16450341acde0011a951af",
				"name": "Encryption",
				"slug": "encryption",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/encryption/"
			},
			{
				"id": "5d16450341acde0011a95147",
				"name": "TLS",
				"slug": "tls",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/tls/"
			},
			{
				"id": "5d16450341acde0011a951c9",
				"name": "TLS 1.3",
				"slug": "tls-1-3",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/tls-1-3/"
			},
			{
				"id": "5d16450341acde0011a95185",
				"name": "HTTPS",
				"slug": "https",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/https/"
			},
			{
				"id": "5d16450341acde0011a95265",
				"name": "Security",
				"slug": "security",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Security.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Security",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Security'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/security/"
			},
			{
				"id": "5fce48a395ca4301baec175e",
				"name": "Research",
				"slug": "research",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/research/"
			},
			{
				"id": "5d16450341acde0011a95277",
				"name": "Cryptography",
				"slug": "cryptography",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/cryptography/"
			}
		],
		"title": "A Detailed Look at RFC 8446 (a.k.a. TLS 1.3)",
		"twitter_description": null,
		"twitter_image": null,
		"twitter_title": null,
		"updated_at": "2024-04-12T17:09:49.000+01:00",
		"url": "http://blog.cloudflare.com/rfc-8446-aka-tls-1-3/",
		"uuid": "6c70c851-cf27-4ef3-ab4e-e26705ea735e",
		"visibility": "public"
	}
}