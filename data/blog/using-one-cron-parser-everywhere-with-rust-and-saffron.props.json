{
	"post": {
		"id": "5fe306699bce9903f320c80c",
		"uuid": "3f500d57-dc93-407e-a53d-cce5e7feef00",
		"title": "Using One Cron Parser Everywhere With Rust and Saffron",
		"slug": "using-one-cron-parser-everywhere-with-rust-and-saffron",
		"html": "<figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2020/12/image4-28.png\" class=\"kg-image\" alt=\"Using One Cron Parser Everywhere With Rust and Saffron\" loading=\"lazy\"></figure><p>As part of the development for <a href=\"http://blog.cloudflare.com/introducing-cron-triggers-for-cloudflare-workers/\">Cron Triggers</a> on Cloudflare Workers, we had an interesting problem to tackle relating to parsers and the cron expression format. Cron expressions are the format used to write schedules in Cron Triggers, and extensions for cron expressions are everywhere. They vary between parsers and platforms as well, and aren’t standardized by a governing body, which means most parsers out there support many different feature sets, which isn’t good if you’d like something off the shelf that just works.</p><p>It can be tough to find the right parser for each part of the Cron Triggers stack, when its user interface, API, and edge service are all written in different languages. On top of that, it isn’t practical to reinvent the wheel multiple times by writing the same parser in different languages and make sure they all match perfectly. So you’re likely stuck with a less-than-perfect solution.</p><p>However, in the end, because we wrote our backend service in Rust, it took much less effort to solve this problem. Rust has a great ecosystem for working across multiple languages, which allows us to write a parser once and pull it from the backend to the frontend and everywhere in between with minimal glue code.</p><h3 id=\"the-trouble-with-cron\">The Trouble with Cron</h3><p>Cron expressions are a set of fields that represent a set of times. They act as a pattern that matches over the minute, hour, day of the month, month, and day of the week of a given time. Since cron is a simple format, it’s easy to extend with extra fields, so some parsers and platforms allow specifying seconds and years as well. However, seconds are a bit too granular and years are a bit too long, so we opted to not support them as part of Cron Triggers.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2020/12/image6-13.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>In the original cron program, the expressions supported were simple, each field could contain either:</p><ul><li>A <strong>star</strong> (‘*’) representing all values,</li><li>A <strong>value</strong> (a number for all fields or a 3 letter abbreviation for months or days of the week, like JUN or FRI)</li><li>A <strong>range of values</strong> (i.e. ‘0-30’), or</li><li>A <strong>set of ranges and/or values</strong> (i.e. ‘0-15,30,45-50,55’)</li></ul><p>This is a good start for specifying most time patterns, but many extensions exist out there to fill in some gaps. For example,</p><ul><li><strong>‘L’ </strong>can be used for the day of the month position to specify the last day of the month, or in the day of the week position with a day value to specify the last of that weekday during the month (i.e. 7L, the last Saturday of the month).</li><li><strong>‘W’ </strong>can be used for the day of the month, and lets you specify “the closest weekday (MON-FRI) to a given day”, like 15W, or the closest weekday to the 15th of the month.</li><li><strong>‘/’</strong> can be used for step values in any field. For example, */5 in the minute field is every 5th minute in the hour. This can be combined with a range to specify things such as ‘30-59/5’, or every 5th minute from minute 30 to minute 59 in the hour.</li><li><strong>‘#’</strong> can be used with a day of the week value to specify the “nth day of the month”, such as ‘5#3’, or the 3rd Thursday of the month.</li></ul><p>So far I’ve only listed extensions we currently support on Workers, but others exist such as ‘H’ in Jenkins and ‘?’ in some cron implementations for start-up time. Most libraries don’t support said extensions, however ‘?’ is used in some implementations in certain circumstances, but not as start-up time. With all these extensions and a lack of standardization, some libraries aren’t guaranteed to support them all.</p><h3 id=\"the-multitude-of-libraries\">The Multitude of Libraries</h3><p>During the development of Cron Triggers, we needed some things to just work, and to do that, we opted to pull some libraries off the shelf from package repositories for different parts of the stack.</p><p>In the Rust backend, we needed a cron library that supported all the extensions we wanted, while also leaving off other field extensions like seconds and years, and had an API that let us simply check if a given time matched the expression pattern. None of the crates on crates.io offered these, so we had to write it ourselves. Using the <a href=\"https://github.com/geal/nom\">nom</a> crate, it was easy to draft a simple, fast, safe parser, named ‘saffron’. As time went on and we got closer to release, it became clearer which extensions we really wanted to support. It was incredibly easy to add support for the new features without worrying about safety since the compiler checked it for us, so all we had to do was extensive logic testing. Last offset weekdays (“L-XW”) and leap years were difficult to get right the first time, but testing them was easy with Rust.</p><!--kg-card-begin: markdown--><pre><code class=\"language-rust\">#[test]\n   fn parse_check_offset_weekend_start_months() {\n       let cron = &quot;0 0 L-30W * *&quot;;\n \n       check_does_contain(\n           cron,\n           &amp;[&quot;2021-05-3T00:00:00+00:00&quot;, &quot;2022-01-3T00:00:00+00:00&quot;],\n       );\n   }\n   #[test]\n   fn parse_check_offset_leap_days() {\n       let cron = &quot;0 0 L-1 FEB *&quot;;\n \n       check_does_contain(\n           cron,\n           &amp;[\n               &quot;2400-02-28T00:00:00+00:00&quot;,\n               &quot;2300-02-27T00:00:00+00:00&quot;,\n               &quot;2200-02-27T00:00:00+00:00&quot;,\n               &quot;2100-02-27T00:00:00+00:00&quot;,\n               &quot;2024-02-28T00:00:00+00:00&quot;,\n               &quot;2020-02-28T00:00:00+00:00&quot;,\n               &quot;2004-02-28T00:00:00+00:00&quot;,\n               &quot;2000-02-28T00:00:00+00:00&quot;,\n           ],\n       );\n \n       check_does_not_contain(\n           cron,\n           &amp;[\n               &quot;2400-02-29T00:00:00+00:00&quot;,\n               &quot;2300-02-28T00:00:00+00:00&quot;,\n               &quot;2200-02-28T00:00:00+00:00&quot;,\n               &quot;2100-02-28T00:00:00+00:00&quot;,\n               &quot;2024-02-29T00:00:00+00:00&quot;,\n               &quot;2020-02-29T00:00:00+00:00&quot;,\n               &quot;2004-02-29T00:00:00+00:00&quot;,\n               &quot;2000-02-29T00:00:00+00:00&quot;,\n           ],\n       );\n   }\n</code></pre>\n<!--kg-card-end: markdown--><p>However, the UI had a different set of requirements. It didn’t need to know whether a given time matched a cron pattern <strong>—</strong> we wanted to provide information to the user about the cron expression they'd written, so it needed to provide a more human readable translation (description) of their cron expression and show them their next five executions (future times). But we were on a limited time budget — we needed something off the shelf.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2020/12/image7-10.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>We used two different JavaScript libraries for displaying info about given cron expressions: one gave us descriptions, the other gave us future times. Since these two libraries were tasked with parsing cron expressions, they also acted as validation; however, just using these two libraries for validation proved to be less than optimal. Both of the libraries supported extensions that were different both from each other and from the backend. Because of that they’d sometimes allow users to add schedules that would be rejected by the API on submit, which doesn’t translate into a good user experience. This validation should happen while the user writes their cron expression, not after they already hit submit! Because of this fracture in extension support, the UI parsers also sometimes didn’t parse expressions that should be supported and were accepted by the API!</p><p>Before release on the API side, we simply used a Go library for validation. This proved to be an easy solution, but we quickly noticed that the API accepted more than the schedule runner supported. This caused some triggers to be successfully added to the schedule, but were ignored by the runner because they failed to parse.</p><p>So before launch, we were using four completely different parsers! This probably wouldn’t be much of an issue if cron expressions were standardized. But because they aren’t, inconsistencies could exist at every step in the trigger creation process: between the two libraries we used on the frontend, between the frontend and API, and between the API and the backend.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2020/12/image3-47.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>To solve these issues in the UI and API before release, we synced the API and backend with another schedule runner entrypoint that simply read a cron expression from stdio, parsed it, and returned whether it was valid, to make sure they perfectly matched. We also added a validation endpoint to the API that could be used by the UI to check a cron expression, to make sure the backend actually accepted it. This fixed all cases of the API and UI being too accepting of expressions that weren’t supported, but neither of these solutions were optimal.</p><p>For one, they weren’t performant. Each time we wanted to validate a cron expression in the UI, we’d have to parse the expression twice in JavaScript (once for a description, and again for future times) and make an request to the API, which would start an instance of the schedule runner, parse the expression, and return whether it properly parsed.</p><p>Another reason this was nonoptimal is we were still limited in the features we supported by one library. One of our UI libraries didn’t support the ‘L’ and ‘W’ extensions, and since we also programmed the UI to accept expressions based on whether all parsers accepted it, expressions that used those extensions couldn’t be added.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2020/12/image2-45.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>So even though we dropped it to three parsers before release, it still didn’t seem good enough. Soon after release, I made plans to remedy it and started working on saffron (originally this project was called cfron but Cloudflare’s CTO couldn’t resist suggesting renaming it to saffron because he loves puns) to fill in for the one library holding us back in the UI. It would’ve been OK if missing extension support was the only thing wrong after release, but soon some other issues came up.</p><h3 id=\"off-by-one\">Off By One</h3><p>Saffron is based on the Quartz open source scheduler’s cron parser, which makes days of the week when specified as integers start from 1 (Sunday) and go to 7 (Saturday). Both parsers on the frontend follow the original values for cron, where days start from 0 and go to 6, and 7 could be used for Sunday as well. So when users entered 1-5, the UI told them they were entering a schedule from Monday to Friday, and the backend ended up executing Sunday to Thursday! This was missed when testing Cron Triggers initially and was caught by observant community members on the forum.</p><p>Fixing the issue turned out to be a bit difficult. While the library we were using for descriptions had the option to simply switch from 0-6 to 1-7 days of the week, our future times library did not have that option. Luckily, development was already halfway through with replacing it in Saffron. However, we couldn’t place it directly on the frontend yet, since web bindings didn’t exist and I didn't have time to write them. We needed something easier to develop quickly.</p><h3 id=\"reintroducing-cloudflare-workers-\">Reintroducing: Cloudflare Workers!</h3><p>Workers made it incredibly easy to take the existing code, add some wasm entry points for a makeshift API, and call with JavaScript. No need to build a whole separate API in Go! Just take your existing code and put it directly within 100ms of nearly everyone on the Internet. Why call all the way back home when the nearest PoP works just as well?</p><p>Plus, we don’t have to worry about building and publishing, wrangler does it for us! For example, our validation code is all written in Rust:</p><!--kg-card-begin: markdown--><pre><code class=\"language-rust\">#[wasm_bindgen]\n#[derive(Clone, Debug)]\npub struct ValidationResult {\n   errors: Option&lt;Vec&lt;String&gt;&gt;,\n}\n \n#[wasm_bindgen]\npub fn validate(crons: JsArray) -&gt; ValidationResult {\n   set_panic_hook();\n \n   let len = crons.length();\n   let mut map = HashMap::with_capacity(len as usize);\n   for i in 0..len {\n       let string = match crons.get(i).as_string() {\n           Some(string) =&gt; string,\n           None =&gt; {\n               return ValidationResult {\n                   errors: Some(vec![format!(&quot;Element '{}' is not a string&quot;, i)]),\n               }\n           }\n       };\n \n       let cron: Cron = match string.parse() {\n           Ok(cron) =&gt; cron,\n           Err(err) =&gt; {\n               return ValidationResult {\n                   errors: Some(vec![format!(\n                       &quot;Failed to parse expression at index '{}': {}&quot;,\n                       i, err\n                   )]),\n               }\n           }\n       };\n \n       if let Some(old_str) = map.insert(cron, string.clone()) {\n           return ValidationResult {\n               errors: Some(vec![format!(\n                   &quot;Expression '{}' already exists in the form of '{}'&quot;,\n                   string, old_str\n               )]),\n           };\n       }\n   }\n \n   ValidationResult { errors: None }\n}\n</code></pre>\n<!--kg-card-end: markdown--><p>and our code to handle processing the request and response is written in JavaScript:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">  const path = new URL(request.url).pathname;\n switch (path) {\n   case &quot;/validate&quot;: {\n     let body;\n     try {\n       body = await request.json()\n     } catch (e) {\n       return status(400, &quot;Bad Request&quot;);\n     }\n     let crons = body.crons;\n     if (!Array.isArray(crons)) {\n       return status(400, &quot;Bad Request&quot;);\n     }\n \n     let result = validate(crons).errors();\n     let success = result == null;\n     return apiResponse({}, success, result);\n   }\n</code></pre>\n<!--kg-card-end: markdown--><p>After a week of dedicated development, a Worker was written, the future times were calculated, and the UI was fixed! On top of that, we also implicitly introduced support for more extensions by removing the old parser and replacing it with the same one used on the backend as part of the fix itself. But we’re still using two parsers, so inconsistencies may still exist out there that we haven’t seen yet (that we don’t already know about).</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2020/12/image5-28.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>For example, this expression “0 0 L-1W 2 *”, or “12:00 AM on the closest weekday to the 2nd to last day of the month in February” cannot be parsed by the parser we use for descriptions, but it’s accepted by the API, backend, and Worker, so you can use it in your cron triggers, but the UI won’t give you a description for it.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2020/12/image8-7.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><h3 id=\"the-quest-for-the-one-true-parser\">The Quest for the One True Parser</h3><p>This brings us to today. In the search of better and faster, we want to bring the number of parsers down from two to one. One source of truth for the entire stack. To make it all faster, we should do parsing on the frontend locally instead of making a call to a remote Worker (if possible). In the API, the separate entry point was a nice easy solution, but starting the schedule runner just to check if a cron string is valid every time a user adds one doesn’t seem like it’s the best it could be.</p><p>Luckily Rust has a vibrant ecosystem that can meet all these needs! To bring the parser to the UI, we can compile saffron to wasm and use generated bindings created with wasm-pack. This can be easily integrated with our existing webpack setup, making it simple to get future times and create descriptions of cron strings on the frontend. Then, to bring the parser closer to the API, we can use Rust’s ability to create C APIs that we can then integrate with Go using cgo.</p><p>With our parser everywhere, we can then focus exclusively on cron descriptions to replace the one other parser we’re using in the UI. At that point we will have one parser for the whole stack, a single source of truth that anyone can reference to understand how the frontend, API, and backend all work together. It also simplifies our graph. Now instead of multiple libraries written in different languages, we have one library with multiple language wrappers, each serving a different part of the stack. No inconsistencies will exist since they’re all using the same parser!</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2020/12/image1-68.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>However, we wanted to do something before that…</p><h3 id=\"we-made-it-open-source-\">We made it open source!</h3><p>I think this project serves as a great example of Rust’s type system, its safety, and its extensibility across the entire stack. The project itself is simple, easy to understand, and easy to port and provide bindings for. By open sourcing, we can publish packages for these bindings on npm and crates.io, allowing anyone to use these bindings for whatever they want. It also means you can also follow along with development to see the finishing touches get added and maybe make some suggestions for future improvements in the UI and the parser itself.</p><p>You can view the project on GitHub at <a href=\"https://github.com/cloudflare/saffron\">https://github.com/cloudflare/saffron</a>.</p>",
		"comment_id": "5fe306699bce9903f320c80c",
		"feature_image": "http://blog.cloudflare.com/content/images/2020/12/image4-29.png",
		"featured": false,
		"visibility": "public",
		"created_at": "2020-12-23T08:57:13.000+00:00",
		"updated_at": "2020-12-25T14:00:01.000+00:00",
		"published_at": "2020-12-25T14:00:00.000+00:00",
		"custom_excerpt": "Cron parsers are everywhere, each supporting their own extensions on the cron string format, which made consistency between parts of Cron Triggers difficult to achieve. Today we’re showing how we easily solved this problem with Rust without needing to write the same code twice.",
		"codeinjection_head": null,
		"codeinjection_foot": null,
		"custom_template": null,
		"canonical_url": null,
		"authors": [
			{
				"id": "5fd81e0624f0e101ba8f2968",
				"name": "Aaron Loyd",
				"slug": "aaron-loyd",
				"profile_image": "http://blog.cloudflare.com/content/images/2020/12/aaron-loyd.jpg",
				"cover_image": null,
				"bio": null,
				"website": null,
				"location": "Austin, TX",
				"facebook": null,
				"twitter": null,
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/aaron-loyd/"
			}
		],
		"tags": [
			{
				"id": "5d16450341acde0011a95253",
				"name": "Cloudflare Workers",
				"slug": "workers",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/workers/"
			},
			{
				"id": "5d16450341acde0011a95252",
				"name": "Serverless",
				"slug": "serverless",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Serverless.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Serverless",
				"meta_description": "Cloudflare blog posts tagged 'serverless'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/serverless/"
			},
			{
				"id": "5d16450341acde0011a9523c",
				"name": "Rust",
				"slug": "rust",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/rust/"
			}
		],
		"primary_author": {
			"id": "5fd81e0624f0e101ba8f2968",
			"name": "Aaron Loyd",
			"slug": "aaron-loyd",
			"profile_image": "http://blog.cloudflare.com/content/images/2020/12/aaron-loyd.jpg",
			"cover_image": null,
			"bio": null,
			"website": null,
			"location": "Austin, TX",
			"facebook": null,
			"twitter": null,
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/aaron-loyd/"
		},
		"primary_tag": {
			"id": "5d16450341acde0011a95253",
			"name": "Cloudflare Workers",
			"slug": "workers",
			"description": null,
			"feature_image": null,
			"visibility": "public",
			"meta_title": null,
			"meta_description": null,
			"og_image": null,
			"og_title": null,
			"og_description": null,
			"twitter_image": null,
			"twitter_title": null,
			"twitter_description": null,
			"codeinjection_head": null,
			"codeinjection_foot": null,
			"canonical_url": null,
			"accent_color": null,
			"url": "http://blog.cloudflare.com/tag/workers/"
		},
		"url": "http://blog.cloudflare.com/using-one-cron-parser-everywhere-with-rust-and-saffron/",
		"excerpt": "Cron parsers are everywhere, each supporting their own extensions on the cron string format, which made consistency between parts of Cron Triggers difficult to achieve. Today we’re showing how we easily solved this problem with Rust without needing to write the same code twice.",
		"reading_time": 11,
		"access": true,
		"comments": false,
		"og_image": "http://blog.cloudflare.com/content/images/2020/12/facebook-link-image-25.png",
		"og_title": null,
		"og_description": null,
		"twitter_image": "http://blog.cloudflare.com/content/images/2020/12/twitter-shared-link-25.png",
		"twitter_title": null,
		"twitter_description": null,
		"meta_title": null,
		"meta_description": "Cron parsers are everywhere, each supporting their own extensions on the cron string format, which made consistency between parts of Cron Triggers difficult to achieve. Today we’re showing how we easily solved this problem with Rust without needing to write the same code twice.",
		"email_subject": null,
		"frontmatter": null,
		"feature_image_alt": null,
		"feature_image_caption": null
	},
	"locale": "en-us"
}