{
	"browserLocale": "en-us",
	"locale": "en-us",
	"post": {
		"access": true,
		"authors": [
			{
				"id": "5d1644b141acde0011a94fc6",
				"name": "Jon Levine",
				"slug": "jpl",
				"profile_image": "http://blog.cloudflare.com/content/images/2018/04/prof-crop.jpg",
				"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-92.png",
				"bio": null,
				"website": null,
				"location": "San Francisco, CA",
				"facebook": null,
				"twitter": "@jplevine",
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/jpl/"
			}
		],
		"canonical_url": null,
		"codeinjection_foot": null,
		"codeinjection_head": null,
		"comment_id": "5b7892fe7f8d5f00bf05f573",
		"comments": false,
		"created_at": "2018-08-18T22:43:26.000+01:00",
		"custom_excerpt": "A few days ago, Cloudflare — along with the rest of the world — learned of a \"practical\" cache poisoning attack. In this post I’ll walk through the attack and explain how Cloudflare mitigated it for our customers.",
		"custom_template": null,
		"email_subject": null,
		"excerpt": "A few days ago, Cloudflare — along with the rest of the world — learned of a \"practical\" cache poisoning attack. In this post I’ll walk through the attack and explain how Cloudflare mitigated it for our customers.",
		"feature_image": "http://blog.cloudflare.com/content/images/2018/08/8CC51014-22BF-4965-9AD7-542338F8C3AA.png",
		"feature_image_alt": null,
		"feature_image_caption": null,
		"featured": false,
		"frontmatter": null,
		"html": "<!--kg-card-begin: markdown--><p>A few days ago, Cloudflare — along with the rest of the world — learned of a <a href=\"https://portswigger.net/blog/practical-web-cache-poisoning\">&quot;practical&quot; cache poisoning attack</a>. In this post I’ll walk through the attack and explain how Cloudflare mitigated it for our customers. While any web cache is vulnerable to this attack, Cloudflare is uniquely able to take proactive steps to defend millions of customers.</p>\n<p>In addition to the steps we’ve taken, we strongly recommend that customers update their origin web servers to mitigate vulnerabilities. Some popular vendors have applied patches that can be installed right away, including <a href=\"https://www.drupal.org/SA-CORE-2018-005\">Drupal</a>, <a href=\"https://symfony.com/blog/cve-2018-14773-remove-support-for-legacy-and-risky-http-headers\">Symfony</a>, and <a href=\"https://framework.zend.com/security/advisory/ZF2018-01\">Zend</a>.</p>\n<h3 id=\"howasharedwebcacheworks\">How a shared web cache works</h3>\n<p>Say a user requests a cacheable file, <code>index.html</code>. We first check if it’s in cache, and if it’s not, we fetch it from the origin and store it. Subsequent users can request that file from our cache until it expires or gets evicted.</p>\n<p>Although contents of a response can vary slightly between requests, customers may want to cache a single version of the file to improve performance:</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2018/08/cache-ok.png\" alt=\"How cache normally works\" loading=\"lazy\"></p>\n<p><em>(See <a href=\"https://support.cloudflare.com/hc/en-us/articles/200172256-How-do-I-cache-static-HTML-\">this support page</a> for more info about how to cache HTML with Cloudflare.)</em></p>\n<p>How do we know it’s the same file? We create something called a “cache key” which contains several fields, for example:</p>\n<ul>\n<li>HTTP Scheme</li>\n<li>HTTP Host</li>\n<li>Path</li>\n<li>Query string</li>\n<li>…</li>\n</ul>\n<p>In general, if the URL matches, and our customer has told us that a file is cacheable, we will serve the cached file to subsequent users.</p>\n<h3 id=\"howacachepoisoningattackworks\">How a cache poisoning attack works</h3>\n<p>In a cache poisoning attack, a malicious user crafts an HTTP request that tricks the origin into producing a “poisoned” version of <code>index.html</code> with the same cache key as an innocuous request. This file may get cached and served to other users:</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2018/08/cache-poison.png\" alt=\"How a cache poisoning attack works\" loading=\"lazy\"></p>\n<p>We take this vulnerability very seriously, because an attacker with no privileges may be able to inject arbitrary data or resources into customer websites.</p>\n<p>So how do you trick an origin into producing unexpected output? It turns out that some origins send back data back from HTTP headers that are not part of the cache key.</p>\n<p>To give one example, we might observe origin behavior like:</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2018/08/example-req-resp.png\" alt=\"An HTTP response that reflects back data in an HTTP request header\" loading=\"lazy\"></p>\n<p>Because this data is returned, unescaped, from the origin, it can be used in scary ways:</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2018/08/js-req-resp.png\" alt=\"An HTTP response that reflects back malicious JavaScript from an HTTP request header\" loading=\"lazy\"></p>\n<p>Game over — the attacker can now get arbitrary JavaScript to execute on this webpage.</p>\n<h3 id=\"notifyingcustomerswhoareatrisk\">Notifying customers who are at risk</h3>\n<p>As soon as we learned about this new vulnerability, we wanted to see if any of our customers were vulnerable. We scanned all of our enterprise customer websites and checked if they echoed risky data. We immediately notified these customers about the vulnerability and advised them to update their origin.</p>\n<h3 id=\"blockingtheworstoffenders\">Blocking the worst offenders</h3>\n<p>The next step was to block all requests that contain obviously malicious content — like JavaScript — in an HTTP header. Examples of this include a header with suspicious characters like <code>&lt;</code> or <code>&gt;</code>.</p>\n<p>We were able to deploy these changes immediately for all customers who use our WAF. But we weren’t done yet.</p>\n<h3 id=\"amoresubtleattack\">A more subtle attack</h3>\n<p>There are other versions of the attack that could trick a client into downloading an unwanted but innocuous-looking resource, with harmful consequences.</p>\n<p>Many requests that have traveled through another proxy before reaching Cloudflare contain the X-Forwarded-Host header. Some origins may rely on this value to serve web pages. For example:</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2018/08/subtle-req-resp.png\" alt=\"An HTTP request may look innocuous, but contain malicious data that gets reflected by an origin\" loading=\"lazy\"></p>\n<p>In this case, there’s no way to just block requests with this X-Forwarded-Host header, because it may have a valid purpose. However, we need to ensure that we don’t return this content to any users who didn’t request it!</p>\n<p>There are a few ways we could defend against this type of attack. An obvious first answer is to just disable cache. This isn’t a great solution, though, as disabling cache would result in a tremendous amount of traffic on customer origin servers, which defeats the purpose of using Cloudflare.</p>\n<p>Another option is to always include every HTTP header and its value in the cache key. However, there are many headers, and many different innocuous values (e.g. <code>User-Agent</code>). If we always included them in our default cache key, performance would degrade, because different users asking for the same content would get different copies, when they could all be effectively served with one.</p>\n<h3 id=\"solutionincludeinterestingheadervaluesinthecachekey\">Solution: include “interesting” header values in the cache key</h3>\n<p>Instead, we decided to change our cache keys for a request only if we think it may influence the origin response. Our default cache key got a bunch of new values:</p>\n<ul>\n<li>HTTP Scheme</li>\n<li>HTTP Host</li>\n<li>Path</li>\n<li>Query string</li>\n<li><strong>X-Forwarded-Host header</strong></li>\n<li><strong>X-Host header</strong></li>\n<li><strong>X-Forwarded-Scheme header</strong></li>\n<li>…</li>\n</ul>\n<p>In order to prevent unnecessary cache sharding, we only include these header values when they differ from what’s in the URL or Host header. For example, if the HTTP Host is <code>www.example.com</code>, and X-Forwarded-Host is also <code>www.example.com</code>, we will not add the X-Forwarded-Host header to the cache key. Of course, it’s still crucial that applications do not send back data from any other headers!</p>\n<p>One side effect of this change is that customers who use these headers, and also rely on Purge by URL, may need to specify more headers in their Purge API calls. You can read more detail in <a href=\"https://support.cloudflare.com/hc/en-us/articles/200169246\">this support page</a>.</p>\n<h3 id=\"conclusion\">Conclusion</h3>\n<p>Cloudflare is committed to protecting our customers. If you notice anything unusual with your account, or have more questions, please contact <a href=\"mailto:support@cloudflare.com\">Cloudflare Support</a>.</p>\n<!--kg-card-end: markdown-->",
		"id": "5d16453b41acde0011a95730",
		"meta_description": null,
		"meta_title": null,
		"og_description": null,
		"og_image": null,
		"og_title": null,
		"primary_author": {
			"id": "5d1644b141acde0011a94fc6",
			"name": "Jon Levine",
			"slug": "jpl",
			"profile_image": "http://blog.cloudflare.com/content/images/2018/04/prof-crop.jpg",
			"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-92.png",
			"bio": null,
			"website": null,
			"location": "San Francisco, CA",
			"facebook": null,
			"twitter": "@jplevine",
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/jpl/"
		},
		"primary_tag": {
			"id": "5d16450341acde0011a951aa",
			"name": "Vulnerabilities",
			"slug": "vulnerabilities",
			"description": "Vulnerabilities (EN)",
			"feature_image": null,
			"visibility": "public",
			"meta_title": null,
			"meta_description": null,
			"og_image": null,
			"og_title": null,
			"og_description": null,
			"twitter_image": null,
			"twitter_title": null,
			"twitter_description": null,
			"codeinjection_head": null,
			"codeinjection_foot": null,
			"canonical_url": null,
			"accent_color": null,
			"url": "http://blog.cloudflare.com/tag/vulnerabilities/"
		},
		"published_at": "2018-08-20T16:53:14.000+01:00",
		"reading_time": 4,
		"slug": "cache-poisoning-protection",
		"tags": [
			{
				"id": "5d16450341acde0011a951aa",
				"name": "Vulnerabilities",
				"slug": "vulnerabilities",
				"description": "Vulnerabilities (EN)",
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/vulnerabilities/"
			},
			{
				"id": "5d16450341acde0011a95157",
				"name": "Cache",
				"slug": "cache",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/cache/"
			},
			{
				"id": "5d16450341acde0011a95265",
				"name": "Security",
				"slug": "security",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Security.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Security",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Security'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/security/"
			}
		],
		"title": "How Cloudflare protects customers from cache poisoning",
		"twitter_description": null,
		"twitter_image": null,
		"twitter_title": null,
		"updated_at": "2018-08-29T08:51:23.000+01:00",
		"url": "http://blog.cloudflare.com/cache-poisoning-protection/",
		"uuid": "179174e1-ba70-45b1-afc4-865ab382deb8",
		"visibility": "public"
	}
}