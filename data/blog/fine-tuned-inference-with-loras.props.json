{
	"post": {
		"id": "660aeacca5fcdf000a08f351",
		"uuid": "77370bc4-28cb-4ed0-b46f-9fe5abbf951d",
		"title": "Running fine-tuned models on Workers AI with LoRAs",
		"slug": "fine-tuned-inference-with-loras",
		"html": "<!--kg-card-begin: markdown--><p><small>This post is also available in <a href=\"http://blog.cloudflare.com/zh-cn/fine-tuned-inference-with-loras-zh-cn/\">简体中文</a>, <a href=\"http://blog.cloudflare.com/zh-tw/fine-tuned-inference-with-loras-zh-tw/\">繁體中文</a>, <a href=\"http://blog.cloudflare.com/ja-jp/fine-tuned-inference-with-loras-ja-jp/\">日本語</a>, <a href=\"http://blog.cloudflare.com/ko-kr/fine-tuned-inference-with-loras-ko-kr/\">한국어</a>, <a href=\"http://blog.cloudflare.com/de-de/fine-tuned-inference-with-loras-de-de/\">Deutsch</a>, <a href=\"http://blog.cloudflare.com/fr-fr/fine-tuned-inference-with-loras-fr-fr/\">Français</a> and <a href=\"http://blog.cloudflare.com/es-es/fine-tuned-inference-with-loras-es-es/\">Español</a>.</small></p>\n<!--kg-card-end: markdown--><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2024/04/loraai.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"1600\" height=\"900\"></figure><h3 id=\"inference-from-fine-tuned-llms-with-loras-is-now-in-open-beta\">Inference from fine-tuned LLMs with LoRAs is now in open beta</h3><p>Today, we’re excited to announce that you can now run fine-tuned inference with LoRAs on Workers AI. This feature is in open beta and available for pre-trained LoRA adapters to be used with Mistral, Gemma, or Llama 2, with some limitations. Take a look at our <a href=\"http://blog.cloudflare.com/workers-ai-ga-huggingface-loras-python-support/\">product announcements blog post</a> to get a high-level overview of our Bring Your Own (BYO) LoRAs feature. </p><p>In this post, we’ll do a deep dive into what fine-tuning and LoRAs are, show you how to use it on our Workers AI platform, and then delve into the technical details of how we implemented it on our platform.</p><h2 id=\"what-is-fine-tuning\">What is fine-tuning?</h2><p>Fine-tuning is a general term for modifying an AI model by continuing to train it with additional data. The goal of fine-tuning is to increase the probability that a generation is similar to your dataset. Training a model from scratch is not practical for many use cases given how expensive and time consuming they can be to train. By fine-tuning an existing pre-trained model, you benefit from its capabilities while also accomplishing your desired task. <a href=\"https://arxiv.org/abs/2106.09685\">Low-Rank Adaptation</a> (LoRA) is a specific fine-tuning method that can be applied to various model architectures, not just LLMs. It is common that the pre-trained model weights are directly modified or fused with additional fine-tune weights in traditional fine-tuning methods. LoRA, on the other hand, allows for the fine-tune weights and pre-trained model to remain separate, and for the pre-trained model to remain unchanged. The end result is that you can train models to be more accurate  at specific tasks, such as generating code, having a specific personality, or generating images in a specific style. You can even fine-tune an existing <a href=\"https://www.cloudflare.com/learning/ai/what-is-large-language-model/\">LLM</a> to understand additional information about a specific topic.</p><p>The approach of maintaining the original base model weights means that you can create new fine-tune weights with relatively little compute. You can take advantage of existing foundational models (such as Llama, Mistral, and Gemma), and adapt them for your needs.</p><h2 id=\"how-does-fine-tuning-work\">How does fine-tuning work?</h2><p>To better understand fine-tuning and why LoRA is so effective, we have to take a step back to understand how AI models work. AI models (like LLMs) are neural networks that are trained through deep learning techniques. In neural networks, there are a set of parameters that act as a mathematical representation of the model’s domain knowledge, made up of weights and biases – in simple terms, numbers. These parameters are usually represented as large matrices of numbers. The more parameters a model has, the larger the model is, so when you see models like llama-2-7b, you can read “7b” and know that the model has 7 billion parameters.</p><p>A model’s parameters define its behavior. When you train a model from scratch, these parameters usually start off as random numbers. As you train the model on a dataset, these parameters get adjusted bit-by-bit until the model reflects the dataset and exhibits the right behavior. Some parameters will be more important than others, so we apply a weight and use it to show more or less importance. Weights play a crucial role in the model's ability to capture patterns and relationships in the data it is trained on.</p><p>Traditional fine-tuning will adjust <em>all</em> the parameters in the trained model with a new set of weights. As such, a fine-tuned model requires us to serve the same amount of parameters as the original model, which means it can take a lot of time and compute to train and run inference for a fully fine-tuned model. On top of that, new state-of-the-art models, or versions of existing models, are regularly released, meaning that fully fine-tuned models can become costly to train, maintain, and store.</p><h2 id=\"lora-is-an-efficient-method-of-fine-tuning\">LoRA is an efficient method of fine-tuning</h2><p>In the simplest terms, LoRA avoids adjusting parameters in a pre-trained model and instead allows us to apply a small number of additional parameters. These additional parameters are applied temporarily to the base model to effectively control model behavior. Relative to traditional fine-tuning methods it takes a lot less time and compute to train these additional parameters, which are referred to as a LoRA adapter. After training, we package up the LoRA adapter as a separate model file that can then plug in to the base model it was trained from. A fully fine-tuned model can be tens of gigabytes in size, while these adapters are usually just a few megabytes. This makes it a lot easier to distribute, and serving fine-tuned inference with LoRA only adds ms of latency to total inference time.</p><p>If you’re curious to understand why LoRA is so effective, buckle up — we first have to go through a brief lesson on linear algebra. If that’s not a term you’ve thought about since university, don’t worry, we’ll walk you through it.</p><h2 id=\"show-me-the-math\">Show me the math</h2><p>With traditional fine-tuning, we can take the weights of a model (<em>W0</em>) and tweak them to output a new set of weights — so the difference between the original model weights and the new weights is <em>ΔW</em>, representing the change in weights<em>. </em>Therefore, a tuned model will have a new set of weights which can be represented as the original model weights plus the change in weights, <em>W0</em> + <em>ΔW.</em></p><p>Remember, all of these model weights are actually represented as large matrices of numbers. In math, every matrix has a property called rank (<em>r</em>), which describes the number of linearly independent columns or rows in a matrix. When matrices are low-rank, they have only a few columns or rows that are “important”, so we can actually decompose or split them into two smaller matrices with the most important parameters  (think of it like factoring in algebra). This technique is called rank decomposition, which allows us to greatly reduce and simplify matrices while keeping the most important bits. In the context of fine-tuning, rank determines how many parameters get changed from the original model – the higher the rank, the stronger the fine-tune, giving you more granularity over the output.</p><p>According to the <a href=\"https://arxiv.org/abs/2106.09685\">original LoRA paper</a>, researchers have found that when a model is low-rank, the matrix representing the change in weights is also low-rank. Therefore, we can apply rank decomposition to our matrix representing the change in weights <em>ΔW </em>to create two smaller matrices <em>A, B</em>, where <em>ΔW = BA</em>. Now, the change in the model can be represented by two smaller low-rank matrices<em>. </em>This is why this method of fine-tuning is called Low-Rank Adaptation.</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"http://blog.cloudflare.com/content/images/2024/04/Lora-lineapro.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"1200\" height=\"600\"></figure><p><br>When we run inference, we only need the smaller matrices <em>A, B</em> to change the behavior of the model. The model weights in <em>A, B</em> constitute our LoRA adapter (along with a config file). At runtime, we add the model weights together, combining the original model (<em>W0</em>) and the LoRA adapter (<em>A, B)</em>. Adding and subtracting are simple mathematical operations, meaning that we can quickly swap out different LoRA adapters by adding and subtracting <em>A, B</em> from <em>W0.</em>. By temporarily adjusting the weights of the original model, we modify the model’s behavior and output and as a result, we get fine-tuned inference with minimal added latency.</p><p>According to the original <a href=\"https://arxiv.org/abs/2106.09685\">LoRA paper</a>, “LoRA can reduce the number of trainable parameters by 10,000 times and the GPU memory requirement by 3 times”. Because of this, LoRA is one of the most popular methods of fine-tuning since it's a lot less computationally expensive than a fully fine-tuned model, doesn't add any material inference time, and is much smaller and portable.</p><h2 id=\"how-can-you-use-loras-with-workers-ai\">How can you use LoRAs with Workers AI?</h2><p>Workers AI is very well-suited to run LoRAs because of the way we run serverless inference. The models in our catalog are always pre-loaded on our GPUs, meaning that we keep them warm so that your requests never encounter a cold start. This means that the base model is always available, and we can dynamically load and swap out LoRA adapters as needed. We can actually plug in multiple LoRA adapters to one base model, so we can serve multiple different fine-tuned inference requests at once.</p><p>When you fine-tune with LoRA, your output will be two files: your custom model weights (in <a href=\"https://huggingface.co/docs/safetensors/en/index\">safetensors</a> format) and an adapter config file (in json format). To create these weights yourself, you can train a LoRA on your own data using the <a href=\"https://huggingface.co/docs/peft/en/tutorial/peft_model_config\">Hugging Face PEFT</a> (Parameter-Efficient Fine-Tuning) library combined with the <a href=\"https://huggingface.co/docs/autotrain/en/llm_finetuning\">Hugging Face AutoTrain LLM library</a>. You can also run your training tasks on services such as <a href=\"https://huggingface.co/autotrain\">Auto Train</a> and <a href=\"https://colab.research.google.com/\">Google Colab</a>. Alternatively, there are many open-source LoRA adapters <a href=\"https://huggingface.co/models?pipeline_tag=text-generation&amp;sort=trending&amp;search=mistral+lora\">available on Hugging Face</a> today that cover a variety of use cases.</p><p>Eventually, we want to support the LoRA training workloads on our platform, but we’ll need you to bring your trained LoRA adapters to Workers AI today, which is why we’re calling this feature Bring Your Own (BYO) LoRAs.</p><p>For the initial open beta release, we are allowing people to use LoRAs with our Mistral, Llama, and Gemma models. We have set aside versions of these models which accept LoRAs, which you can access by appending <code>-lora</code> to the end of the model name. Your adapter must have been fine-tuned from one of our supported base models listed below:</p><ul><li><code>@cf/meta-llama/llama-2-7b-chat-hf-lora</code></li><li><code>@cf/mistral/mistral-7b-instruct-v0.2-lora</code></li><li><code>@cf/google/gemma-2b-it-lora</code></li><li><code>@cf/google/gemma-7b-it-lora</code></li></ul><p>As we are launching this feature in open beta, we have some limitations today to take note of: quantized LoRA models are not yet supported, LoRA adapters must be smaller than 100MB and have up to a max rank of 8, and you can try up to 30 LoRAs per account during our initial open beta. To get started with LoRAs on Workers AI, read the <a href=\"https://developers.cloudflare.com/workers-ai/fine-tunes/loras\">Developer Docs</a>.</p><p>As always, we expect people to use Workers AI and our new BYO LoRA feature with our <a href=\"https://www.cloudflare.com/service-specific-terms-developer-platform/#developer-platform-terms\">Terms of Service</a> in mind, including any model-specific restrictions on use contained in the models’ license terms. </p><h2 id=\"how-did-we-build-multi-tenant-lora-serving\">How did we build multi-tenant LoRA serving?</h2><p>Serving multiple LoRA models simultaneously poses a challenge in terms of GPU resource utilization. While it is possible to batch inference requests to a base model, it is much more challenging to batch requests with the added complexity of serving unique LoRA adapters. To tackle this problem, we leverage the Punica CUDA kernel design in combination with global cache optimizations in order to handle the memory intensive workload of multi-tenant LoRA serving while offering low inference latency. </p><p>The Punica CUDA kernel was introduced in the paper <a href=\"https://arxiv.org/abs/2310.18547\">Punica: Multi-Tenant LoRA Serving</a> as a method to serve multiple, significantly different LoRA models applied to the same base model. In comparison to previous inference techniques, the method offers substantial throughput and latency improvements. This optimization is achieved in part through enabling request batching even across requests serving different LoRA adapters. </p><p>The core of the Punica kernel system is a new CUDA kernel called Segmented Gather Matrix-Vector Multiplication (SGMV). SGMV allows a GPU to store only a single copy of the pre-trained model while serving different LoRA models. The Punica kernel design system consolidates the batching of requests for unique LoRA models to improve performance by parallelizing the feature-weight multiplication of different requests in a batch. Requests for the same LoRA model are then grouped to increase operational intensity. Initially, the GPU loads the base model while reserving most of its GPU memory for KV Cache. The LoRA components (A and B matrices) are then loaded on demand from remote storage (Cloudflare’s cache or R2) when required by an incoming request. This on demand loading introduces only milliseconds of latency, which means that multiple LoRA adapters can be seamlessly fetched and served with minimal impact on inference performance. Frequently requested LoRA adapters are cached for the fastest possible inference.</p><p>Once a requested LoRA has been cached locally, the speed it can be made available for inference is constrained only by PCIe bandwidth. Regardless, given that each request may require its own LoRA, it becomes critical that LoRA downloads and memory copy operations are performed asynchronously. The Punica scheduler tackles this exact challenge, batching only requests which currently have required LoRA weights available in GPU memory, and queueing requests that do not until the required weights are available and the request can efficiently join a batch.</p><p>By effectively managing KV cache and batching these requests, it is possible to handle significant multi-tenant LoRA-serving workloads. A further and important optimization is the use of continuous batching. Common batching methods require all requests to the same adapter to reach their stopping condition before being released. Continuous batching allows a request in a batch to be released early so that it does not need to wait for the longest running request.</p><p>Given that LLMs deployed to Cloudflare’s network are available globally, it is important that LoRA adapter models are as well. Very soon, we will implement remote model files that are cached at Cloudflare’s edge to further reduce inference latency.</p><h2 id=\"a-roadmap-for-fine-tuning-on-workers-ai\">A roadmap for fine-tuning on Workers AI</h2><p>Launching support for LoRA adapters is an important step towards unlocking fine-tunes on our platform. In addition to the LLM fine-tunes available today, we look forward to supporting more models and a variety of task types, including image generation. </p><p>Our vision for Workers AI is to be the best place for developers to run their AI workloads — and this includes the process of fine-tuning itself. Eventually, we want to be able to run the fine-tuning training job as well as fully fine-tuned models directly on Workers AI. This unlocks many use cases for AI to be more relevant in organizations by empowering models to have more granularity and detail for specific tasks.</p><p>With AI Gateway, we will be able to help developers log their prompts and responses, which they can then use to fine-tune models with production data. Our vision is to have a one-click fine-tuning service, where log data from AI Gateway can be used to retrain a model (on Cloudflare) and then the fine-tuned model can be redeployed on Workers AI for inference. This will allow developers to personalize their AI models to fit their applications, allowing for granularity as low as a per-user level. The fine-tuned model can then be smaller and more optimized, helping users save time and money on AI inference – and the magic is that all of this can all happen within our very own <a href=\"https://www.cloudflare.com/developer-platform/\">Developer Platform</a>. </p><p>We’re excited for you to try the open beta for BYO LoRAs! Read our <a href=\"https://developers.cloudflare.com/workers-ai/fine-tunes\">Developer Docs</a> for more details, and tell us what you think on <a href=\"https://discord.cloudflare.com\">Discord</a>.</p>",
		"comment_id": "660aeacca5fcdf000a08f351",
		"feature_image": "http://blog.cloudflare.com/content/images/2024/04/loraai-1.png",
		"featured": false,
		"visibility": "public",
		"created_at": "2024-04-01T18:11:40.000+01:00",
		"updated_at": "2024-04-09T02:58:37.000+01:00",
		"published_at": "2024-04-02T14:00:48.000+01:00",
		"custom_excerpt": "Workers AI now supports fine-tuned models using LoRAs. But what is a LoRA and how does it work? In this post, we dive into fine-tuning, LoRAs and even some math to share the details of how it all works under the hood",
		"codeinjection_head": null,
		"codeinjection_foot": null,
		"custom_template": null,
		"canonical_url": null,
		"authors": [
			{
				"id": "64ee3d0e200174000a57bc51",
				"name": "Michelle Chen",
				"slug": "michelle",
				"profile_image": "http://blog.cloudflare.com/content/images/2023/08/Michelle-Chen-Headshot.jpg",
				"cover_image": null,
				"bio": null,
				"website": null,
				"location": null,
				"facebook": null,
				"twitter": "@_mchenco",
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/michelle/"
			},
			{
				"id": "65c2254051a92e000adeb05d",
				"name": "Logan Grasby",
				"slug": "logan",
				"profile_image": "http://blog.cloudflare.com/content/images/2024/02/LoganPortraitSmall.jpg",
				"cover_image": null,
				"bio": null,
				"website": null,
				"location": null,
				"facebook": null,
				"twitter": "@LoganGrasby",
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/logan/"
			}
		],
		"tags": [
			{
				"id": "660aecffa5fcdf000a08f38d",
				"name": "#BLOG-2383",
				"slug": "hash-blog-2383",
				"description": null,
				"feature_image": null,
				"visibility": "internal",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/404/"
			},
			{
				"id": "5d16450341acde0011a95204",
				"name": "Developers",
				"slug": "developers",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Developers-1.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Developers",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Developers'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developers/"
			},
			{
				"id": "607030964b1e0f03f340f2d8",
				"name": "Developer Week",
				"slug": "developer-week",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developer-week/"
			},
			{
				"id": "65141c8a307c67000a55f0fd",
				"name": "Workers AI",
				"slug": "workers-ai",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/workers-ai/"
			},
			{
				"id": "6411ae504543a1000a7b3802",
				"name": "AI",
				"slug": "ai",
				"description": "Artificial Intelligence",
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/ai/"
			},
			{
				"id": "5d16450341acde0011a95253",
				"name": "Cloudflare Workers",
				"slug": "workers",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/workers/"
			},
			{
				"id": "64a3e2b834124c000b00b717",
				"name": "Developer Platform",
				"slug": "developer-platform",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developer-platform/"
			},
			{
				"id": "65c0d31851a92e000adeae66",
				"name": "#front-page",
				"slug": "hash-front-page",
				"description": null,
				"feature_image": null,
				"visibility": "internal",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/404/"
			}
		],
		"primary_author": {
			"id": "64ee3d0e200174000a57bc51",
			"name": "Michelle Chen",
			"slug": "michelle",
			"profile_image": "http://blog.cloudflare.com/content/images/2023/08/Michelle-Chen-Headshot.jpg",
			"cover_image": null,
			"bio": null,
			"website": null,
			"location": null,
			"facebook": null,
			"twitter": "@_mchenco",
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/michelle/"
		},
		"primary_tag": null,
		"url": "http://blog.cloudflare.com/fine-tuned-inference-with-loras/",
		"excerpt": "Workers AI now supports fine-tuned models using LoRAs. But what is a LoRA and how does it work? In this post, we dive into fine-tuning, LoRAs and even some math to share the details of how it all works under the hood",
		"reading_time": 10,
		"access": true,
		"comments": false,
		"og_image": "http://blog.cloudflare.com/content/images/2024/04/workai3-1.png",
		"og_title": null,
		"og_description": null,
		"twitter_image": "http://blog.cloudflare.com/content/images/2024/04/workai3.png",
		"twitter_title": null,
		"twitter_description": null,
		"meta_title": null,
		"meta_description": null,
		"email_subject": null,
		"frontmatter": null,
		"feature_image_alt": null,
		"feature_image_caption": null
	},
	"locale": "en-us"
}