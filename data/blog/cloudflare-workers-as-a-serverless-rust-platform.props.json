{
	"post": {
		"id": "5d16453b41acde0011a95764",
		"uuid": "1d5e6742-4c0c-436e-be71-00ae84a3fc83",
		"title": "Serverless Rust with Cloudflare Workers",
		"slug": "cloudflare-workers-as-a-serverless-rust-platform",
		"html": "<p><em><strong>Update</strong>: Rust Tooling for Workers has improved significantly since this post. Go <a href=\"http://blog.cloudflare.com/introducing-wrangler-cli/\">here</a> to check out Wrangler, our new Rust+Workers cli</em></p><hr><!--kg-card-begin: markdown--><p>The Workers team just <a href=\"http://blog.cloudflare.com/webassembly-on-cloudflare-workers/\">announced support</a> for WebAssembly (WASM) within Workers. If you saw my post on <a href=\"http://blog.cloudflare.com/internet-native-applications/\">Internet Native Apps</a>, you'll know that I believe WebAssembly will play a big part in the apps of the future.</p>\n<p>It's exciting times for Rust developers. Cloudflare's Serverless Platform, Cloudflare Workers, allows you to compile your code to WASM, upload to 150+ data centers and invoke those functions just as easily as if they were JavaScript functions. Today I'm going to convert my lipsum generator to use Rust and explore the developer experience (hint: it's already pretty nice).</p>\n<p>The Workers teams notes in the documentation:</p>\n<blockquote>\n<p>...WASM is not always the right tool for the job. For lightweight tasks like redirecting a request to a different URL or checking an authorization token, sticking to pure JavaScript is probably both faster and easier than WASM. WASM programs operate in their own separate memory space, which means that it's necessary to copy data in and out of that space in order to operate on it. Code that mostly interacts with external objects without doing any serious &quot;number crunching&quot; likely does not benefit from WASM.</p>\n</blockquote>\n<p>OK, I'm unlikely to gain significant performance improvements on this particular project, but it serves as a good opportunity illustrate the developer experience and tooling. ?</p>\n<h2 id=\"setuptheenvironmentwithwasmpack\">Setup the environment with wasm-pack</h2>\n<p>Coding with WASM has been bleeding edge for a while, but Rust's tool for WASM development recently reached a fairly ergonomic state and even got a <a href=\"https://rustwasm.github.io/wasm-pack/\">website</a>. Make sure you have the <a href=\"https://rustwasm.github.io/wasm-pack/book/prerequisites/index.html\">prerequisites</a> installed and then follow the steps below to get started.</p>\n<p>wasm-pack allows you to compile Rust to WebAssembly, as well as generate bindings between JavaScript objects and Rust objects. We'll talk about why that's important later.</p>\n<pre><code># Install wasm-pack\ncurl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh\n\n# Cargo generate to build apps based on templates\ncargo install cargo-generate\n\n# And generate a HelloWorld wasm app, based on the wasm-pack template\ncargo generate --git https://github.com/rustwasm/wasm-pack-template\n\n?  Project Name: bob-ross-lorem-ipsum-rust\n?   Creating project called `bob-ross-lorem-ipsum-rust`...\n✨   Done! New project created /Volumes/HD2/Code/cloudflare/bobross/bob-ross-lipsum-rust/api-rust/bob-ross-lorem-ipsum-rust\n</code></pre>\n<p>The <a href=\"https://rustwasm.github.io/wasm-pack/book/tutorial/template-deep-dive/cargo-toml.html\">WASM book</a> describes some of the glue in the Cargo.toml file, but the meat of the project is here:</p>\n<pre><code>...\n#[wasm_bindgen]\nextern {\n    fn alert(s: &amp;str);\n}\n\n#[wasm_bindgen]\npub fn greet() {\n    alert(&quot;Hello, bob-ross-lorem-ipsum-rust!&quot;);\n}\n</code></pre>\n<p>This does two things</p>\n<ol>\n<li>\n<p>Binds to the &quot;external&quot; function in our host environment where the WASM will run. If that's the browser, it will popup a window.</p>\n</li>\n<li>\n<p>It also defines a Rust function, greet() which will be made available as a function callable from the host environment, in our case JavaScript.</p>\n</li>\n</ol>\n<p>Build with <code>wasm-pack build</code></p>\n<pre><code>$ wasm-pack build\n  \n  [1/9] ?  Checking `rustc` version...\n  [2/9] ?  Checking crate configuration...\n  [3/9] ?  Adding WASM target...\n  [4/9] ?  Compiling to WASM...\n  [5/9] ?  Creating a pkg directory...\n  [6/9] ?  Writing a package.json...\n  ⚠️   [WARN]: Field 'description' is missing from Cargo.toml. It is not necessary, but recommended\n  ⚠️   [WARN]: Field 'repository' is missing from Cargo.toml. It is not necessary, but recommended\n  ⚠️   [WARN]: Field 'license' is missing from Cargo.toml. It is not necessary, but recommended\n  [7/9] ?  Copying over your README...\n  [8/9] ⬇️  Installing wasm-bindgen...\n  [9/9] ?‍♀️  Running WASM-bindgen...\n  ✨   Done in 2 minutes\n| ?   Your wasm pkg is ready to publish at &quot;/Volumes/HD2/Code/cloudflare/bobross/bob-ross-lipsum-rust/bob-ross\n</code></pre>\n<p>Subsequent builds will be faster. We eventually want to ship that .wasm file to a Worker, but I'd like to keep things local and test in a browser first.</p>\n<p>There's an <a href=\"https://www.npmjs.com/package/create-wasm-app\">npm</a> package that will create a templated webpack webapp, preconfigured to import WebAssembly node modules, which we'll use as a test harness.</p>\n<pre><code>$ npm init wasm-app www\nnpx: installed 1 in 2.533s\n? Rust + ? Wasm = ❤\n</code></pre>\n<p>Install the dependencies with <code>npm install</code> and then <code>npm start</code> to fire up the webpack bundled web server to serve your page</p>\n<pre><code>$ npm start\n\n&gt; create-wasm-app@0.1.0 start /Volumes/HD2/Code/cloudflare/bobross/bob-ross-lipsum-rust/bob-ross-lorem-ipsum-rust/www\n&gt; webpack-dev-server\n\nℹ ｢wds｣: Project is running at http://localhost:8080/\n</code></pre>\n<p>Open your web browser at <a href=\"http://localhost:8080\">http://localhost:8080</a> and you should see your first WASM generated content!</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2018/10/rust-wasm-hello-world.png\" alt=\"Rust WASM Hello World\" loading=\"lazy\"></p>\n<p>OK, that's promising, but it's not actually our code. Our greet function returned <code>&quot;Hello, bob-ross-lorem-ipsum-rust!&quot;</code></p>\n<p>If we open up <code>www/index.js</code>, we can see this:</p>\n<pre><code>import * as wasm from &quot;hello-wasm-pack&quot;;\n\nwasm.greet();\n</code></pre>\n<p>So it's importing a node module &quot;hello-wasm-pack&quot; which was part of the template. We want to import our <em>own</em> module we built with <code>cargo generate</code> earlier.</p>\n<p>First, expose our WASM package as a node module:</p>\n<pre><code># Create a global node_modules entry pointing to your local wasm pkg\n$ cd pkg\n$ npm link\n...\n/Users/steve/.nvm/versions/node/v8.11.3/lib/node_modules/bob-ross-lorem-ipsum-rust -&gt; /Volumes/HD2/Code/cloudflare/bob-ross-lorem-ipsum-rust/pkg\n</code></pre>\n<p>Then make it available as a node_module in our test harness.</p>\n<pre><code>$ cd ../www\n$ npm link bob-ross-lorem-ipsum-rust\n/Volumes/HD2/Code/cloudflare/bobross/bob-ross-lorem-ipsum-rust/www/node_modules/bob-ross-lorem-ipsum-rust -&gt; /Users/steve/.nvm/versions/node/v8.11.3/lib/node_modules/bob-ross-lorem-ipsum-rust -&gt; /Volumes/HD2/Code/cloudflare/bobross/bob-ross-lorem-ipsum-rust/pkg\n</code></pre>\n<p>Import it in the index.js file</p>\n<pre><code>//import * as wasm from &quot;hello-wasm-pack&quot;;\nimport * as wasm from &quot;bob-ross-lorem-ipsum-rust&quot;\n</code></pre>\n<p>and run!</p>\n<pre><code>npm run build\nnpm run start\n</code></pre>\n<p>Better! That's our code.</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2018/10/rust-wasm-hello-world2.png\" alt=\"Rust WASM Hello World 2\" loading=\"lazy\"></p>\n<h3 id=\"quickrecap\">Quick recap</h3>\n<p>We have:</p>\n<ul>\n<li>A Hello, World WASM module</li>\n<li>Exposed as an npm module</li>\n<li>A webpack app which imports that module</li>\n<li>And invokes the greet() function</li>\n</ul>\n<p>We're now going to port our Bob Ross Lorem Ipsum generator to Rust, and try it out locally before uploading as a worker. Check it out on in the <a href=\"https://github.com/stevenpack/bob-ross-lipsum-rust\">GitHub</a> repo, or follow along.</p>\n<pre><code class=\"language-rust\">\nuse std::vec::Vec;\nuse rand::distributions::{Range, Distribution};\nuse rand::rngs::SmallRng;\nuse rand::FromEntropy;\n\nstatic PHRASES: [&amp;str; 370] = [...elided for clarity];\n\nfn get_random_indexes(cnt: usize) -&gt; Vec&lt;usize&gt; {\n    let mut rng = get_rng();\n    let range = Range::new(0, PHRASES.len());    \n    (0..cnt)\n        .map(|_| range.sample(&amp;mut rng))\n        .collect()\n}\n\nfn get_phrase(idx: usize) -&gt; &amp;'static str {\n    PHRASES[idx]        \n}\n\nfn get_rng() -&gt; SmallRng {    \n    SmallRng::from_entropy()\n}\n\nfn get_phrases(idxs: &amp;Vec&lt;usize&gt;) -&gt; Vec&lt;&amp;'static str&gt; {    \n    idxs.iter()\n        .map(|idx| get_phrase(*idx))\n        .collect()\n}\n\nfn need_newline(newline: usize, idx: usize) -&gt; bool {\n    //idx+1 because idx is zero-based but we want a new line after &quot;every x phrases&quot;.\n    (newline &gt; 0) &amp;&amp; (idx &gt; 0) &amp;&amp; ((idx + 1) % newline == 0)\n}\n\nfn need_space(newline: usize, idx: usize) -&gt; bool {\n    !need_newline(newline, idx)\n}\n\nfn build_phrase_text(idxs: Vec&lt;usize&gt;, newline: usize) -&gt; String {\n    let phrases_vec = get_phrases(&amp;idxs);\n    let mut string = String::new();\n    for i in 0..phrases_vec.len() {\n        //the phrase\n        string.push_str(phrases_vec[i]);\n        //spaces between phrases\n        if need_space(newline, i) {\n            string.push(' ');\n        }\n        //new lines\n        if need_newline(newline, i) {\n            string.push_str(&quot;\\n\\n&quot;);\n        }\n    }\n    string\n}\n\npub fn get_phrase_text(phrase_cnt: usize, newline: usize) -&gt; String {\n    let idxs = get_random_indexes(phrase_cnt);\n    build_phrase_text(idxs,newline)\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    fn get_test_indexes() -&gt; Vec&lt;usize&gt; {\n        vec![34, 2, 99, 43, 128, 300, 45, 56, 303, 42, 11]\n    }\n    \n    #[test]\n    fn get_phrases() {\n        let randoms = get_test_indexes();\n        let phrases = super::get_phrases(&amp;randoms);\n        println!(&quot;{:?}&quot;, phrases);\n    }\n}\n</code></pre>\n<p>Running the tests shows everything looks good:</p>\n<pre><code>$ cargo test -- --nocapture\n    Finished dev [unoptimized + debuginfo] target(s) in 0.40s                                                                                       \n     Running target/debug/deps/bob_ross_lorem_ipsum_rust-5be29ab9ead7494d\n\nrunning 1 test\n[&quot;Decide where your cloud lives. Maybe he lives right in here.&quot;, &quot;A fan brush is a fantastic piece of equipment. Use it. Make friends with it.&quot;, &quot;If we\\'re going to have animals around we all have to be concerned about them and take care of them.&quot;, &quot;Don\\'t kill all your dark areas - you need them to show the light.&quot;, &quot;It\\'s almost like something out of a fairytale book.&quot;, &quot;We don\\'t have anything but happy trees here.&quot;, &quot;Even the worst thing we can do here is good.&quot;, &quot;Everything is happy if you choose to make it that way.&quot;, &quot;We don\\'t make mistakes we just have happy little accidents.&quot;, &quot;Don\\'t hurry. Take your time and enjoy.&quot;, &quot;All you have to learn here is how to have fun.&quot;]\ntest phrases::tests::get_phrases ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n</code></pre>\n<p>And I've exposed the method to WASM like this:</p>\n<pre><code>#[wasm_bindgen]\npub fn get_phrase_text(phrase_cnt: usize, new_line: usize) -&gt; String {\n    phrases::get_phrase_text(phrase_cnt, new_line)\n}\n</code></pre>\n<p>So, we should be good to call our WASM from the browser test harness. Let's modify <code>www/index.js</code> to invoke <code>get_phrase_text</code> and fire it up in the browser!</p>\n<pre><code class=\"language-javascript\">//wasm.greet();\nlet phraseText = wasm.get_phrase_text(100, 10);\nconsole.log(phraseText);\nalert(phraseText);\n</code></pre>\n<p>Fail.</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2018/10/rust-wasm-fail-no-entropy.png\" alt=\"Rust WASM Fail no entropy\" loading=\"lazy\"></p>\n<p>If you've played around with Rust, you'll know how jarring it can be to see your code compile and tests pass, only to have it blow up at runtime. The strictness of the language means your code behaves exactly as you expect more often than other languages, so this failure really threw me.</p>\n<p>Analysing the stack trace, we can see the failure starts at FromEntropy. My first instinct was that the WASM host didn't support providing entropy. I re-jigged the code to use a time-based seed instead and that failed too. The common theme seemed to be both entropy, and the current time, both make system calls.</p>\n<p>Reading through the relevant Github issues which discuss this <a href=\"https://github.com/rustwasm/team/issues/16\">here</a> and <a href=\"https://github.com/rust-lang/rust/pull/47102\">here</a>, it looks like the design for how Rust generated WASM will handle system calls remains open. If the compiler isn't able to guarantee the system calls will be available, shouldn't the linker fail to compile? I think the answer lies in the <code>wasm-unknown-unknown</code> triplet that we compile to. There are no guarantees on what the target platform provides when you target unknown, so you're on your own.</p>\n<p>That said, we know that the v8 JavaScript engine will be our host in both the browser, and in Workers. There are libraries which allow us to make all Web APIs defined in the ECMAScript standard available to Rust, such as <a href=\"https://rustwasm.github.io/wasm-bindgen/api/js_sys/index.html\">js-sys</a></p>\n<p>Using that, I can rewrite the failing <code>get_rng()</code> method to return a pseudo-random number generated seed with a time-based value using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\">Date</a> object provided by the JavaScript host, rather than making a system call. Full code listing is on <a href=\"https://github.com/stevenpack/bob-ross-lipsum-rust\">Github</a></p>\n<pre><code class=\"language-Rust\">fn get_rng() -&gt; SmallRng {    \n    use js_sys::Date;\n    use rand::SeedableRng;\n\n\t//from Javascript\t\n    let ticks = Date::now(); \n    //convert the number to byte array to use as a seed\n    let tick_bytes = transmute(ticks as u128); \n    SmallRng::from_seed(tick_bytes)\n}\n</code></pre>\n<p>After another <code>wasm-pack build</code> and reloading our test page...</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2018/10/rust-wasm-random-phrases.png\" alt=\"Generating random phrases\" loading=\"lazy\"></p>\n<p>Huzzah! OK, if my WASM module returns the right output in Chrome, I'm feeling good about it working in Workers.</p>\n<h2 id=\"fromlocalbrowserharnesstoworkers\">From local browser harness to Workers</h2>\n<p>You can use the <a href=\"https://developers.cloudflare.com/workers/api/\">API</a> or UI to upload. Below, I upload the .wasm file in my /pkg director and bind it to the global variable BOBROSS_WASM, where it will be available in my Worker.</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2018/10/rust-wasm-upload.png\" alt=\"Rust WASM upload\" loading=\"lazy\"></p>\n<p>If you're following and looked at the output of the <code>wasm-pack build</code> command, you might have noticed it produced a JavaScript glue file in the pkg folder, which is actually what the browser executed.</p>\n<p>It looks like this:</p>\n<pre><code>/* tslint:disable */\nimport * as wasm from './bob_ross_lorem_ipsum_rust_bg';\n\nlet cachedDecoder = new TextDecoder('utf-8');\n\nlet cachegetUint8Memory = null;\nfunction getUint8Memory() {\n    if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory;\n}\n\nfunction getStringFromWasm(ptr, len) {\n    return cachedDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n\nexport function __wbg_alert_8c454b1ebc6068d7(arg0, arg1) {\n    let varg0 = getStringFromWasm(arg0, arg1);\n    alert(varg0);\n}\n/**\n* @returns {void}\n*/\nexport function greet() {\n    return wasm.greet();\n}\n\nlet cachedGlobalArgumentPtr = null;\nfunction globalArgumentPtr() {\n    if (cachedGlobalArgumentPtr === null) {\n        cachedGlobalArgumentPtr = wasm.__wbindgen_global_argument_ptr();\n    }\n    return cachedGlobalArgumentPtr;\n}\n\nlet cachegetUint32Memory = null;\nfunction getUint32Memory() {\n    if (cachegetUint32Memory === null || cachegetUint32Memory.buffer !== wasm.memory.buffer) {\n        cachegetUint32Memory = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachegetUint32Memory;\n}\n/**\n* @param {number} arg0\n* @param {number} arg1\n* @returns {string}\n*/\nexport function get_phrase_text(arg0, arg1) {\n    const retptr = globalArgumentPtr();\n    wasm.get_phrase_text(retptr, arg0, arg1);\n    const mem = getUint32Memory();\n    const rustptr = mem[retptr / 4];\n    const rustlen = mem[retptr / 4 + 1];\n\n    const realRet = getStringFromWasm(rustptr, rustlen).slice();\n    wasm.__wbindgen_free(rustptr, rustlen * 1);\n    return realRet;\n\n}\n\nconst __wbg_now_4410283ed4cdb45a_target = Date.now.bind(Date) || function() {\n    throw new Error(`wasm-bindgen: Date.now.bind(Date) does not exist`);\n};\n\nexport function __wbg_now_4410283ed4cdb45a() {\n    return __wbg_now_4410283ed4cdb45a_target();\n}\n</code></pre>\n<p>It takes care of the marshalling of strings from WASM into JavaScript and freeing the memory it uses. In an ideal world, we'd just include this in our Worker and be done. However, there a few differences between how Workers instantiates WebAssembly modules and the browser.</p>\n<p>You need to:</p>\n<ul>\n<li>Remove the import line</li>\n<li>Remove the export keywords</li>\n<li>Wrap all the functions in a module</li>\n<li>Create an importObject referencing the methods</li>\n<li>Pass that in when you create the WebAssembly instance</li>\n</ul>\n<p><em>Update 28-Dec-2018: wasm-bindgen has been updated since this post. See this <a href=\"https://github.com/stevenpack/bob-ross-lipsum-rust/pull/1\">PR</a> if you're getting errors related to the glue code. Thanks <a href=\"https://github.com/andrewdavidmackenzie\">Andrew</a>!</em></p>\n<p>You can view a <a href=\"http://blog.cloudflare.com/content/images/2018/10/rust-wasm-local-vs-worker-diff.png\">side-by-side diff</a> or a <a href=\"https://github.com/stevenpack/bob-ross-lipsum-rust/blob/master/worker/glue-to-worker.patch\">patch</a> to see the changes required to have it run in a Worker. Include the modified glue code into your worker and you can now call it like any other function. (Thanks for the tip Jake Riesterer!)</p>\n<pre><code>// Request Handler\nasync function handleRequest(request) {\n\n    let url = new URL(request.url);\n\n    //Serve the UI\n    if (url.pathname === &quot;/&quot; ) {\n        let init = { &quot;status&quot; : 200 , &quot;headers&quot; : { 'Content-Type': 'text/html' } };\n        return new Response(ui, init);\n    }\n\n    let phraseCount = Math.min(parseInt(url.searchParams.get(&quot;phrases&quot;) || 100), 10000);\n    let newLine = Math.min(parseInt(url.searchParams.get(&quot;newline&quot;) || 0), 10000);\n\n    //Serverless Rust in 150+ data centers!\n    let phraseText = mod.get_phrase_text(phraseCount, newLine);\n    return new Response(phraseText);\n}\n</code></pre>\n<p>Success!</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2018/10/rust-wasm-success.png\" alt=\"Serverless Rust on the Edge\" loading=\"lazy\"></p>\n<p>The full <a href=\"https://github.com/stevenpack/bob-ross-lipsum-rust/blob/master/worker/worker.js\">source code</a> is on Github.</p>\n<h3 id=\"summary\">Summary</h3>\n<p>We can compile Rust to WASM, and call it from Serverless functions woven into the very fabric of the Internet. That's huge and I can't wait to do more of it.</p>\n<p>There's some wrangling of the generated code required, but the tooling will improve over time. Once you've modified the glue code, calling a function in Rust generated WASM modules is just as simple as JavaScript.</p>\n<p>Are we Serverless yet? Yes we are.</p>\n<p>In a future post, I'll extract out the phrases and the UI to the <a href=\"https://developers.cloudflare.com/workers/kv/\">KV store</a> to show a full fledged serverless app powered by Rust and WASM.</p>\n<!--kg-card-end: markdown-->",
		"comment_id": "5bb9dec50d07ed00bf73ca19",
		"feature_image": "http://blog.cloudflare.com/content/images/2018/10/Workers-Illustration--WiP-as-of-2.21.18--copy@2x-1.png",
		"featured": false,
		"visibility": "public",
		"created_at": "2018-10-07T11:24:05.000+01:00",
		"updated_at": "2024-02-12T20:42:11.000+00:00",
		"published_at": "2018-10-16T13:00:00.000+01:00",
		"custom_excerpt": "The Workers team just announced support for WebAssembly (WASM) within Workers. If you saw my post on Internet Native Apps, you'll know that I believe WebAssembly will play a big part in the apps of the future.",
		"codeinjection_head": null,
		"codeinjection_foot": null,
		"custom_template": null,
		"canonical_url": null,
		"authors": [
			{
				"id": "5d1644b141acde0011a94fc5",
				"name": "Steven Pack",
				"slug": "stevenpack",
				"profile_image": "http://blog.cloudflare.com/content/images/2022/08/steven-pack.png",
				"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-123.png",
				"bio": "Partner Engineering Director",
				"website": null,
				"location": "San Francisco Bay Area, California",
				"facebook": null,
				"twitter": "@steven_pack",
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/stevenpack/"
			}
		],
		"tags": [
			{
				"id": "5d16450341acde0011a95253",
				"name": "Cloudflare Workers",
				"slug": "workers",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/workers/"
			},
			{
				"id": "5d16450341acde0011a95252",
				"name": "Serverless",
				"slug": "serverless",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Serverless.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Serverless",
				"meta_description": "Cloudflare blog posts tagged 'serverless'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/serverless/"
			},
			{
				"id": "5d16450341acde0011a9523c",
				"name": "Rust",
				"slug": "rust",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/rust/"
			},
			{
				"id": "5d16450341acde0011a95214",
				"name": "Programming",
				"slug": "programming",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/programming/"
			},
			{
				"id": "5d16450341acde0011a95204",
				"name": "Developers",
				"slug": "developers",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Developers-1.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Developers",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Developers'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developers/"
			},
			{
				"id": "64a3e2b834124c000b00b717",
				"name": "Developer Platform",
				"slug": "developer-platform",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developer-platform/"
			}
		],
		"primary_author": {
			"id": "5d1644b141acde0011a94fc5",
			"name": "Steven Pack",
			"slug": "stevenpack",
			"profile_image": "http://blog.cloudflare.com/content/images/2022/08/steven-pack.png",
			"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-123.png",
			"bio": "Partner Engineering Director",
			"website": null,
			"location": "San Francisco Bay Area, California",
			"facebook": null,
			"twitter": "@steven_pack",
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/stevenpack/"
		},
		"primary_tag": {
			"id": "5d16450341acde0011a95253",
			"name": "Cloudflare Workers",
			"slug": "workers",
			"description": null,
			"feature_image": null,
			"visibility": "public",
			"meta_title": null,
			"meta_description": null,
			"og_image": null,
			"og_title": null,
			"og_description": null,
			"twitter_image": null,
			"twitter_title": null,
			"twitter_description": null,
			"codeinjection_head": null,
			"codeinjection_foot": null,
			"canonical_url": null,
			"accent_color": null,
			"url": "http://blog.cloudflare.com/tag/workers/"
		},
		"url": "http://blog.cloudflare.com/cloudflare-workers-as-a-serverless-rust-platform/",
		"excerpt": "The Workers team just announced support for WebAssembly (WASM) within Workers. If you saw my post on Internet Native Apps, you'll know that I believe WebAssembly will play a big part in the apps of the future.",
		"reading_time": 10,
		"access": true,
		"comments": false,
		"og_image": null,
		"og_title": null,
		"og_description": null,
		"twitter_image": null,
		"twitter_title": null,
		"twitter_description": null,
		"meta_title": null,
		"meta_description": null,
		"email_subject": null,
		"frontmatter": null,
		"feature_image_alt": null,
		"feature_image_caption": null
	},
	"locale": "en-us"
}