{
	"locale": "en-us",
	"post": {
		"id": "5d16453b41acde0011a95786",
		"uuid": "a65fc637-8fab-4b43-a9dd-6ba8688484fc",
		"title": "Every 7.8μs your computer’s memory has a hiccup",
		"slug": "every-7-8us-your-computers-memory-has-a-hiccup",
		"html": "<!--kg-card-begin: markdown--><p><img src=\"http://blog.cloudflare.com/content/images/2018/11/640px-2013_Transcend_TS512MLK72V6N--straightened-.jpg\" alt=\"640px-2013_Transcend_TS512MLK72V6N--straightened-\" loading=\"lazy\"><br>\n<small>Modern DDR3 SDRAM. Source: <a href=\"https://en.wikipedia.org/wiki/DDR3_SDRAM#/media/File:2013_Transcend_TS512MLK72V6N-(straightened).jpg\">BY-SA/4.0 by Kjerish</a></small></p>\n<p>During my recent visit to <a href=\"http://www.computerhistory.org/\">the Computer History Museum</a> in Mountain View, I found myself staring at some ancient <a href=\"https://en.wikipedia.org/wiki/Magnetic-core_memory\">magnetic core memory</a>.</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2018/11/240px-KL_CoreMemory.jpg\" alt=\"240px-KL_CoreMemory\" loading=\"lazy\"><br>\n<small>Source: <a href=\"https://en.wikipedia.org/wiki/File:KL_CoreMemory.jpg\">BY-SA/3.0 by Konstantin Lanzet</a></small></p>\n<p>I promptly concluded I had absolutely no idea on how these things could ever work. I wondered if the rings rotate (they don't), and why each ring has three wires woven through it (and I still don’t understand exactly how these work). More importantly, I realized I have very little understanding on how the modern computer memory - dynamic RAM - works!</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2018/11/cpumemory.8.png\" alt=\"cpumemory.8\" loading=\"lazy\"><br>\n<small>Source: <a href=\"https://lwn.net/Articles/250967/\">Ulrich Drepper's series about memory</a></small></p>\n<p>I was particularly interested in one of the consequences of how dynamic RAM works. You see, each bit of data is stored by the charge (or lack of it) on a tiny capacitor within the RAM chip.  But these capacitors  gradually lose their charge over time. To avoid losing the stored data, they must regularly get refreshed to restore the charge (if present) to its original level. This <a href=\"https://en.wikipedia.org/wiki/Memory_refresh\">refresh process</a> involves reading the value of every bit and then writing it back. During this &quot;refresh&quot; time, the memory is busy and it can't perform normal operations like loading or storing bits.</p>\n<p>This has bothered me for quite some time and I wondered... is it possible to notice the refresh delay in software?</p>\n<h2 id=\"dynamicramrefreshprimer\">Dynamic RAM refresh primer</h2>\n<p>Each DIMM module is composed of &quot;cells&quot; and &quot;rows&quot;, &quot;columns&quot;, &quot;sides&quot; and/or &quot;ranks&quot;. This presentation from <a href=\"https://pubweb.eng.utah.edu/~cs7810/pres/11-7810-12.pdf\">the University of Utah explains the nomenclature</a>. You can check the configuration of memory in your computer with <code>decode-dimms</code> command. Here's an example:</p>\n<pre><code>$ decode-dimms\nSize                                       4096 MB\nBanks x Rows x Columns x Bits              8 x 15 x 10 x 64\nRanks                                      2\n</code></pre>\n<p>For today we don't need to get into the whole DDR DIMM layout, we just need to understand a single memory cell, storing one bit of information. Specifically we are only interested in how the refresh process is performed.</p>\n<p>Let's review two sources:</p>\n<ul>\n<li><a href=\"http://utaharch.blogspot.com/2013/11/a-dram-refresh-tutorial.html\">A DRAM Refresh Tutorial, from the University of Utah</a></li>\n<li>And an awesome documentation of 1 gigabit cell from micron: <a href=\"https://www.micron.com/~/media/documents/products/technical-note/dram/tn4609.pdf\">TN-46-09 Designing for 1Gb DDR SDRAM</a></li>\n</ul>\n<p>Each bit stored in dynamic memory must be refreshed, typically every 64ms (called Static Refresh). This is a rather costly operation. To avoid one major stall every 64ms, this process is divided into 8192 smaller refresh operations.  In each operation, the computer’s memory controller sends refresh commands to the DRAM chips. After receiving the instruction a chip will refresh 1/8192 of its cells. Doing the math - 64ms / 8192 = 7812.5 ns or 7.81 μs. This means:</p>\n<ul>\n<li>A refresh command is issued every 7812.5 ns. This is called tREFI.</li>\n<li>It takes some time for the chip to perform the refresh and recover so it can perform normal read and write operations again.  This time, called tRFC is either 75ns or 120ns (as per the mentioned Micron datasheet).</li>\n</ul>\n<p>When the memory is hot (&gt;85C) the memory retention time drops and the static refresh time halves to 32ms, and tREFI falls to 3906.25 ns.</p>\n<p>A typical memory chip is busy with refreshes for a significant fraction of its running time - between 0.4% to 5%. Furthermore, memory chips are responsible for a nontrivial share of typical computer's power draw, and large chunk of that power is spent on performing the refreshes.</p>\n<p>For the duration of the refresh action, the whole memory chip is blocked. This means each and every bit in memory is blocked for more than 75ns every 7812ns. Let's measure this.</p>\n<h2 id=\"preparinganexperiment\">Preparing an experiment</h2>\n<p>To measure operations with nanosecond granularity we must write a tight loop, perhaps in C. It looks like this:</p>\n<pre><code>    for (i = 0; i &lt; ...; i++) {\n\t\t// Perform memory load. Any load instruction will do\n\t\t*(volatile int *) one_global_var;\n\n\t\t// Flush CPU cache. This is relatively slow\n\t\t_mm_clflush(one_global_var);\n\n\t\t// mfence is needed, otherwise sometimes the loop\n\t\t// takes very short time (25ns instead of like 160). I\n\t\t// blame reordering.\n\t\tasm volatile(&quot;mfence&quot;);\n\n\t\t// Measure and record time\n\t\tclock_gettime(CLOCK_MONOTONIC, &amp;ts);\n    }\n</code></pre>\n<p><a href=\"https://github.com/cloudflare/cloudflare-blog/blob/master/2018-11-memory-refresh/measure-dram.c\">Full code is available on Github</a>.</p>\n<p>The code is really straightforward. Perform a memory read. Flush data from CPU caches. Measure time.</p>\n<p>(Note: in <a href=\"https://github.com/cloudflare/cloudflare-blog/blob/master/2018-11-memory-refresh/measure-dram-movntdqa.c#L113-L119\">second experiment I attempted to use MOVNTDQA</a> to perform the data load, but this requires special uncacheable memory page, which needs root access.)</p>\n<p>On my computer it generates data like this:</p>\n<pre><code># timestamp, loop duration\n3101895733,     134\n3101895865,     132\n3101896002,     137\n3101896134,     132\n3101896268,     134\n3101896403,     135\n3101896762,     359\n3101896901,     139\n3101897038,     137\n</code></pre>\n<p>Typically I get ~140ns per loop, periodically the loop duration jumps to ~360ns. Sometimes I get odd readings longer than 3200ns.</p>\n<p>Unfortunately, the data turns out to be very noisy. It's very hard to see if there is a noticeable delay related to the refresh cycles.</p>\n<h2 id=\"fastfouriertransform\">Fast Fourier Transform</h2>\n<p>At some point it clicked. Since we want to find a fixed-interval event, we can feed the data into the FFT (fast fourier transform) algorithm, which deciphers the underlying frequencies.</p>\n<p>I'm not the first one to think about this - Mark Seaborn of Rowhammer fame <a href=\"https://github.com/google/rowhammer-test/blob/master/refresh_timing/refresh_timing.cc\">implemented this very technique</a> back in 2015. Even after peeking at Mark's code, getting FFT to work turned out to be harder than I anticipated. But finally I got all the pieces together.</p>\n<p>First we need to prepare the data. FFT requires input data to be sampled with a constant sampling interval. We also want to crop the data to reduce noise. By trial and error I found the best results are when data is preprocessed:</p>\n<ul>\n<li>Small (smaller than average * 1.8) values of loop iterations are cut out, ignored, and replaced with readings of &quot;0&quot;. We really don't want to feed the noise into the algorithm.</li>\n<li>All the remaining readings are replaced with &quot;1&quot;, since we really don't care about the amplitude of the delay caused by some noise.</li>\n<li>I settled on sampling interval of 100ns, but any number up to <a href=\"https://en.wikipedia.org/wiki/Nyquist%E2%80%93Shannon_sampling_theorem\">a Nyquist value (double expected frequency) also work fine</a>.</li>\n<li>The data needs to be sampled with fixed timings before feeding to FFT. All reasonable sampling methods work ok, I ended up doing basic linear interpolation.</li>\n</ul>\n<p>The algorithm is roughly:</p>\n<pre><code>UNIT=100ns\nA = [(timestamp, loop_duration),...] \np = 1\nfor curr_ts in frange(fist_ts, last_ts, UNIT):\n    while not(A[p-1].timestamp &lt;= curr_ts &lt; A[p].timestamp):\n        p += 1\n    v1 = 1 if avg*1.8 &lt;= A[p-1].duration &lt;= avg*4 else 0\n    v2 = 1 if avg*1.8 &lt;= A[p].duration &lt;= avg*4 else 0\n    v = estimate_linear(v1, v2, A[p-1].timestamp, curr_ts, A[p].timestamp)\n    B.append( v )\n</code></pre>\n<p>Which on my data produces fairly boring vector like this:</p>\n<pre><code>[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0,\n 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...]\n</code></pre>\n<p>The vector is pretty long though, typically about ~200k data points. With data prepared like this, we are ready to feed it into FFT!</p>\n<pre><code>C = numpy.fft.fft(B)\nC = numpy.abs(C)\nF = numpy.fft.fftfreq(len(B)) * (1000000000/UNIT)\n</code></pre>\n<p>Pretty simple, right? This produces two vectors:</p>\n<ul>\n<li>C contains complex numbers of the frequency components. We are not interested in complex numbers and we can flatten them out by calling <code>abs()</code>.</li>\n<li>F contains labels to what frequency bin lies in which place in vector C. We need to normalize it to Hz - by multiplying it by the input vector sampling frequency.</li>\n</ul>\n<p>The result can be charted:</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2018/11/fft1a.png\" alt=\"fft1a\" loading=\"lazy\"></p>\n<p>Y axis is unit-less since we normalized the delay times. Even though, it clearly shows spikes at some fixed frequency intervals. Let's zoom in:</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2018/11/fft2a.png\" alt=\"fft2a\" loading=\"lazy\"></p>\n<p>We can clearly see first three spikes. After a bit of wishy-washy arithmetic, involving filtering the reading at least 10 times the size of average, we can extract the underlying frequencies:</p>\n<pre><code>127850.0\n127900.0\n127950.0\n255700.0\n255750.0\n255800.0\n255850.0\n255900.0\n255950.0\n383600.0\n383650.0\n</code></pre>\n<p>Doing the math: 1000000000 (ns/s) / 127900 (Hz) = 7818.6 ns</p>\n<p>Hurray! The first frequency spike is indeed what we were looking for, and indeed does correlate with the refresh times.</p>\n<p>The other spikes at 256kHz, 384kHz, 512kHz and so on, are multiplies of our base frequency of 128kHz called harmonics. These are a side effect of <a href=\"https://en.wikipedia.org/wiki/Square_wave\">performing FFT on something like a square wave</a> and totally expected.</p>\n<p>For easier experimentation, we <a href=\"https://github.com/cloudflare/cloudflare-blog/tree/master/2018-11-memory-refresh\">prepared a command line version of this tool</a>. You can run the code yourself. Here is a sample run on my server:</p>\n<pre><code>~/2018-11-memory-refresh$ make\ngcc -msse4.1 -ggdb -O3 -Wall -Wextra measure-dram.c -o measure-dram\n./measure-dram | python3 ./analyze-dram.py\n[*] Verifying ASLR: main=0x555555554890 stack=0x7fffffefe2ec\n[ ] Fun fact. I did 40663553 clock_gettime()'s per second\n[*] Measuring MOVQ + CLFLUSH time. Running 131072 iterations.\n[*] Writing out data\n[*] Input data: min=117 avg=176 med=167 max=8172 items=131072\n[*] Cutoff range 212-inf\n[ ] 127849 items below cutoff, 0 items above cutoff, 3223 items non-zero\n[*] Running FFT\n[*] Top frequency above 2kHz below 250kHz has magnitude of 7716\n[+] Top frequency spikes above 2kHZ are at:\n127906Hz    7716\n255813Hz    7947\n383720Hz    7460\n511626Hz    7141\n</code></pre>\n<p>I must admit the code is not perfectly stable. In case of trouble, consider disabling Turbo Boost, CPU frequency scaling and tuning for performance.</p>\n<h2 id=\"finale\">Finale</h2>\n<p>There are two major takeaways from this work.</p>\n<p>We've seen that the low level data is pretty hard to analyze and seem to be pretty noisy. Instead of trying to figure something out with naked eye, we can always employ good old FFT. Some wishful thinking is needed when preparing the data.</p>\n<p>Most importantly, we showed it's often possible to measure subtle hardware behaviours from a simple userspace process. This kind of thinking led to the discovery of <a href=\"https://googleprojectzero.blogspot.com/2015/03/exploiting-dram-rowhammer-bug-to-gain.html\">the original Rowhammer</a> vulnerability, was used in Meltdown/Spectre attacks and showed again in <a href=\"https://arstechnica.com/information-technology/2018/11/potentially-disastrous-rowhammer-bitflips-can-bypass-ecc-protections/\">recent ECC-defeating reincarnation of Rowhammer</a>.</p>\n<p>There is so much more to be said. We barely scratched the surface of the inner workings of the memory subsystem. I recommend further reading:</p>\n<ul>\n<li><a href=\"http://lackingrhoticity.blogspot.com/2015/04/l3-cache-mapping-on-sandy-bridge-cpus.html\">L3 cache mapping on Sandy Bridge CPUs</a></li>\n<li><a href=\"http://lackingrhoticity.blogspot.com/2015/05/how-physical-addresses-map-to-rows-and-banks.html\">How physical address maps to rows and banks in DRAM</a></li>\n<li><a href=\"https://hannuhartikainen.fi/blog/hacking-ddr3-spd/\">Hannu Hartikainen hacking DDR3 SO-DIMM to work... slower</a></li>\n</ul>\n<p>Finally, here is a good reading about the old magnetic core memory:</p>\n<ul>\n<li><a href=\"http://www.psych.usyd.edu.au/pdp-11/core.html\">PDP-11 core memory explained by University of Sydney</a></li>\n</ul>\n<!--kg-card-end: markdown-->",
		"comment_id": "5bf7f9806185bc00c056ae2c",
		"feature_image": "http://blog.cloudflare.com/content/images/2018/11/640px-2013_Transcend_TS512MLK72V6N--straightened--1.jpg",
		"featured": false,
		"visibility": "public",
		"created_at": "2018-11-23T12:58:40.000+00:00",
		"updated_at": "2019-03-29T20:33:43.000+00:00",
		"published_at": "2018-11-23T15:49:00.000+00:00",
		"custom_excerpt": "I was particularly interested in one of the consequences of how dynamic RAM works. You see, each bit of data is stored by the charge (or lack of it) on a tiny capacitor within the RAM chip. But these capacitors gradually lose their charge over time.",
		"codeinjection_head": null,
		"codeinjection_foot": null,
		"custom_template": null,
		"canonical_url": null,
		"authors": [
			{
				"id": "5d1644b141acde0011a94f30",
				"name": "Marek Majkowski",
				"slug": "marek-majkowski",
				"profile_image": "http://blog.cloudflare.com/content/images/2017/03/b5967d6c687939594adb6992723d0529.jpeg",
				"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-101.png",
				"bio": null,
				"website": null,
				"location": null,
				"facebook": null,
				"twitter": "@majek04",
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/marek-majkowski/"
			}
		],
		"tags": [
			{
				"id": "5d16450341acde0011a95204",
				"name": "Developers",
				"slug": "developers",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Developers-1.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Developers",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Developers'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developers/"
			},
			{
				"id": "5d16450341acde0011a95214",
				"name": "Programming",
				"slug": "programming",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/programming/"
			}
		],
		"primary_author": {
			"id": "5d1644b141acde0011a94f30",
			"name": "Marek Majkowski",
			"slug": "marek-majkowski",
			"profile_image": "http://blog.cloudflare.com/content/images/2017/03/b5967d6c687939594adb6992723d0529.jpeg",
			"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-101.png",
			"bio": null,
			"website": null,
			"location": null,
			"facebook": null,
			"twitter": "@majek04",
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/marek-majkowski/"
		},
		"primary_tag": {
			"id": "5d16450341acde0011a95204",
			"name": "Developers",
			"slug": "developers",
			"description": null,
			"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Developers-1.png",
			"visibility": "public",
			"meta_title": "Cloudflare Blog: Developers",
			"meta_description": "Collection of Cloudflare blog posts tagged 'Developers'.",
			"og_image": null,
			"og_title": null,
			"og_description": null,
			"twitter_image": null,
			"twitter_title": null,
			"twitter_description": null,
			"codeinjection_head": null,
			"codeinjection_foot": null,
			"canonical_url": null,
			"accent_color": null,
			"url": "http://blog.cloudflare.com/tag/developers/"
		},
		"url": "http://blog.cloudflare.com/every-7-8us-your-computers-memory-has-a-hiccup/",
		"excerpt": "I was particularly interested in one of the consequences of how dynamic RAM works. You see, each bit of data is stored by the charge (or lack of it) on a tiny capacitor within the RAM chip. But these capacitors gradually lose their charge over time.",
		"reading_time": 7,
		"access": true,
		"comments": false,
		"og_image": null,
		"og_title": null,
		"og_description": null,
		"twitter_image": null,
		"twitter_title": null,
		"twitter_description": null,
		"meta_title": null,
		"meta_description": null,
		"email_subject": null,
		"frontmatter": null,
		"feature_image_alt": null,
		"feature_image_caption": null
	}
}