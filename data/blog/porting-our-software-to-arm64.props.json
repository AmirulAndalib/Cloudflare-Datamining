{
	"locale": "en-us",
	"post": {
		"id": "5d16453b41acde0011a95739",
		"uuid": "912935c3-8612-4dc8-89ee-babb28e4f026",
		"title": "Porting Our Software to ARM64",
		"slug": "porting-our-software-to-arm64",
		"html": "<!--kg-card-begin: markdown--><p>As we enable more ARM64<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup> machines in our network, I want to give some technical insight into the process we went through to reach software parity in our multi-architecture environment.</p>\n<p>To give some idea of the scale of this task, it’s necessary to describe the software stack we run on our servers. The foundation is the Linux kernel. Then, we use the Debian distribution as our base operating system. Finally, we install hundreds of packages that we build ourselves. Some packages are based on open-source software, often tailored to better meet our needs. Other packages were written from scratch within Cloudflare.</p>\n<p>Industry support for ARM64 is very active, so a lot of open-source software has already been ported. This includes the Linux kernel. Additionally, Debian made ARM64 a <a href=\"https://wiki.debian.org/Arm64Port#Status\">first-class release architecture starting with Stretch</a> in 2017. This meant that upon obtaining our ARM64 hardware, a few engineers were able to bring Debian up quickly and smoothly. Our attention then turned to getting all our in-house packages to build and run for ARM64.</p>\n<p>Our stack uses a diverse range of programming languages, including C, C++, Go, Lua, Python, and Rust. Different languages have different porting requirements, with some being easier than others.</p>\n<h3 id=\"portinggocode\">Porting Go Code</h3>\n<p>Cross-compiling Go code is relatively simple, since <a href=\"https://github.com/golang/go/wiki/GoArm\">ARM64 is a first-class citizen</a>. Go compiles and links static binaries using the system’s crossbuild toolchain, meaning the only additional Debian package we had to install on top of <code>build-essential</code> is <code>crossbuild-essential-arm64</code>.</p>\n<p><img src=\"https://images.unsplash.com/photo-1509815963-90cab26a868f?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjExNzczfQ&amp;s=00b57e7c25010b46a5c9257f57af7bb8\" alt=\"traffic light on green light\" loading=\"lazy\"><br>\n<small>Photo by <a href=\"https://unsplash.com/@tomcoe?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit\">tom coe</a> / <a href=\"https://unsplash.com/?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit\">Unsplash</a></small></p>\n<p>After installing the crossbuild toolchain, we then replaced every <code>go build</code> invocation with a loop of <code>GOARCH=&lt;arch&gt; CGO_ENABLED=1 go build</code>, where <code>&lt;arch&gt;</code> iterates through <code>amd64</code> and <code>arm64</code>. Forcing <code>CGO_ENABLED=1</code> is required, as <code>cgo</code> is <a href=\"https://github.com/golang/go/blob/8fbbf63cc61ffbb953a6d44649b644e4211c5d83/src/cmd/cgo/doc.go#L115-L124\">disabled by default for cross-compilation</a>. The generated binaries are then run through our testing framework.</p>\n<h3 id=\"portingrustcode\">Porting Rust Code</h3>\n<p>Rust also has mature support for ARM64. The steps for porting start at installing <code>crossbuild-essential-arm64</code>, and defining the <code>--target</code> triple in either <code>rustc</code> or <code>cargo</code>. Different targets are bucketed into <a href=\"https://forge.rust-lang.org/platform-support.html\">different tiers of completeness</a>. Full instructions are well-documented at <a href=\"https://github.com/japaric/rust-cross\">rust-cross</a>.</p>\n<p>One thing to note, however, is that any crates pulled in by a package must also be cross-compiled. The more crates used, the higher of a chance of running into one that does not cross-compile well.</p>\n<h3 id=\"testingplusportingothercode\">Testing, Plus Porting Other Code</h3>\n<p>Other languages are less cooperative when it comes to cross-compilation. Fiddling with <code>CC</code> and <code>LD</code> values didn’t seem to be best use of engineering resources. What we really wanted was an emulation layer. An emulation layer would leverage all of our <code>x86_64</code> machines, from our distributed compute behemoths to developers’ laptops, for the purposes of both building and testing code.</p>\n<p>Enter QEMU.</p>\n<p>QEMU is an emulator with multiple modes, including both full system emulation and user-space emulation. Our compute nodes are beefy enough to handle system-level emulation, but for developers’ laptops, user-space emulation provides most of the benefits, with less overhead.</p>\n<p>For user-space emulation, our porting team did not want to intrude too much into our developers’ normal workflow. Our internal build system already uses Docker as a backend, so it would be ideal to be able to <code>docker run</code> into an ARM environment, like so:</p>\n<pre><code>host$ uname -m\nx86_64\nhost$ docker run --rm -it stretch-arm64/master:latest\nguest# uname -m\naarch64\n</code></pre>\n<p>Fortunately, we were not the first ones to come up with this idea: folks over at resin.io have <a href=\"https://resin.io/blog/building-arm-containers-on-any-x86-machine-even-dockerhub/\">solved this problem already</a>! They’ve also submitted a <a href=\"https://patchwork.ozlabs.org/patch/582756/\">patch to <code>qemu-user</code></a> that prepends the emulator into every <code>execve</code> call, similar to how <a href=\"https://www.kernel.org/doc/html/v4.14/admin-guide/binfmt-misc.html\"><code>binfmt_misc</code> is implemented</a><sup class=\"footnote-ref\"><a href=\"#fn2\" id=\"fnref2\">[2]</a></sup>. By prepending the emulator, you’re essentially forcing every new process to also be emulated, resulting in a nice self-contained environment.</p>\n<p>With the <code>execve</code> patch in built into <code>qemu-user</code>, all we had to do was copy the emulator into an ARM64 container, and set the appropriate entrypoint:</p>\n<pre><code># internal build of qemu with patch\nFROM qemu-aarch64/master:latest as qemu\n\n# arm64v8/debian:stretch-slim at 2018-02-12T13:02:00Z\nFROM arm64v8/debian@sha256:841bbe6f4132526be95c91bec6757831c76e603309a47992e6444de6a0b6521a\n\nCOPY --from=qemu /qemu-aarch64 /qemu-aarch64\nSHELL [&quot;/qemu-aarch64&quot;, &quot;/bin/sh&quot;, &quot;-c&quot;]\n\n# setcap is required for `sudo` to work, but breaks environment variable passing\n# run `setcap -r /qemu-aarch64` to break sudo, but allow environment variable passing\n# maybe one day we’ll have our cake and eat it too\nRUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends libcap2-bin &amp;&amp; \\\n    setcap cap_setuid,cap_setgid+ep /qemu-aarch64 &amp;&amp; \\\n    apt-get remove --purge -y libcap2-bin &amp;&amp; apt-get autoremove -y &amp;&amp; \\\n    rm -rf /var/lib/apt/lists/*\n\nENTRYPOINT [&quot;/qemu-aarch64&quot;, &quot;--execve&quot;, &quot;/qemu-aarch64&quot;]\nCMD [&quot;/bin/bash&quot;]\n</code></pre>\n<p>This Dockerfile resulted in the cross-architecture output we were looking for earlier.</p>\n<p>Now that we had a self-contained ARM64 environment, we could build and test most of our code relatively smoothly.</p>\n<h3 id=\"technicalgotchas\">Technical Gotchas</h3>\n<p>Of course, there are always a few blockers on the road to perfection. Upon releasing this modified Debian image to our developers, they returned with a few interesting problems:</p>\n<ul>\n<li>tests were failing due to <code>LD_LIBRARY_PATH</code> not working</li>\n<li>Go programs segfaulting at indeterminate intervals</li>\n<li>system-installed libraries were taking precedence over user-installed libraries</li>\n<li>slow builds and sporadic test case failures, speeding up our plan for native builds and CI</li>\n</ul>\n<h4 id=\"ld_library_pathandfriends\">LD_LIBRARY_PATH and Friends</h4>\n<p>It turns out that <code>LD_LIBRARY_PATH</code> was not the only environment variable that failed to work correctly. <em>All</em> environment variables, either set on the command line or via other means (e.g. <code>export</code>), would fail to propagate into the <code>qemu-user</code> process.</p>\n<p>Through bisection of known good code, we found that it was the <code>setcap</code> in our Dockerfile which prevented the environment variable passthrough. Unfortunately, this <code>setcap</code> is the same one that allows us to call <code>sudo</code>, so we have a caveat for our developers that they can either run <code>sudo</code> inside their containers, or have environment variable passing, but not both.</p>\n<h4 id=\"intermittentgofailures\">Intermittent Go Failures</h4>\n<p>With a decent amount of Go code running through our CI system, it was easy to spot a trend of intermittent segfaults.</p>\n<p>Going on a hunch, we confirmed a hypothesis that non-deterministic failures are generally due to threading issues. Unfortunately, opinion on <a href=\"https://github.com/golang/go/issues/20763\">the issue tracker</a> showed that Go / QEMU incompatibilities aren’t a priority, so we were left without an upstream fix.</p>\n<p>The workaround we came up with is simple: if the problem is threading-related, limit where the threads can run! When we package our internal <code>go</code> binaries, we add a <a href=\"https://gist.github.com/ahrex/9a84f32a33aadc197a688d2158d7e2ea\"><code>.deb</code> post-install script</a> to detect if we’re running under ARM64 emulation, and if so, reduce the number of CPUs the <code>go</code> binary can run under to one. We lose performance by pinning to one CPU, but this slowdown is negligible when we’re already running under emulation, and slow code is better than non-working code.</p>\n<p>With the workaround in place, reports of intermittent crashes dropped to zero. Onto the next problem!</p>\n<h4 id=\"sharedlibrarymixups\">Shared Library Mixups</h4>\n<p>We like to be at the forefront of technology. From suggesting improvements to what would become TLS 1.3, to partnering with Mozilla to <a href=\"https://blog.nightly.mozilla.org/2018/08/28/firefox-nightly-secure-dns-experimental-results/\">make DNS queries more secure</a>, and everything in between. To be able to support these new technologies, our software has to be at the cutting edge.</p>\n<p>On the other hand, we also need a reliable platform to build on. One of the reasons we chose Debian is due to its long-term support lifecycle, versus other rolling release operating systems.</p>\n<p>With these two ideas counterposed, we opted not to overwrite system libraries in <code>/usr/lib</code> with our cutting edge version, but instead supplement the defaults by installing into <code>/usr/local/lib</code>.</p>\n<p>The same development team that reported the <code>LD_LIBRARY_PATH</code> issue also came to us saying the ARM64 version of their software would fail to load shared object symbols. A debugging session was launched and we eventually isolated it to the <a href=\"https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=685706\">ordering of <code>/etc/ld.so.conf.d/</code> in Debian</a>.</p>\n<p>Compare an <code>x86_64</code> machine:</p>\n<pre><code>$ uname -m\nx86_64\n$ ls /etc/ld.so.conf.d/\nlibc.conf  x86_64-linux-gnu.conf\n$ cat /etc/ld.so.conf.d/libc.conf\n# libc default configuration\n/usr/local/lib\n$ cat /etc/ld.so.conf.d/x86_64-linux-gnu.conf\n# Multiarch support\n/lib/x86_64-linux-gnu\n/usr/lib/x86_64-linux-gnu\n</code></pre>\n<p>With an <code>arm64</code> machine:</p>\n<pre><code>$ uname -m\naarch64\n$ ls /etc/ld.so.conf.d/\naarch64-linux-gnu.conf  libc.conf\n$ cat /etc/ld.so.conf.d/aarch64-linux-gnu.conf\n# Multiarch support\n/lib/aarch64-linux-gnu\n/usr/lib/aarch64-linux-gnu\n$ cat /etc/ld.so.conf.d/libc.conf\n# libc default configuration\n/usr/local/lib\n</code></pre>\n<p>By traversing <code>/etc/ld.so.conf.d/</code> in alphabetical order, shared libraries in <code>/usr/local/lib</code> would be loaded before <code>/usr/lib/$(uname -m)-linux-gnu</code> on <code>x86_64</code>, while the opposite is true for <code>arm64</code>!</p>\n<p>Internal discussion resulted in us not changing the system default search order, but instead use the <a href=\"https://en.wikipedia.org/wiki/Rpath\">linker flag <code>--rpath</code></a> to request the runtime loader to explicitly search our <code>/usr/local/lib</code> location first.</p>\n<p>This issue applies to both the emulated and physical ARM64 environments, which is a boon for the emulation framework we’ve just put together.</p>\n<h4 id=\"nativebuildsandci\">Native Builds and CI</h4>\n<p>Cross- and emulated compilation brought over 99% of our edge codebase, but there were still a handful of packages that did not fit the models we defined. Some packages, e.g. <code>llvm</code>, parallelize their build so well that the cost of userspace emulation slowed the build time to over 6 hours. Other packages called more esoteric functions which QEMU was not prepared to handle.</p>\n<p>Rather than devote resources to emulating the long tail, we allocated a few ARM64 machines for developer access, and one machine for a native CI agent. Maintainers of the long tail could iterate in peace, knowing their failing test cases were never due to the emulation layer. When ready, CI would pick up their changes and build an official package, post-review.</p>\n<p>While native compilation is the least error-prone build method, limited supply of machines made this option unattractive; the more machines we allocate for development and CI mean the more machines we take away from our proving grounds.</p>\n<p>Ideally, we should follow the <a href=\"https://github.com/golang/go/issues/13024#issuecomment-164894790\">Go team’s recommendation of running code natively</a>, but as long as our developers iterate on their <code>x86_64</code> laptops, supporting emulation is necessary for us.</p>\n<h3 id=\"otherchallenges\">Other Challenges</h3>\n<p>With the most glaring blockers out of the way, we have now given our developers an even footing to easily build for multiple architectures.</p>\n<p>The rest of the time was spent coordinating over a hundred packages, split between dozens of tech teams. At the beginning, responsibility of building ARM64 packages laid on the porting team. Working on a changing codebase required close collaboration between maintainer and porter.</p>\n<p>Once we deemed our ARM64 platform production-ready, a self-guided procedure was created to use the build methods listed above, and a request was sent out to all of engineering to support ARM64 as a first-class citizen.</p>\n<p>The end result of our stack is currently being tested, profiled, and optimized, with results coming soon!</p>\n<hr>\n<h6 id=\"manymoreopportunitiesexistforsystemsintegrationdebuggingdeepdivescrossteamcollaborationandinternaltoolsdevelopmentcomejoinusifyoureinterested\">Many more opportunities exist for systems integration, debugging deep dives, cross-team collaboration, and internal tools development. <a href=\"https://www.cloudflare.com/careers/\">Come join us</a> if you’re interested!</h6>\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p>ARM64 is sometimes used interchangeably with aarch64 and ARMv8 <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn2\" class=\"footnote-item\"><p><code>binfmt_misc</code> is also what <a href=\"https://docs.docker.com/docker-for-mac/multi-arch/\">Docker for Mac uses to leverage multi-architecture support</a>; we’re supporting something very similar, albeit from Linux to Linux, versus macOS to Linux. <a href=\"#fnref2\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n<!--kg-card-end: markdown-->",
		"comment_id": "5b8b0b1e827ab100bf7d5805",
		"feature_image": "http://blog.cloudflare.com/content/images/2018/09/photo-1509815963-90cab26a868f.jpg",
		"featured": false,
		"visibility": "public",
		"created_at": "2018-09-01T22:56:46.000+01:00",
		"updated_at": "2018-09-02T08:35:33.000+01:00",
		"published_at": "2018-09-02T08:35:00.000+01:00",
		"custom_excerpt": "As we enable more ARM64[1] machines in our network, I want to give some technical insight into the process we went through to reach software parity in our multi-architecture environment.",
		"codeinjection_head": null,
		"codeinjection_foot": null,
		"custom_template": null,
		"canonical_url": null,
		"authors": [
			{
				"id": "5d1644b141acde0011a94fc9",
				"name": "Alexander Huynh",
				"slug": "alexander",
				"profile_image": "http://blog.cloudflare.com/content/images/2018/08/0-2.jpg",
				"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-69.png",
				"bio": null,
				"website": null,
				"location": null,
				"facebook": null,
				"twitter": "@divbyzer0",
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/alexander/"
			}
		],
		"tags": [
			{
				"id": "5d16450341acde0011a95214",
				"name": "Programming",
				"slug": "programming",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/programming/"
			},
			{
				"id": "5d16450341acde0011a9523c",
				"name": "Rust",
				"slug": "rust",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/rust/"
			},
			{
				"id": "5d16450341acde0011a95215",
				"name": "Go",
				"slug": "go",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/go/"
			},
			{
				"id": "5d16450341acde0011a95204",
				"name": "Developers",
				"slug": "developers",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Developers-1.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Developers",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Developers'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developers/"
			},
			{
				"id": "5d16450341acde0011a95160",
				"name": "Speed & Reliability",
				"slug": "speed-and-reliability",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Speed---Reliability-1.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Speed & Reliability",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Speed & Reliability'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/speed-and-reliability/"
			}
		],
		"primary_author": {
			"id": "5d1644b141acde0011a94fc9",
			"name": "Alexander Huynh",
			"slug": "alexander",
			"profile_image": "http://blog.cloudflare.com/content/images/2018/08/0-2.jpg",
			"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-69.png",
			"bio": null,
			"website": null,
			"location": null,
			"facebook": null,
			"twitter": "@divbyzer0",
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/alexander/"
		},
		"primary_tag": {
			"id": "5d16450341acde0011a95214",
			"name": "Programming",
			"slug": "programming",
			"description": null,
			"feature_image": null,
			"visibility": "public",
			"meta_title": null,
			"meta_description": null,
			"og_image": null,
			"og_title": null,
			"og_description": null,
			"twitter_image": null,
			"twitter_title": null,
			"twitter_description": null,
			"codeinjection_head": null,
			"codeinjection_foot": null,
			"canonical_url": null,
			"accent_color": null,
			"url": "http://blog.cloudflare.com/tag/programming/"
		},
		"url": "http://blog.cloudflare.com/porting-our-software-to-arm64/",
		"excerpt": "As we enable more ARM64[1] machines in our network, I want to give some technical insight into the process we went through to reach software parity in our multi-architecture environment.",
		"reading_time": 7,
		"access": true,
		"comments": false,
		"og_image": null,
		"og_title": null,
		"og_description": null,
		"twitter_image": null,
		"twitter_title": null,
		"twitter_description": null,
		"meta_title": null,
		"meta_description": null,
		"email_subject": null,
		"frontmatter": null,
		"feature_image_alt": null,
		"feature_image_caption": null
	}
}