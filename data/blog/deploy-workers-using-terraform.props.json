{
	"browserLocale": "en-us",
	"locale": "en-us",
	"post": {
		"access": true,
		"authors": [
			{
				"id": "5d1644b141acde0011a94ff0",
				"name": "Jake Riesterer",
				"slug": "jake-riesterer",
				"profile_image": "http://blog.cloudflare.com/content/images/2022/09/2f11083e88cf259c7be7e20e3462a31e.jpg",
				"cover_image": null,
				"bio": null,
				"website": null,
				"location": null,
				"facebook": null,
				"twitter": null,
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/jake-riesterer/"
			}
		],
		"canonical_url": null,
		"codeinjection_foot": null,
		"codeinjection_head": null,
		"comment_id": "5b981ee2c24d3800bf438b21",
		"comments": false,
		"created_at": "2018-09-11T21:00:34.000+01:00",
		"custom_excerpt": "Today we're excited to announce that Cloudflare Workers are now supported in the Cloudflare Terraform Provider. ",
		"custom_template": null,
		"email_subject": null,
		"excerpt": "Today we're excited to announce that Cloudflare Workers are now supported in the Cloudflare Terraform Provider. ",
		"feature_image": "http://blog.cloudflare.com/content/images/2018/09/Screen-Shot-2018-09-12-at-2.48.30-PM.png",
		"feature_image_alt": null,
		"feature_image_caption": null,
		"featured": false,
		"frontmatter": null,
		"html": "<!--kg-card-begin: markdown--><p><img src=\"http://blog.cloudflare.com/content/images/2018/09/cf-plus-terraform-@2x-1.png\" alt=\"cf-plus-terraform-@2x-1\" loading=\"lazy\"></p>\n<p>Today we're excited to announce that Cloudflare Workers are now supported in the <a href=\"https://www.terraform.io/docs/providers/cloudflare/index.html\">Cloudflare Terraform Provider</a>.</p>\n<p><a href=\"https://www.terraform.io/\">Terraform</a> is a fantastic tool for configuring your infrastructure. Traditionally if you wanted to spin up, tear down or update some of your infrastructure you would have to click around on a website or make some API calls, which is prone to human error. With Terraform, you define your infrastructure in simple, declarative configuration files and let Terraform figure out how to make the API calls for you. This also lets you treat your infrastructure like your code. You can check your Terraform configuration files into version control and integrate them into your normal software development workflow.</p>\n<p>Terraform integrates with <a href=\"https://www.terraform.io/docs/providers/\">many infrastructure providers</a> including Cloudflare. If you'd like to read more about setting up Terraform with Cloudflare, check out <a href=\"http://blog.cloudflare.com/getting-started-with-terraform-and-cloudflare-part-1/\">Getting started with Terraform and Cloudflare</a>. In this post, I'm going to focus specifically on how to integrate <a href=\"https://www.cloudflare.com/products/cloudflare-workers/\">Cloudflare Workers</a> with Terraform.</p>\n<p>In this example we're going to create <a href=\"https://partyparrot.business\">partyparrot.business</a>, and we're going to serve the whole site out of a worker without any origin server. We're starting from scratch here, but if you're already using Cloudflare workers and want to migrate to managing your workers with Terraform, you'll need to import your existing script and routes so that Terraform knows about them. See the &quot;Importing your existing workers&quot; section at the end.</p>\n<h3 id=\"prerequisites\">Prerequisites</h3>\n<ul>\n<li><a href=\"https://www.terraform.io/intro/getting-started/install.html\">Install Terraform</a></li>\n<li>Provide your Cloudflare credentials via environment variables\n<ul>\n<li>Set <code>CLOUDFLARE_EMAIL</code> to your email address</li>\n<li>Set <code>CLOUDFLARE_TOKEN</code> to your <a href=\"https://support.cloudflare.com/hc/en-us/articles/200167836-Where-do-I-find-my-Cloudflare-API-key-\">Cloudflare API key</a></li>\n<li>If you're on an Enterprise plan and want to use multiple scripts, you'll also need to set <code>CLOUDFLARE_ORG_ID</code> to your account ID. You can find your account ID by using the <a href=\"https://api.cloudflare.com/#accounts-list-accounts\">List Accounts API</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"createtheterraformconfigfile\">Create the Terraform config file</h3>\n<p>Create a file with any name and give it a <code>.tf</code> file extension. This is where we'll define our Terraform resources. In this file, first we'll need to setup the Cloudflare provider:</p>\n<pre><code>provider &quot;cloudflare&quot; {}\n</code></pre>\n<p>You could define your credentials in this file, but in general it's better to use environment variables so that you can check the configuration file into version control without including any private data.</p>\n<p>Next we're going to create a variable named <code>zone</code>. One of the benefits about defining the zone in a variable as opposed to hard-coding it is that you can setup a separate staging domain and use the same Terraform configuration as your production domain. See the <a href=\"https://www.terraform.io/docs/configuration/variables.html\">documentation</a> for more information on working with variables.</p>\n<pre><code>variable &quot;zone&quot; {\n  default = &quot;partyparrot.business&quot;\n}\n</code></pre>\n<h3 id=\"settinguptheworkerscript\">Setting up the worker script</h3>\n<p>Now let's write our worker script. If you're looking for inspiration, check out some <a href=\"https://developers.cloudflare.com/workers/recipes/\">Worker recipes</a>. For this example, I'll use <a href=\"https://gist.github.com/jRiest/7893cf10c550057ce1ff53f270683e1c#file-party_parrot_worker-js\">this script</a> and name it <code>party_parrot_worker.js</code>.</p>\n<p>Next we need to add a <code>cloudflare_worker_script</code> resource to our Terraform config and reference the script file. Open your <code>.tf</code> file and add the following:</p>\n<pre><code>resource &quot;cloudflare_worker_script&quot; &quot;main_script&quot; {\n  zone = &quot;${var.zone}&quot;\n  content = &quot;${file(&quot;party_parrot_worker.js&quot;)}&quot;\n}\n</code></pre>\n<p>If you're new to Terraform, check out the <a href=\"https://www.terraform.io/docs/configuration/resources.html\">Terraform Resource documentation</a> to learn more about this schema. Here we provide 2 parameters, the <code>zone</code> which references the variable we defined earlier and <code>content</code> which references the file we just created.</p>\n<p><strong>NOTE:</strong> The <a href=\"https://www.cloudflare.com/plans/enterprise/\">Cloudflare Enterprise plan</a> supports using multiple (named) scripts. To use this, the parameters will be slightly different. Remove the <code>zone</code> parameter since named scripts are not tied to a particular zone and instead add a <code>name</code> parameter to define the name of the script. See <a href=\"https://www.terraform.io/docs/providers/cloudflare/r/worker_script.html\">the cloudflare_worker_script documentation</a> for an example.</p>\n<h3 id=\"settinguptheworkerroutes\">Setting up the worker routes</h3>\n<p>In order for the worker to start handling traffic, we'll also need to define at least one route. To do so, add a <code>cloudflare_worker_route</code> resource to the Terraform config.</p>\n<pre><code class=\"language-javascript\">resource &quot;cloudflare_worker_route&quot; &quot;catch_all_route&quot; {\n  zone = &quot;${var.zone}&quot;\n  pattern = &quot;*${var.zone}/*&quot;\n  enabled = true\n  depends_on = [&quot;cloudflare_worker_script.main_script&quot;]\n}\n</code></pre>\n<p>Just like with the script resource, the <code>zone</code> parameter references the variable we defined earlier.</p>\n<p>The <code>pattern</code> parameter defines which requests should be sent to the worker. In this example we use a route pattern like <code>*partyparrot.business*</code> which will match all traffic. If, however, you only want your worker to handle a subset of requests to your zone, you can define a more specific pattern like <code>mysubdomain.example.com/*</code> or <code>*example.com/mypath*</code>. More information on route patterns is available <a href=\"https://developers.cloudflare.com/workers/api/route-matching/\">here</a>.</p>\n<p>The <code>enabled</code> parameter specifies that requests that match the pattern <strong>should</strong> run the worker. Alternatively, you can set <code>enabled</code> to <code>false</code> which would mean that any requests that match the pattern <strong>should not</strong> run the worker. You can create multiple route patterns, and more-specific route patterns apply before less-specific route patterns. For example, you could create one route pattern like <code>example.com/assets/*</code> and set <code>enabled = false</code> then create another pattern like <code>*example.com*</code> and set <code>enabled = true</code>. This would enable the worker for all traffic <em>except</em> for requests that match <code>example.com/assets/*</code>.</p>\n<p>Finally, we set <code>depends_on</code> to point to the script resource we created above. In general, Terraform will try to create resources in parallel, but you may get an error if you try to create a route before you have a script. By using the <code>depends_on</code> parameter, Terraform will know to create the script first before creating the route.</p>\n<p><strong>NOTE:</strong> As with the script resource, some of the parameters are different if you're on the Enterprise plan and using multiple scripts. Remove the <code>enabled</code> parameter and instead set <code>script_name = &quot;${cloudflare_worker_script.your_script_resource.name}&quot;</code> to specify which script the route should run. By directly referencing the script resource using this syntax, Terraform already knows that the route depends on the script, so you can also remove the <code>depends_on</code> parameter. You can see more details in <a href=\"https://www.terraform.io/docs/providers/cloudflare/r/worker_route.html\">the cloudflare_worker_route documentation</a>.</p>\n<h3 id=\"applyingtheterraformconfig\">Applying the Terraform config</h3>\n<p>Now that we've defined our script and route resources in the config file, we're ready to deploy! To initialize Terraform, run <code>terraform init</code></p>\n<pre><code class=\"language-javascript\">$ terraform init\n\nInitializing provider plugins...\n\nTerraform has been successfully initialized!\n\nYou may now begin working with Terraform. Try running &quot;terraform plan&quot; to see\nany changes that are required for your infrastructure. All Terraform commands\nshould now work.\n\nIf you ever set or change modules or backend configuration for Terraform,\nrerun this command to reinitialize your working directory. If you forget, other\ncommands will detect it and remind you to do so if necessary.\n</code></pre>\n<p>Now to deploy the changes, run <code>terraform apply</code>. Terraform will show you a preview of the changes it will make.</p>\n<pre><code class=\"language-javascript\">$ terraform apply\n\nAn execution plan has been generated and is shown below.\nResource actions are indicated with the following symbols:\n  + create\n\nTerraform will perform the following actions:\n\n  + cloudflare_worker_route.catch_all_route\n      id:           &lt;computed&gt;\n      enabled:      &quot;true&quot;\n      multi_script: &lt;computed&gt;\n      pattern:      &quot;*partyparrot.business/*&quot;\n      zone:         &quot;partyparrot.business&quot;\n      zone_id:      &lt;computed&gt;\n\n  + cloudflare_worker_script.main_script\n      id:           &lt;computed&gt;\n      content:      &quot;...omitted for brevity...&quot;\n      zone:         &quot;partyparrot.business&quot;\n      zone_id:      &lt;computed&gt;\n\n\nPlan: 2 to add, 0 to change, 0 to destroy.\n\nDo you want to perform these actions?\n  Terraform will perform the actions described above.\n  Only 'yes' will be accepted to approve.\n\n  Enter a value:\n</code></pre>\n<p>If everything looks good, type <code>yes</code> and press return to apply the changes.</p>\n<pre><code class=\"language-javascript\">cloudflare_worker_script.main_script: Creating...\n  content: &quot;&quot; =&gt; &quot;...omitted for brevity...&quot;\n  zone:    &quot;&quot; =&gt; &quot;partyparrot.business&quot;\n  zone_id: &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\ncloudflare_worker_script.main_script: Creation complete after 1s (ID: zone:partyparrot.business)\ncloudflare_worker_route.catch_all_route: Creating...\n  enabled:      &quot;&quot; =&gt; &quot;true&quot;\n  multi_script: &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\n  pattern:      &quot;&quot; =&gt; &quot;*partyparrot.business/*&quot;\n  zone:         &quot;&quot; =&gt; &quot;partyparrot.business&quot;\n  zone_id:      &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\ncloudflare_worker_route.catch_all_route: Creation complete after 0s (ID: af595c1bb7cd4d1698c4d6cbcb364662)\n\nApply complete! Resources: 2 added, 0 changed, 0 destroyed.\n</code></pre>\n<p>Congratulations, your worker script and route are deployed! You can see the example script running at <a href=\"https://partyparrot.business/\">partyparrot.business</a>.</p>\n<p>As you make changes to your script or Terraform config, you can run <code>terraform apply</code> again and Terraform will figure out what's changed and deploy any updates.</p>\n<h3 id=\"importingyourexistingworkers\">Importing your existing workers</h3>\n<p>If you're already using Cloudflare Workers but want to start managing them via Terraform, you'll need to let Terraform know about your existing configuration so it knows how to apply changes going forward.</p>\n<p>First you’ll need to create your <code>.tf</code> file and add <code>cloudflare_worker_script</code> and <code>cloudflare_worker_route</code> resources for all of your existing scripts and routes.</p>\n<p>Next you'll need to individually run the appropriate <code>terraform import ...</code> command for each script and route resource. The import command takes two arguments:</p>\n<ul>\n<li>the identifier of the resource that you defined in your <code>.tf</code> file (ex: <code>cloudflare_worker_script.main_script</code> or <code>cloudflare_worker_route.catch_all_route</code>)</li>\n<li>an ID that's used to lookup the resource from the cloudflare API. See the <a href=\"https://www.terraform.io/docs/providers/cloudflare/r/worker_script.html\">cloudflare_worker_script</a> and <a href=\"https://www.terraform.io/docs/providers/cloudflare/r/worker_route.html\">cloudflare_worker_route</a> documentation for more information.</li>\n</ul>\n<h3 id=\"wrappingup\">Wrapping up</h3>\n<p>The complete script and terraform configuration file for this example are hosted <a href=\"https://gist.github.com/jRiest/7893cf10c550057ce1ff53f270683e1c\">on Github</a>.</p>\n<p>Whether you're already using Cloudflare Workers or just getting started, Terraform can be a great way to manage your Workers configuration. If you're interested in learning more, here's a few useful links:</p>\n<ul>\n<li><a href=\"https://developers.cloudflare.com/workers/\">Cloudflare Workers documentation</a></li>\n<li><a href=\"https://developers.cloudflare.com/terraform/\">Cloudflare Terraform Provider documentation</a></li>\n<li><a href=\"http://blog.cloudflare.com/tag/workers/\">More Workers blog posts</a></li>\n<li><a href=\"http://blog.cloudflare.com/tag/terraform/\">More Terraform blog posts</a></li>\n<li><a href=\"https://github.com/terraform-providers/terraform-provider-cloudflare\">terraform-provider-cloudflare source</a></li>\n</ul>\n<!--kg-card-end: markdown-->",
		"id": "5d16453b41acde0011a95741",
		"meta_description": null,
		"meta_title": null,
		"og_description": null,
		"og_image": null,
		"og_title": null,
		"primary_author": {
			"id": "5d1644b141acde0011a94ff0",
			"name": "Jake Riesterer",
			"slug": "jake-riesterer",
			"profile_image": "http://blog.cloudflare.com/content/images/2022/09/2f11083e88cf259c7be7e20e3462a31e.jpg",
			"cover_image": null,
			"bio": null,
			"website": null,
			"location": null,
			"facebook": null,
			"twitter": null,
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/jake-riesterer/"
		},
		"primary_tag": {
			"id": "5d16450341acde0011a95253",
			"name": "Cloudflare Workers",
			"slug": "workers",
			"description": null,
			"feature_image": null,
			"visibility": "public",
			"meta_title": null,
			"meta_description": null,
			"og_image": null,
			"og_title": null,
			"og_description": null,
			"twitter_image": null,
			"twitter_title": null,
			"twitter_description": null,
			"codeinjection_head": null,
			"codeinjection_foot": null,
			"canonical_url": null,
			"accent_color": null,
			"url": "http://blog.cloudflare.com/tag/workers/"
		},
		"published_at": "2018-09-13T17:03:15.000+01:00",
		"reading_time": 6,
		"slug": "deploy-workers-using-terraform",
		"tags": [
			{
				"id": "5d16450341acde0011a95253",
				"name": "Cloudflare Workers",
				"slug": "workers",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/workers/"
			},
			{
				"id": "5d16450341acde0011a95252",
				"name": "Serverless",
				"slug": "serverless",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Serverless.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Serverless",
				"meta_description": "Cloudflare blog posts tagged 'serverless'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/serverless/"
			},
			{
				"id": "5d16450341acde0011a95165",
				"name": "JavaScript",
				"slug": "javascript",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/javascript/"
			},
			{
				"id": "5d16450341acde0011a9524e",
				"name": "Terraform",
				"slug": "terraform",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/terraform/"
			},
			{
				"id": "5d16450341acde0011a951ee",
				"name": "Product News",
				"slug": "product-news",
				"description": "Product News (EN)",
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Product-News-1.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Product News",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Product News'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/product-news/"
			},
			{
				"id": "5d16450341acde0011a95214",
				"name": "Programming",
				"slug": "programming",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/programming/"
			},
			{
				"id": "5d16450341acde0011a95204",
				"name": "Developers",
				"slug": "developers",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Developers-1.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Developers",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Developers'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developers/"
			},
			{
				"id": "64a3e2b834124c000b00b717",
				"name": "Developer Platform",
				"slug": "developer-platform",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developer-platform/"
			}
		],
		"title": "Deploy Workers using Terraform",
		"twitter_description": null,
		"twitter_image": null,
		"twitter_title": null,
		"updated_at": "2024-02-12T20:45:38.000+00:00",
		"url": "http://blog.cloudflare.com/deploy-workers-using-terraform/",
		"uuid": "40d954ca-f7d9-4881-8695-dbc8f7be3462",
		"visibility": "public"
	}
}