{
	"post": {
		"id": "5d16453b41acde0011a95512",
		"uuid": "959a9cd2-9d80-465b-98a7-3e8dff291b68",
		"title": "Improving compression with a preset DEFLATE dictionary",
		"slug": "improving-compression-with-preset-deflate-dictionary",
		"html": "<!--kg-card-begin: markdown--><p>A few years ago Google made a proposal for a new HTTP compression method, called SDCH (SanDwiCH). The idea behind the method is to create a dictionary of long strings that appear throughout many pages of the same domain (or popular search results). The compression is then simply searching for the appearance of the long strings in a dictionary and replacing them with references to the aforementioned dictionary. Afterwards the output is further compressed with <a href=\"https://en.wikipedia.org/wiki/DEFLATE\">DEFLATE</a>.</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2015/03/15585984911_6a6bff8f30_z.jpg\" alt=\"\" loading=\"lazy\"><br>\n<small><a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC BY SA 2.0</a> <a href=\"https://www.flickr.com/photos/quinnanya/15585984911/in/photolist-pKhfiM-52LCYm-abTcAV-9eBXNP-9EQsPE-k2zt7W-3wGhDE-8FHYSs-4H94jD-8FFL2G-4U8deD-8FHZ7h-9zxQ3Q-96AfdV-8F5h1w-8FjCSW-8FeYBM-RbMqS-8FgTbT-8FjUvd-8FgF7T-8FjM4E-8Fgwtt-8Fjvxf-8FjtpU-8FjpUm-8Fjn3u-8Fjiv9-8Ff5ex-8Fid39-8FeTN6-8Fi3KW-8F29dP-8FhaH2-8FkcNm-8Fk8Kw-6DASnR-3T6V24-7PMw1h-7PJhZ8-uMSAt-cUzN8q-4fjD2P-eRviNL-BZg6b-qz5e4C-cqkfc-4szYvT-u1RCZ-ctvmWW\">image</a> by <a href=\"https://www.flickr.com/photos/quinnanya/\">Quinn Dombrowski</a></small></p>\n<p>With the right dictionary for the right page the savings can be spectacular, even 70% smaller than gzip alone. In theory, a whole file can be replaced by a single token.</p>\n<p>The drawbacks of the method are twofold: first - the dictionary that is created is fairly large and must be distributed as a separate file, in fact the dictionary is often larger than the individual pages it compresses; second - the dictionary is usually absolutely useless for another set of pages.</p>\n<p>For large domains that are visited repeatedly the advantage is huge: at a cost of single dictionary download, all the following page views can be compressed with much higher efficiency. Currently we aware of Google and LinkedIn compressing content with SDCH.</p>\n<h3 id=\"sdchformillionsofdomains\">SDCH for millions of domains</h3>\n<p>Here at CloudFlare our task is to support millions of domains, which have little in common, and creating a single SDCH dictionary is very difficult. Nevertheless better compression is important, because it produces smaller payloads, which result in content being delivered faster to our clients. That is why we set out to find that little something that is common to all the pages and to see if we could compress them further.</p>\n<p>Besides SDCH (which is only supported by the Chrome browser), the common compression methods over HTTP are gzip and DEFLATE. Some do not know it but the compression they perform is identical. The two formats differ in the content headers they use, with gzip having slightly larger headers, and the error detection function - gzip uses CRC32, whereas DEFLATE uses Adler32.</p>\n<p>Usually the servers opt to compress with gzip, however its cousin DEFLATE supports a neat feature called &quot;Preset Dictionary&quot;. This dictionary is not like the dictionary used by SDCH, in fact it is not a real dictionary. To understand how this &quot;dictionary&quot; can be used to our advantage, it is important to understand how the DEFLATE algorithm works.</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2015/03/5510506796_dff8c07b64_z.jpg\" alt=\"\" loading=\"lazy\"><br>\n<small><a href=\"https://creativecommons.org/licenses/by/2.0/\">CC BY 2.0</a> <a href=\"https://www.flickr.com/photos/crdot/5510506796/in/photolist-9oWMFS-5ZetrG-aB6EXd-7BFq6C-8bfuDz-8a7u13-8bfv1z-89PDmK-8a7uvj-8a4fbn-89STbj-5U3gbF-8a4fPH-8a7qPA-89PADp-7BFqLU-8a4fha-7A9GMJ-89SQaN-8biMCh-89PASH-89PCRT-8biMuU-8biM8j-89PCgx-8a7unY-89SSf3-49Vg4c-89PzPn-8a4e4B-89PziH-8biMRU-8a7uHq-ngPPhQ-nkCZTe-7TQ4Yj-8a7qhy-8biLH7-8a7rCW-8a4fp4-76ixPX-8a4fiH-7BFqow-eijkuy-8a7uDY-8a4aat-89Pzv8-89SQdU-nkDdYH-89Pzsp\">image</a> by <a href=\"https://www.flickr.com/photos/crdot/\">Caleb Roenigk</a></small></p>\n<p>The DEFLATE algorithm consists of two stages, first it performs the LZ77 algorithm, where it simply goes over the input, and replaces occurrences of previously encountered strings with (short) &quot;directions&quot; where the same string can be found in the previous input. The directions are a tuple of (length, distance), where distance tells how far back in the input the string was and length tells how many bytes were matched. The minimal length deflate will match is 3 (4 in the highly optimized implementation CloudFlare uses), the maximal length is 258, and the farthest distance back is 32KB.</p>\n<p>This is an illustration of the LZ77 algorithm:</p>\n<p>Input:</p>\n<style>\ntable.centered {\n\tmargin-top: 20px;\n    margin-bottom: 20px;\n}\ntable.centered tbody tr td {\n\ttext-align: center;\n    border: 1px solid black;\n}\n</style>\n<table class=\"centered\" border=\"1\" width=\"100%\" align=\"center\" cellspacing=\"0\" cellpadding=\"0\"><tbody><tr><td>L</td><td>i</td><td>t</td><td>t</td><td>l</td><td>e</td><td> </td><td>b</td><td>u</td><td>n</td><td>n</td><td>y</td><td ></td><td>F</td><td>o</td><td>o</td><td></td><td>F</td><td>o</td><td>o</td></tr>\n<tr><td></td><td>W</td><td>e</td><td>n</td><td>t</td><td></td><td>h</td><td>o</td><td>p</td><td>p</td><td>i</td><td>n</td><td>g</td><td></td><td>t</td><td>h</td><td>r</td><td>o</td><td>u</td><td>g</td></tr>\n<tr><td>h</td><td></td><td>t</td><td>h</td><td>e</td><td></td><td>f</td><td>o</td><td>r</td><td>e</td><td>s</td><td>t</td><td></td><td>S</td><td>c</td><td>o</td><td>o</td><td>p</td><td>i</td><td>n</td></tr>\n<tr><td>g</td><td></td><td>u</td><td>p</td><td></td><td>t</td><td>h</td><td>e</td><td></td><td>f</td><td>i</td><td>e</td><td>l</td><td>d</td><td></td><td>m</td><td>i</td><td>c</td><td>e</td><td></td></tr>\n<tr><td>A</td><td>n</td><td>d</td><td></td><td>b</td><td>o</td><td>p</td><td>p</td><td>i</td><td>n</td><td>g</td><td></td><td>t</td><td>h</td><td>e</td><td>m</td><td></td><td>o</td><td>n</td><td></td></tr>\n<tr><td>t</td><td>h</td><td>e</td><td></td><td>h</td><td>e</td><td>a</td><td>d</td><td></td><td>D</td><td>o</td><td>w</td><td>n</td><td ></td><td>c</td><td>a</td><td>m</td><td>e</td><td></td><td>t</td></tr>\n<tr><td>h</td><td>e</td><td></td><td>G</td><td>o</td><td>o</td><td>d</td><td></td><td>F</td><td>a</td><td>i</td><td>r</td><td>y</td><td>,</td><td></td><td>a</td><td>n</td><td>d</td><td ></td><td>s</td></tr>\n<tr><td>h</td><td>e</td><td></td><td>s</td><td>a</td><td>i</td><td>d</td><td></td><td>&quot;</td><td>L</td><td>i</td><td>t</td><td>t</td><td>l</td><td>e</td><td ></td><td>b</td><td>u</td><td>n</td><td>n</td></tr>\n<tr><td>y</td><td ></td><td>F</td><td>o</td><td>o</td><td></td><td>F</td><td>o</td><td>o</td><td></td><td>I</td><td></td><td>d</td><td>o</td><td>n</td><td>'</td><td>t</td><td></td><td>w</td><td>a</td></tr>\n<tr><td>n</td><td>t</td><td></td><td>t</td><td>o</td><td></td><td>s</td><td>e</td><td>e</td><td></td><td>y</td><td>o</td><td>u</td><td></td><td>S</td><td>c</td><td>o</td><td>o</td><td>p</td><td>i</td></tr>\n<tr><td>n</td><td>g</td><td></td><td>u</td><td>p</td><td></td><td>t</td><td>h</td><td>e</td><td></td><td>f</td><td>i</td><td>e</td><td>l</td><td>d</td><td></td><td>m</td><td>i</td><td>c</td><td>e</td></tr>\n<tr><td></td><td>A</td><td>n</td><td>d</td><td></td><td>b</td><td>o</td><td>p</td><td>p</td><td>i</td><td>n</td><td>g</td><td></td><td>t</td><td>h</td><td>e</td><td>m</td><td></td><td>o</td><td>n</td></tr>\n<tr><td></td><td>t</td><td>h</td><td>e</td><td></td><td>h</td><td>e</td><td>a</td><td>d</td><td>.</td><td>&quot;</td></tr></tbody></table>\n<p>Output (length tokens are blue, distance tokens are red):</p>\n<table class=\"centered\" border=\"1\" align=\"center\" width=\"100%\" cellspacing=\"0\" cellpadding=\"0\"><tbody>\n<tr><td>L</td><td>i</td><td>t</td><td>t</td><td>l</td><td>e</td><td ></td><td>b</td><td>u</td><td>n</td><td>n</td><td>y</td><td ></td><td>F</td><td>o</td><td>o</td><td><font color=blue>5</font></td><td><font color=red>4</font></td><td>W</td><td>e</td></tr>\n<tr><td>n</td><td>t</td><td ></td><td>h</td><td>o</td><td>p</td><td>p</td><td>i</td><td>n</td><td>g</td><td ></td><td>t</td><td>h</td><td>r</td><td>o</td><td>u</td><td>g</td><td>h</td><td><font color=blue>3</font></td><td><font color=red>8</font></td></tr>\n<tr><td>e</td><td ></td><td>f</td><td>o</td><td>r</td><td>e</td><td>s</td><td>t</td><td></td><td>S</td><td>c</td><td>o</td><td>o</td><td><font color=blue>5</font></td><td nowrap><font color=red>28</font></td><td>u</td><td>p</td><td><font color=blue>6</font></td><td nowrap><font color=red>23</font></td><td>i</td></tr>\n<tr><td>e</td><td>l</td><td>d</td><td ></td><td>m</td><td>i</td><td>c</td><td>e</td><td></td><td>A</td><td>n</td><td>d</td><td ></td><td>b</td><td><font color=blue>9</font></td><td nowrap><font color=red>58</font></td><td>e</td><td>m</td><td ></td><td>o</td></tr>\n<tr><td>n</td><td><font color=blue>5</font></td><td nowrap><font color=red>35</font></td><td>h</td><td>e</td><td>a</td><td>d</td><td ></td><td>D</td><td>o</td><td>w</td><td>n</td><td ></td><td>c</td><td>a</td><td>m</td><td>e</td><td><font color=blue>5</font></td><td nowrap><font color=red>19</font></td><td>G</td></tr>\n<tr><td>o</td><td>o</td><td>d</td><td ></td><td>F</td><td>a</td><td>i</td><td>r</td><td>y</td><td>,</td><td ></td><td>a</td><td><font color=blue>3</font></td><td nowrap><font color=red>55</font></td><td>s</td><td><font color=blue>3</font></td><td nowrap><font color=red>20</font></td><td>s</td><td>a</td><td>i</td></tr>\n<tr><td>d</td><td ></td><td>\"</td><td>L</td><td nowrap><font color=blue>20</font></td><td nowrap><font color=red>149</font></td><td>I</td><td ></td><td>d</td><td>o</td><td>n</td><td>'</td><td>t</td><td ></td><td>w</td><td>a</td><td><font color=blue>3</font></td><td nowrap><font color=red>157</font></td><td>t</td><td>o</td></tr>\n<tr><td></td><td>s</td><td>e</td><td>e</td><td ></td><td>y</td><td>o</td><td>u</td><td nowrap><font color=blue>56</font></td><td nowrap><font color=red>141</font></td><td>.</td><td>&quot;</td></tr>\n</tbody></table>\n<p>DEFLATE managed to reduce the original text from 251 characters, to just 152 tokens! Those tokens are later compressed further by Huffman encoding, which is the second stage.</p>\n<p>How long and devotedly the algorithm searches for a string before it stops is defined by the compression level. For example with compression level 4 the algorithm will be happy to find a match of 16 bytes, whereas with level 9 it will attempt to look for the maximal 258 byte match. If a match was not found the algorithm outputs the input as is, uncompressed.</p>\n<p>Clearly at the beginning of the input, there can be no references to previous strings, and it is always uncompressed. Similarly the first occurrence of any string in the input will never be compressed. For example almost all HTML files start with the string &quot;&lt;!doctype html&gt;&lt;html &quot;, however in this string only the second HTML will be replaced with a match, and the rest of the string will remain uncompressed.</p>\n<p>To solve this problem the deflate dictionary effectively acts as an initial back reference for possible matches. So if we add the aforementioned string &quot;&lt;!doctype html&gt;&lt;html &quot; to the dictionary, the algorithm will be able to match it from the start, improving the compression ratio. And there are many more such strings that are used in any HTML page, which we can put in the dictionary to improve compression ratio. In fact the SPDY protocol uses this technique for HTTP header compression.</p>\n<p>To illustrate, lets compress the children’s song with the help of a 42 byte dictionary, containing the following: Little bunny Foo hopping forest Good Fairy. The compressed output will then be:</p>\n<table class=\"centered\" border=\"1\" align=\"center\" width=\"100%\" cellspacing=\"0\" cellpadding=\"0\">\n<tbody>\n<tr>\n<td nowrap><font color=blue>17</font></td><td nowrap><font color=red>42</font></td><td><font color=blue>4</font></td><td><font color=red>4</font></td><td>W</td><td>e</td><td>n</td><td>t</td><td><font color=blue>9</font></td><td nowrap><font color=red>51</font></td><td>t</td><td>h</td><td></td><td>o</td><td>u</td><td>g</td><td>h</td><td><font color=blue>3</td><td><font color=red>8</td><td>e</td></tr>\n<tr>\n<td><font color=blue>8</font></td><td nowrap><font color=red>63</font></td><td>S</td><td>c</td><td>o</td><td>o</td><td><font color=blue>5</font></td><td nowrap><font color=red>28</font></td><td>u</td><td>p</td><td><font color=blue>6</font></td><td nowrap><font color=red>23</font></td><td>i</td><td>e</td><td>l</td><td>d</td><td ></td><td>m</td><td>i</td><td>c</td></tr>\n<tr>\n<td>e</td><td ></td><td>A</td><td>n</td><td>d</td><td ></td><td>b</td><td><font color=blue>9</font></td><td nowrap><font color=red>58</font></td><td>e</td><td>m</td><td ></td><td>o</td><td>n</td><td><font color=blue>5</font></td><td nowrap><font color=red>35</font></td><td>h</td><td>e</td><td>a</td><td>d</td></tr>\n<tr>\n<td ></td><td>D</td><td>o</td><td>w</td><td>n</td><td ></td><td>c</td><td>a</td><td>m</td><td>e</td><td><font color=blue>5</font></td><td nowrap><font color=red>19</font></td><td nowrap><font color=blue>10</font></td><td nowrap><font color=red>133</font></td><td>,</td><td>a</td><td><font color=blue>3</font></td><td nowrap><font color=red>55</font></td><td>s</td><td><font color=blue>3</font></td></tr>\n<tr>\n<td nowrap><font color=red>20</font></td><td>s</td><td>a</td><td>i</td><td>d</td><td ></td><td>&quot;</td><td nowrap><font color=blue>21</font></td><td nowrap><font color=red>149</font></td><td>I</td><td ></td><td>d</td><td>o</td><td>n</td><td>'</td><td>t</td><td ></td><td>w</td><td>a</td><td><font color=blue>3</font></td></tr>\n<tr>\n<td nowrap><font color=red>157</font></td><td>t</td><td>o</td><td ></td><td>s</td><td>e</td><td>e</td><td ></td><td>y</td><td>o</td><td>u</td><td nowrap><font color=blue>56</font></td><td nowrap><font color=red>141</font></td><td>.</td><td>&quot;</td><td ></td><td ></td><td ></td><td ></td><td></td></tr>\n</tbody>\n</table>\n<p>Now, even strings at the very beginning of the input are compressed and strings that only appear once in the file are compressed as well. With the help of the dictionary we are down to 115 tokens. That means roughly 25% better compression rate.</p>\n<h2 id=\"anexperiment\">An experiment</h2>\n<p>We wanted to see if we could make a dictionary that would benefit ALL the HTML pages we serve, and not just a specific domain. To that end we scanned over 20,000 publicly available random HTML pages that passed through our servers on a random sunny day, we took the first 16KB of each page, and used them to prepare two dictionaries, one of 16KB and the other of 32KB. Using a larger dictionary is useless, because then it would be larger than the LZ77 window used by deflate.</p>\n<p>To build a dictionary, I made a little go program that takes a set of files and performs &quot;pseudo&quot; LZ77 over them, finding strings that DEFLATE would not compress in the first 16KB of each input file. It then performs a frequency count of the individual strings, and scores them according to their length and frequency. In the end the highest scoring strings are saved into the dictionary file.</p>\n<p>Our benchmark consists of another set of pages obtained in similar manner. The number of benchmarked files was about 19,000 with total size of 563MB.</p>\n<table class=\"centered\" border=\"1\" align=\"center\" cellspacing=\"0\" cellpadding=\"0\" width=\"100%\"> \n<tbody>\n<tr>\n<td></td>\n<td>deflate -4</td>\n<td>deflate -9</td>\n<td>deflate -4 + 16K dict</td>\n<td>deflate -9 + 16K dict</td>\n<td>deflate -4 + 32K dict</td>\n<td>deflate -9 + 32K dict</td>\n</tr>\n<tr>\n<td>Size (KB)</td>\n<td>169,176</td>\n<td>166,012</td>\n<td>161,896</td>\n<td>158,352</td>\n<td>161,212</td>\n<td>157,444</td>\n</tr>\n<tr>\n<td>Time (sec)</td>\n<td>6.90</td>\n<td>11.56</td>\n<td>7.15</td>\n<td>11.80</td>\n<td>7.88</td>\n<td>11.82</td>\n</tr>\n</tbody>\n</table>\n<p>We can see from the results that the compression we gain for level 4 is almost 5% better than without the dictionary, which is even greater than the compression gained by using level 9 compression, while being substantially faster. For level 9, the gain is greater than 5% without a significant performance hit.</p>\n<p>The results highly depend on the dataset used for the dictionary and on the compressed pages. For example when making a dicitonary aimed at a specific web site, the compression rate for that site increased by up to 30%.</p>\n<p>For very small pages, such as error pages, with size less than 1KB, a DEFLATE dictionary was able to gain compression rates of up to 50% smaller than DEFLATE alone.</p>\n<p>Of course different dictionaries may be used for different file types. In fact we think that it would make sense to create a standard set of dictionaries that could be used accross the web.</p>\n<p>The utility to make a dictionary for deflate can be found at <a href=\"https://github.com/vkrasnov/dictator\">https://github.com/vkrasnov/dictator</a>.<br>\nThe optimized version of zlib used by CloudFlare can be found at <a href=\"https://github.com/cloudflare/zlib\">https://github.com/cloudflare/zlib</a></p>\n<!--kg-card-end: markdown-->",
		"comment_id": "4645",
		"feature_image": "http://blog.cloudflare.com/content/images/2018/08/15585984911_6a6bff8f30_z.jpg",
		"featured": false,
		"visibility": "public",
		"created_at": "2015-03-27T21:53:45.000+00:00",
		"updated_at": "2018-08-24T02:16:25.000+01:00",
		"published_at": "2015-03-30T10:21:21.000+01:00",
		"custom_excerpt": "A few years ago Google made a proposal for a new HTTP compression method, called SDCH (SanDwiCH). The idea behind the method is to create a dictionary of long strings that appear throughout many pages of the same domain (or popular search results).",
		"codeinjection_head": null,
		"codeinjection_foot": null,
		"custom_template": null,
		"canonical_url": null,
		"tags": [
			{
				"id": "5d16450341acde0011a9516c",
				"name": "Google",
				"slug": "google",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/google/"
			},
			{
				"id": "5d16450341acde0011a95196",
				"name": "Optimization",
				"slug": "optimization",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/optimization/"
			},
			{
				"id": "5d16450341acde0011a95160",
				"name": "Speed & Reliability",
				"slug": "speed-and-reliability",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Speed---Reliability-1.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Speed & Reliability",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Speed & Reliability'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/speed-and-reliability/"
			},
			{
				"id": "5d16450341acde0011a95219",
				"name": "Compression",
				"slug": "compression",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/compression/"
			}
		],
		"authors": [
			{
				"id": "5d1644b141acde0011a94f4e",
				"name": "Vlad Krasnov",
				"slug": "vlad-krasnov",
				"profile_image": "http://blog.cloudflare.com/content/images/2017/03/165e069.jpg",
				"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-131.png",
				"bio": null,
				"website": null,
				"location": null,
				"facebook": null,
				"twitter": null,
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/vlad-krasnov/"
			}
		],
		"primary_author": {
			"id": "5d1644b141acde0011a94f4e",
			"name": "Vlad Krasnov",
			"slug": "vlad-krasnov",
			"profile_image": "http://blog.cloudflare.com/content/images/2017/03/165e069.jpg",
			"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-131.png",
			"bio": null,
			"website": null,
			"location": null,
			"facebook": null,
			"twitter": null,
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/vlad-krasnov/"
		},
		"primary_tag": {
			"id": "5d16450341acde0011a9516c",
			"name": "Google",
			"slug": "google",
			"description": null,
			"feature_image": null,
			"visibility": "public",
			"meta_title": null,
			"meta_description": null,
			"og_image": null,
			"og_title": null,
			"og_description": null,
			"twitter_image": null,
			"twitter_title": null,
			"twitter_description": null,
			"codeinjection_head": null,
			"codeinjection_foot": null,
			"canonical_url": null,
			"accent_color": null,
			"url": "http://blog.cloudflare.com/tag/google/"
		},
		"url": "http://blog.cloudflare.com/improving-compression-with-preset-deflate-dictionary/",
		"excerpt": "A few years ago Google made a proposal for a new HTTP compression method, called SDCH (SanDwiCH). The idea behind the method is to create a dictionary of long strings that appear throughout many pages of the same domain (or popular search results).",
		"reading_time": 7,
		"access": true,
		"comments": false,
		"og_image": null,
		"og_title": null,
		"og_description": null,
		"twitter_image": null,
		"twitter_title": null,
		"twitter_description": null,
		"meta_title": null,
		"meta_description": null,
		"email_subject": null,
		"frontmatter": null,
		"feature_image_alt": null,
		"feature_image_caption": null
	},
	"locale": "en-us"
}