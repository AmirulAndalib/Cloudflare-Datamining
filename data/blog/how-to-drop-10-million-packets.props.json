{
	"post": {
		"id": "5d16453b41acde0011a95710",
		"uuid": "83dc6001-ead2-4e53-8357-d125d3d4c756",
		"title": "How to drop 10 million packets per second",
		"slug": "how-to-drop-10-million-packets",
		"html": "<!--kg-card-begin: markdown--><p>Internally our DDoS mitigation team is sometimes called &quot;the packet droppers&quot;. When other teams build exciting products to do smart things with the traffic that passes through our network, we take joy in discovering novel ways of discarding it.</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2018/07/38464589350_d00908ee98_b.jpg\" alt=\"38464589350_d00908ee98_b\" loading=\"lazy\"><br>\n<small><a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC BY-SA 2.0</a> <a href=\"https://www.flickr.com/photos/beegee49/38464589350\">image</a> by <a href=\"https://www.flickr.com/photos/beegee49\">Brian Evans</a></small></p>\n<p>Being able to quickly discard packets is very important to withstand DDoS attacks.</p>\n<p>Dropping packets hitting our servers, as simple as it sounds, can be done on multiple layers. Each technique has its advantages and limitations. In this blog post we'll review all the techniques we tried thus far.</p>\n<h3 id=\"testbench\">Test bench</h3>\n<p>To illustrate the relative performance of the methods we'll show some numbers. The benchmarks are synthetic, so take the numbers with a grain of salt. We'll use one of our Intel servers, with a 10Gbps network card. The hardware details aren't too important, since the tests are prepared to show the operating system, not hardware, limitations.</p>\n<p>Our testing setup is prepared as follows:</p>\n<ul>\n<li>\n<p>We transmit a large number of tiny UDP packets, reaching 14Mpps (millions packets per second).</p>\n</li>\n<li>\n<p>This traffic is directed towards a single CPU on a target server.</p>\n</li>\n<li>\n<p>We measure the number of packets handled by the kernel on that one CPU.</p>\n</li>\n</ul>\n<p>We're not trying to maximize userspace application speed, nor packet throughput - instead, we're trying to specifically show kernel bottlenecks.</p>\n<p>The synthetic traffic is prepared to put maximum stress on conntrack - it uses random source IP and port fields. Tcpdump will show it like this:</p>\n<pre><code>$ tcpdump -ni vlan100 -c 10 -t udp and dst port 1234\nIP 198.18.40.55.32059 &gt; 198.18.0.12.1234: UDP, length 16\nIP 198.18.51.16.30852 &gt; 198.18.0.12.1234: UDP, length 16\nIP 198.18.35.51.61823 &gt; 198.18.0.12.1234: UDP, length 16\nIP 198.18.44.42.30344 &gt; 198.18.0.12.1234: UDP, length 16\nIP 198.18.106.227.38592 &gt; 198.18.0.12.1234: UDP, length 16\nIP 198.18.48.67.19533 &gt; 198.18.0.12.1234: UDP, length 16\nIP 198.18.49.38.40566 &gt; 198.18.0.12.1234: UDP, length 16\nIP 198.18.50.73.22989 &gt; 198.18.0.12.1234: UDP, length 16\nIP 198.18.43.204.37895 &gt; 198.18.0.12.1234: UDP, length 16\nIP 198.18.104.128.1543 &gt; 198.18.0.12.1234: UDP, length 16\n</code></pre>\n<p>On the target side all of the packets are going to be forwarded to exactly one RX queue, therefore one CPU. We do this with hardware flow steering:</p>\n<pre><code>ethtool -N ext0 flow-type udp4 dst-ip 198.18.0.12 dst-port 1234 action 2\n</code></pre>\n<p>Benchmarking is always hard. When preparing the tests we learned that having any active raw sockets destroys performance. It's obvious in hindsight, but easy to miss. Before running any tests remember to make sure you don't have any stale <code>tcpdump</code> process running. This is how to check it, showing a bad process active:</p>\n<pre><code>$ ss -A raw,packet_raw -l -p|cat\nNetid  State      Recv-Q Send-Q Local Address:Port\np_raw  UNCONN     525157 0      *:vlan100          users:((&quot;tcpdump&quot;,pid=23683,fd=3))\n</code></pre>\n<p>Finally, we are going to disable the Intel Turbo Boost feature on the machine:</p>\n<pre><code>echo 1 | sudo tee /sys/devices/system/cpu/intel_pstate/no_turbo\n</code></pre>\n<p>While Turbo Boost is nice and increases throughput by at least 20%, it also drastically worsens the standard deviation in our tests. With turbo enabled we had Â±1.5% deviation in our numbers. With Turbo off this falls down to manageable 0.25%.</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2018/07/layers.JPG\" alt=\"layers\" loading=\"lazy\"></p>\n<h4 id=\"step1droppingpacketsinapplication\">Step 1. Dropping packets in  application</h4>\n<p>Let's start with the idea of delivering packets to an application and ignoring them in userspace code. For the test setup, let's make sure our iptables don't affect the performance:</p>\n<pre><code>iptables -I PREROUTING -t mangle -d 198.18.0.12 -p udp --dport 1234 -j ACCEPT\niptables -I PREROUTING -t raw -d 198.18.0.12 -p udp --dport 1234 -j ACCEPT\niptables -I INPUT -t filter -d 198.18.0.12 -p udp --dport 1234 -j ACCEPT\n</code></pre>\n<p>The application code is a simple loop, receiving data and immediately discarding it in the userspace:</p>\n<pre><code>s = socket.socket(AF_INET, SOCK_DGRAM)\ns.bind((&quot;0.0.0.0&quot;, 1234))\nwhile True:\n    s.recvmmsg([...])\n</code></pre>\n<p><a href=\"https://github.com/cloudflare/cloudflare-blog/blob/master/2018-07-dropping-packets/recvmmsg-loop.c\">We prepared the code</a>, to run it:</p>\n<pre><code>$ ./dropping-packets/recvmmsg-loop\npackets=171261 bytes=1940176\n</code></pre>\n<p>This setup allows the kernel to receive a meagre 175kpps from the hardware receive queue, as measured by <code>ethtool</code> and using our simple <a href=\"http://blog.cloudflare.com/three-little-tools-mmsum-mmwatch-mmhistogram/\"><code>mmwatch</code> tool</a>:</p>\n<pre><code>$ mmwatch 'ethtool -S ext0|grep rx_2'\n rx2_packets: 174.0k/s\n</code></pre>\n<p>The hardware technically gets 14Mpps off the wire, but it's impossible to pass it all to a single RX queue handled by only one CPU core doing kernel work. <code>mpstat</code> confirms this:</p>\n<pre><code>$ watch 'mpstat -u -I SUM -P ALL 1 1|egrep -v Aver'\n01:32:05 PM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle\n01:32:06 PM    0    0.00    0.00    0.00    2.94    0.00    3.92    0.00    0.00    0.00   93.14\n01:32:06 PM    1    2.17    0.00   27.17    0.00    0.00    0.00    0.00    0.00    0.00   70.65\n01:32:06 PM    2    0.00    0.00    0.00    0.00    0.00  100.00    0.00    0.00    0.00    0.00\n01:32:06 PM    3    0.95    0.00    1.90    0.95    0.00    3.81    0.00    0.00    0.00   92.38\n</code></pre>\n<p>As you can see application code is not a bottleneck, using 27% sys + 2% userspace on CPU #1, while network SOFTIRQ on CPU #2 uses 100% resources.</p>\n<p>By the way, using <code>recvmmsg(2)</code> is important. In these post-Spectre days, syscalls got more expensive and indeed, we run kernel 4.14 with KPTI and retpolines:</p>\n<pre><code>$ tail -n +1 /sys/devices/system/cpu/vulnerabilities/*\n==&gt; /sys/devices/system/cpu/vulnerabilities/meltdown &lt;==\nMitigation: PTI\n\n==&gt; /sys/devices/system/cpu/vulnerabilities/spectre_v1 &lt;==\nMitigation: __user pointer sanitization\n\n==&gt; /sys/devices/system/cpu/vulnerabilities/spectre_v2 &lt;==\nMitigation: Full generic retpoline, IBPB, IBRS_FW\n</code></pre>\n<h4 id=\"step2slaughterconntrack\">Step 2. Slaughter conntrack</h4>\n<p>We specifically designed the test - by choosing random source IP and ports - to put stress on the conntrack layer. This can be verified by looking at number of conntrack entries, which during the test is reaching the maximum:</p>\n<pre><code>$ conntrack -C\n2095202\n\n$ sysctl net.netfilter.nf_conntrack_max\nnet.netfilter.nf_conntrack_max = 2097152\n</code></pre>\n<p>You can also observe conntrack shouting in <code>dmesg</code>:</p>\n<pre><code>[4029612.456673] nf_conntrack: nf_conntrack: table full, dropping packet\n[4029612.465787] nf_conntrack: nf_conntrack: table full, dropping packet\n[4029617.175957] net_ratelimit: 5731 callbacks suppressed\n</code></pre>\n<p>To speed up our tests let's disable it:</p>\n<pre><code>iptables -t raw -I PREROUTING -d 198.18.0.12 -p udp -m udp --dport 1234 -j NOTRACK\n</code></pre>\n<p>And rerun the tests:</p>\n<pre><code>$ ./dropping-packets/recvmmsg-loop\npackets=331008 bytes=5296128\n</code></pre>\n<p>This instantly bumps the application receive performance to 333kpps. Hurray!</p>\n<p>PS. With SO_BUSY_POLL we can bump the numbers to 470k pps, but this is a subject for another time.</p>\n<h4 id=\"step3bpfdroponasocket\">Step 3. BPF drop on a socket</h4>\n<p>Going further, why deliver packets to userspace application at all? While this technique is uncommon, we can attach a classical BPF filter to a SOCK_DGRAM socket with <code>setsockopt(SO_ATTACH_FILTER)</code> and program the filter to discard packets in kernel space.</p>\n<p><a href=\"https://github.com/cloudflare/cloudflare-blog/blob/master/2018-07-dropping-packets/bpf-drop.c\">See the code</a>, to run it:</p>\n<pre><code>$ ./bpf-drop\npackets=0 bytes=0\n</code></pre>\n<p>With drops in BPF (both Classical as well as extended eBPF have similar performance) we process roughly 512kpps. All of them get dropped in the BPF filter while still in software interrupt mode, which saves us CPU needed to wake up the userspace application.</p>\n<h4 id=\"step4iptablesdropafterrouting\">Step 4. iptables DROP after routing</h4>\n<p>As a next step we can simply drop packets in the iptables firewall INPUT chain by adding rule like this:</p>\n<pre><code>iptables -I INPUT -d 198.18.0.12 -p udp --dport 1234 -j DROP\n</code></pre>\n<p>Remember we disabled conntrack already with <code>-j NOTRACK</code>. These two rules give us 608kpps.</p>\n<p>The numbers in iptables counters:</p>\n<pre><code>$ mmwatch 'iptables -L -v -n -x | head'\n\nChain INPUT (policy DROP 0 packets, 0 bytes)\n    pkts      bytes target     prot opt in     out     source               destination\n605.9k/s    26.7m/s DROP       udp  --  *      *       0.0.0.0/0            198.18.0.12          udp dpt:1234\n</code></pre>\n<p>600kpps is not bad, but we can do better!</p>\n<h4 id=\"step5iptablesdropinprerouting\">Step 5. iptables DROP in PREROUTING</h4>\n<p>An even faster technique is to drop packets before they get routed. This rule can do this:</p>\n<pre><code>iptables -I PREROUTING -t raw -d 198.18.0.12 -p udp --dport 1234 -j DROP\n</code></pre>\n<p>This produces whopping 1.688mpps.</p>\n<p>This is quite a significant jump in performance, I don't fully understand it. Either our routing layer is unusually complex or there is a bug in our server configuration.</p>\n<p>In any case - &quot;raw&quot; iptables table is definitely way faster.</p>\n<h4 id=\"step6nftablesdropbeforeconntrack\">Step 6. nftables DROP before CONNTRACK</h4>\n<p>Iptables is considered passÃ© these days. The new kid in town is nftables. See this <a href=\"https://www.youtube.com/watch?v=9Zr8XqdET1c\">video for a technical explanation why</a> nftables is superior. Nftables promises to be faster than gray haired iptables for many reasons, among them is a rumor that retpolines (aka: no speculation for indirect jumps) hurt iptables quite badly.</p>\n<p>Since this article is not about comparing the nftables vs iptables speed, let's try only the fastest drop I could came up with:</p>\n<pre><code>nft add table netdev filter\nnft -- add chain netdev filter input { type filter hook ingress device vlan100 priority -500 \\; policy accept \\; }\nnft add rule netdev filter input ip daddr 198.18.0.0/24 udp dport 1234 counter drop\nnft add rule netdev filter input ip6 daddr fd00::/64 udp dport 1234 counter drop\n</code></pre>\n<p>The counters can be seen with this command:</p>\n<pre><code>$ mmwatch 'nft --handle list chain netdev filter input'\ntable netdev filter {\n    chain input {\n        type filter hook ingress device vlan100 priority -500; policy accept;\n        ip daddr 198.18.0.0/24 udp dport 1234 counter packets    1.6m/s bytes    69.6m/s drop # handle 2\n        ip6 daddr fd00::/64 udp dport 1234 counter packets 0 bytes 0 drop # handle 3\n    }\n}\n</code></pre>\n<p>Nftables &quot;ingress&quot; hook yields around 1.53mpps. This is slightly slower than iptables in the PREROUTING layer. This is puzzling - theoretically &quot;ingress&quot; happens before PREROUTING, so should be faster.</p>\n<p>In our test  nftables was slightly slower than iptables, but not by much. Nftables is still better :P</p>\n<h4 id=\"step7tcingresshandlerdrop\">Step 7. tc ingress handler DROP</h4>\n<p>A somewhat surprising fact is that a tc (traffic control) ingress hook happens before even PREROUTING. tc makes it possible to select packets based on basic criteria and indeed - action drop - them. The syntax is rather hacky, so it's recommended to <a href=\"https://github.com/netoptimizer/network-testing/blob/master/bin/tc_ingress_drop.sh\">use this script</a> to set it up. We need a tiny bit more complex tc match, here is the command line:</p>\n<pre><code>tc qdisc add dev vlan100 ingress\ntc filter add dev vlan100 parent ffff: prio 4 protocol ip u32 match ip protocol 17 0xff match ip dport 1234 0xffff match ip dst 198.18.0.0/24 flowid 1:1 action drop\ntc filter add dev vlan100 parent ffff: protocol ipv6 u32 match ip6 dport 1234 0xffff match ip6 dst fd00::/64 flowid 1:1 action drop\n</code></pre>\n<p>We can verify it:</p>\n<pre><code>$ mmwatch 'tc -s filter  show dev vlan100  ingress'\nfilter parent ffff: protocol ip pref 4 u32 \nfilter parent ffff: protocol ip pref 4 u32 fh 800: ht divisor 1 \nfilter parent ffff: protocol ip pref 4 u32 fh 800::800 order 2048 key ht 800 bkt 0 flowid 1:1  (rule hit   1.8m/s success   1.8m/s)\n  match 00110000/00ff0000 at 8 (success   1.8m/s ) \n  match 000004d2/0000ffff at 20 (success   1.8m/s ) \n  match c612000c/ffffffff at 16 (success   1.8m/s ) \n        action order 1: gact action drop\n         random type none pass val 0\n         index 1 ref 1 bind 1 installed 1.0/s sec\n        Action statistics:\n        Sent    79.7m/s bytes   1.8m/s pkt (dropped   1.8m/s, overlimits 0 requeues 0) \n        backlog 0b 0p requeues 0\n</code></pre>\n<p>A tc ingress hook with u32 match allows us to drop 1.8mpps on a single CPU. This is brilliant!</p>\n<p>But we can go even faster...</p>\n<h4 id=\"step8xdp_drop\">Step 8. XDP_DROP</h4>\n<p>Finally, the ultimate weapon is XDP - <a href=\"https://prototype-kernel.readthedocs.io/en/latest/networking/XDP/\">eXpress Data Path</a>. With XDP we can run eBPF code in the context of a network driver. Most importantly, this is before the <code>skbuff</code> memory allocation, allowing great speeds.</p>\n<p>Usually XDP projects have two parts:</p>\n<ul>\n<li>the eBPF code loaded into the kernel context</li>\n<li>the userspace loader, which loads the code onto the right network card and manages it</li>\n</ul>\n<p>Writing the loader is pretty hard, so instead we can use the <a href=\"https://cilium.readthedocs.io/en/latest/bpf/#iproute2\">new <code>iproute2</code> feature</a> and load the code with this trivial command:</p>\n<pre><code>ip link set dev ext0 xdp obj xdp-drop-ebpf.o\n</code></pre>\n<p>Tadam!</p>\n<p>The source code for <a href=\"https://github.com/cloudflare/cloudflare-blog/blob/master/2018-07-dropping-packets/xdp-drop-ebpf.c\">the loaded eBPF XDP program is available here</a>. The program parses IP packets and looks for desired characteristics: IP transport, UDP protocol, desired target subnet and destination port:</p>\n<pre><code class=\"language-.c\">if (h_proto == htons(ETH_P_IP)) {\n    if (iph-&gt;protocol == IPPROTO_UDP\n        &amp;&amp; (htonl(iph-&gt;daddr) &amp; 0xFFFFFF00) == 0xC6120000 // 198.18.0.0/24\n        &amp;&amp; udph-&gt;dest == htons(1234)) {\n        return XDP_DROP;\n    }\n}\n</code></pre>\n<p>XDP program needs to be compiled with modern <code>clang</code> that can emit BPF bytecode. After this we can load and verify the running XDP program:</p>\n<pre><code>$ ip link show dev ext0\n4: ext0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 xdp qdisc fq state UP mode DEFAULT group default qlen 1000\n    link/ether 24:8a:07:8a:59:8e brd ff:ff:ff:ff:ff:ff\n    prog/xdp id 5 tag aedc195cc0471f51 jited\n</code></pre>\n<p>And see the numbers in <code>ethtool -S</code> network card statistics:</p>\n<pre><code>$ mmwatch 'ethtool -S ext0|egrep &quot;rx&quot;|egrep -v &quot;: 0&quot;|egrep -v &quot;cache|csum&quot;'\n     rx_out_of_buffer:     4.4m/s\n     rx_xdp_drop:         10.1m/s\n     rx2_xdp_drop:        10.1m/s\n</code></pre>\n<p>Whooa! With XDP we can drop 10 million packets per second on a single CPU.</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2018/07/225821241_ed5da2da91_o.jpg\" alt=\"225821241_ed5da2da91_o\" loading=\"lazy\"><br>\n<small><a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC BY-SA 2.0</a> <a href=\"https://www.flickr.com/photos/afiler/225821241/\">image</a> by <a href=\"https://www.flickr.com/photos/afiler/\">Andrew Filer</a></small></p>\n<h3 id=\"summary\">Summary</h3>\n<p>We repeated the these for both IPv4 and IPv6 and prepared this chart:</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2018/07/numbers-noxdp.png\" alt=\"numbers-noxdp\" loading=\"lazy\"></p>\n<p>Generally speaking in our setup IPv6 had slightly lower performance. Remember that IPv6 packets are slightly larger, so some performance difference is unavoidable.</p>\n<p>Linux has numerous hooks that can be used to filter packets, each with different performance and ease of use characteristics.</p>\n<p>For DDoS purporses, it may totally be reasonable to just receive the packets in the application and process them in userspace. Properly tuned applications can get pretty decent numbers.</p>\n<p>For DDoS attacks with random/spoofed source IP's, it might be worthwhile disabling conntrack to gain some speed. Be careful though - there are attacks for which conntrack is very helpful.</p>\n<p>In other circumstances it may make sense to integrate the Linux firewall into the DDoS mitigation pipeline. In such cases, remember to put the mitigations in a &quot;-t raw PREROUTING&quot; layer, since it's significantly faster than &quot;filter&quot; table.</p>\n<p>For even more demanding workloads, we always have XDP. And boy, it is powerful. Here is the same chart as above, but including XDP:</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2018/07/numbers-xdp-1.png\" alt=\"numbers-xdp-1\" loading=\"lazy\"></p>\n<p>If you want to reproduce these numbers, <a href=\"https://github.com/cloudflare/cloudflare-blog/blob/master/2018-07-dropping-packets/README.md\">see the README where we documented everything</a>.</p>\n<p>Here at Cloudflare we are using... almost all of these techniques. Some of the userspace tricks are integrated with our applications. The iptables layer is managed by <a href=\"http://blog.cloudflare.com/meet-gatebot-a-bot-that-allows-us-to-sleep/\">our Gatebot DDoS pipeline</a>. Finally, we are working on replacing our proprietary kernel offload solution with XDP.</p>\n<p>Want to help us drop more packets? We're hiring for many roles, including packet droppers, systems engineers and more!</p>\n<p><em>Special thanks to <a href=\"https://twitter.com/JesperBrouer\">Jesper Dangaard Brouer</a> for helping with this work.</em></p>\n<!--kg-card-end: markdown-->",
		"comment_id": "5b3e272a781d8200bf2a6213",
		"feature_image": "http://blog.cloudflare.com/content/images/2018/07/numbers-noxdp-1.png",
		"featured": false,
		"visibility": "public",
		"created_at": "2018-07-05T15:11:54.000+01:00",
		"updated_at": "2018-08-29T08:44:40.000+01:00",
		"published_at": "2018-07-06T14:00:00.000+01:00",
		"custom_excerpt": "Internally our DDoS mitigation team is sometimes called \"the packet droppers\". When other teams build exciting products to do smart things with the traffic that passed through our network, we take joy in discovering novel ways of discarding it.",
		"codeinjection_head": null,
		"codeinjection_foot": null,
		"custom_template": null,
		"canonical_url": null,
		"authors": [
			{
				"id": "5d1644b141acde0011a94f30",
				"name": "Marek Majkowski",
				"slug": "marek-majkowski",
				"profile_image": "http://blog.cloudflare.com/content/images/2017/03/b5967d6c687939594adb6992723d0529.jpeg",
				"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-101.png",
				"bio": null,
				"website": null,
				"location": null,
				"facebook": null,
				"twitter": "@majek04",
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/marek-majkowski/"
			}
		],
		"tags": [
			{
				"id": "5d16450341acde0011a951e3",
				"name": "DDoS",
				"slug": "ddos",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/ddos/"
			},
			{
				"id": "5d16450341acde0011a951f4",
				"name": "Mitigation",
				"slug": "mitigation",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/mitigation/"
			},
			{
				"id": "5d16450341acde0011a951ce",
				"name": "Reliability",
				"slug": "reliability",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/reliability/"
			},
			{
				"id": "5d16450341acde0011a95169",
				"name": "Attacks",
				"slug": "attacks",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/attacks/"
			},
			{
				"id": "5d16450341acde0011a95265",
				"name": "Security",
				"slug": "security",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Security.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Security",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Security'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/security/"
			}
		],
		"primary_author": {
			"id": "5d1644b141acde0011a94f30",
			"name": "Marek Majkowski",
			"slug": "marek-majkowski",
			"profile_image": "http://blog.cloudflare.com/content/images/2017/03/b5967d6c687939594adb6992723d0529.jpeg",
			"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-101.png",
			"bio": null,
			"website": null,
			"location": null,
			"facebook": null,
			"twitter": "@majek04",
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/marek-majkowski/"
		},
		"primary_tag": {
			"id": "5d16450341acde0011a951e3",
			"name": "DDoS",
			"slug": "ddos",
			"description": null,
			"feature_image": null,
			"visibility": "public",
			"meta_title": null,
			"meta_description": null,
			"og_image": null,
			"og_title": null,
			"og_description": null,
			"twitter_image": null,
			"twitter_title": null,
			"twitter_description": null,
			"codeinjection_head": null,
			"codeinjection_foot": null,
			"canonical_url": null,
			"accent_color": null,
			"url": "http://blog.cloudflare.com/tag/ddos/"
		},
		"url": "http://blog.cloudflare.com/how-to-drop-10-million-packets/",
		"excerpt": "Internally our DDoS mitigation team is sometimes called \"the packet droppers\". When other teams build exciting products to do smart things with the traffic that passed through our network, we take joy in discovering novel ways of discarding it.",
		"reading_time": 10,
		"access": true,
		"comments": false,
		"og_image": null,
		"og_title": null,
		"og_description": null,
		"twitter_image": null,
		"twitter_title": null,
		"twitter_description": null,
		"meta_title": null,
		"meta_description": null,
		"email_subject": null,
		"frontmatter": null,
		"feature_image_alt": null,
		"feature_image_caption": null
	},
	"locale": "en-us"
}