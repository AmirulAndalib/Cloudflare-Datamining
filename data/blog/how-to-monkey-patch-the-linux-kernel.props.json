{
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Kenton Varda",
				"slug": "kenton-varda",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/slt3lc6tev37/1FFs4T2j1RyvxasKOkkdtP/15df5db7be969ea8a89e68491f6f67f6/kenton-varda.jpg",
				"location": null,
				"website": null,
				"twitter": "@kentonvarda",
				"facebook": null
			}
		],
		"excerpt": "I have a weird setup. I type in Dvorak. But, when I hold ctrl or alt, my keyboard reverts to Qwerty. You see, the classic text-editing hotkeys, ctrl+Z, ctrl+X, ctrl+C, and ctrl+V are all located optimally for a Qwerty layout.",
		"feature_image": "https://cf-assets.www.cloudflare.com/slt3lc6tev37/5Y9Zq45i2hI0yXQvw8MwTt/7f8d67c960c25f299003fa5e9eb7ca0a/how-to-monkey-patch-the-linux-kernel.jpg",
		"featured": false,
		"html": "<p>I have a weird setup. I type in Dvorak. But, when I hold ctrl or alt, my keyboard reverts to Qwerty.</p><p>You see, the classic text-editing hotkeys, ctrl+Z, ctrl+X, ctrl+C, and ctrl+V are all located optimally for a Qwerty layout: next to the control key, easy to reach with your left hand while mousing with your right. In Dvorak, unfortunately, these hotkeys are scattered around mostly on the right half of the keyboard, making them much less convenient. Using Dvorak for typing but Qwerty for hotkeys turns out to be a nice compromise.</p><p>But, the only way I could find to make this work on Linux / X was to write a program that uses X &quot;grabs&quot; to intercept key events and rewrite them. That was mostly fine, until recently, when my machine, unannounced, updated to Wayland. Remarkably, I didn&#39;t even notice at first! But at some point, I realized my hotkeys weren&#39;t working right. You see, Wayland, unlike X, actually has some sensible security rules, and as a result, random programs can&#39;t just capture all keyboard events anymore. Which broke my setup.</p><p>Yes, that&#39;s right, I&#39;m that guy:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/slt3lc6tev37/3ffvMlsnnxSWwVHiNIsgj8/c400a84f471e2bc59005fb5bb8e07e33/workflow.png\" alt=\"comic: xkcd 1172\" class=\"kg-image\" width=\"278\" height=\"386\" loading=\"lazy\"/>\n            \n            </figure><p>Source: <a href=\"https://xkcd.com/1172/\">xkcd 1172</a></p><p>So what was I to do? I began worrying that I&#39;d need to modify the keyboard handling directly in Wayland or in the Linux kernel. Maintaining my own fork of core system infrastructure that changes frequently was not an attractive thought.</p><p>Desperate, I asked the Cloudflare Engineering chat channel if anyone knew a better way. That&#39;s when Marek Kroemeke came to the rescue:</p>\n            <figure class=\"kg-card kg-image-card \">\n            <a href=https://sourceware.org/systemtap/examples/general/keyhack.stp>\n            <Image src=\"https://cf-assets.www.cloudflare.com/slt3lc6tev37/3DPnIgdkERgExwaoI3VQjq/c528cb1b8ff402e7815a04fbc41f0deb/a-good-way.png\" alt=\"Screenshot of chat log with Marek Kroemeke. He links to keyhack.stp, then comments: \"oh, you said 'good way', missed that.\"\" class=\"kg-image\" width=\"444\" height=\"60\" loading=\"lazy\"/>\n            </a>\n            </figure><p>Following <a href=\"https://sourceware.org/systemtap/examples/general/keyhack.stp\">Marek&#39;s link</a>, I found:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">#! /usr/bin/env stap\n\n# This is not useful, but it demonstrates that\n# Systemtap can modify variables in a running kernel.\n\n# Usage: ./keyhack.stp -g\n\nprobe kernel.function(\"kbd_event\") {\n  # Changes 'm' to 'b' .\n  if ($event_code == 50) $event_code = 48\n}\n\nprobe end {\n  printf(\"\\nDONE\\n\")\n}</pre></code>\n            <p>Oh my. What is this? What do you mean, &quot;this is not useful&quot;? This is almost exactly what I want!</p><h3>SystemTap: Not just for debugging?</h3><p>SystemTap is a tool designed to allow you to probe the Linux kernel for debugging purposes. It lets you hook any kernel function (yes, any C function defined anywhere in the kernel) and log the argument values, or other system state. Scripts are written in a special language designed to prevent you from doing anything that could break your system.</p><p>But it turns out you can do more than just read: With the <code>-g</code> flag (for &quot;guru mode&quot;, in which you accept responsibility for your actions), you can not just read, but modify. Moreover, you can inject raw C code, escaping the restrictions of SystemTap&#39;s normal language.</p><p>SystemTap&#39;s command-line tool, <code>stap</code>, compiles your script into a Linux kernel module and loads it. The module, on load, will find the function you want to probe and will overwrite it with a jump to your probing code. The probe code does what you specify, then jumps back to the original function body to continue as usual. When you terminate <code>stap</code> (e.g. via ctrl+C on the command line), it unloads the module, restoring the probed function to its original state.</p><p>This means it&#39;s easy and relatively safe to inject a probe into your running system at any time. If it doesn&#39;t do what you want, you can safely remove it, modify it, and try again. There&#39;s no need to modify the actual kernel code nor recompile your kernel. You can make your changes without maintaining a fork.</p><p>This is, of course, a well-known practice in dynamic programming languages, where it&#39;s generally much easier. We call it &quot;Monkey-Patching&quot;.</p><h3>When is it OK to Monkey-Patch?</h3><p>&quot;Monkey-patch&quot; is often used as a pejorative. Many developers cringe at the thought. It&#39;s an awful hack! Never do that!</p><p>Indeed, in a lot of contexts, monkey-patching is a terrible idea. At a previous job, <a href=\"https://sandstorm.io/news/2016-09-30-fiber-bomb-debugging-story\">I spent weeks</a> debugging problems caused by a bad (but well-meaning) monkey-patch made by one of our dependencies.</p><p>But, often, a little monkey-patch can save a lot of work. By monkey-patching my kernel, I can get the keyboard behavior I want without maintaining a fork forever, and without spending weeks developing a feature worthy of pushing upstream. And when patching my own machine, I can&#39;t hurt anyone but myself.</p><p>I would propose two rules for monkey patching:</p><ol><li><p><b>Only the exclusive owner of the environment may monkey-patch it.</b> The &quot;owner&quot; is an entity who has complete discretion and control over all code that exists within the environment in which the monkey-patch is visible. For a self-contained application which specifies all its dependencies precisely, the application developer may be permitted to monkey-patch libraries within the application&#39;s runtime -- but libraries and frameworks <i>must never</i> apply monkey-patches. When we&#39;re talking about the kernel, the &quot;owner&quot; is the system administrator.</p></li><li><p><b>The owner takes full responsibility for any breakages caused.</b> If something doesn&#39;t work right, it&#39;s up to the owner to deal with it or abandon their patch.</p></li></ol><p>In this case, I&#39;m the owner of my system, and therefore I have the right to monkey-patch it. If my monkey-patch breaks (say, because the kernel functions I was patching changed in a later kernel version), or if it breaks other programs I use, that&#39;s my problem and I&#39;ll deal with it.</p><h3>Setting Up</h3><p>To use SystemTap, you must have the kernel headers and debug symbols installed. I found the documentation was not quite right on my Debian system. I managed to get everything installed by running:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">sudo apt install systemtap linux-headers-amd64 linux-image-amd64-dbg</pre></code>\n            <p>Note that the debug symbols are a HUGE package (~500MB). Such is the price you pay, it seems.</p><h3>False Starts</h3><p>Starting from the sample script that remaps &#39;m&#39; to &#39;b&#39;, it seemed obvious how to proceed. I saved the script to a file and did:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">sudo stap -g keyhack.stp</pre></code>\n            <p>Butâ€¦ nothing happened. My &#39;m&#39; key still typed &#39;m&#39;.</p><p>To debug, I added some <code>printf()</code> statements (which conveniently print to the terminal where <code>stap</code> runs). But, it appeared the keyboard events were indeed being captured. So why did &#39;m&#39; still type &#39;m&#39;?</p><p>It turns out, no one was listening. The <code>kbd_event</code> function is part of the text-mode terminal support. Sure enough, if I switched virtual terminals over to a text terminal, the key was being remapped. But Wayland uses a totally different code path to receive key events -- the <code>/dev/input</code> devices. These devices are implemented by the <code>evdev</code> module.</p><p>Looking through <a href=\"http://elixir.free-electrons.com/linux/v4.13/source/drivers/input/evdev.c\">evdev.c</a>, at first <code>evdev_event()</code> looks tempting as a probe point: it has almost the same signature as <code>kbd_event()</code>. Unfortunately, this function is not usually called by the driver; rather, the multi-event version, <code>evdev_events()</code>, usually is. But that version takes an array, which seems more tedious to deal with.</p><p>Looking further, I came across <code>__pass_event()</code>, which <code>evdev_events()</code> calls for each event. It&#39;s slightly different from <code>kbd_event()</code> in that the event is encapsulated in a struct, but at least it only takes one event at a time. This seemed like the easiest place to probe, so I tried it:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\"># DOES NOT WORK\nprobe module(\"evdev\").function(\"__pass_event\") {\n  # Changes 'm' to 'b'.\n  if ($event->code == 50) $event->code = 48\n}</pre></code>\n            <p>Alas, this didn&#39;t quite work. When running <code>stap</code>, I got:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">semantic error: failed to retrieve location attribute for 'event'</pre></code>\n            <p>This error seems strange. The function definitely has a parameter called <code>event</code>!</p><p>The problem is, <code>__pass_event()</code> is a <code>static</code> function that is called from only one place. As a result, the compiler inlines it. When a function is inlined, its parameters often cease to have a well-defined location in memory, so reading and modifying them becomes infeasible. SystemTap relies on debug info tables that specify where to find parameters, but in this case the tables don&#39;t have an answer.</p><h3>The Working Version</h3><p>Alas, it seemed I&#39;d need to use <code>evdev_events()</code> and deal with the array after all. This function takes an array of events to deliver at once, so its parameters aren&#39;t quite as convenient. But, it has multiple call sites, so it isn&#39;t inlined. I just needed a little loop:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">probe module(\"evdev\").function(\"evdev_events\") {\n  for (i = 0; i < $count; i++) {\n    # Changes 'm' to 'b'.\n    if ($vals[i]->code == 50) $vals[i]->code = 48\n  }\n}</pre></code>\n            <p>Success! This script works. I no longer have any way to type &#39;m&#39;.</p><p>From here, implementing the Dvorak-Qwerty key-remapping behavior I wanted was a simple matter of writing some code to track modifier key state and remap keys. <a href=\"https://github.com/kentonv/dvorak-qwerty/blob/master/unix/dvorak-qwerty.stp\">You can find my full script on GitHub.</a></p>\n            <figure class=\"kg-card kg-image-card \">\n            <a href=https://github.com/kentonv/dvorak-qwerty/blob/master/unix/dvorak-qwerty.stp>\n            <Image src=\"https://cf-assets.www.cloudflare.com/slt3lc6tev37/6EhZxOXAn8Vuq1pAzJdQq5/4fd483d99056b5240e9721377287c1ec/os-level-monkeypatch.png\" alt=\"Screenshot of chat log between Kenton Varda and Alexander Huynh. Kenton says \"IT WORKS\" and links to dvorak-qwerty.stp. \"systemtap is amazing\" Alexander replies: \"dear lord, I never thought I'd see an OS-level monkeypatch\"\" class=\"kg-image\" width=\"615\" height=\"162\" loading=\"lazy\"/>\n            </a>\n            </figure>",
		"id": "5AQ6DAoqmICtgeKaiF0Q9R",
		"localeList": {
			"name": "How to Monkey-Patch the Linux Kernel Config",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": "Did you know you can \"monkey patch\" the Linux kernel to change its behavior on-the-fly? It turns out it's pretty easy with SystemTap.",
		"metadata": {
			"imgPreview": ""
		},
		"primary_author": {},
		"published_at": "2017-10-24T00:28:00.000+01:00",
		"reading_time": 6,
		"slug": "how-to-monkey-patch-the-linux-kernel",
		"tags": [
			{
				"id": "383iv0UQ6Lp0GZwOAxGq2p",
				"name": "Linux",
				"slug": "linux"
			},
			{
				"id": "6lhzEBz2B56RKa4nUEAGYJ",
				"name": "Programming",
				"slug": "programming"
			},
			{
				"id": "4g8tPriKOAUwdUT4jNPebe",
				"name": "Life at Cloudflare",
				"slug": "life-at-cloudflare"
			}
		],
		"title": "How to Monkey-Patch the Linux Kernel",
		"updated_at": "2024-08-27T02:27:11.136Z",
		"url": "https://blog.cloudflare.com/how-to-monkey-patch-the-linux-kernel"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.blurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}