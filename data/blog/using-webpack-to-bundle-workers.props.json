{
	"locale": "en-us",
	"post": {
		"id": "5d16453b41acde0011a95703",
		"uuid": "4bb313d6-98c8-44eb-bba4-e809609bf70c",
		"title": "Using Webpack to bundle your Workers modules",
		"slug": "using-webpack-to-bundle-workers",
		"html": "<!--kg-card-begin: markdown--><p><em>A brief introduction to bundling your Service Worker scripts.</em></p>\n<p><img src=\"https://images.unsplash.com/photo-1523212727988-82c430c79c8e?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjExNzczfQ&amp;s=3559691819466e795dc97c7afd29aeb8\" alt=\"\" loading=\"lazy\"><br>\n<small>Photo by <a href=\"https://unsplash.com/@joyceromero?utm_source=ghost&amp;utm_medium=referral&amp;utm_campaign=api-credit\">Joyce Romero</a> / <a href=\"https://unsplash.com/?utm_source=ghost&amp;utm_medium=referral&amp;utm_campaign=api-credit\">Unsplash</a></small></p>\n<pre><code class=\"language-javascript\">// The simplest Service Worker: A passthrough script\naddEventListener('fetch', event =&gt; {\n  event.respondWith(fetch(event.request))\n})\n</code></pre>\n<p>The code above is simple and sweet: when a request comes into one of Cloudflare’s data centers, passthrough to the origin server. There is <em>absolutely no need</em> for us to introduce any complex tooling or dependencies. Nevertheless, introduce we will! The problem is, once your script grows even just a little bit, you’ll be tempted to use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import\">JavaScript’s fancy new module system</a>. However, in doing so, you’ll have a little bit of trouble uploading your script via our API (we only accept a single JS file).</p>\n<p>Throughout this post, we’ll use contrived examples, shaky metaphors, and questionably accurate weather predictions to explain how to bundle your Service Worker with <a href=\"https://webpack.js.org/\">Webpack</a>.</p>\n<h3 id=\"webpack\">Webpack</h3>\n<p>Let’s just say Webpack is a module bundler. That is, if you have code in multiple files, and you tie them together like this:</p>\n<h4 id=\"appjs\">app.js</h4>\n<pre><code class=\"language-javascript\">// Import the CoolSocks class from dresser.js\nimport { CoolSocks } from './dresser'\nimport { FancyShoes } from './closet'\n</code></pre>\n<p>Then you can tell webpack to follow all of those import statements to produce a single file. This is useful because Service Workers running on Cloudflare need to be a single file as well.</p>\n<h3 id=\"showmethecode\">Show me the code</h3>\n<p>Remember when I said something about predicting weather? Let’s build a worker with TypeScript that responds with the current weather.</p>\n<p>Make sure to have <a href=\"https://nodejs.org\">NodeJS</a> installed.</p>\n<pre><code class=\"language-bash\"># Make a new project directory\nmkdir weather-worker\ncd weather-worker\nmkdir src dist\n# Initialize project and install dependencies\nnpm init\nnpm install --save-dev \\\n  awesome-typescript-loader \\\n  typescript \\\n  webpack \\\n  webpack-cli \\\n  workers-preview\ntouch src/index.ts src/fetch-weather.ts webpack.config.js tsconfig.json\n</code></pre>\n<p>You should now have a file in your project called <code>package.json</code>. Add the following code to that file:</p>\n<pre><code class=\"language-javascript\">  &quot;scripts&quot;: {\n    &quot;build&quot;: &quot;webpack&quot;,\n    &quot;build:watch&quot;: &quot;webpack --watch&quot;,\n    &quot;preview&quot;: &quot;workers-preview &lt; dist/bundle.js&quot;\n  }\n</code></pre>\n<p>Now edit the following files to match what is shown:</p>\n<h4 id=\"tsconfigjson\">tsconfig.json</h4>\n<pre><code class=\"language-javascript\">{\n  &quot;compilerOptions&quot;: {\n    &quot;module&quot;: &quot;commonjs&quot;,\n    &quot;target&quot;: &quot;esnext&quot;,\n    &quot;lib&quot;: [&quot;es2015&quot;, &quot;webworker&quot;],\n    &quot;jsx&quot;: &quot;react&quot;,\n    &quot;noImplicitAny&quot;: true,\n    &quot;preserveConstEnums&quot;: true,\n    &quot;outDir&quot;: &quot;./dist&quot;,\n    &quot;moduleResolution&quot;: &quot;node&quot;\n  },\n  &quot;include&quot;: [&quot;src/*.ts&quot;, &quot;src/**/*.ts&quot;, &quot;src/*.tsx&quot;, &quot;src/**/*.tsx&quot;]\n}\n</code></pre>\n<h4 id=\"webpackconfigjs\">webpack.config.js</h4>\n<pre><code class=\"language-javascript\">const path = require('path')\n\nmodule.exports = {\n  entry: {\n    bundle: path.join(__dirname, './src/index.ts'),\n  },\n\n  output: {\n    filename: 'bundle.js',\n    path: path.join(__dirname, 'dist'),\n  },\n\n  mode: process.env.NODE_ENV || 'development',\n\n  watchOptions: {\n    ignored: /node_modules|dist|\\.js/g,\n  },\n\n  devtool: 'cheap-module-eval-source-map',\n\n  resolve: {\n    extensions: ['.ts', '.tsx', '.js', '.json'],\n    plugins: [],\n  },\n\n  module: {\n    rules: [\n      {\n        test: /\\.tsx?$/,\n        loader: 'awesome-typescript-loader',\n      },\n    ],\n  },\n}\n</code></pre>\n<p>For newcomers, this file will seem incredibly cryptic. All I can say is just to accept it as magic for now. You’ll eventually understand what’s going on.</p>\n<blockquote>\n<p>A note about <code>devtool: 'cheap-module-eval-source-map'</code>. Specifying this type of sourcemap is fast, lightweight, and results in stacktraces much more representative of your source code. They’re not exact (yet!), but we’re getting there.</p>\n</blockquote>\n<p><img src=\"http://blog.cloudflare.com/content/images/2018/06/Screen-Shot-2018-06-20-at-5.46.48-PM.png\" alt=\"Fiddle Error\" loading=\"lazy\"></p>\n<p><em>Cloudflare fiddle devtools uses source maps to point you to the correct source file. Click through to see the problematic line.</em></p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2018/06/Screen-Shot-2018-06-20-at-5.47.52-PM.png\" alt=\"Fiddle error source\" loading=\"lazy\"></p>\n<h4 id=\"srcindexts\">src/index.ts</h4>\n<pre><code class=\"language-typescript\">import { fetchWeather } from './fetch-weather'\n\naddEventListener('fetch', (event: FetchEvent) =&gt; {\n  event.respondWith(handleRequest(event.request))\n})\n\nasync function handleRequest(request: Request) {\n  const weather = await fetchWeather('austin')\n  const body = `\n    ${weather.location.city}, ${weather.location.region}&lt;br&gt;\n    ${weather.item.condition.temp} ${weather.item.condition.text}\n  `.trim()\n\n  return new Response(body, {\n    headers: { 'Content-Type': 'text/html' },\n  })\n}\n</code></pre>\n<h4 id=\"srcfetchweatherts\">src/fetch-weather.ts</h4>\n<pre><code class=\"language-typescript\">/**\n * Fetch the current weather conditions and forecast for a particular location\n * @param location location string to fetch\n * @param unit temperature units (c or f)\n */\nexport async function fetchWeather(location: string, unit = 'f') {\n  const url = `https://query.yahooapis.com/v1/public/yql?q=select *\n  from weather.forecast\n  where u='${unit}'\n    AND woeid in (\n      select woeid from geo.places(1)\n      where text=&quot;${location}&quot;\n  )&amp;format=json`\n    .split('\\n')\n    .join(' ')\n    // yahoo's api doesn't like spaces unless they're encoded\n    .replace(/\\s/g, '%20')\n\n  const res = await fetch(url)\n\n  if (res.status &gt;= 400) {\n    throw new Error('Bad response from server')\n  }\n\n  const result = await res.json()\n\n  return result.query.results &amp;&amp; result.query.results.channel\n}\n</code></pre>\n<p>Now simply run:</p>\n<pre><code class=\"language-bash\">npm run build &amp;&amp; npm run preview\n</code></pre>\n<p>This ought to build your script and open a page very similar to:</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2018/06/Screen-Shot-2018-06-20-at-5.51.19-PM.png\" alt=\"Workers Fiddle Screenshot\" loading=\"lazy\"></p>\n<p>This is great, but instead of returning the weather for every single resource request, maybe we should only return the weather on pathnames that match a particular pattern. Something like:</p>\n<pre><code>GET /weather/:city\nGET /weather/austin\nGET /weather/toronto\n</code></pre>\n<p>In that pattern, <code>city</code> is a variable. Anything that starts with <code>/weather/</code> will match, and everything after will be our city. This shouldn’t match a path like <code>/weather/austin/tatious</code>. Luckily there are off-the-shelf solutions on npm to handle exactly this sort of logic.</p>\n<h3 id=\"loadingnodemodules\">Loading node modules</h3>\n<p>Webpack also understands how to import npm modules into your bundle. To illustrate this, we’re going to use the fantastic <a href=\"https://www.npmjs.com/package/path-to-regexp\">path-to-regexp</a> module.</p>\n<p>Install and save the module:</p>\n<pre><code class=\"language-bash\">npm install -S path-to-regexp\n</code></pre>\n<p>The path-to-regexp module converts the url path pattern <code>/weather/:city</code> to a regular expression. Using that regular expression, we can extract the variable <code>city</code> out of a pathname string. For instance, in the string ‘/weather/toronto’, the city variable is ‘toronto’. However, for the string ‘/users/123’, there is no match at all.</p>\n<p>Let’s modify our <code>src/index.ts</code> file to include this new routing logic.</p>\n<h4 id=\"srcindexts\">src/index.ts</h4>\n<pre><code class=\"language-typescript\">import * as pathToRegExp from 'path-to-regexp'\nimport { fetchWeather } from './fetch-weather'\n\ntype TWeatherRequestParams = { city: string }\nconst weatherPath = '/weather/:city'\n\naddEventListener('fetch', (event: FetchEvent) =&gt; {\n  // Create a regular expression based on the pathname of the request\n  const weatherPathKeys: pathToRegExp.Key[] = []\n  const weatherRegex = pathToRegExp(weatherPath, weatherPathKeys)\n  const url = new URL(event.request.url)\n  const result = weatherRegex.exec(url.pathname)\n\n  // No result, return early and passthrough\n  if (!Array.isArray(result)) return\n\n  // Build the request parameters object\n  const params = weatherPathKeys.reduce(\n    (params, key, i) =&gt; {\n      params[key.name as keyof TWeatherRequestParams] = result[i + 1]\n      return params\n    },\n    {} as TWeatherRequestParams,\n  )\n\n  event.respondWith(handleWeatherRequest(params))\n})\n\nasync function handleWeatherRequest(params: TWeatherRequestParams) {\n  const weather = await fetchWeather(params.city)\n  const body = `\n    ${weather.location.city}, ${weather.location.region}&lt;br&gt;\n    ${weather.item.condition.temp} ${weather.item.condition.text}\n  `.trim()\n\n  return new Response(body, {\n    headers: { 'Content-Type': 'text/html' },\n  })\n}\n</code></pre>\n<p>Notice that after installing the module, all we have to do is import by its name on npm. This is because webpack knows to look inside of your node_modules directory to resolve import statement paths.</p>\n<p>Run:</p>\n<pre><code class=\"language-bash\">npm run build &amp;&amp; npm run preview -- \\\n  --preview-url https://foo.bar.com/weather/austin\n</code></pre>\n<p>You should see the weather for Austin, TX displayed. Congrats!</p>\n<h3 id=\"conclusion\">Conclusion</h3>\n<p>Webpack is an incredibly robust and configurable piece of technology. It’s not just a module bundler, but rather a general static asset build system for web development.  Although it was built with front-end assets in mind, it’s a perfect fit for bundling Cloudflare Service Workers.</p>\n<p>You can view the full source of our weather script here: <a href=\"https://github.com/jrf0110/weather-workers\">github.com/jrf0110/weather-workers</a></p>\n<hr>\n<p><em><small>If you have a worker you'd like to share, or want to check out workers from other Cloudflare users, visit the <a href=\"https://community.cloudflare.com/tags/recipe-exchange\">“Recipe Exchange”</a> in the Workers section of the <a href=\"https://community.cloudflare.com/c/developers/workers\">Cloudflare Community Forum</a>. </small></em></p>\n<!--kg-card-end: markdown-->",
		"comment_id": "5b2ad6f17cbc6900bf7f432f",
		"feature_image": "http://blog.cloudflare.com/content/images/2018/06/photo-1523212727988-82c430c79c8e.jpg",
		"featured": false,
		"visibility": "public",
		"created_at": "2018-06-20T23:36:33.000+01:00",
		"updated_at": "2019-09-25T21:34:18.000+01:00",
		"published_at": "2018-06-25T15:16:14.000+01:00",
		"custom_excerpt": "Throughout this post, we’ll use contrived examples, shaky metaphors, and questionably accurate weather predictions to explain how to bundle your Service Worker with Webpack.",
		"codeinjection_head": null,
		"codeinjection_foot": null,
		"custom_template": null,
		"canonical_url": null,
		"authors": [
			{
				"id": "5d1644b141acde0011a94f7a",
				"name": "John Fawcett",
				"slug": "john-fawcett",
				"profile_image": "http://blog.cloudflare.com/content/images/2017/03/767070.jpg",
				"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-6.png",
				"bio": null,
				"website": null,
				"location": null,
				"facebook": null,
				"twitter": null,
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/john-fawcett/"
			}
		],
		"tags": [
			{
				"id": "64a3e2b834124c000b00b717",
				"name": "Developer Platform",
				"slug": "developer-platform",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developer-platform/"
			},
			{
				"id": "5d16450341acde0011a95253",
				"name": "Cloudflare Workers",
				"slug": "workers",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/workers/"
			},
			{
				"id": "5d16450341acde0011a95252",
				"name": "Serverless",
				"slug": "serverless",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Serverless.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Serverless",
				"meta_description": "Cloudflare blog posts tagged 'serverless'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/serverless/"
			},
			{
				"id": "5d16450341acde0011a95165",
				"name": "JavaScript",
				"slug": "javascript",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/javascript/"
			},
			{
				"id": "5d16450341acde0011a95204",
				"name": "Developers",
				"slug": "developers",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Developers-1.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Developers",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Developers'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developers/"
			}
		],
		"primary_author": {
			"id": "5d1644b141acde0011a94f7a",
			"name": "John Fawcett",
			"slug": "john-fawcett",
			"profile_image": "http://blog.cloudflare.com/content/images/2017/03/767070.jpg",
			"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-6.png",
			"bio": null,
			"website": null,
			"location": null,
			"facebook": null,
			"twitter": null,
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/john-fawcett/"
		},
		"primary_tag": {
			"id": "64a3e2b834124c000b00b717",
			"name": "Developer Platform",
			"slug": "developer-platform",
			"description": null,
			"feature_image": null,
			"visibility": "public",
			"meta_title": null,
			"meta_description": null,
			"og_image": null,
			"og_title": null,
			"og_description": null,
			"twitter_image": null,
			"twitter_title": null,
			"twitter_description": null,
			"codeinjection_head": null,
			"codeinjection_foot": null,
			"canonical_url": null,
			"accent_color": null,
			"url": "http://blog.cloudflare.com/tag/developer-platform/"
		},
		"url": "http://blog.cloudflare.com/using-webpack-to-bundle-workers/",
		"excerpt": "Throughout this post, we’ll use contrived examples, shaky metaphors, and questionably accurate weather predictions to explain how to bundle your Service Worker with Webpack.",
		"reading_time": 5,
		"access": true,
		"comments": false,
		"og_image": null,
		"og_title": null,
		"og_description": null,
		"twitter_image": null,
		"twitter_title": null,
		"twitter_description": null,
		"meta_title": null,
		"meta_description": null,
		"email_subject": null,
		"frontmatter": null,
		"feature_image_alt": null,
		"feature_image_caption": null
	}
}