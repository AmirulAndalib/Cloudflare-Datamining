{
	"locale": "en-us",
	"post": {
		"access": true,
		"authors": [
			{
				"id": "660b2261a5fcdf000a08f418",
				"name": "Mark Dembo",
				"slug": "mark-dembo",
				"profile_image": "http://blog.cloudflare.com/content/images/2024/04/unnamed-1.jpg",
				"cover_image": null,
				"bio": null,
				"website": "https://www.linkedin.com/in/mdembo",
				"location": "Munich, Germany",
				"facebook": null,
				"twitter": null,
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/mark-dembo/"
			},
			{
				"id": "660b23aea5fcdf000a08f41f",
				"name": "Shant Marouti",
				"slug": "shant",
				"profile_image": "http://blog.cloudflare.com/content/images/2024/04/image8.png",
				"cover_image": null,
				"bio": "Staff Software Engineer @ Picsart",
				"website": null,
				"location": null,
				"facebook": null,
				"twitter": "@shantmarouti",
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/shant/"
			}
		],
		"canonical_url": null,
		"codeinjection_foot": null,
		"codeinjection_head": null,
		"comment_id": "660b2445a5fcdf000a08f426",
		"comments": false,
		"created_at": "2024-04-01T22:16:53.000+01:00",
		"custom_excerpt": "Picsart, one of the world’s largest digital creation platforms, encountered performance challenges in catering to its global audience. Adopting Cloudflare's global-by-default Developer Platform emerged as the optimal solution, empowering Picsart to enhance performance and scalability substantially",
		"custom_template": null,
		"email_subject": null,
		"excerpt": "Picsart, one of the world’s largest digital creation platforms, encountered performance challenges in catering to its global audience. Adopting Cloudflare's global-by-default Developer Platform emerged as the optimal solution, empowering Picsart to enhance performance and scalability substantially",
		"feature_image": "http://blog.cloudflare.com/content/images/2024/04/image5-1.png",
		"feature_image_alt": "How Picsart leverages Cloudflare's Developer Platform to build globally performant services",
		"feature_image_caption": null,
		"featured": false,
		"frontmatter": null,
		"html": "<figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2024/04/image5.png\" class=\"kg-image\" alt=\"How Picsart leverages Cloudflare's Developer Platform to build globally performant services\" loading=\"lazy\" width=\"1999\" height=\"1125\"></figure><p>Delivering great user experiences with a global user base can be challenging. While serving requests quickly when you start out in a local market is straightforward, doing so for a global audience is much more difficult. Why? Even under optimal conditions, you cannot be faster than the speed of light, which brings single data center solutions to their performance limits.</p><p>In this post, we will cover how Picsart improved the performance of one of its most critical services by moving from a centralized architecture to a globally distributed service built on Cloudflare. Our serverless compute platform, <a href=\"https://developers.cloudflare.com/workers/\">Workers</a>, distributed throughout <a href=\"https://www.cloudflare.com/network/\">310+ cities</a> around the world, and our globally distributed <a href=\"https://developers.cloudflare.com/kv/\">Workers KV</a> storage allowed them to improve their performance significantly and drive real business impact.</p><h2 id=\"success-driven-by-data-driven-insights\">Success driven by data-driven insights</h2><p><a href=\"https://picsart.com\">Picsart</a> is one of the world’s largest digital creation platforms and a long-standing Cloudflare partner. At its core, an advanced tech stack powers its comprehensive features, including AI-driven photo and video editing tools and community-driven content sharing. With its infrastructure spanning across multiple cloud environments and on-prem deployments, Picsart is engineered to handle billions of daily requests from its huge mobile and web user base and API integrations. For over a decade, Cloudflare has been integral to Picsart, providing support for performant content delivery and securing its digital ecosystem.  </p><p>Similar to many other tech giants, Picsart approaches product development in a data-driven way. At the core of the innovation is Picsart's remote configuration and experimentation platform, which enables product managers, UX researchers, and others to segment their user base into different test groups. These test groups might get to see slightly different implementations of features or designs of the Picsart app. Users might also get early access to experimental features or see different in-app promotions. In combination with constant monitoring of relevant KPIs, this allows for informed product decisions based on user preference and business impact.</p><p>On each app start, the client device sends a request to the remote configuration service for the latest setup tailored to the user's session. The assignment of experiments relies on factors like the operating system and previous sessions, making each request unique and uncachable. Picsart's app showcases extensive remote configuration capabilities, enabling adjustments to nearly every element. This results in a response containing a 1.5 MB configuration file for mobile clients. While the long-term solution is to reduce the file size, which has grown over time as more teams adopted the powerful service, this is not possible in the near or mid-term as it requires a major rewrite of all clients. </p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2024/04/Screenshot-2024-04-01-at-2.47.52-PM.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"752\" height=\"804\"></figure><p>This setup request is blocking in the \"hot path\" during app start, as the results of this request will decide how the app itself looks and behaves. Hence, performance is critical. To ensure users are not waiting for too long, Picsart apps will wait for 1500ms on mobile for the request to complete – if it does not, the user will not be assigned a test group and the app will fallback to default settings.</p><h2 id=\"the-clock-is-ticking\">The clock is ticking</h2><p>While a 1500ms round trip time seems like a sufficiently large time budget, the data suggested otherwise. Before the improvements were implemented, a staggering 50% of devices could not complete the requests in time. How come? In these 1.5 seconds the following steps need to complete:</p><ol><li>The request must travel from the users’ devices to the centralized backend servers</li><li>The server processes the request based on dozens of user attributes provided in the request and thousands of defined remote configuration variations, running experiments, and segments metadata. Using all the info, the server selects the right variation of each remote setting entry and builds the response payload.</li><li>The response must travel from the centralized backend servers to the user devices.</li></ol><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2024/04/image1.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"1999\" height=\"1125\"></figure><p>Looking at the data, it was clear to the Picsart team that their backend service was already well-optimized, taking only 30 milliseconds, a tiny fraction of the available time budget, to process each of the billions of monthly requests. The bulk of the request time came from <a href=\"https://www.cloudflare.com/learning/performance/glossary/what-is-latency/\">network latency</a>. Especially with mobile devices, last mile performance can be very volatile, eating away a significant amount of the available time budget. Not only that, but the data was clear: users closer to the origin server had a much higher chance of making the round trip in time versus users out of region. It quickly became obvious that Picsart, fueled by its global success, had outgrown a single-region setup.</p><h2 id=\"to-the-drawing-board\">To the drawing board</h2><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2024/04/image6.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"1999\" height=\"1126\"></figure><p>A solution that comes to mind would be to replicate the existing cloud infrastructure in multiple regions and use global load balancing to minimize the distance a request needs to travel. However, this introduces significant overhead and cost. On the infrastructure side, it is not only the additional compute instances and database clusters that incur cost, but also cross-region data transfer to keep data in sync. Moreover, technical teams would need to operate and monitor infrastructure in multiple regions, which can add a lot to the complexity and cognitive load, leading to decreased development velocity and productivity loss.</p><p>Picsart instead looked to Cloudflare – we already had a long-lasting relationship for <a href=\"https://www.cloudflare.com/application-services/\">Application Performance and Security</a>, and they aimed to use our <a href=\"https://www.cloudflare.com/developer-platform/\">Developer Platform</a> to tackle the problem.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2024/04/image2.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"1999\" height=\"1126\"></figure><p>Workers and Workers KV seemed like the ideal solution. Both compute and data are globally distributed in <a href=\"https://www.cloudflare.com/network\">310+ locations around the world</a>, resulting in a shorter distance between end users and the experimentation service. Not only that, but Cloudflare's global-by-default approach allows for deployment with minimal overhead, and in contrast to other considered solutions, no additional fees to distribute the data around the globe.</p><h2 id=\"no-race-without-a-clock\">No race without a clock</h2><p>The objective for the refactor of the experimentation service was to increase the share of devices that successfully receive experimentation configuration within the set time budget.</p><p>But how to measure success? While synthetic testing can be useful in many situations, Picsart opted to come up with another clever solution:<br><br>During development, the Picsart engineers had already added a testing endpoint to the web and mobile versions of their app that sends a duplicate request to the new endpoint, discarding the response and swallowing all potential errors. This allows them to collect timing data based on real-user metrics without impacting the app's performance and reliability. </p><p>A simplified version of this pattern for a web client could look like this:</p><pre><code class=\"language-js\">// API endpoint URLs\nconst prodUrl = 'https://prod.example.com/';\nconst devUrl = 'https://new.example.com/';\n\n// Function to collect metrics\nconst collectMetrics = (duration) =&gt; {\n    console.log('Request duration:', duration);\n    // …\n};\n\n// Function to fetch data from an endpoint and call collectMetrics\nconst fetchData = async (url, options) =&gt; {\n    const startTime = performance.now();\n    \n    try {\n        const response = await fetch(url, options);\n        const endTime = performance.now();\n        const duration = endTime - startTime;\n        collectMetrics(duration);\n        return await response.json();\n    } catch (error) {\n        console.error('Error fetching data:', error);\n    }\n};\n\n// Fetching data from both endpoints\nasync function fetchDataFromBothEndpoints() {\n    try {\n        const result1 = await fetchData(prodUrl, { method: 'POST', ... });\n        console.log('Result from endpoint 1:', result1);\n\n        // Fetching data from the second endpoint without awaiting its completion\n        fetchData(devUrl, { method: 'POST', ... });\n    } catch (error) {\n        console.error('Error fetching data from both endpoints:', error);\n    }\n}\n\nfetchDataFromBothEndpoints();\n</code></pre><p>Using existing data analytics tools, Picsart was able to analyze the performance of the new services from day one, starting with a dummy endpoint and a 'hello world' response. And with that a v0 was created that did not have the correct logic just yet, but simulated reading multiple values from KV and returning a response of a realistic size back to the end user.</p><h2 id=\"the-need-for-a-do-over\">The need for a do-over</h2><p>In the initial phase, outcomes fell short of expectations. Surprisingly, requests were slower despite the service's proximity to end users. What caused this setback?  Subsequent investigation unveiled multiple culprits and design patterns in need for optimization.</p><h3 id=\"data-segmentation\">Data segmentation</h3><p>The previous, stateful solution operated on a single massive \"blob\" of data exceeding 100MB in value. Loading this into memory incurred a few seconds of initial startup time, but once the VM completed the task, request handling was fast, benefiting from the readily available data in memory.</p><p>However, this approach doesn't seamlessly transition to the serverless realm. Unlike long-running VMs, Worker isolates have short lifespans. Repeatedly parsing large JSON objects led to prolonged compute durations. Simply parsing four KV entries of 25MB each (KV maximum value size is 25MB) on each request was not a feasible option.</p><p>The Picsart team went back to solution design and embarked on a journey to optimize their system's execution time, resulting in a series of impactful improvements. </p><p>The fundamental insight that guided the solution was the unnecessary overhead that was involved in loading and parsing data irrelevant to the user's specific context. The 100MB configuration file contained configurations for all platforms and locations worldwide – a setup that was far from efficient in a globally distributed, serverless compute environment. For instance, when processing requests from users in the United States, there was no need to fetch configurations targeted for users in other countries, or for different platforms.</p><p>To address this inefficiency, the Picsart team stored the configuration of each platform and country in separate KV records. This targeted strategy meant that for a request originating from a US user on an Android device, our system would only fetch and parse the KV record specific to Android users in the US, thereby excluding all irrelevant data. This resulted in approximately 600 KV records, each with a maximum size of 10MB. While this leads to data duplication on the KV storage side, it decreases the amount of data that needs to be parsed upon request. As Cloudflare operates in over 120 countries around the world, only a subset of records were needed in each location. Hence, the increase in cardinality had minimal impact on KV cache performance, as demonstrated by more than 99.5% of KV reads being served from local cache.</p><!--kg-card-begin: html--><table style=\"margin-left:auto;margin-right:auto;\">\n  <tr>\n    <td><b>Key</b></td>\n    <td><b>Size</b></td>\n  </tr>\n  <tr>\n    <td>settings_part1.json</td>\n    <td>25MB</td>\n  </tr>\n  <tr>\n    <td>settings_part2.json</td>\n    <td>25MB</td>\n  </tr>\n  <tr>\n    <td>…</td>\n    <td>….</td>\n  </tr>  \n</table>\n<small><center>Before (simplified)</center></small><!--kg-card-end: html--><!--kg-card-begin: html--><table style=\"margin-left:auto;margin-right:auto;\">\n  <tr>\n    <td><b>Key</b></td>\n    <td><b>Size</b></td>\n  </tr>\n  <tr>\n    <td>com.picsart.studio_apple_us.json</td>\n    <td>6.1MB</td>\n  </tr>\n  <tr>\n    <td>com.picsart.studio_apple_de.json</td>\n    <td>6.1MB</td>\n  </tr>\n  <tr>\n    <td>com.picsart.studio_android_us.json</td>\n    <td>5.9MB</td>\n  </tr>  \n  <tr>\n    <td>…</td>\n    <td>…</td>\n  </tr>  \n</table>\n<small><center>After (simplified)</center></small><br><br><!--kg-card-end: html--><p>This approach was a significant move for Picsart as they transitioned from a regional cloud setup to Cloudflare's globally distributed connectivity cloud. By serving data from close proximity to end user locations, they were able to combat the high network latency from their previous setup. This strategy radically transformed the data-handling process. Which unlocked two major benefits:</p><ul><li>Performance Gains<strong>:</strong> By ensuring that only the relevant subset of data is fetched and parsed based on the user's platform and geographical location, wall time and compute resources required for these operations could be significantly reduced.</li><li>Scalability and Flexibility: the granular segmentation of data enables effortless scaling of the service for new features or regional content. Adding support for new applications now only requires inserting new, standalone KV records in contrast to the previous solution where this would require increasing the size of the single record.</li></ul><h3 id=\"immutable-updates\">Immutable updates</h3><p>Now that changes to the configuration were segmented by app, country, and platform, this also allowed for individual updates of the configuration in KV. KV storage showcases its best performance when records are updated infrequently but read very often. This pattern leverages <a href=\"https://developers.cloudflare.com/kv/reference/how-kv-works/\">KV's fundamental design</a> to cache values at edge locations upon reads, ensuring that subsequent queries for the same record are swiftly served by local caches rather than requiring a trip back to KV's centralized data centers. This architecture is fundamental for minimizing latency and maximizing the speed of data retrieval across a globally distributed platform.</p><p>A crucial requirement for Picsart’s experimentation system was the ability to propagate updates of remote configuration values immediately. Updating existing records would require very short cache TTLs and even the minimum KV cache TTL of 60 seconds was considered unacceptable for the dynamic nature of the feature flagging. Moreover, setting short <a href=\"https://www.cloudflare.com/learning/cdn/glossary/time-to-live-ttl/\">TTLs</a> also impacts the <a href=\"https://www.cloudflare.com/learning/cdn/what-is-a-cache-hit-ratio/\">cache hit ratio</a> and the overall KV performance, specifically in regions with low traffic.</p><p>To reconcile the need for both rapid updates and efficient caching, Picsart adopted an innovative approach: making KV records immutable. Instead of modifying existing records, they opted to create new records with each configuration change. By appending the content hash to the KV key and writing new records after each update, Picsart ensured that each record was unique and immutable. This allowed them to leverage higher cache TTLs, as these records would never be updated.</p><!--kg-card-begin: html--><table style=\"margin-left:auto;margin-right:auto;\">\n  <tr>\n    <td><b>Key</b></td>\n    <td><b>TTL</b></td>\n  </tr>\n  <tr>\n    <td>com.picsart.studio_apple_us.json\n      </td>\n    <td>60s</td>\n  </tr>  \n    <tr>\n    <td>…</td>\n    <td>….</td>\n  </tr>  \n</table>\n<small><center>Before (simplified)</center></small><!--kg-card-end: html--><!--kg-card-begin: html--><table style=\"margin-left:auto;margin-right:auto;\">\n  <tr>\n    <td><strong>Key</strong></td>\n    <td><strong>TTL</strong></td>\n  </tr>\n  <tr>\n    <td>com.picsart.studio_apple_us_b58b59.json</td>\n    <td>86400s</td>\n  </tr>\n  <tr>\n    <td>com.picsart.studio_apple_us_273678.json</td>\n    <td>86400s</td>\n  </tr>\n  <tr>\n    <td>-</td>\n    <td>…</td>\n  </tr>  \n</table>\n<small><center>After (simplified)</center></small><br><br><!--kg-card-end: html--><p>There was a catch, though. The service must now keep track of the correct KV keys to use. The Picsart team addressed this challenge by storing references to the latest KV keys in the environment variables of the Worker. </p><p>Each configuration change triggers a new KV pair to be written and the services' environment variables to be updated. As global Workers deployments take mere seconds, changes to the experimentation and configuration data are near-instantaneously globally available.</p><h3 id=\"json-serialization-alternatives\">JSON serialization &amp; alternatives</h3><p>Following the previous improvements, the Picsart team made another significant discovery: only a small fraction of configuration data is needed to assign the experiments, while the remaining majority of the data comprises JSON values for the remote configuration payloads. While the service must deliver the latter in the response, the data is not required during the initial processing phase. </p><p>The initial implementation used <a href=\"https://developers.cloudflare.com/kv/api/read-key-value-pairs/\">KV's get()</a> method to retrieve the configuration data with the parameter type=<code>json</code>, which converts the KV value to an object. This process is very compute-intensive compared to using the <code>get()</code> method with parameter type= <code>text</code>, which simply returns the value as a string. In the context of Picsart's data, the bulk of the CPU cycles were wasted on serializing JSON data that is not needed to perform the required business logic.</p><p>What if the data structure and code could be changed in such a way that only the data needed to assign experiments was parsed as JSON, while the configuration values were treated as text? Picsart went ahead with a new approach: splitting the KV records into two, creating a small 300 KB record for the metadata, which can be quickly parsed to an object, and a 9.7 MB record of configuration values. The extracted configuration values are delimited by newline characters. The respective line number is used as reference in the metadata entry, so that the respective configuration value for an experiment can be merged back into the payload response later.</p><!--kg-card-begin: html--><table>\n  <tr>\n    <td colspan=\"2\" style=\"border: none\">\n      <code style=\"display: block\">\n        {<br />\n        &nbsp;&nbsp;\"name\": \"shape_replace_items\",<br />\n        &nbsp;&nbsp;\"default_value\": \"&lt;large json object&gt;\",<br />\n        &nbsp;&nbsp;\"segments\": [<br />\n        &nbsp;&nbsp;&nbsp;&nbsp;{<br />\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"id\": \"f1244\",<br />\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"value\": \"&lt;Another json object\n        json object&gt;\"<br />\n        &nbsp;&nbsp;&nbsp;&nbsp;},<br />\n        &nbsp;&nbsp;&nbsp;&nbsp;{<br />\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"id\": \"a2lfd\",<br />\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"value\": \"&lt;Yet another large json\n        object&gt;\"<br />\n        &nbsp;&nbsp;&nbsp;&nbsp;}<br />\n        &nbsp;&nbsp;]<br />\n        }<br />\n      </code>\n    </td>\n  </tr>\n  <tr>\n    <td colspan=\"2\" style=\"border: none\">\n      <figcaption style=\"margin: 0; margin-bottom: 1em\">\n        <em>Before: Metadata and Values in one JSON object (simplified)</em>\n      </figcaption>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top; border: none\">\n      <code style=\"display: block\">\n        // com.picsart.studio_apple_am_metadata<br />\n        <br />\n        1 {<br />\n        2&nbsp;&nbsp; \"name\": \"shape_replace_items\",<br />\n        3&nbsp;&nbsp; \"default_value\": 1,<br />\n        4&nbsp;&nbsp; \"segments\": [<br />\n        5&nbsp;&nbsp;&nbsp;&nbsp; {<br />\n        6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"id\": \"f1244\",<br />\n        7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"value\": 2<br />\n        8&nbsp;&nbsp;&nbsp;&nbsp; },<br />\n        9&nbsp;&nbsp;&nbsp;&nbsp; {<br />\n        10&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"id\": \"a2lfd\",<br />\n        11&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"value\": 3<br />\n        12&nbsp;&nbsp;&nbsp;&nbsp; }<br />\n        13&nbsp;&nbsp; ]<br />\n        14 }<br />\n      </code>\n    </td>\n    <td style=\"vertical-align: top; border: none\">\n      <code style=\"display: block\">\n        // com.picsart.studio_apple_am_values<br />\n        <br />\n        1 &quot;&lt;large json object&gt;&quot;<br />\n        2 &quot;&lt;Another json object&gt;&quot;<br />\n        3 &quot;&lt;Yet another json object&gt;&quot;<br />\n      </code>\n    </td>\n  </tr>\n  <tr>\n    <td colspan=\"2\" style=\"border: none\">\n      <figcaption style=\"margin: 0; margin-bottom: 1em\">\n        <em>After: Metadata and Values are split (simplified)</em>\n      </figcaption>\n    </td>\n  </tr>\n</table><!--kg-card-end: html--><p>After calculating the experiments and selecting the correct variants based solely on the small metadata entry, the service constructs a JSON string for the response containing placeholders for the actual values that reference the corresponding line numbers in the separate text file. To finalize the response, the server replaces the placeholders with the corresponding serialized JSON strings from the text file. This approach circumvents the need for parsing and re-serializing large JSON objects and helps to avoid a significant computational overhead.</p><p>Note that the process of parsing the metadata JSON and determining the correct experiments as well as the loading of the large file with configuration values are executed in parallel, saving additional milliseconds.</p><p>By minimizing the size of the JSON data that needed to be parsed and leveraging a more efficient method for constructing the final response, the Picsart team managed to not only reduce the response times but also optimize the compute resource usage. This approach reflects a broader principle applicable across the tech industry: that efficiency, particularly in serverless architectures, can often be dramatically improved by rethinking data structure and utilization.</p><h2 id=\"getting-a-head-start\">Getting a head start</h2><p>The changes on the server-side, moving from a single region setup to Cloudflare’s global architecture, paid off massively. Median response times globally dropped by more than 1 second, which was already a huge improvement for the team. However, in looking at the new data, two more paths for client-side optimizations were found.</p><p>As the web and mobile app would call the service at startup, most of the time no active connections to the servers were alive and establishing that connection at request time costs valuable milliseconds. </p><p>For the web version, setting a <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel/preconnect\">pre-connect header</a> on initial page load showed a positive impact. For the mobile app version, the Picsart team took it a step further. Investigation showed that before the connection could be established, three modules had to complete initialization: the error tracker, the HTTP client, and the SDK. Reordering of the modules to initialize the HTTP client first allowed for connection establishment in parallel to the initialization of the SDK and error tracker, again saving time. This resulted in another 200ms improvement for end users.</p><h2 id=\"setting-a-new-personal-best\">Setting a new personal best</h2><p>The day had come, and it was time for the phased rollout, web first and the mobile apps second. With suspense, the team looked at the dashboards, and were pleasantly surprised. The rollout was successful and billions of requests were handled with ease.</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"http://blog.cloudflare.com/content/images/2024/04/image4.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"1999\" height=\"791\"><figcaption><em>Share of successfully delivered experiments</em></figcaption></figure><p>The result? The Picsart apps are loading faster than ever for millions of users worldwide, while the share of successfully delivered experiments increased from 50% to 85%. Median response time dropped from 1500 ms to 280 ms. The response time dropped to 70 ms on the web since the response size is smaller compared to mobile. This translates to a real business impact for Picsart as they can now deliver more personalized and data-driven experiences to even more of their users.</p><h2 id=\"a-bright-future-ahead\">A bright future ahead</h2><p>Picsart is already thinking of the next generation of experimentation. To integrate with Cloudflare even further, the plan is to use Durable Objects to store hundreds of millions of user data records in a decentralized fashion, enabling even more powerful experiments without impacting performance. This is possible thanks to Durable Objects' underlying architecture that stores the user data in-region, close to the respective end user device. </p><p>Beyond that, Picsart’s experimentation team is also planning to onboard external B2B customers to their experimentation platform as Cloudflare's developer platform provides them with the scale and global network to handle more traffic and data with ease.</p><h2 id=\"get-started-yourself\">Get started yourself</h2><p>If you’re also working on or with an application that would benefit from Cloudflare’s speed and scale, check out our developer <a href=\"https://developers.cloudflare.com/workers/\">documentation</a> and <a href=\"https://developers.cloudflare.com/workers/tutorials/\">tutorials</a>, and join our developer <a href=\"https://discord.cloudflare.com/\">Discord</a> to get community support and inspiration.</p>",
		"id": "660b2445a5fcdf000a08f426",
		"meta_description": "Picsart, one of the world’s largest digital creation platforms, encountered performance challenges in catering to its global audience. Adopting Cloudflare's global-by-default Developer Platform emerged as the optimal solution, empowering Picsart to enhance performance and scalability substantially",
		"meta_title": null,
		"og_description": null,
		"og_image": "http://blog.cloudflare.com/content/images/2024/04/How-Picsart-leverages-Cloudflare-s-Developer-Platform-to-build-globally-performant-services-OG-1.png",
		"og_title": null,
		"primary_author": {
			"id": "660b2261a5fcdf000a08f418",
			"name": "Mark Dembo",
			"slug": "mark-dembo",
			"profile_image": "http://blog.cloudflare.com/content/images/2024/04/unnamed-1.jpg",
			"cover_image": null,
			"bio": null,
			"website": "https://www.linkedin.com/in/mdembo",
			"location": "Munich, Germany",
			"facebook": null,
			"twitter": null,
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/mark-dembo/"
		},
		"primary_tag": null,
		"published_at": "2024-04-03T14:00:02.000+01:00",
		"reading_time": 13,
		"slug": "picsart-move-to-workers-huge-performance-gains",
		"tags": [
			{
				"id": "660b2489a5fcdf000a08f42d",
				"name": "#BLOG-2274",
				"slug": "hash-blog-2274",
				"description": null,
				"feature_image": null,
				"visibility": "internal",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/404/"
			},
			{
				"id": "6450636642d421000a133298",
				"name": "Guest Post",
				"slug": "guest-post",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/guest-post/"
			},
			{
				"id": "607030964b1e0f03f340f2d8",
				"name": "Developer Week",
				"slug": "developer-week",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developer-week/"
			},
			{
				"id": "5d16450341acde0011a95204",
				"name": "Developers",
				"slug": "developers",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Developers-1.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Developers",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Developers'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developers/"
			},
			{
				"id": "64a3e2b834124c000b00b717",
				"name": "Developer Platform",
				"slug": "developer-platform",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developer-platform/"
			},
			{
				"id": "5d16450341acde0011a95278",
				"name": "Cloudflare Workers KV",
				"slug": "cloudflare-workers-kv",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/cloudflare-workers-kv/"
			},
			{
				"id": "5d16450341acde0011a95253",
				"name": "Cloudflare Workers",
				"slug": "workers",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/workers/"
			},
			{
				"id": "65c0d31851a92e000adeae66",
				"name": "#front-page",
				"slug": "hash-front-page",
				"description": null,
				"feature_image": null,
				"visibility": "internal",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/404/"
			},
			{
				"id": "65049bb4efd8e7000a705255",
				"name": "Connectivity Cloud",
				"slug": "connectivity-cloud",
				"description": "Discover the connectivity cloud. Regain control while connecting and protecting your people, apps and data everywhere.",
				"feature_image": "http://blog.cloudflare.com/content/images/2023/09/ConnCloud-Lilypad-2.png",
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/connectivity-cloud/"
			}
		],
		"title": "How Picsart leverages Cloudflare's Developer Platform to build globally performant services",
		"twitter_description": null,
		"twitter_image": "http://blog.cloudflare.com/content/images/2024/04/How-Picsart-leverages-Cloudflare-s-Developer-Platform-to-build-globally-performant-services-OG.png",
		"twitter_title": null,
		"updated_at": "2024-06-22T01:14:27.000+01:00",
		"url": "http://blog.cloudflare.com/picsart-move-to-workers-huge-performance-gains/",
		"uuid": "83afcaef-e155-4a07-9834-2cca18af2fcd",
		"visibility": "public"
	}
}