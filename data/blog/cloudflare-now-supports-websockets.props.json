{
	"locale": "en-us",
	"post": {
		"access": true,
		"authors": [
			{
				"id": "5d1644b141acde0011a94f2d",
				"name": "Matthew Prince",
				"slug": "matthew-prince",
				"profile_image": "http://blog.cloudflare.com/content/images/2023/06/Matthew-Prince-3.jpeg",
				"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-79.png",
				"bio": "A little bit geek, wonk, and nerd. Repeat entrepreneur, recovering lawyer, and former ski instructor. Co-founder & CEO of Cloudflare (NYSE: NET).",
				"website": null,
				"location": "San Francisco, CA",
				"facebook": null,
				"twitter": "@eastdakota",
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/matthew-prince/"
			}
		],
		"canonical_url": null,
		"codeinjection_foot": null,
		"codeinjection_head": null,
		"comment_id": "4137",
		"comments": false,
		"created_at": "2014-08-20T11:03:46.000+01:00",
		"custom_excerpt": "I'm pleased to announce that CloudFlare now supports WebSockets. The ability to protect and accelerate WebSockets has been one of our most requested features.",
		"custom_template": null,
		"email_subject": null,
		"excerpt": "I'm pleased to announce that CloudFlare now supports WebSockets. The ability to protect and accelerate WebSockets has been one of our most requested features.",
		"feature_image": "http://blog.cloudflare.com/content/images/2018/08/353771997_b55e34f321_z.jpg",
		"feature_image_alt": null,
		"feature_image_caption": null,
		"featured": false,
		"frontmatter": null,
		"html": "<!--kg-card-begin: markdown--><p><img alt=\"\" src=\"http://blog.cloudflare.com/content/images/353771997_b55e34f321_z.jpg\"><noscript><img alt=\"\" src=\"http://blog.cloudflare.com/content/images/353771997_b55e34f321_z.jpg\"></noscript><br>\n<small>CC BY 2.0 from <a href=\"https://www.flickr.com/photos/exfordy/\">Brian Snelson</a></small></p>\n<p>I'm pleased to announce that CloudFlare now supports WebSockets. The ability to protect and accelerate WebSockets has been one of our most requested features. As of today, CloudFlare is rolling out WebSocket support for any Enterprise customer, and a limited set of CloudFlare Business customers. Over the coming months, we expect to extend support to all Business and Pro customers.</p>\n<p>We're rolling out WebSockets slowly because it presents a new set of challenges. The story below chronicles the challenges of supporting WebSockets, and what we’ve done to overcome them.</p>\n<h3 id=\"thewebbeforewebsockets\">The Web Before WebSockets</h3>\n<p>Before diving into WebSockets, it's important to understand HTTP—the traditional protocol of the web. HTTP supports a number of different <a href=\"http://tools.ietf.org/html/rfc7231#section-4\">methods</a> by which a request can be sent to a server. When you click on a traditional link you are sending a GET request to a web server. The web server receives the request, then sends a response.</p>\n<p>When you submit a web form (such as when you're giving your username and password when logging into an account) you use another HTTP method called POST, but the interaction is functionally the same. Your browser (called the ‘client’) sends data to the web server which is waiting to receive it. The web server then sends a response back to your browser. Your browser accepts the response because it's waiting for it after having sent the original request.</p>\n<p>Regardless of the HTTP method, the communication between your browser and the web server operates in this lockstep request then response fashion. Once the client's browser has sent the request, it can't be modified.</p>\n<p><img alt=\"\" src=\"http://blog.cloudflare.com/content/images/owa.gif\"><noscript><img alt=\"\" src=\"http://blog.cloudflare.com/content/images/owa.gif\"></noscript></p>\n<p>In order to get new content, the user had to refresh the full page. This was the state of the web until 1999 when the Outlook Web team, unhappy with poor user experience, introduced a custom extension to Internet Explorer called XMLHttpRequest (aka AJAX). From then on web applications could use JavaScript to trigger HTTP requests programmatically in the background without the need of full page refresh.</p>\n<p>However, to make sure the page on the client's browser is up to date, the JavaScript needed to trigger the AJAX request every few seconds. This is like asking the web server all the time: is there anything new yet? is there anything new yet?... This works, but it's not particularly efficient.</p>\n<p>Ideally, what you'd want is a persistent open connection between the browser and the server allowing them to exchange data in real-time, not just when data is requested.</p>\n<p>Prior to WebSockets, there were a few attempts at creating a persistent open connection. These would effectively open an HTTP request, and hold it open for an extended period of time. There were various solutions referred by the name “Comet”. Although they generally worked, they were pretty much a hack with limited functionality and often imposed more overhead than necessary. What was needed was a new protocol supported by both browsers and servers.</p>\n<h3 id=\"enterwebsockets\">Enter WebSockets</h3>\n<p>WebSockets were adopted as a standard web protocol in 2011. Today, they’re supported by all modern versions of major browsers. The WebSocket protocol is a distinct TCP-based protocol, however, it’s initiated by an HTTP request which is then &quot;upgraded&quot; to create a persistent connection between the browser and the server. A WebSocket connection is bidirectional: the server can send data to the browser without the browser having to explicitly ask for it. This makes things like multiplayer games, chat, and other services that require real-time exchange of information possible over a standard web protocol.</p>\n<p>CloudFlare is built on a modified version of the NGINX web server, and NGINX began supporting WebSocket proxying <a href=\"http://nginx.org/en/docs/http/websocket.html\">beginning with version 1.3.13 (February 2013)</a>. As soon as NGINX proxying support was in place, we investigated how we could support WebSockets for our customers. The challenge was that WebSockets have a very different connection profile, and CloudFlare wasn't originally optimized for that profile.</p>\n<p><img alt=\"\" src=\"http://blog.cloudflare.com/content/images/21613604_dbc3db9f31_o.jpg\"><noscript><img alt=\"\" src=\"http://blog.cloudflare.com/content/images/21613604_dbc3db9f31_o.jpg\"></noscript><br>\n<small>CC BY-SA 2.0 by <a href=\"https://www.flickr.com/photos/fernando/\">Fernando de Sousa</a></small></p>\n<h3 id=\"connectioncounts\">Connection Counts</h3>\n<p>CloudFlare sees a large number of traditional HTTP requests that generate relatively short-lived connections. And, traditionally, we aimed at optimizing our network to support these requests. WebSockets present new challenges because they require much longer lived connections than traditional web requests, and that required changes to our network stack.</p>\n<p>A modern operating system can handle multiple concurrent connections to different network services so long as there's a way to distinguish these connections from each other. One way of making these distinctions is called a &quot;<a href=\"http://en.wikipedia.org/wiki/Tuple\">tuple</a>&quot;. In theory, there are five distinct elements that form a tuple that can differentiate concurrent connections: protocol (e.g., TCP or UDP), the source IP address, the source port, the destination IP address, and the destination port.</p>\n<p>Since CloudFlare is a proxy, there are two connections that matter: connections from browsers to our network, and connections from our network back to our customers' origin web servers. Connections from browsers to our network have highly diverse source IPs so they don’t impose a concurrent connection bottleneck. On the other hand, even before we implemented WebSockets, we've seen constraints based on concurrent connections to our customers' origin servers.</p>\n<h3 id=\"troublewithtuples\">Trouble with Tuples</h3>\n<p>Connections are distinguished using the five tuple elements, two connections can be told apart if any of the five different variables differ. However, in practice, the set is more limited. In the case of CloudFlare's connections to our customers' origins, the protocol for a connection, whether a WebSocket or HTTP, is always TCP. The destination port is also fixed to 80—if it's a non-encrypted connection, or 443—if it's an encrypted connection.</p>\n<p>When CloudFlare first launched, all traffic to each origin server came from only one IP address per CloudFlare server. We found that caused problems with hosting providers' anti-abuse systems. They would see a very large number of requests from a single IP and block it.</p>\n<p>Our solution to this problem was to spread the requests across multiple source IP addresses. We hash the IP address of the client in order to ensure the same browser will connect via the same IP address, since some older web applications use the connecting IP address as part of their session formula. Now we have at least 256 IPs for origin traffic in each data center. Each server will have a handful of these addresses to use for traffic to and from the origin.</p>\n<p>While it seems like the number of possible connections would be nearly infinite given the five different variables in the tuple, practical realities limit the connection counts quickly. There's only one possibility for the protocol, destination port, and destination IP. For the source IP, we are limited by the number of IP addresses dedicated to connecting to the origin. That leaves the source port, which ends up being the biggest driver in the number of connections you can support per server.</p>\n<p><img alt=\"\" src=\"http://blog.cloudflare.com/content/images/6658919861_960672de45_z.jpg\"><noscript><img alt=\"\" src=\"http://blog.cloudflare.com/content/images/6658919861_960672de45_z.jpg\"></noscript><br>\n<small>CC BY-ND 2.0</small></p>\n<h3 id=\"pickingports\">Picking Ports</h3>\n<p>The number of available ports is defined as a 16-bit number. That allows a maximum of 65,536 theoretical ports, but, in practice, the number of ports available to act as a source port is more limited.</p>\n<p>The list of ports that can be used as a source port is known as the <a href=\"http://en.wikipedia.org/wiki/Ephemeral_port\">Ephemeral Port Range</a>. The standards organization in charge of such things, known as IANA, recommends that the operating system pick a source port between 49152 and 65535. If you follow IANA's recommendations for the Ephemeral Port Range, there are only 16,384 available source ports.</p>\n<p>The ports in range 1 - 1023, know as &quot;<a href=\"http://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers#Well-known_ports\">Well Known Ports&quot;</a>, are specially reserved and excluded from the Ephemeral Port Range.</p>\n<p>At CloudFlare, we have a good sense of what will be connecting across the IPs on our network so we're comfortable expanding our Ephemeral Port Range to span from 9024 through 65535, giving us 56,512 possible source ports. The maximum number of simultaneous outgoing connections to any given CloudFlare customers' origin from any given server on our network should be: 56,512 multiplied by the number of source IPs assigned to the server. You'd think that would be plenty of connections, but there's a catch.</p>\n<h3 id=\"bindbeforeconnect\">Bind Before Connect</h3>\n<p>As I wrote above, in order to prevent too much traffic from coming from a single IP, we spread requests across multiple source IP addresses. We use a version of Linux in the Debian family. In Linux, in order to pin the outbound request to a particular IP you bind a socket to a particular source IP and source port (using the bind() function) then establish the connection (using the connect() function). For example, if you wanted to set the source IP to be 1.1.1.1 and the source port to 1234 and then open a connection to the web server at www.google.com, you'd use the following code:</p>\n<pre>s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.bind((&quot;1.1.1.1&quot;, 1234))\ns.connect((&quot;www.google.com&quot;, 80))\n</pre>\n<p>If you specify a source port of 0 when you call bind(), then you're instructing the operating system to randomly find an available port for you:</p>\n<pre>s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n# Set source port to 0, instructing the OS to find an available port\ns.bind((&quot;1.1.1.1&quot;, 0))\ns.connect((&quot;www.google.com&quot;, 80))\n</pre>\n<p>That works great, however, Linux's bind function is conservative. Because it doesn't know what you're going to be using the port for, when a port is reserved the bind function holds it regardless of the protocol, destination IP, or destination port. In other words, if you bind this way you're only using two of the possible five variables in the connection tuple.</p>\n<p>At CloudFlare, this limited the number of concurrent connections per server from 64k for every source IP globally, to 64k for every source IP for every destination host. This practically removes the limit of outgoing connections from CloudFlare.</p>\n<p>In practice, with typical HTTP connections, the connection limits rarely had an impact. This was because HTTP connections are typically very short-lived so under normal circumstances no server would ever hit the limit. We would occasionally see the limits hit on some servers during large Layer 7 DDoS attacks. We knew, however, if we were going to support WebSockets having a limited pool of concurrent connections would create a problem.</p>\n<p><img alt=\"\" src=\"http://blog.cloudflare.com/content/images/5548193945_b216e21f98_z.jpg\"><noscript><img alt=\"\" src=\"http://blog.cloudflare.com/content/images/5548193945_b216e21f98_z.jpg\"></noscript><br>\n<small>CC BY 2.0</small></p>\n<h3 id=\"safelyreusingports\">Safely Reusing Ports</h3>\n<p>Our solution was to instruct the operating system to be less conservative, and allow ports to be reused. You can do this when you set up a socket by setting the SO_REUSEADDR option. Here's the code:</p>\n<pre>s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n# Specify that it&apos;s ok to reuse the same port even if it&apos;s been used before\ns.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\ns.bind((&quot;1.1.1.1&quot;, 0))\ns.connect((&quot;www.google.com&quot;, 80))\n</pre>\n<p>This works fine in our case so long as two connections sharing the same source IP and source port are sending and receiving traffic from two different destination IPs. And, given the large number of destination IPs behind our network, conflicts are rare. If there's a conflict, the connect() function will return an error. The solution is to watch for the error and, when one occurs, retry the port selection until you find an available, unconflicted port. Here's a simplified version of the code we use:</p>\n<pre>for i in range(RETRIES):\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    s.bind((&quot;192.168.1.21&quot;, 0))\n    try:\n        s.connect((&quot;www.google.com&quot;, 80))\n        break\n    except socket.error, e:\n        if e.errno != errno.EADDRNOTAVAIL:\n            raise\nelse:\n    raise Exception(&quot;Failed to find an unused source port&quot;)\n</pre>\n<p>We’re now running this in production, increasing the maximum number of concurrent connections per server. With that improvement we're comfortable starting to support WebSockets to our customers.</p>\n<h3 id=\"websocketrollout\">WebSocket Rollout</h3>\n<p>We're beginning the rollout of WebSockets starting with our Enterprise customers. Enterprise customers who are interested in enabling WebSockets should contact their account manager. We're also rolling this feature out in beta to a limited number of our Business customers. If you're a Business customer and you'd like to sign up for the beta, please <a href=\"https://support.cloudflare.com/hc/en-us\">open a ticket</a> with our support team.</p>\n<p>Over the next few months, as we get a better sense for the demand and load this feature puts on our systems, we plan to expand support for WebSockets to more customers including those at other tiers of CloudFlare's service.</p>\n<p>Finally, if you're interested in this topic and want to dive deeper into the technical details, I encourage you to read <a href=\"https://idea.popcount.org/2014-04-03-bind-before-connect/\">Marek Majkowski's blog post on the subject</a>. Marek is the engineer on our team who spearheaded CloudFlare's efforts to add support for WebSockets. He argued convincingly that WebSockets were part of the modern web, and it was critical that we find a way to protect and accelerate them. Like our efforts to lead the way for broad SSL support, SPDY, and IPv6, CloudFlare's support of WebSockets furthers our mission of helping build a better Internet.</p>\n<!--kg-card-end: markdown-->",
		"id": "5d16453b41acde0011a95324",
		"meta_description": null,
		"meta_title": null,
		"og_description": null,
		"og_image": null,
		"og_title": null,
		"primary_author": {
			"id": "5d1644b141acde0011a94f2d",
			"name": "Matthew Prince",
			"slug": "matthew-prince",
			"profile_image": "http://blog.cloudflare.com/content/images/2023/06/Matthew-Prince-3.jpeg",
			"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-79.png",
			"bio": "A little bit geek, wonk, and nerd. Repeat entrepreneur, recovering lawyer, and former ski instructor. Co-founder & CEO of Cloudflare (NYSE: NET).",
			"website": null,
			"location": "San Francisco, CA",
			"facebook": null,
			"twitter": "@eastdakota",
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/matthew-prince/"
		},
		"primary_tag": {
			"id": "5d16450341acde0011a95160",
			"name": "Speed & Reliability",
			"slug": "speed-and-reliability",
			"description": null,
			"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Speed---Reliability-1.png",
			"visibility": "public",
			"meta_title": "Cloudflare Blog: Speed & Reliability",
			"meta_description": "Collection of Cloudflare blog posts tagged 'Speed & Reliability'.",
			"og_image": null,
			"og_title": null,
			"og_description": null,
			"twitter_image": null,
			"twitter_title": null,
			"twitter_description": null,
			"codeinjection_head": null,
			"codeinjection_foot": null,
			"canonical_url": null,
			"accent_color": null,
			"url": "http://blog.cloudflare.com/tag/speed-and-reliability/"
		},
		"published_at": "2014-08-05T16:00:00.000+01:00",
		"reading_time": 9,
		"slug": "cloudflare-now-supports-websockets",
		"tags": [
			{
				"id": "5d16450341acde0011a95160",
				"name": "Speed & Reliability",
				"slug": "speed-and-reliability",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Speed---Reliability-1.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Speed & Reliability",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Speed & Reliability'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/speed-and-reliability/"
			},
			{
				"id": "5d16450341acde0011a951ee",
				"name": "Product News",
				"slug": "product-news",
				"description": "Product News (EN)",
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Product-News-1.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Product News",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Product News'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/product-news/"
			},
			{
				"id": "5d16450341acde0011a95214",
				"name": "Programming",
				"slug": "programming",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/programming/"
			}
		],
		"title": "CloudFlare Now Supports WebSockets",
		"twitter_description": null,
		"twitter_image": null,
		"twitter_title": null,
		"updated_at": "2018-08-23T01:44:10.000+01:00",
		"url": "http://blog.cloudflare.com/cloudflare-now-supports-websockets/",
		"uuid": "6b3269a5-f727-43b6-9b91-243d0356e987",
		"visibility": "public"
	}
}