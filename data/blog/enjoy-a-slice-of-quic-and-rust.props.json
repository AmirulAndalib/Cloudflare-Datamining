{
	"post": {
		"id": "5d16453b41acde0011a957a8",
		"uuid": "cf57d130-4455-4629-b7ac-2c4d4356a8dc",
		"title": "Enjoy a slice of QUIC, and Rust!",
		"slug": "enjoy-a-slice-of-quic-and-rust",
		"html": "<p>During last year’s Birthday Week we announced <a href=\"http://blog.cloudflare.com/head-start-with-quic/\">early support</a> for <a href=\"http://blog.cloudflare.com/the-road-to-quic/\">QUIC</a>, the next generation encrypted-by-default network transport protocol designed to secure and accelerate web traffic on the Internet.</p><p>We are not quite ready to make this feature available to every Cloudflare customer yet, but while you wait we thought you might enjoy a slice of <a href=\"https://github.com/cloudflare/quiche\">quiche</a>, our own open-source implementation of the QUIC protocol written in Rust.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2019/01/quiche-1.png\" class=\"kg-image\" alt=\"quiche-1\" loading=\"lazy\"></figure><p>Quiche will allow us to keep on top of changes to the QUIC protocol as the standardization process progresses and experiment with new features more easily. Let’s have a quick look at it together.</p><h3 id=\"simple-and-genuine-ingredients\">Simple and genuine ingredients</h3><p>The main design principle that guided quiche’s initial development was exposing most of the QUIC complexity to applications through a minimal and intuitive API, but without making too many assumptions about the application itself, in order to allow us to reuse the same library in different contexts.</p><p>For example, while we think Rust is great, most of the stack that deals with HTTP requests on Cloudflare’s edge network is still written in good ol’ C, which means that our QUIC implementation would need to be integrated into that.</p><p>The quiche API can process QUIC packets received from network sockets and generate packets to send back, but will not touch the sockets themselves. It also exposes <a href=\"https://github.com/cloudflare/quiche/blob/master/include/quiche.h\">a thin layer</a> on top on the Rust API itself to make integration into C/C++ (and other languages) easier.</p><p>The application is responsible for fetching data from the network (e.g. via sockets), passing it to quiche, and sending the data that quiche generates back into the network. The application also needs to handle timers, with quiche telling it when to wake-up (this is required for retransmitting lost packets once the corresponding retransmission timeouts expire for example). This leaves the application free to decide how to best implement the I/O and event loop support, depending on the support offered by the operating system or the networking framework used.</p><p>Thanks to this we were able to integrate quiche into our NGINX fork (though this is not ready to be open-sourced just yet) without major changes to NGINX internals. Quiche can also be built <a href=\"https://github.com/curl/curl/pull/3314#issuecomment-455778313\">together with cURL</a> to power cURL’s very early (and very experimental) QUIC support. And of course you can use quiche to implement QUIC <a href=\"https://github.com/cloudflare/quiche/blob/master/examples/client.rs\">clients</a> and <a href=\"https://github.com/cloudflare/quiche/blob/master/examples/server.rs\">servers</a> written in Rust as well.</p><h3 id=\"more-boring-than-ever\">More boring than ever</h3><p>A couple years ago we <a href=\"http://blog.cloudflare.com/make-ssl-boring-again/\">migrated our entire HTTPS stack to BoringSSL</a>, the crypto and TLS library developed by Google. This allowed us to streamline our stack (we’d previously had to maintain our own internal patches to OpenSSL for many of the features that BoringSSL offers out-of-the-box) as well as ship exciting new features more quickly.</p><p>For those not following the QUIC standardization process, the QUIC protocol itself makes use of <a href=\"http://blog.cloudflare.com/rfc-8446-aka-tls-1-3/\">TLS 1.3</a> as part of its connection handshake, so it made sense that our QUIC implementation would also use BoringSSL to implement that part of the protocol.</p><p>As far as QUIC is concerned, the TLS library needs to provide negotiation of cryptographic parameters (including encryption secrets), which are then used by the QUIC layer itself to encrypt/decrypt the packets on the wire. The TLS record layer is replaced by QUIC framing to avoid overhead and duplication so that TLS handshake messages are carried directly on top of encrypted QUIC packets.</p><p>This makes integrating with existing TLS implementations more challenging since they would need to expose the raw TLS handshake messages as-is, without record layer or protection which would be handled by quiche itself.<br>BoringSSL offers a dedicated API that can be used by QUIC implementations, which required <a href=\"https://boringssl-review.googlesource.com/c/boringssl/+/29464\">a</a> <a href=\"https://boringssl-review.googlesource.com/c/boringssl/+/33724\">few</a> <a href=\"https://boringssl-review.googlesource.com/c/boringssl/+/33904\">tweaks</a> along the way as you would expect with something so new and experimental, but was overall a breeze to integrate into quiche.</p><h3 id=\"one-ring-to-rule-them-all\">One ring to rule them all</h3><p>While the TLS handshake is implemented using BoringSSL’s API directly (via Rust’s FFI support), to implement QUIC’s packet protection we decided to use <a href=\"https://github.com/briansmith/ring\">ring</a>, a very popular Rust library that provides safe and fast cryptographic primitives.</p><p>Ring offers most of the same cryptographic primitives you’d get with BoringSSL’s libcrypto, but exposed through an intuitive and safe Rust API. In fact, ring uses some of the same fast implementations of cryptographic algorithms that BoringSSL also uses, but exposed through a nicer API.</p><p>However QUIC’s use of cryptography is somewhat unique and, uhm, exotic: the packet’s payload protection uses standard AEAD (“authenticated encryption with associated data”) algorithms like AES-GCM and ChaCha20-Poly1305, but the protection for the packet’s header is different and was designed specifically for QUIC to prevent middle-boxes on the network from intercepting some of the packet’s metadata (like the packet number).</p><p>Ring didn’t originally expose the primitives required to implement QUIC’s header protection, but adding support for them was easy enough, and our changes, now <a href=\"https://github.com/briansmith/ring/pull/749\">also</a> <a href=\"https://github.com/briansmith/ring/pull/756\">open-source</a>, were officially released in ring v0.14.0 and available for everyone to use.</p><h3 id=\"conclusion\">Conclusion</h3><p>While quiche is one of the more recent additions to the <a href=\"https://github.com/quicwg/base-drafts/wiki/Implementations\">list of QUIC implementations</a> (its first commit only dates back 3 months or so), it’s already able to interoperate with the other more mature implementations and exercise many of QUIC’s features.</p><p>Quiche, just like QUIC itself, is not “done” (or perfect for that matter) yet. Bugs will be found and fixed, new exciting features implemented (and then more bugs will be found), and API compatibility broken, as we gain experience and learn from wider deployment of QUIC on the Internet.</p>",
		"comment_id": "5c472a9294019f00c0bec013",
		"feature_image": "http://blog.cloudflare.com/content/images/2019/01/quiche-banner-copy@2x.png",
		"featured": false,
		"visibility": "public",
		"created_at": "2019-01-22T14:37:06.000+00:00",
		"updated_at": "2019-01-24T19:20:22.000+00:00",
		"published_at": "2019-01-22T16:26:07.000+00:00",
		"custom_excerpt": "During last year’s Birthday Week we announced early support for QUIC, the next generation encrypted-by-default network transport protocol designed to secure and accelerate web traffic on the Internet.",
		"codeinjection_head": null,
		"codeinjection_foot": null,
		"custom_template": null,
		"canonical_url": null,
		"tags": [
			{
				"id": "5d16450341acde0011a9525c",
				"name": "QUIC",
				"slug": "quic",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/quic/"
			},
			{
				"id": "5d16450341acde0011a9523c",
				"name": "Rust",
				"slug": "rust",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/rust/"
			}
		],
		"authors": [
			{
				"id": "5d1644b141acde0011a94faf",
				"name": "Alessandro Ghedini",
				"slug": "alessandro-ghedini",
				"profile_image": "https://blog-cloudflare-com-assets.storage.googleapis.com/2020/09/Ii4TgsoTda2layE131Dk_1204a20b3d1d96bba523a6a2a5fa3cd73bd4fe59240a27ad6eb8c064c6792446.jpg",
				"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-1.png",
				"bio": null,
				"website": null,
				"location": null,
				"facebook": null,
				"twitter": null,
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/alessandro-ghedini/"
			}
		],
		"primary_author": {
			"id": "5d1644b141acde0011a94faf",
			"name": "Alessandro Ghedini",
			"slug": "alessandro-ghedini",
			"profile_image": "https://blog-cloudflare-com-assets.storage.googleapis.com/2020/09/Ii4TgsoTda2layE131Dk_1204a20b3d1d96bba523a6a2a5fa3cd73bd4fe59240a27ad6eb8c064c6792446.jpg",
			"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-1.png",
			"bio": null,
			"website": null,
			"location": null,
			"facebook": null,
			"twitter": null,
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/alessandro-ghedini/"
		},
		"primary_tag": {
			"id": "5d16450341acde0011a9525c",
			"name": "QUIC",
			"slug": "quic",
			"description": null,
			"feature_image": null,
			"visibility": "public",
			"meta_title": null,
			"meta_description": null,
			"og_image": null,
			"og_title": null,
			"og_description": null,
			"twitter_image": null,
			"twitter_title": null,
			"twitter_description": null,
			"codeinjection_head": null,
			"codeinjection_foot": null,
			"canonical_url": null,
			"accent_color": null,
			"url": "http://blog.cloudflare.com/tag/quic/"
		},
		"url": "http://blog.cloudflare.com/enjoy-a-slice-of-quic-and-rust/",
		"excerpt": "During last year’s Birthday Week we announced early support for QUIC, the next generation encrypted-by-default network transport protocol designed to secure and accelerate web traffic on the Internet.",
		"reading_time": 4,
		"access": true,
		"comments": false,
		"og_image": null,
		"og_title": null,
		"og_description": null,
		"twitter_image": "http://blog.cloudflare.com/content/images/2019/01/quiche-banner-copy@2x-1.png",
		"twitter_title": null,
		"twitter_description": null,
		"meta_title": null,
		"meta_description": null,
		"email_subject": null,
		"frontmatter": null,
		"feature_image_alt": null,
		"feature_image_caption": null
	},
	"locale": "en-us"
}