{
	"locale": "en-us",
	"post": {
		"access": true,
		"authors": [
			{
				"id": "613f5d4027368102a77faeed",
				"name": "Ben Yule",
				"slug": "ben-yule",
				"profile_image": "http://blog.cloudflare.com/content/images/2023/09/headshot.png",
				"cover_image": null,
				"bio": null,
				"website": null,
				"location": null,
				"facebook": null,
				"twitter": "@bjyule",
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/ben-yule/"
			},
			{
				"id": "62c6f78c41fdbd000b9a92a2",
				"name": "Zebulon Piasecki",
				"slug": "zeb",
				"profile_image": "http://blog.cloudflare.com/content/images/2022/07/zeb.png",
				"cover_image": null,
				"bio": null,
				"website": null,
				"location": null,
				"facebook": null,
				"twitter": "@zebassembly",
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/zeb/"
			}
		],
		"canonical_url": null,
		"codeinjection_foot": null,
		"codeinjection_head": null,
		"comment_id": "62c6f67f41fdbd000b9a9288",
		"comments": false,
		"created_at": "2022-07-07T16:06:39.000+01:00",
		"custom_excerpt": "Today, we are announcing experimental support for WASI (the WebAssembly System Interface) on Cloudflare Workers and support within wrangler2 to make it a joy to work with",
		"custom_template": null,
		"email_subject": null,
		"excerpt": "Today, we are announcing experimental support for WASI (the WebAssembly System Interface) on Cloudflare Workers and support within wrangler2 to make it a joy to work with",
		"feature_image": "http://blog.cloudflare.com/content/images/2022/07/image1-OG-3.png",
		"feature_image_alt": null,
		"feature_image_caption": null,
		"featured": false,
		"frontmatter": null,
		"html": "<!--kg-card-begin: markdown--><p><em><small>This post is also available in <a href=\"http://blog.cloudflare.com/zh-cn/announcing-wasi-on-workers-zh-cn/\">简体中文</a> and <a href=\"http://blog.cloudflare.com/zh-tw/announcing-wasi-on-workers-zh-tw/\">繁體中文</a>.</small></em></p>\n<!--kg-card-end: markdown--><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2022/07/image1-OG-2.png\" class=\"kg-image\" alt=\"Announcing support for WASI on Cloudflare Workers\" loading=\"lazy\"></figure><p>Today, we are announcing experimental support for WASI (the WebAssembly System Interface) on Cloudflare Workers and support within wrangler2 to make it a joy to work with. We continue to be incredibly excited about the entire WebAssembly ecosystem and are eager to adopt the standards as they are developed.</p><h3 id=\"a-quick-primer-on-webassembly\">A Quick Primer on WebAssembly</h3><p>So what is WASI anyway? To understand WASI, and why we’re excited about it, it’s worth a quick recap of WebAssembly, and the ecosystem around it.</p><p>WebAssembly promised us a future in which code written in compiled languages could be compiled to a common binary format and run in a secure sandbox, at near native speeds. While WebAssembly was designed with the browser in mind, the model rapidly extended to server-side platforms such as Cloudflare Workers (which <a href=\"http://blog.cloudflare.com/webassembly-on-cloudflare-workers/\">has supported WebAssembly</a> since 2017).</p><p>WebAssembly was originally designed to run <em>alongside </em>Javascript, and requires developers to interface directly with Javascript in order to access the world outside the sandbox. To put it another way, WebAssembly does not provide any standard interface for I/O tasks such as interacting with files, accessing the network, or reading the system clock. This means if you want to respond to an event from the outside world, it's up to the developer to handle that event in JavaScript, and directly call functions exported from the WebAssembly module. Similarly, if you want to perform I/O from within WebAssembly, you need to implement that logic in Javascript and import it into the WebAssembly module.</p><p>Custom toolchains such as Emscripten or libraries such as wasm-bindgen have emerged to make this easier, but they are language specific and add a tremendous amount of complexity and bloat. We've even built our own library, workers-rs, using wasm-bindgen that attempts to make writing applications in Rust feel native within a Worker – but this has proven not only difficult to maintain, but requires developers to write code that is Workers specific, and is not portable outside the Workers ecosystem.</p><p>We need more.</p><h3 id=\"the-webassembly-system-interface-wasi-\">The WebAssembly System Interface (WASI)</h3><p>WASI aims to provide a standard interface that any language compiling to WebAssembly can target. You can read the original post by Lin Clark <a href=\"https://hacks.mozilla.org/2019/03/standardizing-wasi-a-webassembly-system-interface/\">here</a>, which gives an excellent introduction – code cartoons and all. In a nutshell, Lin describes WebAssembly as an <em>assembly language</em> for a 'conceptual machine', whereas WASI is a<em> systems interface </em>for a ‘conceptual operating system.’</p><p>This standardization of the system interface has paved the way for existing toolchains to cross-compile existing codebases to the wasm32-wasi target. A tremendous amount of progress has already been made, specifically within Clang/LLVM via the <a href=\"https://github.com/WebAssembly/wasi-sdk\">wasi-sdk</a> and <a href=\"https://doc.rust-lang.org/stable/nightly-rustc/rustc_target/spec/wasm32_wasi/index.html\">Rust</a> toolchains. These toolchains leverage a version of <a href=\"https://github.com/WebAssembly/wasi-libc\">Libc</a>, which provides POSIX standard API calls, that is built on top of WASI 'system calls.' There are even basic implementations in more fringe toolchains such as <a href=\"https://tinygo.org/docs/guides/webassembly/\">TinyGo</a> and <a href=\"https://swiftwasm.org/\">SwiftWasm</a>.</p><p>Practically speaking, this means that you can now write applications that not only interoperate with any WebAssembly runtime implementing the standard, but also any POSIX compliant system! This means the exact same 'Hello World!' that runs on your local Linux/Mac/Windows WSL machine.</p><h3 id=\"show-me-the-code\">Show me the code</h3><p>WASI sounds great, but does it actually make my life easier? You tell us. Let’s run through an example of how this would work in practice.<br></p><p>First, let’s generate a basic Rust “Hello, world!” application, compile, and run it.</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">$ cargo new hello_world\n$ cd ./hello_world\n$ cargo build --release\n   Compiling hello_world v0.1.0 (/Users/benyule/hello_world)\n    Finished release [optimized] target(s) in 0.28s\n$ ./target/release/hello_world\nHello, world!\n</code></pre>\n<!--kg-card-end: markdown--><p>It doesn’t get much simpler than this. You’ll notice we only define a main() function followed by a println to stdout.</p><!--kg-card-begin: markdown--><pre><code class=\"language-rust\">fn main() {\n    println!(&quot;Hello, world!&quot;);\n}\n</code></pre>\n<!--kg-card-end: markdown--><p>Now, let’s take the exact same program and compile against the wasm32-wasi target, and run it in an ‘off the shelf’ wasm runtime such as <a href=\"https://wasmtime.dev/\">Wasmtime</a>.</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">$ cargo build --target wasm32-wasi --release\n$ wasmtime target/wasm32-wasi/release/hello_world.wasm\n\nHello, world!\n</code></pre>\n<!--kg-card-end: markdown--><p>Neat! The same code compiles and runs in multiple POSIX environments.</p><p>Finally, let’s take the binary we just generated for Wasmtime, but instead publish it to Workers using Wrangler2.</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">$ npx wrangler@wasm dev target/wasm32-wasi/release/hello_world.wasm\n$ curl http://localhost:8787/\n\nHello, world!\n</code></pre>\n<!--kg-card-end: markdown--><p>Unsurprisingly, it works! The same code is compatible in multiple POSIX environments and the same binary is compatible across multiple WASM runtimes.</p><h3 id=\"running-your-cli-apps-in-the-cloud\">Running your CLI apps in the cloud</h3><p>The attentive reader may notice that we played a small trick with the HTTP request made via cURL. In this example, we actually stream stdin and stdout to/from the Worker using the HTTP request and response body respectively. This pattern enables some really interesting use cases, specifically, programs designed to run on the command line can be deployed as 'services' to the cloud.</p><p>‘Hexyl’ is an example that works completely out of the box. Here, we ‘cat’ a binary file on our local machine and ‘pipe’ the output to curl, which will then POST that output to our service and stream the result back. Following the steps we used to compile our 'Hello World!', we can compile hexyl.</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">$ git clone git@github.com:sharkdp/hexyl.git\n$ cd ./hexyl\n$ cargo build --target wasm32-wasi --release\n</code></pre>\n<!--kg-card-end: markdown--><p>And without further modification we were able to take a real-world program and create something we can now run or deploy. Again, let's tell wrangler2 to preview hexyl, but this time give it some input.</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">$ npx wrangler@wasm dev target/wasm32-wasi/release/hexyl.wasm\n$ echo &quot;Hello, world\\!&quot; | curl -X POST --data-binary @- http://localhost:8787\n\n┌────────┬─────────────────────────┬─────────────────────────┬────────┬────────┐\n│00000000│ 48 65 6c 6c 6f 20 77 6f ┊ 72 6c 64 21 0a          │Hello wo┊rld!_   │\n└────────┴─────────────────────────┴─────────────────────────┴────────┴────────┘\n\n</code></pre>\n<!--kg-card-end: markdown--><p>Give it a try yourself by hitting <a href=\"https://hexly.examples.workers.dev\">https://hexyl.examples.workers.dev</a>.</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">echo &quot;Hello world\\!&quot; | curl https://hexyl.examples.workers.dev/ -X POST --data-binary @- --output -\n</code></pre>\n<!--kg-card-end: markdown--><p>A more useful example, but requires a bit more work, would be to deploy a utility such as swc (swc.rs), to the cloud and use it as an on demand JavaScript/TypeScript transpilation service. Here, we have a few extra steps to ensure that the compiled output is as small as possible, but it otherwise runs out-of-the-box. Those steps are detailed in <a href=\"https://github.com/zebp/wasi-example-swc\">https://github.com/zebp/wasi-example-swc</a>, but for now let’s gloss over that and interact with the hosted example.</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">$ echo &quot;const x = (x, y) =&gt; x * y;&quot; | curl -X POST --data-binary @- https://swc-wasi.examples.workers.dev/ --output -\n\nvar x=function(a,b){return a*b}\n</code></pre>\n<!--kg-card-end: markdown--><p>Finally, we can also do the same with C/C++, but requires a little more lifting to get our Makefile right. Here we show an example of compiling zstd and uploading it as a streaming compression service.</p><p><a href=\"https://github.com/zebp/wasi-example-zstd\">https://github.com/zebp/wasi-example-zstd</a></p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">$ echo &quot;Hello world\\!&quot; | curl https://zstd.examples.workers.dev/ -s -X POST --data-binary @- | file -\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"what-if-i-want-to-use-wasi-from-within-a-javascript-worker\">What if I want to use WASI from within a JavaScript Worker?</h3><p>Wrangler can make it really easy to deploy code without having to worry about the Workers ecosystem, but in some cases you may actually want to invoke your WASI based WASM module from Javascript. This can be achieved with the following simple boilerplate. An updated README will be kept at <a href=\"https://github.com/cloudflare/workers-wasi\">https://github.com/cloudflare/workers-wasi</a>.</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">import { WASI } from &quot;@cloudflare/workers-wasi&quot;;\nimport demoWasm from &quot;./demo.wasm&quot;;\n\nexport default {\n  async fetch(request, _env, ctx) {\n    // Creates a TransformStream we can use to pipe our stdout to our response body.\n    const stdout = new TransformStream();\n    const wasi = new WASI({\n      args: [],\n      stdin: request.body,\n      stdout: stdout.writable,\n    });\n\n    // Instantiate our WASM with our demo module and our configured WASI import.\n    const instance = new WebAssembly.Instance(demoWasm, {\n      wasi_snapshot_preview1: wasi.wasiImport,\n    });\n\n    // Keep our worker alive until the WASM has finished executing.\n    ctx.waitUntil(wasi.start(instance));\n\n    // Finally, let's reply with the WASM's output.\n    return new Response(stdout.readable);\n  },\n};\n</code></pre>\n<!--kg-card-end: markdown--><p>Now with our JavaScript boilerplate and wasm, we can easily deploy our worker with Wrangler’s WASM feature.</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">$ npx wrangler publish\nTotal Upload: 473.89 KiB / gzip: 163.79 KiB\nUploaded wasi-javascript (2.75 sec)\nPublished wasi-javascript (0.30 sec)\n  wasi-javascript.zeb.workers.dev\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"back-to-the-future\">Back to the future</h2><p>For those of you who have been around for the better part of the past couple of decades, you may notice this looks very similar to RFC3875, better known as CGI (The Common Gateway Interface). While our example here certainly does not conform to the specification, you can imagine how this can be extended to turn the stdin of a basic 'command line' application into a full-blown http handler.</p><p>We are thrilled to learn where developers take this from here. Share what you build with us on <a href=\"https://discord.com/invite/cloudflaredev\">Discord</a> or <a href=\"https://twitter.com/CloudflareDev\">Twitter</a>!</p>",
		"id": "62c6f67f41fdbd000b9a9288",
		"meta_description": "Today, we are announcing experimental support for WASI (the WebAssembly System Interface) on Cloudflare Workers and support within wrangler2 to make it a joy to work with.",
		"meta_title": null,
		"og_description": null,
		"og_image": "http://blog.cloudflare.com/content/images/2022/07/Announcing-support-for-WASI-on-Cloudflare-Workers-OG-1.png",
		"og_title": null,
		"primary_author": {
			"id": "613f5d4027368102a77faeed",
			"name": "Ben Yule",
			"slug": "ben-yule",
			"profile_image": "http://blog.cloudflare.com/content/images/2023/09/headshot.png",
			"cover_image": null,
			"bio": null,
			"website": null,
			"location": null,
			"facebook": null,
			"twitter": "@bjyule",
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/ben-yule/"
		},
		"primary_tag": null,
		"published_at": "2022-07-07T17:09:43.000+01:00",
		"reading_time": 6,
		"slug": "announcing-wasi-on-workers",
		"tags": [
			{
				"id": "62c6f6b041fdbd000b9a9290",
				"name": "#BLOG-890",
				"slug": "hash-blog-890",
				"description": null,
				"feature_image": null,
				"visibility": "internal",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/404/"
			},
			{
				"id": "5d16450341acde0011a95253",
				"name": "Cloudflare Workers",
				"slug": "workers",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/workers/"
			},
			{
				"id": "5d16450341acde0011a95290",
				"name": "WebAssembly",
				"slug": "webassembly",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/webassembly/"
			},
			{
				"id": "5f69c072ef1e1403f1f04339",
				"name": "WASM",
				"slug": "wasm",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/wasm/"
			},
			{
				"id": "5d16450341acde0011a95204",
				"name": "Developers",
				"slug": "developers",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Developers-1.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Developers",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Developers'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developers/"
			},
			{
				"id": "64a3e2b834124c000b00b717",
				"name": "Developer Platform",
				"slug": "developer-platform",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developer-platform/"
			}
		],
		"title": "Announcing support for WASI on Cloudflare Workers",
		"twitter_description": null,
		"twitter_image": "http://blog.cloudflare.com/content/images/2022/07/Announcing-support-for-WASI-on-Cloudflare-Workers-OG.png",
		"twitter_title": null,
		"updated_at": "2024-02-15T23:54:30.000+00:00",
		"url": "http://blog.cloudflare.com/announcing-wasi-on-workers/",
		"uuid": "f9c7f9f1-9ddf-46c4-80f5-7fe4af097247",
		"visibility": "public"
	}
}