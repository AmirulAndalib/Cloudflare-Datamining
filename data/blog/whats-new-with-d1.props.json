{
	"post": {
		"id": "6332b769f9a3dd000ae690f4",
		"uuid": "fd449c5b-05b1-4ea9-be40-ff69f905aba1",
		"title": "D1: our quest to simplify databases",
		"slug": "whats-new-with-d1",
		"html": "<!--kg-card-begin: markdown--><p><em><small>This post is also available in <a href=\"http://blog.cloudflare.com/de-de/whats-new-with-d1-de-de/\">Deutsch</a>, <a href=\"http://blog.cloudflare.com/fr-fr/whats-new-with-d1-fr-fr/\">Français</a>.</small></em></p>\n<!--kg-card-end: markdown--><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2022/09/D1-Open-Beta-dark-1.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>When we announced D1 in May of this year, we knew it would be the start of something new – our first SQL database with Cloudflare Workers. Prior to D1 we’ve announced storage options like KV (key-value store), Durable Objects (single location, strongly consistent data storage) and <a href=\"https://www.cloudflare.com/learning/cloud/what-is-blob-storage/\">R2 (blob storage)</a>. But the question always remained “How can I store and query relational data without latency concerns and an easy API?”</p><p>The long awaited “Cloudflare Database'' was the true missing piece to build your application <strong>entirely </strong>on Cloudflare’s global network, going from a blank canvas in VSCode to a full stack application in seconds. Compatible with the popular SQLite API, D1 empowers developers to build out their databases without getting bogged down by complexity and having to manage every underlying layer.</p><p>Since our launch announcement in May and private beta in June, we’ve made great strides in building out our vision of a serverless database. With D1 still in <a href=\"https://www.cloudflare.com/lp/d1/\">private beta</a> but an open beta on the horizon, we’re excited to show and tell our journey of building D1 and what’s to come.</p><h2 id=\"the-d1-experience\">The D1 Experience</h2><p>We knew from Cloudflare Workers feedback that using Wrangler as the mechanism to create and deploy applications is loved and preferred by many. That’s why when <a href=\"http://blog.cloudflare.com/10-things-i-love-about-wrangler/\">Wrangler 2.0</a> was announced this past May alongside D1, we took advantage of the new and improved CLI for every part of the experience from data creation to every update and iteration. Let’s take a quick look on how to get set up in a few easy steps.</p><h3 id=\"create-your-database\">Create your database</h3><p>With the latest version of <a href=\"https://github.com/cloudflare/wrangler2\">Wrangler</a> installed, you can create an initialized empty database with a quick</p><p><code>npx wrangler d1 create my_database_name</code></p><p>To get your database up and running! Now it’s time to add your data.</p><h3 id=\"bootstrap-it\">Bootstrap it</h3><p>It wouldn’t be the “Cloudflare way” if you had to sit through an agonizingly long process to get set up. So we made it easy and painless to bring your existing data from an old database and bootstrap your new D1 database.  You can run</p><p><code>wrangler d1 execute my_database-name --file ./filename.sql</code></p><p>and pass through an existing SQLite .sql file of your choice. Your database is now ready for action.</p><h3 id=\"develop-test-locally\">Develop &amp; Test Locally</h3><p>With all the improvements we’ve made to Wrangler since version 2 launched <a href=\"http://blog.cloudflare.com/wrangler-v2-beta/\">a few months ago</a>, we’re pleased to report that D1 has full remote &amp; local wrangler dev support:</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2022/09/image2-43.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>When running <code>wrangler dev -–local -–persist</code>, an SQLite file will be created inside <code>.wrangler/state</code>. You can then use a local GUI program for managing it, like SQLiteFlow (<a href=\"https://www.sqliteflow.com/\">https://www.sqliteflow.com/</a>) or Beekeeper (<a href=\"https://www.beekeeperstudio.io/\">https://www.beekeeperstudio.io/</a>).</p><p>Or you can simply use SQLite directly with the SQLite command line by running <code>sqlite3 .wrangler/state/d1/DB.sqlite3</code>:</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2022/09/image6-8.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><h3 id=\"automatic-backups-one-click-restore\">Automatic backups &amp; one-click restore</h3><p>No matter how much you test your changes, sometimes things don’t always go according to plan. But with Wrangler you can create a backup of your data, view your list of backups or restore your database from an existing backup. In fact, during the beta, we’re taking backups of your data every hour automatically and storing them in R2, so you will have the option to rollback if needed.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2022/09/image1-53.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>And the best part – if you want to use a production snapshot for local development or to reproduce a bug, simply copy it into the .wrangler/state directory and <code>wrangler dev –-local –-persist</code> will pick it up!</p><p>Let’s download a D1 backup to our local disk. It’s SQLite compatible.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2022/09/image4-14.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>Now let’s run our D1 worker locally, from the backup.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2022/09/image5-16.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><h3 id=\"create-and-manage-from-the-dashboard\">Create and Manage from the dashboard</h3><p>However, we realize that CLIs are not everyone’s jam. In fact, we believe databases should be accessible to every kind of developer – even those without much database experience! D1 is available right from the Cloudflare dashboard giving you near total command parity with Wrangler in just a few clicks. Bootstrapping your database, creating tables, updating your database, viewing tables and triggering backups are all accessible right at your fingertips.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2022/09/image3-32.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>Changes made in the UI are instantly available to your Worker — no deploy required!</p><p>We’ve told you about some of the improvements we’ve landed since we first announced D1, but as always, we also wanted to give you a small taste (with some technical details) of what’s ahead. One really important functionality of a database is transactions — something D1 wouldn’t be complete without.</p><h2 id=\"sneak-peek-how-we-re-bringing-javascript-transactions-to-d1\">Sneak peek: how we're bringing JavaScript transactions to D1</h2><p>With D1, we strive to present a dramatically simplified interface to creating and querying relational data, which for the most part is a good thing. But simplification occasionally introduces drawbacks, where a use-case is no longer easily supported without introducing some new concepts. D1 transactions are one example.</p><h3 id=\"transactions-are-a-unique-challenge\">Transactions are a unique challenge</h3><p>You don't need to specify where a Cloudflare Worker or a D1 database run—they simply run everywhere they need to. For Workers, that is as close as possible to the users that are hitting your site right this second. For D1 today, we don't try to run a copy in every location worldwide, but dynamically manage the number and location of read-only replicas based on how many queries your database is getting, and from where. However, for queries that make changes to a database (which we generally call \"writes\" for short), they all have to travel back to the single Primary D1 instance to do their work, to ensure consistency.</p><p>But what if you need to do a series of updates at once? While you can send multiple SQL queries with <code>.batch()</code> (which does in fact use database transactions under the hood), it's likely that, at some point, you'll want to interleave database queries &amp; JS code in a single unit of work.</p><p>This is exactly what database transactions were invented for, but if you try running <code>BEGIN TRANSACTION</code> in D1 you'll get an error. Let's talk about why that is.<br></p><p><strong>Why native transactions don't work</strong><br>The problem arises from SQL statements and JavaScript code running in dramatically different places—your SQL executes inside your D1 database (primary for writes, nearest replica for reads), but your Worker is running near the user, which might be on the other side of the world. And because D1 is built on SQLite, only one write transaction can be open at once. Meaning that, if we permitted <code>BEGIN TRANSACTION</code>, any one Worker request, anywhere in the world, could effectively block your whole database! This is a quite dangerous thing to allow:</p><ul><li>A Worker could start a transaction then crash due to a software bug, without calling <code>ROLLBACK</code>. The primary would be blocked, waiting for more commands from a Worker that would never come (until, probably, some timeout).</li><li>Even without bugs or crashes, transactions that require multiple round-trips between JavaScript and SQL could end up blocking your whole system for multiple seconds, dramatically limiting how high an application built with Workers &amp; D1 could scale.</li></ul><p>But allowing a developer to define transactions that mix both SQL and JavaScript makes building applications with Workers &amp; D1 so much more flexible and powerful. We need a new solution (or, in our case, a new version of an old solution).</p><p><strong>A way forward: stored procedures</strong><br>Stored procedures are snippets of code that are uploaded to the database, to be executed directly next to the data. Which, at first blush, sounds exactly like what we want.</p><p>However, in practice, stored procedures in traditional databases are notoriously frustrating to work with, as anyone who's developed a system making heavy use of them will tell you:</p><ul><li>They're often written in a different language to the rest of your application. They're usually written in (a specific dialect of) SQL or an embedded language like Tcl/Perl/Python. And while it's technically possible to write them in JavaScript (using an embedded V8 engine), they run in such a different environment to your application code it still requires significant context-switching to maintain them.</li><li>Having both application code and in-database code affects every part of the development lifecycle, from authoring, testing, deployment, rollbacks and debugging. But because stored procedures are usually introduced to solve a specific problem, not as a general purpose application layer, they're often managed completely manually. You can end up with them being written once, added to the database, then never changed for fear of breaking something.</li></ul><p>With D1, we can do better.</p><p>The <em>point</em> of a stored procedure was to execute directly next to the data—uploading the code and executing it inside the database was simply a means to that end. But we're using Workers, a global JavaScript execution platform, can we use them to solve this problem?</p><p>It turns out, absolutely! But here we have a few options of exactly how to make it work, and we're working with our private beta users to find the right <a href=\"https://www.cloudflare.com/learning/security/api/what-is-an-api/\">API</a>. In this section, I'd like to share with you our current leading proposal, and invite you all to give us your feedback.</p><p>When you connect a Worker project to a D1 database, you add the section like the following to your <code>wrangler.toml</code>:</p><!--kg-card-begin: markdown--><pre><code class=\"language-yaml\">[[ d1_databases ]]\n# What binding name to use (e.g. env.DB):\nbinding = &quot;DB&quot;\n# The name of the DB (used for wrangler d1 commands):\ndatabase_name = &quot;my-d1-database&quot;\n# The D1's ID for deployment:\ndatabase_id = &quot;48a4224e-...3b09&quot;\n# Which D1 to use for `wrangler dev`:\n# (can be the same as the previous line)\npreview_database_id = &quot;48a4224e-...3b09&quot;\n\n# NEW: adding &quot;procedures&quot;, pointing to a new JS file:\nprocedures = &quot;./src/db/procedures.js&quot;\n</code></pre>\n<!--kg-card-end: markdown--><p>That D1 Procedures file would contain the following (note the new <code>db.transaction()</code> API, that is only available within a file like this):</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">export default class Procedures {\n  constructor(db, env, ctx) {\n    this.db = db\n  }\n\n  // any methods you define here are available on env.DB.Procedures\n  // inside your Worker\n  async Checkout(cartId: number) {\n    // Inside a Procedure, we have a new db.transaction() API\n    const result = await this.db.transaction(async (txn) =&gt; {\n      \n      // Transaction has begun: we know the user can't add anything to\n      // their cart while these actions are in progress.\n      const [cart, user] = Helpers.loadCartAndUser(cartId)\n\n      // We can update the DB first, knowing that if any of the later steps\n      // fail, all these changes will be undone.\n      await this.db\n        .prepare(`UPDATE cart SET status = ?1 WHERE cart_id = ?2`)\n        .bind('purchased', cartId)\n        .run()\n      const newBalance = user.balance - cart.total_cost\n      await this.db\n        .prepare(`UPDATE user SET balance = ?1 WHERE user_id = ?2`)\n        // Note: the DB may have a CHECK to guarantee 'user.balance' can not\n        // be negative. In that case, this statement may fail, an exception\n        // will be thrown, and the transaction will be rolled back.\n        .bind(newBalance, cart.user_id)\n        .run()\n\n      // Once all the DB changes have been applied, attempt the payment:\n      const { ok, details } = await PaymentAPI.processPayment(\n        user.payment_method_id,\n        cart.total_cost\n      )\n      if (!ok) {\n        // If we throw an Exception, the transaction will be rolled back\n        // and result.error will be populated:\n        // throw new PaymentFailedError(details)\n        \n        // Alternatively, we can do both of those steps explicitly\n        await txn.rollback()\n        // The transaction is rolled back, our DB is now as it was when we\n        // started. We can either move on and try something new, or just exit.\n        return { error: new PaymentFailedError(details) }\n      }\n\n      // This is implicitly called when the .transaction() block finishes,\n      // but you can explicitly call it too (potentially committing multiple\n      // times in a single db.transaction() block).\n      await txn.commit()\n\n      // Anything we return here will be returned by the \n      // db.transaction() block\n      return {\n        amount_charged: cart.total_cost,\n        remaining_balance: newBalance,\n      }\n    })\n\n    if (result.error) {\n      // Our db.transaction block returned an error or threw an exception.\n    }\n\n    // We're still in the Procedure, but the Transaction is complete and\n    // the DB is available for other writes. We can either do more work\n    // here (start another transaction?) or return a response to our Worker.\n    return result\n  }\n}\n</code></pre>\n<!--kg-card-end: markdown--><p>And in your Worker, your DB binding now has a “Procedures” property with your function names available:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">const { error, amount_charged, remaining_balance } =\n  await env.DB.Procedures.Checkout(params.cartId)\n\nif (error) {\n  // Something went wrong, `error` has details\n} else {\n  // Display `amount_charged` and `remaining_balance` to the user.\n}\n</code></pre>\n<!--kg-card-end: markdown--><p>Multiple Procedures can be triggered at one time, but only one <code>db.transaction()</code> function can be active at once: any other write queries or other transaction blocks will be queued, but all read queries will continue to hit local replicas and run as normal. This API gives you the ability to ensure consistency when it’s essential but with the minimal impact on total overall performance worldwide.</p><h3 id=\"request-for-feedback\">Request for feedback</h3><p>As with all our products, feedback from our users drives the roadmap and development. While the D1 API is in beta testing today, we're still seeking feedback on the specifics. However, we’re pleased that it solves both the problems with transactions that are specific to D1 and the problems with stored procedures described earlier:</p><ul><li>Code is executing as close as possible to the database, removing network latency while a transaction is open.</li><li>Any exceptions or cancellations of a transaction cause an instant rollback—there is no way to accidentally leave one open and block the whole D1 instance.</li><li>The code is in the same language as the rest of your Worker code, in the exact same dialect (e.g. same TypeScript config as it's part of the same build).</li><li>It's deployed seamlessly as part of your Worker. If two Workers bind to the same D1 instance but define different procedures, they'll only see their own code. If you want to share code between projects or databases, extract a library as you would with any other shared code.</li><li>In local development and test, the procedure works just like it does in production, but without the network call, allowing seamless testing and debugging as if it was a local function.</li><li>Because procedures and the Worker that define them are treated as a single unit, rolling back to an earlier version never causes a skew between the code in the database and the code in the Worker.</li></ul><h2 id=\"the-d1-ecosystem-contributions-from-the-community\">The D1 ecosystem: contributions from the community</h2><p>We've told you about what we've been up to and what's ahead, but one of the unique things about this project is all the contributions from our users. One of our favorite parts of private betas is not only getting feedback and feature requests, but also seeing what ideas and projects come to fruition. While sometimes this means personal projects, with D1, we’re seeing some incredible contributions to the D1 ecosystem. Needless to say, the work on D1 hasn’t just been coming from within the D1 team, but also from the wider community and other developers at Cloudflare. Users have been showing off their D1 additions within our Discord private beta channel and giving others the opportunity to use them as well. We wanted to take a moment to highlight them.</p><h3 id=\"workers-qb\">workers-qb</h3><p>Dealing with raw SQL syntax is powerful (and using the D1 .bind() API, safe against <a href=\"https://www.cloudflare.com/learning/security/threats/how-to-prevent-sql-injection/\">SQL injections</a>) but it can be a little clumsy. On the other hand, most existing query builders assume direct access to the underlying DB, and so aren’t suitable to use with D1. So Cloudflare developer Gabriel Massadas designed a small, zero-dependency query builder called <code>workers-qb</code>:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">import { D1QB } from 'workers-qb'\nconst qb = new D1QB(env.DB)\n\nconst fetched = await qb.fetchOne({\n    tableName: &quot;employees&quot;,\n    fields: &quot;count(*) as count&quot;,\n    where: {\n      conditions: &quot;active = ?1&quot;,\n      params: [true]\n    },\n})\n</code></pre>\n<!--kg-card-end: markdown--><p>Check out the project homepage for more information: <a href=\"https://workers-qb.massadas.com/\">https://workers-qb.massadas.com/</a>.</p><h3 id=\"d1-console\">D1 console</h3><p>While you can interact with D1 through both Wrangler and the dashboard, Cloudflare Community champion, Isaac McFadyen created the very first D1 console where you can quickly execute a series of queries right through your terminal. With the D1 console, you don’t need to spend time writing the various Wrangler commands we’ve created – just execute your queries.</p><p>This includes all bells and whistles you would expect from a modern database console including multiline input, command history, validation for things D1 may not yet support, and ability to save your Cloudflare credentials for later use.</p><p>Check out the full project on <a href=\"https://github.com/isaac-mcfadyen/d1-console\">GitHub</a> or <a href=\"https://www.npmjs.com/package/d1-console\">NPM</a> for more information.</p><h3 id=\"miniflare-test-integration\">Miniflare test Integration</h3><p>The <a href=\"https://miniflare.dev/\">Miniflare project,</a> which powers Wrangler’s local development experience, also provides fully-fledged test environments for popular JavaScript test runners, <a href=\"https://miniflare.dev/testing/jest\">Jest</a> and <a href=\"https://miniflare.dev/testing/vitest\">Vitest</a>. With this comes the concept of <a href=\"https://miniflare.dev/testing/jest#isolated-storage\"><em>Isolated Storage</em></a>, allowing each test to run independently, so that changes made in one don’t affect the others. Brendan Coll, creator of Miniflare, guided the D1 test implementation to give the same benefits:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">import Worker from ‘../src/index.ts’\nconst { DB } = getMiniflareBindings();\n\nbeforeAll(async () =&gt; {\n  // Your D1 starts completely empty, so first you must create tables\n  // or restore from a schema.sql file.\n  await DB.exec(`CREATE TABLE entries (id INTEGER PRIMARY KEY, value TEXT)`);\n});\n\n// Each describe block &amp; each test gets its own view of the data.\ndescribe(‘with an empty DB’, () =&gt; {\n  it(‘should report 0 entries’, async () =&gt; {\n    await Worker.fetch(...)\n  })\n  it(‘should allow new entries’, async () =&gt; {\n    await Worker.fetch(...)\n  })\n])\n\n// Use beforeAll &amp; beforeEach inside describe blocks to set up particular DB states for a set of tests\ndescribe(‘with two entries in the DB’, () =&gt; {\n  beforeEach(async () =&gt; {\n    await DB.prepare(`INSERT INTO entries (value) VALUES (?), (?)`)\n            .bind(‘aaa’, ‘bbb’)\n            .run()\n  })\n  // Now, all tests will run with a DB with those two values\n  it(‘should report 2 entries’, async () =&gt; {\n    await Worker.fetch(...)\n  })\n  it(‘should not allow duplicate entries’, async () =&gt; {\n    await Worker.fetch(...)\n  })\n])\n</code></pre>\n<!--kg-card-end: markdown--><p>All the databases for tests are run in-memory, so these are lightning fast. And fast, reliable testing is a big part of building maintainable real-world apps, so we’re thrilled to extend that to D1.</p><h2 id=\"want-access-to-the-private-beta\">Want access to the private beta?</h2><p>Feeling inspired?</p><p>We love to see what our beta users build or want to build especially when our products are at an early stage. As we march toward an open beta, we’ll be looking specifically for your feedback. We are slowly letting more folks into the beta, but if you haven’t received your “golden ticket” yet with access, sign up <a href=\"https://www.cloudflare.com/lp/d1/\">here</a>! Once you’ve been invited in, you’ll receive an official welcome email.</p><p>As always, happy building!</p>",
		"comment_id": "6332b769f9a3dd000ae690f4",
		"feature_image": "http://blog.cloudflare.com/content/images/2022/09/D1-Open-Beta-dark.png",
		"featured": false,
		"visibility": "public",
		"created_at": "2022-09-27T09:42:17.000+01:00",
		"updated_at": "2024-02-15T22:56:11.000+00:00",
		"published_at": "2022-09-27T14:00:00.000+01:00",
		"custom_excerpt": "Get an inside look on the D1 experience today, what the team is currently working on and what’s coming up! ",
		"codeinjection_head": null,
		"codeinjection_foot": null,
		"custom_template": null,
		"canonical_url": null,
		"authors": [
			{
				"id": "60ca07829c281c01bd7398c7",
				"name": "Nevi Shah",
				"slug": "nevi",
				"profile_image": "http://blog.cloudflare.com/content/images/2021/07/Screen-Shot-2021-07-26-at-3.28.33-PM.png",
				"cover_image": null,
				"bio": null,
				"website": null,
				"location": null,
				"facebook": null,
				"twitter": "@nevikashah",
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/nevi/"
			},
			{
				"id": "5fe0d054586dd703f368356f",
				"name": "Glen Maddern",
				"slug": "glen",
				"profile_image": "http://blog.cloudflare.com/content/images/2020/12/me_640.jpg",
				"cover_image": null,
				"bio": null,
				"website": null,
				"location": null,
				"facebook": null,
				"twitter": "@glenmaddern",
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/glen/"
			}
		],
		"tags": [
			{
				"id": "6332cca6f9a3dd000ae691b5",
				"name": "#BLOG-1367",
				"slug": "hash-blog-1367",
				"description": null,
				"feature_image": null,
				"visibility": "internal",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/404/"
			},
			{
				"id": "5d16450341acde0011a95211",
				"name": "Birthday Week",
				"slug": "birthday-week",
				"description": "Collection of Cloudflare blog posts tagged 'Birthday Week'.",
				"feature_image": "http://blog.cloudflare.com/content/images/2023/09/Welcome-to-Birthday-Week-2023.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Birthday Week",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Birthday Week'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/birthday-week/"
			},
			{
				"id": "5d16450341acde0011a95252",
				"name": "Serverless",
				"slug": "serverless",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Serverless.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Serverless",
				"meta_description": "Cloudflare blog posts tagged 'serverless'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/serverless/"
			},
			{
				"id": "6332ccf5f9a3dd000ae691bd",
				"name": "Database",
				"slug": "database",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/database/"
			},
			{
				"id": "632af1846266f8000bd3e23c",
				"name": "D1",
				"slug": "d1",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/d1/"
			},
			{
				"id": "5d16450341acde0011a95253",
				"name": "Cloudflare Workers",
				"slug": "workers",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/workers/"
			},
			{
				"id": "5d16450341acde0011a951ee",
				"name": "Product News",
				"slug": "product-news",
				"description": "Product News (EN)",
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Product-News-1.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Product News",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Product News'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/product-news/"
			},
			{
				"id": "5d16450341acde0011a95204",
				"name": "Developers",
				"slug": "developers",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Developers-1.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Developers",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Developers'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developers/"
			},
			{
				"id": "64a3e2b834124c000b00b717",
				"name": "Developer Platform",
				"slug": "developer-platform",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developer-platform/"
			}
		],
		"primary_author": {
			"id": "60ca07829c281c01bd7398c7",
			"name": "Nevi Shah",
			"slug": "nevi",
			"profile_image": "http://blog.cloudflare.com/content/images/2021/07/Screen-Shot-2021-07-26-at-3.28.33-PM.png",
			"cover_image": null,
			"bio": null,
			"website": null,
			"location": null,
			"facebook": null,
			"twitter": "@nevikashah",
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/nevi/"
		},
		"primary_tag": null,
		"url": "http://blog.cloudflare.com/whats-new-with-d1/",
		"excerpt": "Get an inside look on the D1 experience today, what the team is currently working on and what’s coming up! ",
		"reading_time": 12,
		"access": true,
		"comments": false,
		"og_image": "http://blog.cloudflare.com/content/images/2022/09/D1--our-quest-to-simplify-databases-OG-1.png",
		"og_title": null,
		"og_description": null,
		"twitter_image": "http://blog.cloudflare.com/content/images/2022/09/D1--our-quest-to-simplify-databases-OG.png",
		"twitter_title": null,
		"twitter_description": null,
		"meta_title": null,
		"meta_description": "Get an inside look on the D1 experience today, what the team is currently working on and what’s coming up! ",
		"email_subject": null,
		"frontmatter": null,
		"feature_image_alt": null,
		"feature_image_caption": null
	},
	"locale": "en-us"
}