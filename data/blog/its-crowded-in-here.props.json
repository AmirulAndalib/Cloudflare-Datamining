{
	"locale": "en-us",
	"post": {
		"access": true,
		"authors": [
			{
				"id": "5d1644b141acde0011a9501b",
				"name": "Jakub Sitnicki",
				"slug": "jakub",
				"profile_image": "http://blog.cloudflare.com/content/images/2019/05/4_300698554542850065.jpg",
				"cover_image": "http://blog.cloudflare.com/content/images/2019/05/general@2x-2.png",
				"bio": null,
				"website": null,
				"location": null,
				"facebook": null,
				"twitter": null,
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/jakub/"
			}
		],
		"canonical_url": null,
		"codeinjection_foot": null,
		"codeinjection_head": null,
		"comment_id": "5d9355a1fd9e450505d974b4",
		"comments": false,
		"created_at": "2019-10-01T14:33:21.000+01:00",
		"custom_excerpt": "We recently gave a presentation on Programming socket lookup with BPF at the Linux Plumbers Conference 2019 in Lisbon, Portugal. This blog post is a recap of the problem statement and proposed solution we presented.",
		"custom_template": null,
		"email_subject": null,
		"excerpt": "We recently gave a presentation on Programming socket lookup with BPF at the Linux Plumbers Conference 2019 in Lisbon, Portugal. This blog post is a recap of the problem statement and proposed solution we presented.",
		"feature_image": "http://blog.cloudflare.com/content/images/2019/10/idea_program_socket_lookup_with_bpf-3.png",
		"feature_image_alt": null,
		"feature_image_caption": null,
		"featured": false,
		"frontmatter": null,
		"html": "<p>We recently gave a presentation on <a href=\"https://linuxplumbersconf.org/event/4/contributions/487/\">Programming socket lookup with BPF</a> at the Linux Plumbers Conference 2019 in Lisbon, Portugal. This blog post is a recap of the problem statement and proposed solution we presented.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://lh4.googleusercontent.com/Sx-zlmvr7oQCEgESKFhkK6Roa2FvWo5IVm4DXvvPhJIQGj11lXtsFztQaAIPFLwleAOPGh7sFw-GN2Cljy-STatv7Rj4GlRnuPolaZT_AM4a318VvTei_gOx4rcAN2A9zbDLss9k\" class=\"kg-image\" alt loading=\"lazy\"><figcaption>CC0 Public Domain, <a href=\"https://pxhere.com/en/photo/1526517\">PxHere</a></figcaption></figure><p>Our edge servers are crowded. We run more than a dozen public facing services, leaving aside the all internal ones that do the work behind the scenes.</p><!--kg-card-begin: html--><div id=\"quiz-1-question\" /><!--kg-card-end: html--><p>Quick Quiz #1: How many can you name? We blogged about them! <a href=\"#quiz-1\">Jump to answer</a>.</p><p>These services are exposed on more than a million Anycast <a href=\"https://www.cloudflare.com/ips/\">public IPv4 addresses</a> partitioned into 100+ network prefixes.</p><p>To keep things uniform every Cloudflare edge server runs all services and responds to every Anycast address. This allows us to make efficient use of the hardware by load-balancing traffic between all machines. We have shared the details of Cloudflare <a href=\"http://blog.cloudflare.com/no-scrubs-architecture-unmetered-mitigation/\">edge</a><a href=\"http://blog.cloudflare.com/cloudflare-architecture-and-how-bpf-eats-the-world/\"> architecture</a> on the blog before.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2019/10/edge_data_center-1.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>Granted not all services work on all the addresses but rather on a subset of them, covering one or several network prefixes.</p><p>So how do you set up your network services to listen on hundreds of IP addresses without driving the network stack over the edge?</p><p>Cloudflare engineers have had to ask themselves this question more than once over the years, and the answer has changed as our edge evolved. This evolution forced us to look for creative ways to work with the <a href=\"https://en.wikipedia.org/wiki/Berkeley_sockets\">Berkeley sockets API</a>, a POSIX standard for assigning a network address and a port number to your application. It has been quite a journey, and we are not done yet.</p><h2 id=\"when-life-is-simple-one-address-one-socket\">When life is simple - one address, one socket</h2><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2019/10/mapping_1_to_1-1.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>The simplest kind of association between an (IP address, port number) and a service that we can imagine is one-to-one. A server responds to client requests on a single address, on a well known port. To set it up the application has to open one socket for each transport protocol (be it TCP or UDP) it wants to support. A network server like our <a href=\"https://www.cloudflare.com/dns/\">authoritative DNS</a> would open up two sockets (one for UDP, one for TCP):</p><pre><code>(192.0.2.1, 53/tcp) ⇨ (\"auth-dns\", pid=1001, fd=3)\n(192.0.2.1, 53/udp) ⇨ (\"auth-dns\", pid=1001, fd=4)\n</code></pre><p>To take it to Cloudflare scale, the service is likely to have to receive on at least a /20 network prefix, which is a range of IPs with 4096 addresses in it.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2019/10/mapping_many_1_to_1-1.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>This translates to opening 4096 sockets for each transport protocol. Something that is not likely to go unnoticed when looking at <a href=\"http://man7.org/linux/man-pages/man8/ss.8.html\">ss tool</a> output.</p><pre><code>$ sudo ss -ulpn 'sport = 53'\nState  Recv-Q Send-Q  Local Address:Port Peer Address:Port\n…\nUNCONN 0      0           192.0.2.40:53        0.0.0.0:*    users:((\"auth-dns\",pid=77556,fd=11076))\nUNCONN 0      0           192.0.2.39:53        0.0.0.0:*    users:((\"auth-dns\",pid=77556,fd=11075))\nUNCONN 0      0           192.0.2.38:53        0.0.0.0:*    users:((\"auth-dns\",pid=77556,fd=11074))\nUNCONN 0      0           192.0.2.37:53        0.0.0.0:*    users:((\"auth-dns\",pid=77556,fd=11073))\nUNCONN 0      0           192.0.2.36:53        0.0.0.0:*    users:((\"auth-dns\",pid=77556,fd=11072))\nUNCONN 0      0           192.0.2.31:53        0.0.0.0:*    users:((\"auth-dns\",pid=77556,fd=11071))\n…</code></pre><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"http://blog.cloudflare.com/content/images/2019/10/lots_of_socks.jpg\" class=\"kg-image\" alt loading=\"lazy\"><figcaption>CC BY 2.0, Luca Nebuloni, <a href=\"https://flickr.com/photos/7897906@N06/20655224708\">Flickr</a></figcaption></figure><p>The approach, while naive, has an advantage: when an IP from the range gets attacked with a UDP flood, the receive queues of sockets bound to the remaining IP addresses are not affected.</p><h2 id=\"life-can-be-easier-all-addresses-one-socket\">Life can be easier - all addresses, one socket</h2><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2019/10/mapping_inaddr_any-1.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>It seems rather silly to create so many sockets for one service to receive traffic on a range of addresses. Not only that, the more listening sockets there are, the longer the chains in the socket lookup hash table. We have learned the hard way that going in this direction <a href=\"http://blog.cloudflare.com/revenge-listening-sockets/\">can hurt packet processing latency</a>.</p><p>The sockets API comes with a big hammer that can make our life easier - the <code>INADDR_ANY</code> aka <code>0.0.0.0</code> wildcard address. With <code>INADDR_ANY</code> we can make a single socket receive on all addresses assigned to our host, specifying just the port.</p><pre><code>s = socket(AF_INET, SOCK_STREAM, 0)\ns.bind(('0.0.0.0', 12345))\ns.listen(16)\n</code></pre><!--kg-card-begin: html--><div id=\"quiz-2-question\" /><!--kg-card-end: html--><p>Quick Quiz #2: Is there another way to bind a socket to all local addresses? <a href=\"#quiz-2\">Jump to answer</a>.</p><p>In other words, compared to the naive “one address, one socket” approach, <code>INADDR_ANY</code> allows us to have a single catch-all listening socket for the whole IP range on which we accept incoming connections.</p><p>On Linux this is possible thanks to a two-phase listening socket lookup, where it falls back to search for an <code>INADDR_ANY</code> socket if a more specific match has not been found.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2019/10/tcp_socket_lookup-1.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>Another upside of binding to <code>0.0.0.0</code> is that our application doesn’t need to be aware of what addresses we have assigned to our host. We are also free to assign or remove the addresses after binding the listening socket. No need to reconfigure the service when its listening IP range changes.</p><p>On the other hand if our service should be listening on just <code>A.B.C.0/20</code> prefix, binding to all local addresses is more than we need. We might unintentionally expose an otherwise internal-only service to external traffic without a proper firewall or a socket filter in place.</p><p>Then there is the security angle. Since we now only have one socket, attacks attempting to flood any of the IPs assigned to our host on our service’s port, will hit the catch-all socket and its receive queue. While in such circumstances the Linux <a href=\"http://blog.cloudflare.com/syn-packet-handling-in-the-wild/\">TCP stack has your back</a>, UDP needs special care or legitimate traffic might drown in the flood of dropped packets.</p><p>Possibly the biggest downside, though, is that a service listening on the wildcard <code>INADDR_ANY</code> address claims the port number exclusively for itself. Binding over the wildcard-listening socket with a specific IP and port fails miserably due to the address already being taken (<code>EADDRINUSE</code>).</p><pre><code>bind(3, {sa_family=AF_INET, sin_port=htons(12345), sin_addr=inet_addr(\"0.0.0.0\")}, 16) = 0\nbind(4, {sa_family=AF_INET, sin_port=htons(12345), sin_addr=inet_addr(\"127.0.0.1\")}, 16) = -1 EADDRINUSE (Address already in use)\n</code></pre><p>Unless your service is UDP-only, setting the <code>SO_REUSEADDR</code> socket option, will not help you overcome this restriction. The only way out is to turn to <code>SO_REUSEPORT</code>, normally used to construct a load-balancing socket group. And that is only if you are lucky enough to run the port-conflicting services as the same user (UID). That is a story for another post.</p><!--kg-card-begin: html--><div id=\"quiz-3-question\" /><!--kg-card-end: html--><p>Quick Quiz #3: Does setting the <code>SO_REUSEADDR</code> socket option have any effect at all when there is bind conflict? <a href=\"#quiz-3\">Jump to answer</a>.</p><h2 id=\"life-gets-real-one-port-two-services\">Life gets real - one port, two services</h2><p>As it happens, at the Cloudflare edge we do host services that share the same port number but otherwise respond to requests on non-overlapping IP ranges. A prominent example of such port-sharing is our <a href=\"http://blog.cloudflare.com/dns-resolver-1-1-1-1/\">1.1.1.1</a> recursive DNS resolver running side-by-side with the<a href=\"https://www.cloudflare.com/dns/\"> authoritative DNS service</a> that we offer to all customers.</p><p>Sadly the s<a href=\"http://man7.org/linux/man-pages/man2/bind.2.html\">ockets API</a> doesn’t allow us to express a setup in which two services share a port and accept requests on disjoint IP ranges.</p><p>However, as Linux development history shows, any networking API limitation can be overcome by introducing a new <a href=\"https://github.com/torvalds/linux/blame/master/include/uapi/asm-generic/socket.h\">socket option</a>, with sixty-something options available (and counting!).</p><p>Enter <code>SO_BINDTOPREFIX</code>.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2019/10/mapping_bindtoprefix-1.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>Back in 2016 we proposed <a href=\"https://lore.kernel.org/netdev/1458699966-3752-1-git-send-email-gilberto.bertin@gmail.com/\">an extension to the Linux network stack</a>. It allowed services to constrain a wildcard-bound socket to an IP range belonging to a network prefix.</p><pre><code class=\"language-python\"># Service 1, 127.0.0.0/20, 1234/tcp\nnet1, plen1 = '127.0.0.0', 20\nbindprefix1 = struct.pack('BBBBBxxx', *inet_aton(net1), plen1)\n\ns1 = socket(AF_INET, SOCK_STREAM, 0)\ns1.setsockopt(SOL_IP, IP_BINDTOPREFIX, bindprefix1)\ns1.bind(('0.0.0.0', 1234))\ns1.listen(1)\n\n# Service 2, 127.0.16.0/20, 1234/tcp\nnet2, plen2 = '127.0.16.0', 20\nbindprefix2 = struct.pack('BBBBBxxx', *inet_aton(net2), plen2)\n\ns2 = socket(AF_INET, SOCK_STREAM, 0)\ns2.setsockopt(SOL_IP, IP_BINDTOPREFIX, bindprefix2)\ns2.bind(('0.0.0.0', 1234))\ns2.listen(1)\n</code></pre><p>This mechanism has served us well since then. Unfortunately, it didn’t get accepted upstream due to being too specific to our use-case. Having no better alternative we ended up maintaining patches in our kernel to this day.</p><h2 id=\"life-gets-complicated-all-ports-one-service\">Life gets complicated - all ports, one service</h2><p>Just when we thought we had things figured out, we were faced with a new challenge. How to build a service that accepts connections on any of the 65,535 ports? The ultimate reverse proxy, if you will, code named <a href=\"https://www.cloudflare.com/products/cloudflare-spectrum/\">Spectrum</a>.</p><p>The <code>bind</code> syscall offers very little flexibility when it comes to mapping a socket to a port number. You can either specify the number you want or let the network stack pick an unused one for you. There is no counterpart of <code>INADDR_ANY</code>, a wildcard value to select all ports (<code>INPORT_ANY</code>?).</p><p>To achieve what we wanted, we had to turn to <a href=\"http://blog.cloudflare.com/how-we-built-spectrum/\">TPROXY</a>, a <a href=\"https://www.kernel.org/doc/Documentation/networking/tproxy.txt\">Netfilter / <code>iptables</code> extension</a> designed for intercepting remote-destined traffic on the forward path. However, we use it to steer local-destined packets, that is ones targeted to our host, to a catch-all-ports socket.</p><pre><code>iptables -t mangle -I PREROUTING \\\n         -d 192.0.2.0/24 -p tcp \\\n         -j TPROXY --on-ip=127.0.0.1 --on-port=1234\n</code></pre><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2019/10/mapping_tproxy-1.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>TPROXY-based setup comes at a price. For starters, your service needs elevated privileges to create a special catch-all socket (see the <a href=\"http://man7.org/linux/man-pages/man7/ip.7.html\"><code>IP_TRANSPARENT</code> socket option</a>). Then you also have to understand and consider the subtle interactions between TPROXY and the receive path for your traffic profile, for example:</p><ul><li>does connection tracking register the flows redirected with TPROXY?</li><li>is listening socket contention during a SYN flood when using TPROXY a concern?</li><li>do other parts of the network stack, like XDP programs, need to know about TPROXY redirecting packets?</li></ul><p>These are some of the questions we needed to answer, and after running it in production for a while now, we have a good idea of what the consequences of using TPROXY are.</p><p>That said, it would not come as a shock, if tomorrow we’d discovered something new about TPROXY. Due to its complexity we’ve always considered using it to steer local-destined traffic a <a href=\"http://blog.cloudflare.com/how-we-built-spectrum/\">hack</a>, a use-case outside its intended application. No matter how well understood, a hack remains a hack.</p><h2 id=\"can-bpf-make-life-easier\">Can BPF make life easier?</h2><p>Despite its complex nature TPROXY shows us something important. No matter what IP or port the listening socket is bound to, with a bit of support from the network stack, we can steer any connection to it. As long the application is ready to handle this situation, things work.</p><!--kg-card-begin: html--><div id=\"quiz-4-question\" /><!--kg-card-end: html--><p>Quick Quiz #4: Are there really no problems with accepting any connection on any socket? <a href=\"#quiz-4\">Jump to answer</a>.</p><p>This is a really powerful concept. With a bunch of TPROXY rules, we can configure any mapping between (address, port) tuples and listening sockets.</p><p><strong>? Idea #1:</strong> A local-destined connection can be accepted by any listening socket.</p><p>We didn’t tell you the whole story before. When we published <code>SO_BINDTOPREFIX</code> patches, they did not just get rejected. <a href=\"https://meta.wikimedia.org/wiki/Cunningham%27s_Law\">As sometimes happens</a> by posting the wrong answer, we got <a href=\"https://lore.kernel.org/netdev/1459261895.6473.176.camel@edumazet-glaptop3.roam.corp.google.com/\">the right answer</a> to our problem</p><!--kg-card-begin: markdown--><blockquote>\n<p>❝BPF is absolutely the way to go here, as it allows for whatever user specified tweaks, like a list of destination subnetwork, or/and a list of source network, or the date/time of the day, or port knocking without netfilter, or … you name it.❞</p>\n</blockquote>\n<!--kg-card-end: markdown--><p><strong>? Idea #2:</strong> How we pick a listening socket can be tweaked with BPF.</p><p>Combine the two ideas together, and we arrive at an exciting concept. Let’s run BPF code to match an incoming packet with a listening socket, ignoring the address the socket is bound to. ?</p><p>Here’s an example to illustrate it.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2019/10/idea_program_socket_lookup_with_bpf-2.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><!--kg-card-begin: markdown--><p>All packets coming on <code>192.0.2.0/24</code> prefix, port <code>53</code> are steered to socket <code>sk:2</code>, while traffic targeted at <code>203.0.113.1</code>, on any port number lands in socket <code>sk:4</code>.</p>\n<!--kg-card-end: markdown--><h2 id=\"welcome-bpf-inet_lookup\">Welcome BPF inet_lookup</h2><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2019/10/bpf_inet_lookup_hook-1.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>To make this concept a reality we are proposing a new mechanism to program the socket lookup with BPF. What is socket lookup? It’s a stage on the receive path where the transport layer searches for a socket to dispatch the packet to. The last possible moment to steer packets before they land in the selected socket receive queue. In there we attach a new type of BPF program called <code>inet_lookup</code>.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2019/10/tcp_socket_lookup_with_bpf-1.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>If you recall, socket lookup in the Linux TCP stack is a <a href=\"https://elixir.bootlin.com/linux/v5.4-rc2/source/include/net/inet_hashtables.h#L329\">two phase process</a>. First the kernel will try to find an established (connected) socket matching the packet 4-tuple. If there isn’t one, it will continue by looking for a listening socket using just the packet 2-tuple as key.</p><p>Our proposed extension allows users to program the second phase, the listening socket lookup. If present, a BPF program is allowed to choose a listening socket and terminate the lookup. Our program is also free to ignore the packet, in which case the kernel will continue to look for a listening socket as usual.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2019/10/bpf_inet_lookup_operation-1.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>How does this new type of BPF program operate? On input, as context, it gets handed a subset of information extracted from packet headers, including the packet 4-tuple. Based on the input the program accesses a BPF map containing references to listening sockets, and selects one to yield as the socket lookup result.</p><p>If we take a look at the corresponding BPF code, the program structure resembles a firewall rule. We have some match statements followed by an action.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2019/10/bpf_inet_lookup_code_sample-2.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>You may notice that we don’t access the BPF map with sockets directly. Instead, we follow an established pattern in BPF called “map based redirection”, where a dedicated BPF helper accesses the map and carries out any steps necessary to redirect the packet.</p><p>We’ve skipped over one thing. Where does the BPF map of sockets come from? We create it ourselves and populate it with sockets. This is most easily done if your service uses systemd <a href=\"http://0pointer.de/blog/projects/socket-activation.html\">socket activation</a>. systemd will let you associate more than one service unit with a socket unit, and both of the services will receive a file descriptor for the same socket. From there it’s just a matter of inserting the socket into the BPF map.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2019/10/bpf_inet_lookup_socket_activation-1.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><h2 id=\"demo-time-\">Demo time!</h2><p>This is not just a concept. We have already published a first working <a href=\"https://lore.kernel.org/bpf/20190828072250.29828-1-jakub@cloudflare.com/\">set of patches for the kernel</a> together with ancillary <a href=\"https://github.com/majek/inet-tool\">user-space tooling</a> to configure the socket lookup to your needs.</p><p>If you would like to see it in action, you are in luck. We’ve put together a demo that shows just how easily you can bind a network service to (i) a single port, (ii) all ports, or (iii) a network prefix. On-the-fly, without having to restart the service! There is a port scan running to prove it.</p><p>You can also bind to all-addresses-all-ports (<code>0.0.0.0/0</code>) because why not? Take that <code>INADDR_ANY</code>. All thanks to BPF superpowers.</p><!--kg-card-begin: markdown--><p><a href=\"https://asciinema.org/a/266328\"><img src=\"https://asciinema.org/a/266328.svg\" alt=\"asciicast\" loading=\"lazy\"></a></p>\n<!--kg-card-end: markdown--><h2 id=\"summary\">Summary</h2><p>We have gone over how the way we bind services to network addresses on the Cloudflare edge has evolved over time. Each approach has its pros and cons, summarized below. We are currently working on a new BPF-based mechanism for binding services to addresses, which is intended to address the shortcomings of existing solutions.</p><p><strong>bind to one address and port</strong></p><p>? flood traffic on one address hits one socket, doesn’t affect the rest<br>? as many sockets as listening addresses, doesn’t scale</p><p><strong>bind to all addresses with <code>INADDR_ANY</code></strong></p><p>? just one socket for all addresses, the kernel thanks you<br>? application doesn’t need to know about listening addresses<br>? flood scenario requires custom protection, at least for UDP<br>? port sharing is tricky or impossible</p><p><strong>bind to a network prefix with <code>SO_BINDTOPREFIX</code></strong></p><p>? two services can share a port if their IP ranges are non-overlapping<br>? custom kernel API extension that never went upstream</p><p><strong>bind to all port with TPROXY</strong></p><p>? enables redirecting all ports to a listening socket and more<br>? meant for intercepting forwarded traffic early on the ingress path<br>? has subtle interactions with the network stack<br>? requires privileges from the application</p><p><strong>bind to anything you want with BPF <code>inet_lookup</code></strong></p><p>? allows for the same flexibility as with TPROXY or <code>SO_BINDTOPREFIX</code><br>? services don’t need extra capabilities, meant for local traffic only<br>? needs cooperation from services or PID 1 to build a socket map</p><hr><p>Getting to this point has been a team effort. A special thank you to Lorenz Bauer and <a href=\"http://blog.cloudflare.com/author/marek-majkowski/\">Marek Majkowski</a> who have contributed in an essential way to the BPF <code>inet_lookup</code> implementation. The <code>SO_BINDTOPREFIX</code> patches were authored by <a href=\"http://blog.cloudflare.com/author/gilberto-bertin/\">Gilberto Bertin</a>.</p><p>Fancy joining the team? <a href=\"https://www.cloudflare.com/careers/departments/?utm_referrer=blog\">Apply here!</a></p><h2 id=\"quiz-answers\">Quiz Answers</h2><h3 id=\"quiz-1\">Quiz 1</h3><p>Q: How many Cloudflare services can you name?</p><ol><li><a href=\"https://www.cloudflare.com/cdn/\">HTTP CDN</a> (tcp/80)</li><li><a href=\"https://www.cloudflare.com/ssl/\">HTTPS CDN</a> (tcp/443, <a href=\"https://cloudflare-quic.com/\">udp/443</a>)</li><li><a href=\"https://www.cloudflare.com/dns/\">authoritative DNS</a> (udp/53)</li><li><a href=\"http://blog.cloudflare.com/dns-resolver-1-1-1-1/\">recursive DNS</a> (udp/53, 853)</li><li><a href=\"http://blog.cloudflare.com/secure-time/\">NTP with NTS</a> (udp/1234)</li><li><a href=\"http://blog.cloudflare.com/roughtime/\">Roughtime time service</a> (udp/2002)</li><li><a href=\"http://blog.cloudflare.com/distributed-web-gateway/\">IPFS Gateway</a> (tcp/443)</li><li><a href=\"http://blog.cloudflare.com/cloudflare-ethereum-gateway/\">Ethereum Gateway</a> (tcp/443)</li><li><a href=\"http://blog.cloudflare.com/spectrum/\">Spectrum proxy</a> (tcp/any, udp/any)</li><li><a href=\"http://blog.cloudflare.com/announcing-warp-plus/\">WARP</a> (udp)</li></ol><p><a href=\"#quiz-1-question\">Go back</a></p><h3 id=\"quiz-2\">Quiz 2</h3><p>Q: Is there another way to bind a socket to all local addresses?</p><p>Yes, there is - by not <code>bind()</code>’ing it at all. Calling <code>listen()</code> on an unbound socket is equivalent to binding it to <code>INADDR_ANY</code> and letting the kernel pick a free port.</p><pre><code>$ strace -e socket,bind,listen nc -l\nsocket(AF_INET, SOCK_STREAM, IPPROTO_TCP) = 3\nlisten(3, 1)                            = 0\n^Z\n[1]+  Stopped                 strace -e socket,bind,listen nc -l\n$ ss -4tlnp\nState      Recv-Q Send-Q Local Address:Port               Peer Address:Port\nLISTEN     0      1            *:42669      </code></pre><p><a href=\"#quiz-2-question\">Go back</a></p><h3 id=\"quiz-3\">Quiz 3</h3><p>Q: Does setting the <code>SO_REUSEADDR</code> socket option have any effect at all when there is bind conflict?</p><p>Yes. If two processes are racing to <code>bind</code> and <code>listen</code> on the same TCP port, on an overlapping IP, setting <code>SO_REUSEADDR</code> changes which syscall will report an error (<code>EADDRINUSE</code>). Without <code>SO_REUSEADDR</code> it will always be the second bind. With <code>SO_REUSEADDR</code> set there is a window of opportunity for a second <code>bind</code> to succeed but the subsequent <code>listen</code> to fail.</p><p><a href=\"#quiz-3-question\">Go back</a></p><h3 id=\"quiz-4\"><strong>Quiz 4</strong></h3><p>Q: Are there really no problems with accepting any connection on any socket?</p><p>If the connection is destined for an address assigned to our host, i.e. a local address, there are no problems. However, for remote-destined connections, sending return traffic from a non-local address (i.e., one not present on any interface) will not get past the Linux network stack. The <code>IP_TRANSPARENT</code> socket option bypasses this protection mechanism known as <a href=\"https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=88ef4a5a78e63420dd1dd770f1bd1dc198926b04\">source address check</a> to lift this restriction.</p><p><a href=\"#quiz-4-question\">Go back</a></p>",
		"id": "5d9355a1fd9e450505d974b4",
		"meta_description": null,
		"meta_title": null,
		"og_description": null,
		"og_image": null,
		"og_title": null,
		"primary_author": {
			"id": "5d1644b141acde0011a9501b",
			"name": "Jakub Sitnicki",
			"slug": "jakub",
			"profile_image": "http://blog.cloudflare.com/content/images/2019/05/4_300698554542850065.jpg",
			"cover_image": "http://blog.cloudflare.com/content/images/2019/05/general@2x-2.png",
			"bio": null,
			"website": null,
			"location": null,
			"facebook": null,
			"twitter": null,
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/jakub/"
		},
		"primary_tag": {
			"id": "5d16450341acde0011a9524d",
			"name": "eBPF",
			"slug": "ebpf",
			"description": null,
			"feature_image": null,
			"visibility": "public",
			"meta_title": null,
			"meta_description": null,
			"og_image": null,
			"og_title": null,
			"og_description": null,
			"twitter_image": null,
			"twitter_title": null,
			"twitter_description": null,
			"codeinjection_head": null,
			"codeinjection_foot": null,
			"canonical_url": null,
			"accent_color": null,
			"url": "http://blog.cloudflare.com/tag/ebpf/"
		},
		"published_at": "2019-10-12T14:00:00.000+01:00",
		"reading_time": 13,
		"slug": "its-crowded-in-here",
		"tags": [
			{
				"id": "5d16450341acde0011a9524d",
				"name": "eBPF",
				"slug": "ebpf",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/ebpf/"
			},
			{
				"id": "5d16450341acde0011a951ff",
				"name": "Linux",
				"slug": "linux",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/linux/"
			},
			{
				"id": "5da0ce6efd9e450505d98322",
				"name": "UDP",
				"slug": "udp",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/udp/"
			}
		],
		"title": "It's crowded in here!",
		"twitter_description": null,
		"twitter_image": null,
		"twitter_title": null,
		"updated_at": "2024-06-17T09:54:41.000+01:00",
		"url": "http://blog.cloudflare.com/its-crowded-in-here/",
		"uuid": "5e0f22d8-bcde-47a8-83b6-8410022eae36",
		"visibility": "public"
	}
}