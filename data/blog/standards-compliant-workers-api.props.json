{
	"post": {
		"id": "636e5e70c343b2000a3607f6",
		"uuid": "f1f7c092-cf97-4d7f-837a-38e5999c79da",
		"title": "The road to a more standards-compliant Workers API",
		"slug": "standards-compliant-workers-api",
		"html": "<figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2022/11/image1-20.png\" class=\"kg-image\" alt=\"The road to a more standards-compliant Workers API\" loading=\"lazy\"></figure><p>Earlier this year, we <a href=\"http://blog.cloudflare.com/introducing-the-wintercg/\">announced our participation</a> in a new W3C Community Group for the advancement of Web-interoperable API standards. Since then, this new <a href=\"https://github.com/wintercg\">WinterCG</a> has been hard at work identifying the common API standards around which all JavaScript runtimes can build. Today I just want to give a peek at some work the WinterCG has been doing; and show off some of the improvements we have been making in the Workers runtime to increase alignment with Web Platform standards around event handling, task cancellation using AbortController, text encoding and decoding, URL parsing and pattern matching, and streams support.</p><h2 id=\"the-wintercg-minimum-common-web-platform-api\">The WinterCG Minimum Common Web Platform API</h2><p>Right at the start of the WinterCG activity, the group took some time to evaluate and compare the various non-browser JavaScript runtimes such as <a href=\"https://nodejs.org\">Node.js</a>, <a href=\"https://deno.land\">Deno</a>, <a href=\"https://oven.sh/\">Bun</a>, and <a href=\"https://workers.cloudflare.com/\">Workers</a> with the purpose of identifying the Web Platform APIs they all had in common. Following a very simple criteria, we looked at the standard APIs that were already implemented and supported by at least two of these runtimes and compiled those into a list that the WinterCG calls the \"<a href=\"https://common-min-api.proposal.wintercg.org/\">Minimum Common Web Platform API</a>\". This list will serve as the basis for what the community group defines as the minimum set of Web Platform APIs that should be implemented consistently across runtimes that claim to be \"Web-interoperable\".</p><p>The current list is straightforward:</p><!--kg-card-begin: html--><table>\n<thead>\n<tr>\n<td><a href=\"https://dom.spec.whatwg.org/#abortcontroller\" target=\"_blank\">AbortController</a></td>\n<td><a href=\"https://streams.spec.whatwg.org/#readablestreamdefaultcontroller\" target=\"_blank\">ReadableStreamDefaultController</a></td>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://dom.spec.whatwg.org/#abortsignal\" target=\"_blank\">AbortSignal</a></td>\n<td><a href=\"https://streams.spec.whatwg.org/#readablestreamdefaultreader\" target=\"_blank\">ReadableStreamDefaultReader</a></td>\n</tr>\n<tr>\n<td><a href=\"https://streams.spec.whatwg.org/#bytelengthqueuingstrategy\" target=\"_blank\">ByteLengthQueuingStrategy</a></td>\n<td><a href=\"https://w3c.github.io/webcrypto/#dfn-SubtleCrypto\" target=\"_blank\">SubtleCrypto</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wicg.github.io/compression/#compression-stream\" target=\"_blank\">CompressionStream</a></td>\n<td><a href=\"https://encoding.spec.whatwg.org/#textdecoder\" target=\"_blank\">TextDecoder</a></td>\n</tr>\n<tr>\n<td><a href=\"https://streams.spec.whatwg.org/#countqueuingstrategy\" target=\"_blank\">CountQueuingStrategy</a></td>\n<td><a href=\"https://encoding.spec.whatwg.org/#textdecoderstream\" target=\"_blank\">TextDecoderStream</a></td>\n</tr>\n<tr>\n<td><a href=\"https://w3c.github.io/webcrypto/#dfn-Crypto\" target=\"_blank\">Crypto</a></td>\n<td><a href=\"https://encoding.spec.whatwg.org/#textencoder\" target=\"_blank\">TextEncoder</a></td>\n</tr>\n<tr>\n<td><a href=\"https://w3c.github.io/webcrypto/#dfn-CryptoKey\" target=\"_blank\">CryptoKey</a></td>\n<td><a href=\"https://encoding.spec.whatwg.org/#textencoderstream\" target=\"_blank\">TextEncoderStream</a></td>\n</tr>\n<tr>\n<td><a href=\"https://wicg.github.io/compression/#decompression-stream\" target=\"_blank\">DecompressionStream</a></td>\n<td><a href=\"https://streams.spec.whatwg.org/#transformstream\" target=\"_blank\">TransformStream</a></td>\n</tr>\n<tr>\n<td><a href=\"https://webidl.spec.whatwg.org/#idl-DOMException\" target=\"_blank\">DOMException</a></td>\n<td><a href=\"https://streams.spec.whatwg.org/#transformstreamdefaultcontroller\" target=\"_blank\">TransformStreamDefaultController</a></td>\n</tr>\n<tr>\n<td><a href=\"https://dom.spec.whatwg.org/#event\" target=\"_blank\">Event</a></td>\n<td><a href=\"https://url.spec.whatwg.org/#url\" target=\"_blank\">URL</a></td>\n</tr>\n<tr>\n<td><a href=\"https://dom.spec.whatwg.org/#eventtarget\" target=\"_blank\">EventTarget</a></td>\n<td><a href=\"https://wicg.github.io/urlpattern/#urlpattern-class\" target=\"_blank\">URLPattern</a></td>\n</tr>\n<tr>\n<td><a href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller\" target=\"_blank\">ReadableByteStreamController</a></td>\n<td><a href=\"https://url.spec.whatwg.org/#urlsearchparams\" target=\"_blank\">URLSearchParams</a></td>\n</tr>\n<tr>\n<td><a href=\"https://streams.spec.whatwg.org/#readablestream\" target=\"_blank\">ReadableStream</a></td>\n<td><a href=\"https://streams.spec.whatwg.org/#writablestream\" target=\"_blank\">WritableStream</a></td>\n</tr>\n<tr>\n<td><a href=\"https://streams.spec.whatwg.org/#readablestreambyobreader\" target=\"_blank\">ReadableStreamBYOBReader</a></td>\n<td><a href=\"https://streams.spec.whatwg.org/#writablestreamdefaultcontroller\" target=\"_blank\">WritableStreamDefaultController</a></td>\n</tr>\n<tr>\n<td><a href=\"https://streams.spec.whatwg.org/#readablestreambyobrequest\" target=\"_blank\">ReadableStreamBYOBRequest</a></td>\n<td>&nbsp;</td>\n</tr>\n</tbody>\n</table><!--kg-card-end: html--><p>In addition to these, the WinterCG also expects Web-interoperable runtimes to have implementations of the <a href=\"https://html.spec.whatwg.org/multipage/webappapis.html#dom-atob\">atob()</a>, <a href=\"https://html.spec.whatwg.org/multipage/webappapis.html#dom-btoa\">btoa()</a>, <a href=\"https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-queuemicrotask\">queueMicrotask()</a>, <a href=\"https://html.spec.whatwg.org/multipage/structured-data.html#dom-structuredclone\">structuredClone()</a>, <a href=\"https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout\">setTimeout()</a>, <a href=\"https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-cleartimeout\">clearTimeout()</a>, <a href=\"https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-setinterval\">setInterval()</a>, <a href=\"https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-clearinterval\">clearInterval()</a>, <a href=\"https://console.spec.whatwg.org/#namespacedef-console\">console</a>, and<a href=\"https://w3c.github.io/webcrypto/#dom-windoworworkerglobalscope-crypto\"> crypto.subtle</a> APIs available on the global scope.<br></p><p>Today, we are happy to say that the Workers runtime has compliant or nearly compliant implementations of every one of these WinterCG Minimum Common Web Platform APIs. Some of these APIs intentionally diverge from the standards either due to backwards compatibility concerns, Workers-specific features, or performance optimizations. Other APIs diverge still because we are still in the process of updating them to align with the specifications.</p><h2 id=\"improving-standards-compliance-in-the-workers-runtime\">Improving standards compliance in the Workers runtime</h2><p>The Workers runtime has, from the beginning, had the mission to align its developer experience with JavaScript and Web Platform standards as much as possible. Over the past year we have worked hard to continue advancing that mission forward both by improving the standards-compliance of existing APIs such as Event, EventTarget, URL, and streams; and the introduction of new Web Platform APIs such as URLPattern, encoding streams, and compression streams.</p><h3 id=\"event-and-eventtarget\">Event and EventTarget</h3><p>The Workers runtime has provided an implementation of the Event and EventTarget Web Platform APIs from the very beginning. These were, however, only limited implementations of what the <a href=\"https://dom.spec.whatwg.org/#interface-event\">WHATWG DOM specification</a> defines. Specifically, Workers had only implemented the bare minimum of the Event API that it itself needed to operate.</p><p>Today, the Event and EventTarget implementations in Workers provide a more complete implementation.</p><p>Let's look at the official definition of Event as defined by the WHATWG DOM standard:</p><!--kg-card-begin: markdown--><pre><code>[Exposed=*]\ninterface Event {\n  constructor(DOMString type, optional EventInit eventInitDict = {});\n \n  readonly attribute DOMString type;\n  readonly attribute EventTarget? target;\n  readonly attribute EventTarget? srcElement; // legacy\n  readonly attribute EventTarget? currentTarget;\n  sequence&lt;EventTarget&gt; composedPath();\n \n  const unsigned short NONE = 0;\n  const unsigned short CAPTURING_PHASE = 1;\n  const unsigned short AT_TARGET = 2;\n  const unsigned short BUBBLING_PHASE = 3;\n  readonly attribute unsigned short eventPhase;\n \n  undefined stopPropagation();\n           attribute boolean cancelBubble; // legacy alias of .stopPropagation()\n  undefined stopImmediatePropagation();\n \n  readonly attribute boolean bubbles;\n  readonly attribute boolean cancelable;\n           attribute boolean returnValue;  // legacy\n  undefined preventDefault();\n  readonly attribute boolean defaultPrevented;\n  readonly attribute boolean composed;\n \n  [LegacyUnforgeable] readonly attribute boolean isTrusted;\n  readonly attribute DOMHighResTimeStamp timeStamp;\n \n  undefined initEvent(DOMString type, optional boolean bubbles = false, optional boolean cancelable = false); // legacy\n};\n \ndictionary EventInit {\n  boolean bubbles = false;\n  boolean cancelable = false;\n  boolean composed = false;\n};\n</code></pre>\n<!--kg-card-end: markdown--><p>Web Platform API specifications are always written in terms of a definition language called Web IDL. Every attribute defined in the interface is a property that is exposed on the object. Event objects, then, are supposed to have properties like <code>type</code>, <code>target</code>, <code>srcElement</code>, <code>currentTarget</code>, <code>bubbles</code>, <code>cancelable</code>, <code>returnValue</code>, <code>defaultPrevented</code>, <code>composed</code>, <code>isTrusted</code>, and <code>timeStamp</code>. They are also expected to have methods such as <code>composedPath()</code>, <code>stopPropagation()</code>, and <code>stopImmediatePropagation()</code>. Because most of these were not immediately needed by Workers, most were not provided originally.</p><p>Today, all standard, non-legacy properties and methods defined by the specification are available for use:</p><!--kg-card-begin: markdown--><pre><code> const event = new Event('foo', {\n    bubbles: false,\n    cancelable: true,\n    composed: true,\n  });\n \n  console.log(event.bubbles);\n  console.log(event.cancelable);\n  console.log(event.composed);\n  \n  addEventListener('foo', (event) =&gt; {\n    console.log(event.eventPhase);  // 2 AT_TARGET\n    console.log(event.currentTarget);\n    console.log(event.composedPath());\n  });\n \n  dispatchEvent(event);\n</code></pre>\n<!--kg-card-end: markdown--><p>While we were at it, we also fixed a long standing bug in the implementation of Event that prevented user code from properly subclassing the Event object to create their own custom event types. This change is protected by a <a href=\"https://developers.cloudflare.com/workers/platform/compatibility-dates/\">compatibility flag</a> that is now enabled by default for all Workers using a compatibility date on or past 2022-01-31.</p><!--kg-card-begin: markdown--><pre><code>  class MyEvent extends Event {\n    constructor() {\n      super('my-event')\n    }\n \n    get type() { return super.type.toUpperCase() }\n  }\n \n  const myEvent = new MyEvent();\n  // Previously, this would print &quot;my-event&quot; instead of &quot;MY-EVENT&quot; as expected.\n  console.log(myEvent.type);\n</code></pre>\n<!--kg-card-end: markdown--><p>The <code>EventTarget</code> implementation has also been updated to support once handlers (event handlers that are triggered at-most once then automatically unregistered), cancelable handlers (using <code>AbortSignal</code>), and event listener objects, all in line with the standard.</p><p><strong>Using a one-time event handler</strong></p><!--kg-card-begin: markdown--><pre><code>  addEventListener('foo', (event) =&gt; {\n    console.log('printed only once');\n  }, {\n    once: true\n  });\n \n  dispatchEvent(new Event('foo'));\n  dispatchEvent(new Event('foo'));\n</code></pre>\n<!--kg-card-end: markdown--><p>Once handlers are key for preventing memory leaks in your applications when you know that a particular event is only ever going to be emitted once, or whenever you only care about handling it once. The stored reference to the function or object that is handling the event is removed immediately upon the first invocation, allowing the memory to be garbage collected.</p><p><strong>Using a cancelable event handler</strong></p><!--kg-card-begin: markdown--><pre><code>  const ac = new AbortController();\n \n  addEventListener('foo', (event) =&gt; {\n    console.log('not printed at all');\n  }, {\n    signal: ac.signal\n  });\n \n  ac.abort();\n \n  dispatchEvent(new Event('foo'));\n</code></pre>\n<!--kg-card-end: markdown--><p><strong>Using an event listener object</strong></p><p>While passing a function to <code>addEventListener(</code>) is the most common case, the standard actually allows an event listener to be an object with a <code>handleEvent()</code> method as well.</p><!--kg-card-begin: markdown--><pre><code>  const listener = {\n    handleEvent(event) {\n      console.log(event.type);\n    }\n  };\n \n  addEventListener('foo', listener);\n  addEventListener('bar', listener);\n \n  dispatchEvent(new Event('foo'));\n  dispatchEvent(new Event('bar'));\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"abortcontroller-and-abortsignal\">AbortController and AbortSignal</h3><p>As illustrated in the cancelable event example above, we have also introduced an implementation of the <code>AbortController</code> and <code>AbortSignal</code> APIs into Workers. These provide a standard, and interoperable way of signaling cancellation of several kinds of tasks.</p><p>The <code>AbortController/AbortSignal</code> pattern is straightforward: An <code>AbortSignal</code> is just a type of <code>EventTarget</code> that will emit a single \"abort\" event when it is triggered:</p><!--kg-card-begin: markdown--><pre><code>  const ac = new AbortController();\n \n  ac.signal.addEventListener('abort', (event) =&gt; {\n    console.log(event.reason);  // 'just because'\n  }, { once: true });\n \n  ac.abort('just because');\n</code></pre>\n<!--kg-card-end: markdown--><p>The <code>AbortController</code> is used to actually trigger the abort event, optionally with a reason argument that is passed on to the event. The reason is typically an Error object but can be any JavaScript value.</p><p>The <code>AbortSignal</code> can only be triggered once, so the \"abort\" event should only ever be emitted once.</p><p>It is also possible to create <code>AbortSignals</code> that timeout after a specified period of time:</p><p><code>const signal = AbortSignal.timeout(10);</code></p><p>Or an <code>AbortSignal</code> that is pre-emptively triggered immediately on creation (these will never actually emit the \"abort\" event):</p><p><code>const signal = AbortSignal.abort('for reasons');</code></p><p>Currently, within Workers, <code>AbortSignal</code> and <code>AbortController</code> has been integrated with the <code>EventTarget</code>, <code>fetch()</code>, and streams APIs in alignment with the relevant standard specifications for each.</p><h4 id=\"using-abortsignal-to-cancel-a-fetch-\"><strong>Using AbortSignal to cancel a fetch()</strong></h4><!--kg-card-begin: markdown--><pre><code>  const ac = new AbortController();\n \n  const res = fetch('https://example.org', {\n    signal: ac.signal\n  });\n \n  ac.abort(new Error('canceled'))\n \n  try {\n    await res;\n  } catch (err) {\n    console.log(err);\n  }\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"textencoderstream-and-textdecoderstream\">TextEncoderStream and TextDecoderStream</h3><p>The Workers runtime has long provided basic implementations of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder\"><code>TextEncoder</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder\"><code>TextDecoder</code></a> APIs. Initially, these were limited to only supporting encoding and decoding of UTF-8 text. The standard definition of <code>TextDecoder</code>, however, defines a much broader range of text encodings that are now fully supported by the Workers implementation. Per the standard, <code>TextEncoder</code> currently only supports UTF-8.</p><!--kg-card-begin: markdown--><pre><code>  const win1251decoder = new TextDecoder(&quot;windows-1251&quot;);\n  const bytes = new Uint8Array([\n    207, 240, 232, 226, 229, 242, 44, 32, 236, 232, 240, 33,\n  ]);\n  console.log(win1251decoder.decode(bytes)); // Привет, мир!\n</code></pre>\n<!--kg-card-end: markdown--><p>In addition to supporting the full range of encodings defined by the standard, Workers also now provides implementations of the <code>TextEncoderStream</code> and <code>TextDecoderStream</code>, which provide <code>TransformStream</code> implementations that apply encoding and decoding to streaming data:</p><!--kg-card-begin: markdown--><pre><code>  const { writable, readable } = new TextDecoderStream(&quot;windows-1251&quot;);\n \n  const writer = writable.getWriter();\n  writer.write(new Uint8Array([\n    207, 240, 232, 226, 229, 242, 44, 32, 236, 232, 240, 33,\n  ]));\n \n  const reader = readable.getReader();\n  const res = await reader.read();\n  console.log(res.value); // Привет, мир!\n</code></pre>\n<!--kg-card-end: markdown--><p>Using the encoding streams requires the use of the <code>transformstream_enable_standard_constructor</code> <a href=\"https://developers.cloudflare.com/workers/platform/compatibility-dates/\">compatibility flag</a>.</p><h3 id=\"compressionstream-and-decompressionstream\">CompressionStream and DecompressionStream</h3><p>Streaming compression and decompression is also now supported in the runtime using the standard <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CompressionStream\"><code>CompressionStream</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DecompressionStream\"><code>DecompressionStream</code></a> APIs.</p><!--kg-card-begin: markdown--><pre><code>const ds = new DecompressionStream('gzip');\nconst decompressedStream = blob.stream().pipeThrough(ds);\n\nconst cs = new CompressionStream('gzip');\nconst compressedStream = blob.stream().pipeThrough(cs);\n</code></pre>\n<!--kg-card-end: markdown--><p>These are <code>TransformStream</code> implementations that fully conform to the standard definitions. Use of the compression streams does not require a compatibility flag to enable.</p><h3 id=\"url-and-urlpattern\">URL and URLPattern</h3><p>Similar to Event, there has been an implementation of the Web Platform standard URL API available within Workers from nearly the beginning. But also like Event, the implementation was not entirely compatible with the standard.</p><p>The incompatibilities were subtle, for instance, in the original implementation, the URL string \"<code>https://a//b//c//</code>\" would be parsed incorrectly as \"<code>https://a/b/c</code>\" (note that the extra empty path segments are removed) whereas the standard parsing algorithm would produce \"<code>https://a//b//c/</code>\" as a result. Such inconsistent results were causing interoperability issues with JavaScript written to run across multiple JavaScript runtimes and needed to be fixed.</p><p>A new implementation of the URL parsing algorithm has been provided, and as of October 31, 2022 it has been enabled by default for all newly deployed Workers. Older Workers can begin using the new implementation by updating their compatibility dates to 2022-10-31 or by enabling the <code>url_standard</code> compatibility flag.</p><p>Along with the updated URL implementation, Workers now provides an implementation of the standard <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/URLPattern\">URLPattern</a> API.</p><p><code>URLPattern</code> provides a regular-expression-like syntax for matching a <code>URL</code> string against a pattern. For instance, consider this example taken from the MDN documentation for <code>URLPattern</code>:</p><!--kg-card-begin: markdown--><pre><code>  // Matching a pathname\n  let pattern1 = new URLPattern('https://example.com/books/:id')\n  // same as\n  let pattern2 = new URLPattern(\n    '/books/:id',\n    'https://example.com',\n  );\n  // or\n  let pattern3 = new URLPattern({\n    protocol: 'https',\n    hostname: 'example.com',\n    pathname: '/books/:id',\n  });\n  // or\n  let pattern4 = new URLPattern({\n    pathname: '/books/:id',\n    baseURL: 'https://example.com',\n  });\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"readablestream-writablestream-and-transformstream\">ReadableStream, WritableStream, and TransformStream</h3><p>Last, but absolutely not least, our most significant effort over the past year has been providing new standards compliant implementations of the <code>ReadableStream</code>, <code>WritableStream</code>, and <code>TransformStream</code> APIs.</p><p>The Workers runtime has always provided an implementation of these objects but they were never fully conformant to the standard. User code was not capable of creating custom <code>ReadableStream</code> and <code>WritableStream</code> instances, and <code>TransformStreams</code> were limited to simple identity pass-throughs of bytes. The implementations have been updated now to near complete compliance with the standard (near complete because we still have a few edge cases and features we are working on).</p><p>The new streams implementation will be enabled by default in all new Workers as of November 30, 2022, or can be enabled earlier using the <code>streams_enable_constructors</code> and <code>transformstream_enable_standard_constructor</code> compatibility flags.</p><h4 id=\"creating-a-custom-readablestream\"><strong>Creating a custom ReadableStream</strong></h4><!--kg-card-begin: markdown--><pre><code>async function handleRequest(request) {\n  const enc = new TextEncoder();\n\n  const rs = new ReadableStream({\n    pull(controller) {\n      controller.enqueue(enc.encode('hello world'));\n      controller.close();\n    }\n  });\n\n  return new Response(rs);\n}\n</code></pre>\n<!--kg-card-end: markdown--><p>The new implementation supports both \"regular\" and \"bytes\" <code>ReadableStream</code> types, supports BYOB readers, and includes performance optimizations for both <code>tee()</code> and <code>pipeThrough()</code>.</p><h4 id=\"creating-a-custom-writablestream\"><strong>Creating a custom WritableStream</strong></h4><!--kg-card-begin: markdown--><pre><code>  const ws = new WritableStream({\n    write(chunk) {\n      console.log(chunk);  // &quot;hello world&quot;\n    }\n  });\n \n  const writer = ws.getWriter();\n  writer.write(&quot;hello world&quot;);\n</code></pre>\n<!--kg-card-end: markdown--><p><code>WritableStreams</code> are fairly simple objects that can accept any JavaScript value written to them.</p><h4 id=\"creating-a-custom-transformstream\"><strong>Creating a custom TransformStream</strong></h4><!--kg-card-begin: markdown--><pre><code>  const { readable, writable } = new TransformStream({\n    transform(chunk, controller) {\n      controller.enqueue(chunk.toUpperCase());\n    }\n  });\n \n  const writer = writable.getWriter();\n  const reader = readable.getReader();\n \n  writer.write(&quot;hello world&quot;);\n \n  const res = await reader.read();\n  console.log(res.value);  // &quot;HELLO WORLD&quot;\n</code></pre>\n<!--kg-card-end: markdown--><p>It has always been possible in Workers to call new <code>TransformStream()</code> (with no arguments) to create a limited version of a <code>TransformStream</code> that only accepts bytes and only acts as a pass-through, passing the bytes written to the writer on to the reader without any modification.</p><p>That original implementation is now available within Workers using the <code>IdentityTransformStream</code> class.</p><!--kg-card-begin: markdown--><pre><code>  const { readable, writable } = new IdentityTransformStream();\n \n  const writer = writable.getWriter();\n  const reader = readable.getReader();\n \n  const enc = new TextEncoder();\n  const dec = new TextDecoder();\n \n  writer.write(enc.encode(&quot;hello world&quot;));\n \n  const res = await reader.read();\n  console.log(dec.decode(res.value));  // &quot;hello world&quot;\n</code></pre>\n<!--kg-card-end: markdown--><p>If your code is using new <code>TransformStream()</code> today as this kind of pass-through, the new implementation will continue to work except for one very important difference: the old, non-standard implementation of new <code>TransformStream()</code> supported BYOB reads on the readable side (i.e. <code>readable.getReader({ mode: 'byob' })</code>). The new implementation (enabled via a compatibility flag and becoming the default on November 30 ) does not support BYOB reads as required by the stream standard.</p><h2 id=\"what-s-next\">What's next</h2><p>It is clear that we have made a lot of progress in improving the standards compliance of the Workers runtime over the past year, but there is far more to do. Next we will be turning our attention to the implementation of the fetch() and WebSockets APIs, as well as actively seeking closer alignment with other runtimes through collaboration in the Web-interoperable Runtimes Community Group.</p><p>If you are interested in helping drive the implementation of Web Platform APIs forward, and advancing interoperability between JavaScript runtime environments, the Workers Runtime team at Cloudflare is hiring! Reach out, or see our open positions <a href=\"https://www.cloudflare.com/careers/jobs/?title=Workers+Runtime\">here</a>.</p>",
		"comment_id": "636e5e70c343b2000a3607f6",
		"feature_image": "http://blog.cloudflare.com/content/images/2022/11/image1-16.png",
		"featured": false,
		"visibility": "public",
		"created_at": "2022-11-11T14:38:40.000+00:00",
		"updated_at": "2024-02-15T23:55:23.000+00:00",
		"published_at": "2022-11-14T14:00:00.000+00:00",
		"custom_excerpt": "We have been making improvements in the Workers runtime to increase alignment with Web Platform standards around event handling, task cancellation using AbortController, text encoding and decoding, URL parsing and pattern matching, and streams support.",
		"codeinjection_head": null,
		"codeinjection_foot": null,
		"custom_template": null,
		"canonical_url": null,
		"tags": [
			{
				"id": "636e5f24c343b2000a3607fd",
				"name": "#BLOG-1454",
				"slug": "hash-blog-1454",
				"description": null,
				"feature_image": null,
				"visibility": "internal",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/404/"
			},
			{
				"id": "607030964b1e0f03f340f2d8",
				"name": "Developer Week",
				"slug": "developer-week",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developer-week/"
			},
			{
				"id": "5d16450341acde0011a95253",
				"name": "Cloudflare Workers",
				"slug": "workers",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/workers/"
			},
			{
				"id": "5d16450341acde0011a95194",
				"name": "API",
				"slug": "api",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/api/"
			},
			{
				"id": "5d16450341acde0011a95204",
				"name": "Developers",
				"slug": "developers",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Developers-1.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Developers",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Developers'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developers/"
			},
			{
				"id": "64a3e2b834124c000b00b717",
				"name": "Developer Platform",
				"slug": "developer-platform",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developer-platform/"
			}
		],
		"authors": [
			{
				"id": "618c3373015c6002aaf447a3",
				"name": "James M Snell",
				"slug": "jasnell",
				"profile_image": "http://blog.cloudflare.com/content/images/2021/11/mecoffee.jpg",
				"cover_image": "http://blog.cloudflare.com/content/images/2021/11/IMG_5946.jpg",
				"bio": null,
				"website": null,
				"location": "California",
				"facebook": null,
				"twitter": "@jasnell",
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/jasnell/"
			}
		],
		"primary_author": {
			"id": "618c3373015c6002aaf447a3",
			"name": "James M Snell",
			"slug": "jasnell",
			"profile_image": "http://blog.cloudflare.com/content/images/2021/11/mecoffee.jpg",
			"cover_image": "http://blog.cloudflare.com/content/images/2021/11/IMG_5946.jpg",
			"bio": null,
			"website": null,
			"location": "California",
			"facebook": null,
			"twitter": "@jasnell",
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/jasnell/"
		},
		"primary_tag": null,
		"url": "http://blog.cloudflare.com/standards-compliant-workers-api/",
		"excerpt": "We have been making improvements in the Workers runtime to increase alignment with Web Platform standards around event handling, task cancellation using AbortController, text encoding and decoding, URL parsing and pattern matching, and streams support.",
		"reading_time": 9,
		"access": true,
		"comments": false,
		"og_image": "http://blog.cloudflare.com/content/images/2022/11/The-road-to-a-more-standards-compliant-Workers-API-OG-1.png",
		"og_title": null,
		"og_description": null,
		"twitter_image": "http://blog.cloudflare.com/content/images/2022/11/The-road-to-a-more-standards-compliant-Workers-API-OG.png",
		"twitter_title": null,
		"twitter_description": null,
		"meta_title": null,
		"meta_description": "We have been making improvements in the Workers runtime to increase alignment with Web Platform standards around event handling, task cancellation using AbortController, text encoding and decoding, URL parsing and pattern matching, and streams support.",
		"email_subject": null,
		"frontmatter": null,
		"feature_image_alt": null,
		"feature_image_caption": null
	},
	"locale": "en-us"
}