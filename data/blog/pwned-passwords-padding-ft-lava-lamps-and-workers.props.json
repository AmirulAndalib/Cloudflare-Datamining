{
	"locale": "en-us",
	"post": {
		"access": true,
		"authors": [
			{
				"id": "5d1644b141acde0011a94f6e",
				"name": "Junade Ali",
				"slug": "junade-ali",
				"profile_image": "http://blog.cloudflare.com/content/images/2017/03/G1VwuaxB.jpg",
				"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-8.png",
				"bio": null,
				"website": null,
				"location": null,
				"facebook": null,
				"twitter": "@IcyApril",
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/junade-ali/"
			}
		],
		"canonical_url": null,
		"codeinjection_foot": null,
		"codeinjection_head": null,
		"comment_id": "5e56dfef82886b01bd03410a",
		"comments": false,
		"created_at": "2020-02-26T21:15:27.000+00:00",
		"custom_excerpt": "Starting today, we are offering a new security advancement in the Pwned Passwords API - API clients can receive responses padded with random data.",
		"custom_template": null,
		"email_subject": null,
		"excerpt": "Starting today, we are offering a new security advancement in the Pwned Passwords API - API clients can receive responses padded with random data.",
		"feature_image": "http://blog.cloudflare.com/content/images/2020/02/Pwned-Passwords-Padding@2x-1.png",
		"feature_image_alt": null,
		"feature_image_caption": null,
		"featured": false,
		"frontmatter": null,
		"html": "<figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2020/02/Pwned-Passwords-Padding@2x.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>The Pwned Passwords API (part of Troy Hunt’s <a href=\"https://haveibeenpwned.com/\">Have I Been Pwned</a> service) is used tens of millions of times each day, to alert users if their credentials are breached in a variety of online services, browser extensions and applications. Using Cloudflare, the API cached around 99% of requests, making it very efficient to run.</p><p>From today, we are offering a new security advancement in the Pwned Passwords API - API clients can receive responses padded with random data. This exists to effectively protect from any potential attack vectors which seek to use passive analysis of the size of API responses to identify which anonymised bucket a user is querying. I am hugely grateful to security researcher Matt Weir who I met at <a href=\"https://passwordscon.org/\">PasswordsCon</a> in Stockholm and has explored <a href=\"https://github.com/lakiw/pwnedpasswords_padding\">proof-of-concept</a> analysis of unpadded API responses in Pwned Passwords and has driven some of the work to consider the addition of padded responses.</p><p>Now, by passing a header of “Add-Padding” with a value of “true”, Pwned Passwords API users are able to request padded API responses (to a minimum of 800 entries with additional padding of a further 0-200 entries). The padding consists of randomly generated hash suffixes with the usage count field set to “0”.</p><p>Clients using this approach should seek to exclude 0-usage hash suffixes from breach validation. Given most implementations of PwnedPasswords simply do string matching on the suffix of a hash, there is no real performance implication of searching through the padding data. The false positive risk if a hash suffix matches a randomly generated response is very low, 619/(2<sup>35*4</sup>) ≈ 4.44 x 10<sup>-40</sup>. This means you’d need to do about 10<sup>40</sup> queries (roughly a query for every two atoms in the universe) to have a 44.4% probability of a collision.</p><p>In the future, non-padded responses will be deprecated outright (and all responses will be padded) once clients have had a chance to update.</p><p>You can see an example padded request by running the following curl request:</p><!--kg-card-begin: markdown--><pre><code>curl -H Add-Padding:true https://api.pwnedpasswords.com/range/FFFFF\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"api-structure\">API Structure</h2><p>The high level structure of the Pwned Passwords API is discussed in my original blog post “<a href=\"http://blog.cloudflare.com/validating-leaked-passwords-with-k-anonymity/\">Validating Leaked Passwords with k-Anonymity</a>”. In essence, a client queries the API for the first 5 hexadecimal characters of a SHA-1 hashed password (amounting to 20 bits), a list of responses is returned with the remaining 35 hexadecimal characters of the hash (140 bits) of every breached password in the dataset. Each hash suffix is appended with a colon (“:”) and the number of times that given hash is found in the breached data.</p><p>An example query for <em>FFFFF</em> can be seen below, with the structure represented:</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2020/02/pwned_passwords_curl.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>Without padding, the message length varies given the amount of hash suffixes in the bucket that is queried. It is known that it is possible to fingerprint TLS traffic based on the encrypted message length - fortunately this padding can be inserted in the API responses themselves (in the HTTP content). We can see the difference in download size between two unpadded buckets by running:</p><!--kg-card-begin: markdown--><pre><code>$ curl -so /dev/null https://api.pwnedpasswords.com/range/E0812 -w '%{size_download} bytes\\n'\n17022 bytes\n$ curl -so /dev/null https://api.pwnedpasswords.com/range/834EF -w '%{size_download} bytes\\n'\n25118 bytes\n</code></pre>\n<!--kg-card-end: markdown--><p>The randomised padded entries can be found with with the “:0” suffix (indicating usage count); for example, below the top three entries are real entries whilst the last 3 represent padding data:</p><!--kg-card-begin: markdown--><pre><code>FF1A63ACC70BEA924C5DBABEE4B9B18C82D:10\nFF8A0382AA9C8D9536EFBA77F261815334D:12\nFFEE791CBAC0F6305CAF0CEE06BBE131160:2\n2F811DCB8FF6098B838DDED4D478B0E4032:0\nA1BABA501C55ACB6BDDC6D150CF585F20BE:0\n9F31397459FF46B347A376F58506E420A58:0\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"compression-and-randomisation\">Compression and Randomisation</h2><p>Cloudflare supports both GZip and Brotli for compression. Compression benefits the PwnedPasswords API as responses are hexadecimal represented in ASCII. That said, compression is somewhat limited given the Avalanche Effect in hashing algorithms (that a small change in an input results in a completely different hash output) - each range searched has dramatically different input passwords and the remaining 35 characters of the SHA-1 hash are similarly different and have no expected similarity between them.</p><p>Accordingly, if one were to simply pad messages with null messages (say “000...”), the compression could mean that values padded to the same could be differentiated after compression. Similarly, even without compression, padding messages with the same data could still yield credible attacks.</p><p>Accordingly, padding is instead generated with randomly generated entries. In order to not break clients, such padding is generated to effectively look like legitimate hash suffixes. It is possible, however, to identify such messages as randomised padding. As the PwnedPasswords API contains a count field (distinguished by a colon after the remainder of the hex followed by a numerical count), randomised entries can be distinguished with a 0 usage.</p><h2 id=\"lava-lamps-and-workers\">Lava Lamps and Workers</h2><p>I’ve written before about how <a href=\"http://blog.cloudflare.com/optimising-caching-on-pwnedpasswords/\">cache optimisation of Pwned Passwords</a> (including using Cloudflare Workers). Cloudflare Workers has an additional benefit that Workers run before elements are pulled from cache.</p><p>This allows for randomised entries to be generated dynamically on a request-to-request basis instead of being cached. This means the resulting randomised padding can differ from request-to-request (thus the amount of entries in a given response and the size of the response).</p><p>Cloudflare Workers supports the <a href=\"https://developers.cloudflare.com/workers/reference/apis/web-crypto/\">Web Crypto API</a>, providing for exposure of a cryptographically sound random number generator. This random number generator is used to decide the variable amount of padding added to each response. Whilst a cryptographically secure random number generator is used for determining the amount of padding, as the random hexadecimal padding does not need to be indistinguishable from the real hashes, for computational performance we use the non-cryptographically secure <em>Math.random()</em> to generate the actual content of the padding.</p><p>Famously, one of the sources of entropy used in Cloudflare servers is <a href=\"http://blog.cloudflare.com/lavarand-in-production-the-nitty-gritty-technical-details/\">sourced from Lava Lamps</a>. By filming a wall of lava lamps in our San Francisco office (with individual photoreceptors picking up on random noise beyond the movement of the lava), we are able to generate random seed data used in servers (complimented by other sources of entropy along the way). This lava lamp entropy is used alongside the randomness sources on individual servers. This entropy is used to seed <em>cryptographically secure pseudorandom number generators</em> (CSPRNG) algorithms when generating random numbers. Cloudflare Workers runtime uses the <a href=\"https://developers.cloudflare.com/workers/about/how-it-works/\">v8 engine</a> for JavaScript, with randomness <a href=\"https://github.com/v8/v8/blob/master/src/base/utils/random-number-generator.cc#L63\">sourced</a> from <em>/dev/urandom</em> on the server itself.</p><p>Each response is padded to a minimum of 800 hash suffixes and a randomly generated amount of additional padding (from 200 entries).</p><p>This can be seen in two ways, firstly we can see that repeating the same responses to the same endpoint (with the underlying response being cached), yields a randomised amount of lines between 800 and 1000:</p><!--kg-card-begin: markdown--><pre><code>$ for run in {1..10}; do curl -s -H Add-Padding:true https://api.pwnedpasswords.com/range/FFFFF | wc -l; done\n     831\n     956\n     870\n     980\n     932\n     868\n     856\n     961\n     912\n     827\n</code></pre>\n<!--kg-card-end: markdown--><p>Secondly, we can see a randomised download size in each response:</p><!--kg-card-begin: markdown--><pre><code>$ for run in {1..10}; do curl -so /dev/null -H Add-Padding:true https://api.pwnedpasswords.com/range/FFFFF -w '%{size_download} bytes\\n'; done\n35572 bytes\n37358 bytes\n38194 bytes\n33596 bytes\n32304 bytes\n37168 bytes\n32532 bytes\n37928 bytes\n35154 bytes\n33178 bytes\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"future-work-and-conclusion\">Future Work and Conclusion</h2><p>There has been a considerable amount of research that has complemented the anonymity approach in Pwned Passwords. For example; Google and Stanford have written a paper about their approach implemented in Google Password Checkup, “Protecting accounts from credential stuffing with password breach alerting” [<a href=\"https://www.usenix.org/system/files/sec19-thomas.pdf\">Usenix</a>].</p><p>We have done a significant amount of work exploring more advanced protocols for Pwned Passwords, some of this work can be found in a paper we worked on with academics at Cornell University, “Protocols for Checking Compromised Credentials” [<a href=\"https://dl.acm.org/doi/abs/10.1145/3319535.3354229\">ACM</a> or <a href=\"https://arxiv.org/pdf/1905.13737.pdf\">arXiv preprint</a>]. This research offers two new protocols (FSB, frequency smoothing bucketization, and IDB, identifier-based bucketization) to further reduce information leakage in the APIs.</p><p>Further work is needed before these protocols gain the production worthiness that we’d like before they are shipped - but, as always, we’ll keep you updated here on our blog.<br><br><br></p>",
		"id": "5e56dfef82886b01bd03410a",
		"meta_description": null,
		"meta_title": null,
		"og_description": null,
		"og_image": "https://blog-cloudflare-com-assets.storage.googleapis.com/2020/03/facebook-Linked_Image___Pwned-Passwords-Padding@3x.png",
		"og_title": null,
		"primary_author": {
			"id": "5d1644b141acde0011a94f6e",
			"name": "Junade Ali",
			"slug": "junade-ali",
			"profile_image": "http://blog.cloudflare.com/content/images/2017/03/G1VwuaxB.jpg",
			"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-8.png",
			"bio": null,
			"website": null,
			"location": null,
			"facebook": null,
			"twitter": "@IcyApril",
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/junade-ali/"
		},
		"primary_tag": {
			"id": "5d16450341acde0011a9523f",
			"name": "Passwords",
			"slug": "passwords",
			"description": null,
			"feature_image": null,
			"visibility": "public",
			"meta_title": null,
			"meta_description": null,
			"og_image": null,
			"og_title": null,
			"og_description": null,
			"twitter_image": null,
			"twitter_title": null,
			"twitter_description": null,
			"codeinjection_head": null,
			"codeinjection_foot": null,
			"canonical_url": null,
			"accent_color": null,
			"url": "http://blog.cloudflare.com/tag/passwords/"
		},
		"published_at": "2020-03-04T13:00:00.000+00:00",
		"reading_time": 5,
		"slug": "pwned-passwords-padding-ft-lava-lamps-and-workers",
		"tags": [
			{
				"id": "5d16450341acde0011a9523f",
				"name": "Passwords",
				"slug": "passwords",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/passwords/"
			},
			{
				"id": "5d16450341acde0011a95252",
				"name": "Serverless",
				"slug": "serverless",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Serverless.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Serverless",
				"meta_description": "Cloudflare blog posts tagged 'serverless'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/serverless/"
			},
			{
				"id": "5d16450341acde0011a95265",
				"name": "Security",
				"slug": "security",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Security.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Security",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Security'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/security/"
			},
			{
				"id": "5d16450341acde0011a95277",
				"name": "Cryptography",
				"slug": "cryptography",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/cryptography/"
			},
			{
				"id": "5d16450341acde0011a95253",
				"name": "Cloudflare Workers",
				"slug": "workers",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/workers/"
			},
			{
				"id": "5d16450341acde0011a95223",
				"name": "LavaRand",
				"slug": "lavarand",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/lavarand/"
			}
		],
		"title": "Pwned Passwords Padding (ft. Lava Lamps and Workers)",
		"twitter_description": null,
		"twitter_image": "https://blog-cloudflare-com-assets.storage.googleapis.com/2020/03/twitter-In-Stream_Wide___Pwned-Passwords-Padding@3x.png",
		"twitter_title": null,
		"updated_at": "2020-03-04T13:00:00.000+00:00",
		"url": "http://blog.cloudflare.com/pwned-passwords-padding-ft-lava-lamps-and-workers/",
		"uuid": "619f107e-885e-4224-bd63-1d4d69417347",
		"visibility": "public"
	}
}