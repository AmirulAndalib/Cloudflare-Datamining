{
	"locale": "en-us",
	"post": {
		"access": true,
		"authors": [
			{
				"id": "5d1644b141acde0011a94f96",
				"name": "Guest Author",
				"slug": "guest-author",
				"profile_image": "https://blog-cloudflare-com-assets.storage.googleapis.com/2019/10/Screen-Shot-2019-10-09-at-11.21.59-AM.png",
				"cover_image": "http://blog.cloudflare.com/content/images/2019/05/general@2x-9.png",
				"bio": null,
				"website": null,
				"location": null,
				"facebook": null,
				"twitter": null,
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/guest-author/"
			}
		],
		"canonical_url": null,
		"codeinjection_foot": null,
		"codeinjection_head": null,
		"comment_id": "5c7f0fc2205d0400c0989c96",
		"comments": false,
		"created_at": "2019-03-06T00:09:38.000+00:00",
		"custom_excerpt": "With this post we illustrate the potential applications of Cloudflare Workers in relation to search engine optimization, which is more commonly referred to as ‘SEO’ using our research and testing over the past year making Sloth.",
		"custom_template": null,
		"email_subject": null,
		"excerpt": "With this post we illustrate the potential applications of Cloudflare Workers in relation to search engine optimization, which is more commonly referred to as ‘SEO’ using our research and testing over the past year making Sloth.",
		"feature_image": "http://blog.cloudflare.com/content/images/2019/03/request-filter-chain-1.png",
		"feature_image_alt": null,
		"feature_image_caption": null,
		"featured": false,
		"frontmatter": null,
		"html": "<p><em>This is a guest post by Igor Krestov and Dan Taylor. Igor is a lead software developer at SALT.agency, and Dan a lead technical SEO consultant, and has also been credited with <a href=\"https://searchengineland.com/service-workers-and-seo-seo-for-developers-311292\">coining the term “edge SEO”</a>. <a href=\"https://salt.agency/\">SALT.agency</a> is a technical SEO agency with offices in London, Leeds, and Boston, offering bespoke consultancy to brands around the world. You can reach them both via <a href=\"https://twitter.com/salt_agency\">Twitter</a>.</em></p><p>With this post we illustrate the potential applications of <a href=\"https://www.cloudflare.com/products/cloudflare-workers/\">Cloudflare Workers</a> in relation to search engine optimization, which is more commonly referred to as ‘SEO’ using our research and testing over the past year making Sloth.</p><p>This post is aimed at readers who are both proficient in writing performant JavaScript, as well as complete newcomers, and less technical stakeholders, who haven’t really written many lines of code before.</p><h2 id=\"endless-practical-applications-to-overcome-obstacles\">Endless practical applications to overcome obstacles</h2><p>Working with various clients and projects over the years we’ve continuously encountered the same problems and obstacles in getting their websites to a point of “technical SEO excellence”. A lot of these problems come from platform restriction at an enterprise level, legacy tech stacks, incorrect builds, and years of patching together various services and infrastructures.</p><p>As a team of technical SEO consultants, we can often be left frustrated by these barriers, that often lead to essential fixes and implementations either being not possible or delayed for months (if not years) at a time – and in this time, the business is often losing traffic and revenue.</p><p>Workers offers us a hail Mary solution to a lot of common frustrations in getting technical SEO implemented, and we believe in the long run can become an integral part of overcoming legacy issues, reducing DevOps costs, speeding up lead times, all in addition to utilising a globally distributed serverless platform with blazing fast cold start times.</p><h2 id=\"creating-accessibility-at-scale\">Creating accessibility at scale</h2><p>When we first started out, we needed to implement simple redirects, which should be easy to create on the majority of platforms but wasn’t supported in this instance.</p><p>When the second barrier arose, we needed to inject Hreflang tags, cross-linking an old multi-lingual website on a bespoke platform build to an outdated spec. This required experiments to find an efficient way of implementing the tags without increasing latency or adding new code to the server – in a manner befitting of search engine crawling.</p><p>At this point we had a number of other applications for Workers, with arising need for non-developers to be able to modify and deploy new Worker code. This has since become an idea of Worker code generation, via Web UI or command line.</p><p>Having established a number of different use cases for Workers, we identified 3 processing phases:</p><ul><li>Incoming request modification – changing origin request URL or adding authorization headers.</li><li>Outgoing response modification - adding security headers, Hreflang header injection, logging.</li><li>Response body modification – injecting/changing content e.g. canonicals, robots and JSON-LD</li></ul><p>We wanted to generate lean Worker code, which would enable us to keep each functionality contained and independent of another, and went with an idea of filter chains, which can be used to compose fairly complex request processing.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"http://blog.cloudflare.com/content/images/2019/03/request-filter-chain.png\" class=\"kg-image\" alt loading=\"lazy\"><figcaption>A request chain depicting the path of a request as it is transformed while moving from client to origin server and back again.</figcaption></figure><p>A key accessibility issue we identified from a non-technical perspective was the goal trying of making this serverless technology accessible to all in SEO, because with understanding comes buy-in from stakeholders. In order to do this, we had to make Workers:</p><ul><li>Accessible to users who don’t understand how to write JavaScript / Performant JavaScript</li><li>Process of implementation can complement existing deployment processes</li><li>Process of implementation is secure (internally and externally)</li><li>Process of implementation is compliant with data and privacy policies</li><li>Implementations must be able to be verified through existing processes and practices (BAU)</li></ul><p>Before we dive into actual filters, here are partial TypeScript interfaces to illustrate filter APIs:</p><p></p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">interface FilterExecutor&lt;Type, Context, ReturnType extends Type | void&gt; {\n    apply(filterChain: { next: (c: Context, obj: Type) =&gt; ReturnType | Promise&lt;ReturnType&gt; }&gt;, context: Context, obj: Type): ReturnType | Promise&lt;ReturnType&gt;;\n}\ninterface RequestFilterContext {\n    // Request URL\n    url: URL;\n    // Short-circuit request filters \n    respondWith(response: Response | Promise&lt;Response&gt;): void;\n    // Short-circuit all filters\n    respondWithAndStop(response: Response | Promise&lt;Response&gt;): void;\n    // Add additonal response filter\n    appendResponseFilter(filter: ResponseFilter): void;\n    // Add body filter\n    appendBodyFilter(filter: BodyFilter): void;\n}\ninterface RequestFilter extends FilterExecutor&lt;Request, RequestFilterContext, Request&gt; { };\ninterface ResponseFilterContext {\n    readonly startMs: number;\n    readonly endMs: number;\n    readonly url: URL;\n    waitUntil(promise: Promise&lt;any&gt;): void;\n    respondWith(response: Response | Promise&lt;Response&gt;): void;\n    respondWithAndStop(response: Response | Promise&lt;Response&gt;): void;\n    appendBodyFilter(filter: BodyFilter): void;\n}\ninterface ResponseFilter extends FilterExecutor&lt;Response, ResponseFilterContext, Response&gt; { };\ninterface BodyFilterContext {\n    waitUntil(promise: Promise&lt;any&gt;): void;\n}\ninterface ChunkChain {\n    public next: ChunkChain | null;\n    public chunk: Uint8Array;\n}\ninterface BodyFilter extends MutableFilterExecutor&lt;ChunkChain | null, BodyFilterContext, ChunkChain | null&gt; { };\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"request-filter-simple-redirects\">Request filter — Simple Redirects<br></h2><p>Firstly, we would like to point out that this is very niche use case, if your platform supports redirects natively, you should absolutely do it through your platform, but there are a number of limited, legacy or bespoke platforms, where redirects are not supported or are limited, or are charged for (per line) by your hosting or platform. For example, Github Pages only support redirects via HTML refresh meta tag. <br><br>The most basic redirect filter, would look like this:</p><p></p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">class RedirectRequestFilter {\n    constructor(redirects) {\n        this.redirects = redirects;\n    }\n\n    apply(filterChain, context, request) {\n        const redirect = this.redirects[context.url.href];\n        if (redirect)\n            context.respondWith(new Response('', {\n                status: 301,\n                headers: { 'Location': redirect }\n            }));\n        else\n            return filterChain.next(context, request);\n    }\n}\n\nconst { requestFilterHandle } = self.slothRequire('./worker.js');\nrequestFilterHandle.append(new RedirectRequestFilter({\n    &quot;https://sloth.cloud/old-homepage&quot;: &quot;https://sloth.cloud/&quot;\n}));\n</code></pre>\n<!--kg-card-end: markdown--><p></p><p>You can see it live in Cloudflare’s playground <a href=\"https://cloudflareworkers.com/#f59a71db84c026a5d2bee72170113f26:https://sloth.cloud/old-homepage\">here</a>.</p><p>The one implemented in Sloth supports basic path matching, hostname matching and query string matching, as well as wildcards.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"http://blog.cloudflare.com/content/images/2019/03/sloth-redirect-manager.png\" class=\"kg-image\" alt loading=\"lazy\"><figcaption>The Sloth dashboard for visually creating and modifying redirects.&nbsp;</figcaption></figure><p>It is all well and good when you do not have a lot of redirects to manage, but what do you do when size of redirects starts to take up significant memory available to Worker? This is where we faced another scaling issue, in taking a small handful of possible redirects, to the tens of thousands.</p><h2 id=\"managing-redirects-with-workers-kv-and-cuckoo-filters\">Managing Redirects with Workers KV and Cuckoo Filters</h2><p>Well, here is one way you can solve it by using <a href=\"https://developers.cloudflare.com/workers/kv/\">Workers KV</a> - a key-value data store.<br><br>Instead of hard coding redirects inside Worker code, we will store them inside Workers KV. Naive approach would be to check redirect for each URL. But Workers KV, maximum performance is not reached until a key is being read on the order of once-per-second in any given data center.<br><br>Alternative could be using a probabilistic data structure, like <a href=\"https://en.wikipedia.org/wiki/Cuckoo_hashing\">Cuckoo Filters</a>, stored in KV, possibly split between a couple of keys as KV is limited to 64KB. Such filter flow would be:</p><ol><li>Retrieve frequently read filter key.</li><li>Check whether full url (or only pathname) is in the filter.</li><li>Get redirect from Worker KV using URL as a key. </li></ol><p>In our tests, we managed to pack 20 thousand redirects into Cuckoo Filter taking up 128KB, split between 2 keys, verified against 100 thousand active URLs with a false-positive rate of 0.5-1%.</p><h2 id=\"body-filter-hreflang-injection\">Body filter - Hreflang Injection</h2><p>Hreflang meta tags need to be placed inside HTML <em>&lt;head&gt;</em> element, so before actually injecting them, we need to find either start or end of the head HTML tag, which in itself is a streaming search problem. </p><p>The caveat here is that naive method decoding UTF-8 into JavaScript string, performing search, re-encoding back into UTF-8 is fairly slow. Instead, we attempted pure JavaScript search on bytes strings (<em>Uint8Array</em>), which straight away showed promising results. </p><p>For our use case, we picked the <a href=\"https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore%E2%80%93Horspool_algorithm\">Boyer-Moore-Horspool</a> algorithm as a base of our streaming search, as it is simple, has great average case performance and only requires a pre-processing search pattern, with manual prefix/suffix matching at chunk boundaries.</p><p>Here is comparison of methods we have tested on Node v10.15.0:</p><pre><code>| Chunk Size | Method                               | Ops/s               |\n|------------|--------------------------------------|---------------------|\n|            |                                      |                     |\n| 1024 bytes | Boyer-Moore-Horspool over byte array | 163,086 ops/sec     |\n| 1024 bytes | **precomputed BMH over byte array**  | **424,948 ops/sec** |\n| 1024 bytes | decode utf8 into strings &amp; indexOf() | 91,685 ops/sec      |\n|            |                                      |                     |\n| 2048 bytes | Boyer-Moore-Horspool over byte array | 119,634 ops/sec     |\n| 2048 bytes | **precomputed BMH over byte array**  | **232,192 ops/sec** |\n| 2048 bytes | decode utf8 into strings &amp; indexOf() | 52,787 ops/sec      |\n|            |                                      |                     |\n| 4096 bytes | Boyer-Moore-Horspool over byte array | 78,729 ops/sec      |\n| 4096 bytes | **precomputed BMH over byte array**  | **117,010 ops/sec** |\n| 4096 bytes | decode utf8 into strings &amp; indexOf() | 25,835 ops/sec      |</code></pre><h2 id=\"can-we-do-better\">Can we do better?</h2><p>Having achieved decent performance improvement with pure JavaScript search over naive method, we wanted to see whether we can do better. As Workers support <a href=\"https://developers.cloudflare.com/workers/api/resource-bindings/webassembly-modules/\">WASM</a>, we used rust to build a simple WASM module, which exposed standard rust string search.</p><pre><code>| Chunk Size | Method                              | Ops/s               |\n|------------|-------------------------------------|---------------------|\n|            |                                     |                     |\n| 1024 bytes | Rust WASM                           | 348,197 ops/sec     |\n| 1024 bytes | **precomputed BMH over byte array** | **424,948 ops/sec** |\n|            |                                     |                     |\n| 2048 bytes | Rust WASM                           | 225,904 ops/sec     |\n| 2048 bytes | **precomputed BMH over byte array** | **232,192 ops/sec** |\n|            |                                     |                     |\n| 4096 bytes | **Rust WASM**                       | **129,144 ops/sec** |\n| 4096 bytes | precomputed BMH over byte array     | 117,010 ops/sec     |</code></pre><p>As rust version did not use precomputed search pattern, it should be significantly faster, if we precomputed and cached search patterns. </p><p>In our case, we were searching for a single pattern and stopping once it was found, where pure JavaScript version was fast enough, but if you need multi-pattern, advanced search, WASM is the way to go.</p><p>We could not record statistically significant change in latency, between basic worker and one with a body filter deployed to production, due to unstable network latency, with a mean response latency of 150ms and 10% 90th percentile standard deviation.</p><h2 id=\"what-s-next\">What’s next?</h2><p>We believe that Workers and serverless applications can open up new opportunities to overcome a lot of issues faced by the SEO community when working with legacy tech stacks, platform limitations, and heavily congested development queues.</p><p>We are also investigating whether Workers can allow us to make a more efficient Tag Manager, which bundles and pushes only matching Tags with their code, to minimize number of external requests caused by trackers and thus reduce load on user browser.</p><p>You can experiment with Cloudflare Workers yourself through <a href=\"https://sloth.cloud/\">Sloth</a>, even if you don’t know how to write JavaScript.</p>",
		"id": "5d16453b41acde0011a957d6",
		"meta_description": null,
		"meta_title": null,
		"og_description": null,
		"og_image": null,
		"og_title": null,
		"primary_author": {
			"id": "5d1644b141acde0011a94f96",
			"name": "Guest Author",
			"slug": "guest-author",
			"profile_image": "https://blog-cloudflare-com-assets.storage.googleapis.com/2019/10/Screen-Shot-2019-10-09-at-11.21.59-AM.png",
			"cover_image": "http://blog.cloudflare.com/content/images/2019/05/general@2x-9.png",
			"bio": null,
			"website": null,
			"location": null,
			"facebook": null,
			"twitter": null,
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/guest-author/"
		},
		"primary_tag": {
			"id": "5d16450341acde0011a9515f",
			"name": "SEO",
			"slug": "seo",
			"description": null,
			"feature_image": null,
			"visibility": "public",
			"meta_title": null,
			"meta_description": null,
			"og_image": null,
			"og_title": null,
			"og_description": null,
			"twitter_image": null,
			"twitter_title": null,
			"twitter_description": null,
			"codeinjection_head": null,
			"codeinjection_foot": null,
			"canonical_url": null,
			"accent_color": null,
			"url": "http://blog.cloudflare.com/tag/seo/"
		},
		"published_at": "2019-03-07T16:05:41.000+00:00",
		"reading_time": 7,
		"slug": "diving-into-technical-seo-cloudflare-workers",
		"tags": [
			{
				"id": "5d16450341acde0011a9515f",
				"name": "SEO",
				"slug": "seo",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/seo/"
			},
			{
				"id": "5d16450341acde0011a95252",
				"name": "Serverless",
				"slug": "serverless",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Serverless.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Serverless",
				"meta_description": "Cloudflare blog posts tagged 'serverless'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/serverless/"
			},
			{
				"id": "5d16450341acde0011a95253",
				"name": "Cloudflare Workers",
				"slug": "workers",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/workers/"
			},
			{
				"id": "5d16450341acde0011a95278",
				"name": "Cloudflare Workers KV",
				"slug": "cloudflare-workers-kv",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/cloudflare-workers-kv/"
			},
			{
				"id": "6542e06bb368ff000a1322e8",
				"name": "Salt",
				"slug": "salt",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/salt/"
			},
			{
				"id": "64a3e2b834124c000b00b717",
				"name": "Developer Platform",
				"slug": "developer-platform",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developer-platform/"
			},
			{
				"id": "5d16450341acde0011a95204",
				"name": "Developers",
				"slug": "developers",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Developers-1.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Developers",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Developers'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developers/"
			}
		],
		"title": "Diving into Technical SEO using Cloudflare Workers",
		"twitter_description": null,
		"twitter_image": null,
		"twitter_title": null,
		"updated_at": "2024-01-10T00:06:53.000+00:00",
		"url": "http://blog.cloudflare.com/diving-into-technical-seo-cloudflare-workers/",
		"uuid": "9b42ccfe-71c5-49cb-aa0a-9805b7d5cace",
		"visibility": "public"
	}
}