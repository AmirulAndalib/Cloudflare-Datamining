{
	"locale": "en-us",
	"post": {
		"access": true,
		"authors": [
			{
				"id": "5d1644b141acde0011a94f2d",
				"name": "Matthew Prince",
				"slug": "matthew-prince",
				"profile_image": "http://blog.cloudflare.com/content/images/2023/06/Matthew-Prince-3.jpeg",
				"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-79.png",
				"bio": "A little bit geek, wonk, and nerd. Repeat entrepreneur, recovering lawyer, and former ski instructor. Co-founder & CEO of Cloudflare (NYSE: NET).",
				"website": null,
				"location": "San Francisco, CA",
				"facebook": null,
				"twitter": "@eastdakota",
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/matthew-prince/"
			}
		],
		"canonical_url": null,
		"codeinjection_foot": null,
		"codeinjection_head": null,
		"comment_id": "4248",
		"comments": false,
		"created_at": "2014-08-20T11:03:46.000+01:00",
		"custom_excerpt": "At CloudFlare, we're always looking for ways to eliminate bottlenecks. We're only able to deal with the very large amount of traffic that we handle because we've built a network that can efficiently handle an extremely high volume of network requests. ",
		"custom_template": null,
		"email_subject": null,
		"excerpt": "At CloudFlare, we're always looking for ways to eliminate bottlenecks. We're only able to deal with the very large amount of traffic that we handle because we've built a network that can efficiently handle an extremely high volume of network requests. ",
		"feature_image": "http://blog.cloudflare.com/content/images/2018/08/cat5-o-nine-tails.png.scaled500.png",
		"feature_image_alt": null,
		"feature_image_caption": null,
		"featured": false,
		"frontmatter": null,
		"html": "<!--kg-card-begin: markdown--><p><img alt=\"How the CloudFlare Team Got Into Bondage (It&apos;s Not What You\nThink)\" src=\"http://blog.cloudflare.com/content/images/cat5-o-nine-tails.png.scaled500.png\" title=\"How the CloudFlare Team Got Into Bondage (It&apos;s Not What You Think)\"><noscript><img alt=\"How the CloudFlare Team Got Into Bondage (It&apos;s Not What You\nThink)\" src=\"http://blog.cloudflare.com/content/images/cat5-o-nine-tails.png.scaled500.png\" title=\"How the CloudFlare Team Got Into Bondage (It&apos;s Not What You Think)\"></noscript><span style=\"font-size: xx-small;\">(Image<br>\ncourtesy of ferelswirl)</span><br>\nAt CloudFlare, we're always looking for ways to eliminate bottlenecks. We're only able to deal with the very large amount of traffic that we handle, especially during large denial of service attacks, because we've built a network that can efficiently handle an extremely high volume of network requests. This post is about the nitty gritty of port bonding, one of the technologies we use, and how it allows us to get the maximum possible network throughput out of our servers.</p>\n<h3 id=\"generationthree\">Generation Three</h3>\n<p>A rack of equipment in CloudFlare's network has three core components: routers, switches, and servers. We own and install all our own equipment because it's impossible to have the flexibility and efficiency you need to do what we do running on someone else's gear. Over time, we've adjusted the specs of the gear we use based on the needs of our network and what we are able to cost effectively source from vendors.</p>\n<p>Most of the equipment in our network today is based on our Generation 3 (G3) spec, which we deployed throughout 2012. Focusing just on the network connectivity for our G3 gear, our routers have multiple 10Gbps ports which connect out to the Internet as well as in to our switches. Our switches have a handful of 10Gbps ports that we use to connect to our routers and then 48 1Gbps ports that connect to the servers. Finally, our servers have 6 1Gbps ports, two on the motherboard (using Intel's chipset) and four on an Intel PCI network card. (There's an additional IPMI management port as well, but it doesn't figure into this discussion.)</p>\n<p><img alt=\"How the CloudFlare Team Got Into Bondage (It&apos;s Not  What You Think)\" src=\"http://blog.cloudflare.com/content/images/cloudflare_servers.jpg.scaled500.jpg\" title=\"How the CloudFlare Team Got Into Bondage (It&apos;s Not What You Think)\"><noscript><img alt=\"How the CloudFlare Team Got Into Bondage (It&apos;s Not What You\nThink)\" src=\"http://blog.cloudflare.com/content/images/cloudflare_servers.jpg.scaled500.jpg\" title=\"How the CloudFlare Team Got Into Bondage (It&apos;s Not What You Think)\"></noscript></p>\n<p>To get high levels of utilization and keep our server spec consistent and flexible, each of the servers in our network can perform any of the key CloudFlare functions: DNS, front-line, caching, and logging. Cache, for example, is spread across multiple machines in a facility. This means if we add another drive to one of the servers in a data center, then the total available storage space for the cache increases for all the servers in that data center. What's good about this is that, as we need to, we can add more servers and linearly scale capacity across storage, CPU, and, in some applications, RAM. The challenge is that in order to pull this off there needs to be a significant amount of communication between servers across our local area network (LAN).</p>\n<p>When we originally started deploying our G3 servers in early 2012, we treated each 1Gbps port on the switches and routers discretely. While each server could, in theory, handle 6Gbps of traffic, each port could only handle 1Gbps. Usually this was no big deal because we load balanced customers across multiple servers in multiple data centers so on no individual server port was a customer likely to burst over 1Gbps. However, we found that, from time to time, when a customer would come under attack, traffic to individual machines could exceed 1Gbps and overwhelm a port.</p>\n<h3 id=\"whenaproblemcomesalong\">When A Problem Comes Along...</h3>\n<p>The goal of a denial of service attack is to find a bottleneck and then send enough garbage requests to fill it up and prevent legitimate requests from getting through. At the same time, our goal when mitigating such an attack is first to ensure the attack doesn't harm other customers and then to stop the attack from hurting the actual target.</p>\n<p><img alt=\"Devo Whip It\" src=\"http://24.media.tumblr.com/tumblr_m54e8tjzdQ1qfj10wo1_500.gif\"><noscript><img alt=\"Devo Whip It\" src=\"http://24.media.tumblr.com/tumblr_m54e8tjzdQ1qfj10wo1_500.gif\"></noscript></p>\n<p>For the most part, the biggest attacks by volume we see are Layer 3 attacks. In these, packets are stopped at the edge of our network and never reach our server infrastructure. As the <a href=\"http://blog.cloudflare.com/the-ddos-that-almost-broke-the-internet\">very large attack against Spamhaus</a><br>\nshowed, we have a significant amount of network capacity at our edge and are therefore able to stop these Layer 3 attacks very effectively.</p>\n<p>While the big Layer 3 attacks get the most attention, an attack doesn't need to be so large if it can affect another, narrower bottleneck. For example, switches and routers are largely blind to Layer 7 attacks, meaning our servers need to process the requests. That means the requests associated with the attack need to pass across the smaller, 1Gbps port on the server. From time to time, we've found that these attacks reached a large enough scale to overwhelm a 1Gbps port on one of our servers, making it a potential bottleneck.</p>\n<p>Beyond raw bandwidth, the other bottleneck with some attacks centers on network interrupts. In most operating systems, every time a packet is received by a server, the network card generates an interrupt (known as an IRQ). An IRQ is effectively an instruction to the CPU to stop whatever else it's doing and deal with an event, in this case a packet arriving over the network. Each network adapter has multiple queues per port that receive these IRQs and then hands them to the server's CPU. The clock speed and driver efficiency in the network adapters, and message passing rate of the bus, effectively sets the maximum number of interrupts per second, and therefore packets per second, a server's network interface can handle.</p>\n<p>In certain attacks, like large SYN floods which send a very high volume of very small packets, there can be plenty of bandwidth on a port but a CPU can be bottlenecked on IRQ handling. When this happens it can shut down a particular core on a CPU or, in the worst case if IRQs aren't properly balanced, shut down the whole CPU. To better deal with these attacks, we needed to find a way to more intelligently spread IRQs across more interfaces and, in turn, more CPU cores.</p>\n<p>Both these problems are annoying if it affects the customer under attack, but it is unacceptable it spills over and affects customers who are not under attack. To ensure that would never happen, we needed to find a way to both increase network capacity and ensure that customer attacks were isolated from one another. To accomplish this we launched what we affectionately refer to in the office as &quot;Project Bondage.&quot;</p>\n<h3 id=\"gettingintobondage\">Getting Into Bondage</h3>\n<p>To deal with these challenges we started by implementing what is known as port bonding. The idea of port bonding is simple: use the resources of multiple ports in aggregate in order to support more traffic than any one port can on its own. We use a custom operating system based on the Debian line of Linux. Like most Linux varieties, our OS supports seven different port bonding modes:</p>\n<ul>\n<li>[0] Round-robin: Packets are transmitted sequentially through list\nof connections</li>\n<li>[1] Active-backup: Only one connection is active, when it fails\nanother is activated</li>\n<li>[2] Balance-xor: This will ensure packets to a given destination\nfrom a given source will be the same over multiple connections</li>\n<li>[3] Broadcast: Transmits everything over every active connection</li>\n<li>[4] 802.3ad Dynamic Link Aggregation: Creates aggregation groups\nthat share the same speed and duplex settings. Switches upstream\nmust support 802.3ad.</li>\n<li>[5] Balance-tlb: Adaptive transmit load balancing &#x2014; outgoing traffic\nis balanced based on total amount being transmitted</li>\n<li>[6] Balance-alb: Adaptive load balancing &#x2014; includes balance-tlb and\nbalances incoming traffic by using ARP negotiation to dynamically\nchange the source MAC addresses of outgoing packets</li>\n</ul>\n<p>We use mode 4, 802.3ad Dynamic Link Aggregation. This requires switches that support 802.3ad (our workhorse switch is a Juniper 4200, which does). Our switches are configured to send packets from each stream to the same network interface. If you want to experiment with port bonding yourself, the next section covers the technical details of exactly how we set it up.</p>\n<h3 id=\"thenittygritty\">The Nitty Gritty</h3>\n<p>Port bonding is configured on each server. It requires two Linux components that you can apt-get (assuming you're using a Debian-based Linux) if they're not already installed: ifenslave and ethtool. To initialize the bonding driver we use the following command:</p>\n<pre>modprobe bonding mode=4 miimon=100 xmit_hash_policy=1 lacp_rate=1\n</pre>\n<p>Here's how that command breaks down:</p>\n<ul>\n<li><strong>mode=4</strong>: 802.3ad Dynamic Link Aggregation mode described above</li>\n<li><strong>miimon=100</strong>: indicates that the devices are polled every 100ms to check for * connection changes, such as a link being down or a link duplex having changed. </li>\n<li><strong>xmit_hash_policy=1</strong>: instructs the driver to spread the load over interfaces based on the source and destination IP address instead of MAC address</li>\n<li><strong>lacp_rate=1</strong>: sets the rate for transmitting LACPDU packets, 0 is once every 30 seconds, 1 is every 1 second, which allows our network devices to automatically configure a single logical connection at the switch quickly</li>\n</ul>\n<p>After the bonding driver is initialized, we bring down the servers&apos; network interfaces:\n<pre>ifconfig eth0 downifconfig eth1 down\n</pre>\n<p>We then bring up the bonding interface:</p></p>\n<pre>ifconfig bond0 192.168.0.2/24 up\n</pre>\n<p>We then enslave (seriously, that's the term) the interfaces in the bond:</p>\n<pre>ifenslave bond0 eth0ifenslave bond0 eth1\n</pre>\n<p>Finally, we check the status of the bonded interface:</p>\n<pre>cat /proc/net/bonding/bond0\n</pre>\n<p>From an application perspective, bonded ports appear as a single logical network interface with a higher maximum throughput. Since our switch recognizes and supports 802.3ad Dynamic Link Aggregation, we don't have to make any changes to its configuration in order for port bonding to work. In our case, we aggregate three ports (3Gbps) for handling external traffic and the remaining three ports (3Gbps) for handling intra-server traffic across our LAN.</p>\n<h3 id=\"workingoutthekinks\">Working Out the Kinks</h3>\n<p>Expanding the maximum effective capacity of each logical interface is half the battle. The other half is ensuring that network interrupts (IRQs) don't become a bottleneck. By default most Linux distributions rely on a service called irqbalance to set the CPU affinity of each IRQ queue. Unfortunately, we found that irqbalance does not effectively isolate each queue from overwhelming another on the same CPU. The problem with this is, because of the traffic we need to send from machine to machine, external attack traffic risked disrupting internal LAN traffic and affecting site performance beyond the customer under attack.</p>\n<p>To solve this, the first thing we did was disable irqbalance:</p>\n<pre>/etc/init.d/irqbalance stopupdate-rc.d irqbalance remove\n</pre>\n<p>Instead, we explicitly setup IRQ handling to isolate our external and internal (LAN) networks. Each of our servers has two physical CPUs (G3 hardware uses a low-watt version of Intel Westmere line of CPUs) with six physical cores each. We use Intel's hyperthreading technology which effectively doubles the number of logical CPU cores: 12 per CPU or 24 per server.</p>\n<p><img alt=\"How the CloudFlare Team Got Into Bondage (It&apos;s Not What You Think)\" src=\"http://blog.cloudflare.com/content/images/intel_x5645e.jpg.scaled500.jpg\" title=\"How the CloudFlare Team Got Into Bondage (It&apos;s Not What You Think)\"><noscript><img alt=\"How the CloudFlare Team Got Into Bondage (It&apos;s Not What You\nThink)\" src=\"http://blog.cloudflare.com/content/images/intel_x5645e.jpg.scaled500.jpg\" title=\"How the CloudFlare Team Got Into Bondage (It&apos;s Not What You Think)\"></noscript></p>\n<p>Each port on our NICs has a number of queues to handle incoming requests. These are known as RSS (Receive Side Scaling) queues. Each port has 8 RSS queues, we have 6 1Gbps NIC ports per server, so a total of 48 RSS queues. These 48 RSS queues are allocated to the 24 cores, with 2 RSS queues per core. We divide the RSS queues between internal (LAN) traffic and external traffic and bind each type of traffic to one of the two server CPUs. This ensures that even large SYN floods that may affect a machine's ability to handle more external requests won't keep it from handling requests from other servers in the data center.</p>\n<h3 id=\"theresults\">The Results</h3>\n<p>The net effect of these changes allows us to handle 30% larger SYN floods per server and increases our maximum throughput per site per server by 300%. Equally importantly, by custom tuning our IRQ handling, it has allowed us to ensure that customers under attack are isolated from those who are not while still delivering the maximum performance by fully utilizing all the gear in our network.</p>\n<p>Near the end of 2012, our ops and networking teams sat down to spec our next generation of gear, incorporating everything we've learned over the previous year. One of the biggest changes we're making with G4 is the jump from 1Gbps network interfaces up to 10Gbps network interfaces on our switches and servers. Even without bonding, our tests of the new G4 gear show that it significantly increases both maximum throughput and IRQ handling. Or, put more succinctly: this next generation of servers is smokin' fast.</p>\n<p><img alt=\"How the CloudFlare Team Got Into Bondage (It&apos;s Not What You\nThink)\" src=\"http://blog.cloudflare.com/content/images/next-generation.jpg.scaled500.jpg\" title=\"How the CloudFlare Team Got Into Bondage (It&apos;s Not What You Think)\"><noscript><img alt=\"How the CloudFlare Team Got Into Bondage (It&apos;s Not What You\nThink)\" src=\"http://blog.cloudflare.com/content/images/next-generation.jpg.scaled500.jpg\" title=\"How the CloudFlare Team Got Into Bondage (It&apos;s Not What You Think)\"></noscript></p>\n<p>The first installations of the G4 gear is now in testing in a handful of our facilities. After testing, we plan to roll out worldwide over the coming months. We're already planning a detailed tour of the gear we chose, an explanation of the decisions we made, and performance benchmarks to show you how this next generation of gear is going to make CloudFlare's network even faster, safer, and smarter. That's a blog post I'm looking forward to writing. Stay tuned!</p>\n<!--kg-card-end: markdown-->",
		"id": "5d16453b41acde0011a9538e",
		"meta_description": null,
		"meta_title": null,
		"og_description": null,
		"og_image": null,
		"og_title": null,
		"primary_author": {
			"id": "5d1644b141acde0011a94f2d",
			"name": "Matthew Prince",
			"slug": "matthew-prince",
			"profile_image": "http://blog.cloudflare.com/content/images/2023/06/Matthew-Prince-3.jpeg",
			"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-79.png",
			"bio": "A little bit geek, wonk, and nerd. Repeat entrepreneur, recovering lawyer, and former ski instructor. Co-founder & CEO of Cloudflare (NYSE: NET).",
			"website": null,
			"location": "San Francisco, CA",
			"facebook": null,
			"twitter": "@eastdakota",
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/matthew-prince/"
		},
		"primary_tag": {
			"id": "5d16450341acde0011a951ce",
			"name": "Reliability",
			"slug": "reliability",
			"description": null,
			"feature_image": null,
			"visibility": "public",
			"meta_title": null,
			"meta_description": null,
			"og_image": null,
			"og_title": null,
			"og_description": null,
			"twitter_image": null,
			"twitter_title": null,
			"twitter_description": null,
			"codeinjection_head": null,
			"codeinjection_foot": null,
			"canonical_url": null,
			"accent_color": null,
			"url": "http://blog.cloudflare.com/tag/reliability/"
		},
		"published_at": "2013-04-08T08:18:00.000+01:00",
		"reading_time": 9,
		"slug": "how-the-cloudflare-team-got-into-bondage-its",
		"tags": [
			{
				"id": "5d16450341acde0011a951ce",
				"name": "Reliability",
				"slug": "reliability",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/reliability/"
			},
			{
				"id": "5d16450341acde0011a95169",
				"name": "Attacks",
				"slug": "attacks",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/attacks/"
			},
			{
				"id": "5d16450341acde0011a95232",
				"name": "SYN",
				"slug": "syn",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/syn/"
			}
		],
		"title": "How the CloudFlare Team Got Into Bondage (It's Not What You Think)",
		"twitter_description": null,
		"twitter_image": null,
		"twitter_title": null,
		"updated_at": "2018-08-10T22:02:41.000+01:00",
		"url": "http://blog.cloudflare.com/how-the-cloudflare-team-got-into-bondage-its/",
		"uuid": "39b8e5b9-0db6-4f7b-ac93-e81679ffb02d",
		"visibility": "public"
	}
}