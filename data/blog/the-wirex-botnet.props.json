{
	"browserLocale": "en-us",
	"locale": "en-us",
	"post": {
		"access": true,
		"authors": [
			{
				"id": "5d1644b141acde0011a94f69",
				"name": "Jaime Cochran",
				"slug": "jaimecochran",
				"profile_image": "http://blog.cloudflare.com/content/images/2018/02/ucarecdn.jpg",
				"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-29.png",
				"bio": null,
				"website": "http://ethi.cx/",
				"location": "San Francisco",
				"facebook": null,
				"twitter": "@ackflags",
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/jaimecochran/"
			}
		],
		"canonical_url": null,
		"codeinjection_foot": null,
		"codeinjection_head": null,
		"comment_id": "4998",
		"comments": false,
		"created_at": "2017-08-25T17:48:15.000+01:00",
		"custom_excerpt": "On August 17th, 2017, multiple Content Delivery Networks (CDNs) and content providers were subject to significant attacks from a botnet dubbed WireX. ",
		"custom_template": null,
		"email_subject": null,
		"excerpt": "On August 17th, 2017, multiple Content Delivery Networks (CDNs) and content providers were subject to significant attacks from a botnet dubbed WireX. ",
		"feature_image": "http://blog.cloudflare.com/content/images/2017/10/ua26-uniques-1.png",
		"feature_image_alt": null,
		"feature_image_caption": null,
		"featured": false,
		"frontmatter": null,
		"html": "<!--kg-card-begin: markdown--><h6 id=\"updatedoctober2017thecyberwireresearchsaturdaypodcast\">Updated October 2017: The Cyberwire Research Saturday Podcast:</h6>\n<iframe style=\"border: none\" src=\"//html5-player.libsyn.com/embed/episode/id/5861524/height/90/width/640/theme/custom/autonext/no/thumbnail/yes/autoplay/no/preload/no/no_addthis/no/direction/backward/render-playlist/no/custom-color/f8941e/\" height=\"90\" width=\"640\" scrolling=\"no\"  allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>\n<h3 id=\"introduction\">Introduction</h3>\n<p>On August 17th, 2017, multiple <a href=\"https://www.cloudflare.com/learning/cdn/what-is-a-cdn/\">Content Delivery Networks (CDNs)</a> and content providers were subject to significant attacks from a botnet dubbed WireX.  The botnet is named for an anagram for one of the delimiter strings in its command and control protocol. The WireX botnet comprises primarily Android devices running malicious applications and is designed to create DDoS traffic. The botnet is sometimes associated with ransom notes to targets.</p>\n<p>A few days ago, Google was alerted that this malware was available on its Play Store. Shortly following the notification, Google removed hundreds of affected applications and started the process to remove the applications from all devices.</p>\n<p>Researchers from <a href=\"https://blogs.akamai.com/2017/08/the-wirex-botnet-an-example-of-cross-organizational-cooperation.html\">Akamai</a>, <a href=\"http://blog.cloudflare.com/the-wirex-botnet/\">Cloudflare</a>, <a href=\"https://www.flashpoint-intel.com/blog/wirex-botnet-industry-collaboration/\">Flashpoint</a>, Google, Oracle Dyn, <a href=\"https://www.riskiq.com/blog/labs/wirex-botnet\">RiskIQ</a>, Team Cymru, and other organizations cooperated to combat this botnet.  Evidence indicates that the botnet may have been active as early as August 2nd, but it was the attacks on August 17th that drew the attention of these organizations.  This post represents the combined knowledge and efforts of the researchers working to share information about a botnet in the best interest of the internet community as a whole.  This blog post was written together by researchers from numerous organizations and released concurrently by Akamai, Cloudflare, Flashpoint, and RiskIQ.</p>\n<h3 id=\"attackdetails\">Attack details</h3>\n<p>The first available indicators of the WireX botnet appeared on August 2nd as minor attacks that went unnoticed at the time.  It wasn’t discovered until researchers began searching for the 26 character User-Agent string in logs. These initial attacks were minimal and suggest that the malware was in development or in the early stages of deployment.  More prolonged attacks have been identified starting on August 15th, with some events sourced from a minimum of 70,000 concurrent IP addresses, as shown in <code>Figure 1</code>.</p>\n<p>WireX is a volumetric DDoS attack at the application layer.  The traffic generated by the attack nodes is primarily HTTP <code>GET</code> requests, though some variants appears to be capable of issuing <code>POST</code> requests. In other words, the botnet produces traffic resembling valid requests from generic HTTP clients and web browsers.</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2017/08/ua26-uniques-1.png\" alt=\"Figure 1: Estimated growth of the botnet based on the count of unique IPs per hour observed participating in attacks\" loading=\"lazy\"><br>\nFigure 1: Estimated growth of the botnet based on the count of unique IPs per hour observed participating in attacks.</p>\n<p>During initial observation, the majority of the traffic from this botnet was distinguished by the use of an HTTP Request’s User-Agent string containing the lowercase English alphabet characters, in random order.</p>\n<p>Some of the User-Agent values seen:</p>\n<pre><code>User-Agent: jigpuzbcomkenhvladtwysqfxr\nUser-Agent: yudjmikcvzoqwsbflghtxpanre\nUser-Agent: mckvhaflwzbderiysoguxnqtpj\nUser-Agent: deogjvtynmcxzwfsbahirukqpl\nUser-Agent: fdmjczoeyarnuqkbgtlivsxhwp\nUser-Agent: yczfxlrenuqtwmavhojpigkdsb\nUser-Agent: dnlseufokcgvmajqzpbtrwyxih\n</code></pre>\n<p>Variants of the malware have also been observed emitting User-Agent strings of varying length and expanded character sets, sometimes including common browser User-Agents. Here are some samples of other User-Agents observed:</p>\n<pre><code>User-Agent: xlw2ibhqg0i\nUser-Agent: bg5pdrxhka2sjr1g\nUser-Agent: 5z5z39iit9damit5czrxf655ok060d544ytvx25g19hcg18jpo8vk3q\nUser-Agent: fge26sd5e1vnyp3bdmc6ie0\nUser-Agent: m8al87qi9z5cqlwc8mb7ug85g47u\nUser-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; nl; rv:1.9.1b3) Gecko/20090305 Firefox/3.1b3 (.NET CLR 3.5.30729)\nUser-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.1.7) Gecko/20071018 BonEcho/2.0.0.7\nUser-Agent: Mozilla/5.0 (Macintosh; U; PPC Mac OS X 10_5_7; en-us) AppleWebKit/530.19.2 (KHTML, like Gecko) Version/4.0.2\n</code></pre>\n<h3 id=\"tracingthenodes\">Tracing the nodes</h3>\n<p>Analysis of the incoming attack data for the August 17th attack revealed that devices from more than 100 countries participated, an uncharacteristic trait for current botnets. The distribution of the attacking IPs along with the distinctive User-Agent string led the researchers who began the initial investigation to believe that other organizations may have seen or would be likely to experience similar attacks. The researchers reached out to peers in other organizations for verification of what they were seeing.</p>\n<p>Once the larger collaborative effort began, the investigation began to unfold rapidly starting with the investigation of historic log information, which revealed a connection between the attacking IPs and <em><strong>something</strong></em> malicious, possibly running on top of the Android operating system.</p>\n<p>In the wake of the Mirai attacks, information sharing groups have seen a resurgence, where researchers share situation reports and, when necessary, collaborate to solve Internet-wide problems. Further, WannaCry, Petya and other global events have only strengthened the value of this collaboration.  Many information sharing groups, such as this one, are purely informal communications amongst peers across the industry.</p>\n<h3 id=\"findingthesoftware\">Finding the software</h3>\n<p>Investigation of the logs from attacks on August 17th revealed previous attacks meeting the same signature implicated the first Android application, <code>“twdlphqg_v1.3.5_apkpure.com.apk”</code>. Researchers quickly grabbed examples of the application to understand how it works and determine if related applications might exist. Searches using variations of the application name and parameters in the application bundle revealed multiple additional applications from the same, or similarly named authors, with comparable descriptions, as shown in <code>Figure 2</code>. As new applications were located, others on the team began to dig into the binaries to learn how they worked.</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2017/08/apk_author.png\" alt=\"Figure 2: A screenshot of one of the searches for similar malware.\" loading=\"lazy\"><br>\nFigure 2: A screenshot of one of the searches for similar malware.</p>\n<p>There were few cases where these applications were found in well known and pre-configured app stores for mobile devices. Whenever possible, the abuse teams for these app stores, like Google, were contacted and worked expediently to remove the offending content. Google provided the following comment in response to this research:<br>\n<br /></p>\n<blockquote>\n<p>We identified approximately 300 apps associated with the issue, blocked them from the Play Store, and we’re in the process of removing them from all affected devices. The researchers' findings, combined with our own analysis, have enabled us to better protect Android users, everywhere.</p>\n</blockquote>\n<br />\n<h3 id=\"malwareoverview\">Malware overview</h3>\n<p>Many of the identified applications fell into the categories of media/video players, ringtones or tools such as storage managers and app stores with additional hidden features that were not readily apparent to the end users that were infected. At the launch of the applications, the nefarious components begin their work by starting the command and control polling service which queries the command and control server, most commonly <code>g[.]axclick[.]store</code>, for attack commands. When attack commands are received, the parsing service inspects the raw attack command, parses it and invokes the attacking service with the extracted parameters.</p>\n<p>The applications that housed these attack functions, while malicious, appeared to be benign to the users who had installed them. These applications also took advantage of features of the Android service architecture allowing applications to use system resources, even while in the background, and are thus able to launch attacks when the application is not in use. Antivirus scanners currently recognize this malware as the “Android Clicker” trojan, but this campaign’s purpose has nothing to do with click fraud. It is likely that this malware used to be related to click fraud, but was repurposed for DDoS.</p>\n<p>An in-depth overview of the internals of the rogue components of the applications can be found in <code>Appendix 1</code>.</p>\n<h3 id=\"conclusion\">Conclusion</h3>\n<p>These discoveries were only possible due to open collaboration between DDoS targets, DDoS mitigation companies, and intelligence firms. Every player had a different piece of the puzzle; without contributions from everyone, this botnet would have remained a mystery.</p>\n<p>The best thing that organizations can do when under a DDoS attack is to share detailed metrics related to the attack. With this information, those of us who are empowered to dismantle these schemes can learn much more about them than would otherwise be possible.</p>\n<p>These metrics include packet captures, lists of attacking IP addresses, ransom notes, request headers, and any patterns of interest. Such data should not contain any legitimate client traffic, to reduce privacy concerns and also because legitimate traffic can pollute and slow down analysis. And most importantly, give permission to share this data—not only to your vendors, but to their trusted contacts in the broader security community who may have expertise or visibility not available in your own circle of vendors.</p>\n<p>There is no shame in asking for help. Not only is there no shame, but in most cases it is impossible to hide the fact that you are under a DDoS attack. A number of research efforts have the ability to detect the existence of DDoS attacks happening globally against third parties no matter how much those parties want to keep the issue quiet. There are few benefits to being secretive and numerous benefits to being forthcoming.</p>\n<p>Sharing detailed attack metrics also allows for both formal and informal information sharing groups to communicate about and understand the attacks that are happening at a global scale, rather than simply what they see on their own platforms. This report is an example of how informal sharing can have a dramatically positive impact for the victims and the Internet as a whole.  Cross-organizational cooperation is essential to combat threats to the Internet and, without it, criminal schemes can operate without examination.</p>\n<p>We would like to acknowledge and thank the researchers at Akamai, Cloudflare, Flashpoint, Google, RiskIQ, Team Cymru, and other organizations not publicly listed. We would also like to thank the FBI for their assistance in this matter.</p>\n<h6 id=\"authorsresearchers\">Authors &amp; Researchers</h6>\n<ul>\n<li>Tim April : Senior Security Architect @ Akamai</li>\n<li>Chris Baker : Principal of Threat Intelligence @ Oracle Dyn</li>\n<li>Matt Carothers</li>\n<li>Jaime Cochran : Security Analyst @ Cloudflare</li>\n<li>Marek Majkowski : Enthusiastic Geek @ Cloudflare</li>\n<li>Jared Mauch : Internetworking Research and Architecture @ Akamai</li>\n<li>Allison Nixon : Director of Security Research @ Flashpoint</li>\n<li>Justin Paine : Head Of Trust &amp; Safety @ Cloudflare</li>\n<li>Chad Seaman : Sen. Security Intelligence Response Team Engineer @ Akamai SIRT</li>\n<li>Darren Spruell : Threat Researcher @ RiskIQ</li>\n<li>Zach Wikholm : Research Developer @ Flashpoint</li>\n<li>And others</li>\n</ul>\n<h3 id=\"appendixaanalysisofthemalware\">Appendix A: Analysis of the Malware</h3>\n<br />\n<h4 id=\"identifyingc2domains\">Identifying C2 domains</h4>\n<p>Inspection of various decompiled applications revealed multiple sub-domains of a single root domain (<code>axclick[.]store</code>) that were suspected of being a part of the command and control (C2) infrastructure for the botnet.</p>\n<pre><code>$ grep http * -R\ncom/twdlphqg/app/ExplorationActivity.smali:    const-string v3, &quot;http://u[.]axclick[.]store/&quot;\ncom/twdlphqg/app/services/Ryiidrxcjmfb.smali:    const-string v1, &quot;http://g[.]axclick[.]store/&quot;\n</code></pre>\n<p>The first domain (<code>u[.]axclick[.]store</code>) did not return content; it simply returned an empty response with a <code>200 OK</code> status code and appeared to be used for basic Internet connectivity testing.</p>\n<p>The second domain (<code>g[.]axclick[.]store</code>)  appeared to be linked to the DDoS components of the malware. The component of the application referencing this domain was responsible for creating an Android <code>Service</code> equipped with two WebView instances.  The first <code>WebView</code> instance serves as the C2 beacon, polling the C2 server for attack directives.  The second serves as a reference to clone <code>WebView</code> objects for attacking.  This component also contains the basic logic for spinning up and configuring these attacking instances.</p>\n<p>There are multiple other interesting components in play here, all with unique roles.  The first component types discussed here serve as the basic, always-on, persistent execution mechanisms. Some applications utilized Service objects instantiated using the <code>android/os/Handler-&gt;postDelayed</code> functionality.  This essentially causes the app to persist via a <code>Service</code> that polls the C2 server on a regular interval -- even while the application is backgrounded.  Other variations of the application utilized <code>AsyncTask</code> objects in attempts to achieve the same goal.</p>\n<p>The second component is a <code>WebViewClient</code> that serves as the C2 attack directive parser.  It is responsible for detecting <code>onPageFinished</code> events from the C2 <code>WebView</code> instance being controlled by the polling service and parsing whatever command is returned.  When an attack command is successfully parsed, this component is responsible for calling the function that ultimately launches the attack traffic.</p>\n<h3 id=\"overviewofcomponents\">Overview of Components</h3>\n<p>Below we’ll cover the relevant pieces individually, using pseudo code based on knowledge gathered from the decompiled APK(s).  We’ll then talk about what the pseudo code is doing in more detail as it relates to attack commands and techniques.</p>\n<h5 id=\"servicerunner\">Service Runner</h5>\n<p>The <code>ServiceRunner</code> component’s role is a means of persistent background execution by injecting the <code>Runnable</code> object type into a timed <code>OS Handler</code>.  Because of the nature of a Service in Android environments, the malware can continue to keep running once the app has been launched and placed in the background. Execution will only stop if application is actively terminated by the mobile device user or in the event of a device restart.</p>\n<pre><code>Service Runner Pseudo Code\nClass ServiceRunner extends Object {\n    Public function run() {\n        DDoS_Service-&gt;poll_c2();\n    }\n}\n</code></pre>\n<h4 id=\"c2responseparser\">C2 Response Parser</h4>\n<p>The <code>AttackCommandParser</code> serves as the callback that is triggered when the C2 <code>WebView</code> detects that a page load has occurred.  The parser loads the page’s content and extracts the <code>&lt;title&gt;</code> body as the attack command.  Based on observed samples, a payload from the C2 looks like this:</p>\n<pre><code>&lt;html&gt;\n  &lt;title&gt;\n  https://A_TARGETED_WEBSITE/snewxwriA_USER_AGENT_STRINGsnewxwrihttps://A_REFER_HEADER_VALUE/\n  &lt;/title&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Figure 3: Attack Directive Sample</p>\n<p>The value extracted from the <code>&lt;title&gt;</code> tag is then tested via <code>String-&gt;contains()</code> to ensure it contains the value token delimiter <code>snewxwri</code>.  If the delimiter is found, the content is trimmed of leading or trailing whitespace and then <code>split()</code> into an <code>Array</code> of pieces on the delimiter.  The resulting tokens are then used as parameters to be passed to the <code>DDoS_Service-&gt;attack()</code> method.</p>\n<h5 id=\"c2responseparserpseudocode\">C2 Response Parser Pseudo Code</h5>\n<pre><code>Class AttackCommandParser extends WebViewClient {\n    Public function onPageFinished(C2_WebView,C2_url) {\n        String pageTitle = C2_WebView-&gt;getTitle();\n        if (pageTitle-&gt;contains(“snewxwri”) == true) {\n            pageTitle = pageTitle-&gt;trim();\n            Array commandParts = pageTitle.split(“snewxwri”);\n            String target = commandParts[0];\n            String userAgent = commandParts[1];\n            String referer = commandParts[2];\n            DDoS_Service-&gt;attack(target, userAgent, referer);\n        }\n    }\n}\n</code></pre>\n<h4 id=\"ddosservice\">DDoS Service</h4>\n<p>The <code>DDoS_Service</code> component is what runs the show. It has 3 core functions.  These responsibilities are to get the Service up and running, provide the <code>poll_c2()</code> method for loading the C2 <code>WebView</code>, and most importantly -- launching attacks.  We’ll look at these responsibilities one at a time after presenting the pseudo code.</p>\n<h4 id=\"ddosservicepseudocode\">DDoS Service Pseudo Code</h4>\n<pre><code>Class DDoS_Service extends Object {\n    Public function onCreate() {\n        Handler OS_Handler = new Handler();\n        Object Runner = new ServiceRunner();\n        OS_Handler-&gt;postDelayed(Runner,2);\n    }\n    Public function poll_c2() {\n        WebViewClient C2_Parser = new AttackCommandParser();\n        WebView C2_WebView = new WebView();\n        WebViewSettings C2_WebView_Settings = C2_WebView-&gt;getSettings();\n        C2_WebView_Settings-&gt;setCacheMode(LOAD_NO_CACHE);\n        C2_WebView-&gt;clearCache(true);\n        C2_WebView-&gt;clearHistory();\n        C2_WebView-&gt;setWebViewClient(C2_Parser);\n        C2_WebView-&gt;loadUrl(“http://g[.]axclick[.]store”);\n    }\n    Public function attack(String target, String userAgent, String referer) {\n        HashMap WebViewHeaders = new HashMap();\n        WebViewHeaders-&gt;put(“Referer”,referer);\n        WebViewHeaders-&gt;put(“X-Requested-With”,””);\n        WebView[] AttackerViews = new WebView[100];\n        for (int i=0; i&lt;AttackerViews.length; i++) {\n            AttackerViews[i] = new WebView();\n            AttackerViews[i]-&gt;clearHistory();\n            AttackerViews[i]-&gt;clearFormData();\n            AttackerViews[i]-&gt;clearCache(true);\n            WebViewSettings AttackWebViewSettings = AttackerViews[i]-&gt;getSettings();\n            AttackWebViewSettings-&gt;setJavaScriptEnabled(true);\n            AttackWebViewSettings-&gt;setUserAgentString(userAgent);\n            AttackWebViewSettings-&gt;setCacheMode(LOAD_NO_CACHE);\n            this-&gt;deleteDatabase(“webview.db”);\n            this-&gt;deleteDatabase(“webviewCache.db”);\n            AttackerViews[i]-&gt;loadUrl(target,WebViewHeaders);\n        }\n    }\n}\n</code></pre>\n<h5 id=\"ddosserviceoncreate\">DDoS Service onCreate()</h5>\n<p>The <code>onCreate()</code> method is straightforward: it creates a new <code>android/os/Handler</code> and <code>ServiceRunner</code> instance.  The <code>ServiceRunner</code> instance is then hooked into the Handler via a call to <code>postDelayed()</code>.  According to <a href=\"https://developer.android.com/reference/android/os/Handler.html#postDelayed(java.lang.Runnable,%20long)\">Android documentation</a>, this “Causes the Runnable r to be added to the message queue, to be run after the specified amount of time elapses.”  The second parameter to this method call is the number of milliseconds before the Runnable is invoked. In this sample that value is <code>2</code>, which is a very aggressive timing strategy.</p>\n<h5 id=\"ddosservicepoll_c2\">DDoS Service poll_c2()</h5>\n<p>The <code>poll_c2()</code> method is responsible for continually reloading the <code>WebView</code> with the C2 URL while also hooking the <code>AttackCommandParser WebViewClient</code> into the poller <code>WebView</code> instance.  Before polling the C2 domains, the service will clear and disable the cache as well as clear the <code>WebView</code> instance history.  These steps are performed to ensure that the client is always getting up-to-date information from the C2 and not being served cache hits from the local device.  We’ll see this tactic reused during the analysis of the <code>attack()</code> method as well.</p>\n<h5 id=\"ddosserviceattack\">DDoS Service attack()</h5>\n<pre><code>Public function attack(String target, String userAgent, String referer) {\n    HashMap WebViewHeaders = new HashMap();\n    WebViewHeaders-&gt;put(“Referer”,referer);\n    WebViewHeaders-&gt;put(“X-Requested-With”,””);    \n    WebView[] AttackerViews = new WebView[100];\n    for (int i=0; i&lt;AttackerViews.length; i++) {\n        AttackerViews[i] = new WebView();\n        AttackerViews[i]-&gt;clearHistory();\n        AttackerViews[i]-&gt;clearFormData();\n        AttackerViews[i]-&gt;clearCache(true);\n        WebViewSettings AttackWebViewSettings = AttackerViews[i]-&gt;getSettings();\n        AttackWebViewSettings-&gt;setJavaScriptEnabled(true);\n        AttackWebViewSettings-&gt;setUserAgentString(userAgent);\n        AttackWebViewSettings-&gt;setCacheMode(LOAD_NO_CACHE);\n        this-&gt;deleteDatabase(“webview.db”);\n        this-&gt;deleteDatabase(“webviewCache.db”);\n        AttackerViews[i]-&gt;loadUrl(target,WebViewHeaders);\n    }\n} \n</code></pre>\n<p>The <code>attack()</code> method is responsible for generating the actual attack traffic. The  <code>AttackCommandParser-&gt;onPageFinished()</code> that was previously discussed will pass in the target, userAgent, and referer values that were handed out by the last C2 interaction.  This method will create a <code>HashMap</code> object that will configure the HTTP Headers used during the attack.</p>\n<p>The first header is the HTTP Referer, which as we know was supplied by the C2 server.  In all observed cases, this value was a mirror value of the actual target.  The second header is the <code>X-Requested-With</code> header; although the <code>WebView</code> would usually have a default value,it is overwritten with a blank value.  Typically this header coming from an embedded <code>WebView</code> would contain information about the Android application such as <code>com.[app_author].app</code>.  It’s likely that this Header was blanked specifically to obfuscate who or what was generating the attack traffic that would be seen by the target.</p>\n<p>Once the headers are configured, an empty Array of  <code>WebView</code> place holders is instantiated, followed by a loop to fill this Array with actual <code>WebView</code> instances.   Each instance goes through the same set of configuration processes.  The <code>WebView</code> instances created will have their history, saved form data, and cache cleared.  The JavaScript capabilities are enabled (this is typically disabled by default for embedded <code>WebViews</code>), the <code>User-Agent</code> string that will be present in the HTTP Headers is overwritten with the value supplied by the C2 attack directive, and the <code>CacheMode</code> set to <code>LOAD_NO_CACHE</code>, which will force the browser instance to bypass local caches and fetch the target URL for each request.</p>\n<p>In a final attempt to ensure that no cache hits will occur on the device and a that request will be sent to the target, the application also deletes its local <code>webview.db</code> and <code>webviewCache.db</code> files from the device before loading each request.</p>\n<p>Finally we see the <code>loadUrl()</code> method is called on the newly configured <code>WebView</code> instance using the target URL and customized <code>WebViewHeaders</code> <code>HashMap</code>.</p>\n<h5 id=\"runningthemalwareuserexperience\">Running the Malware-User Experience</h5>\n<p>While many of the identified apps had already been removed from the Google Play store, mirrors remained online from which we could download the APK files. We loaded <code>“twdlphqg”</code> (one of the attacking apps) onto a freshly-reset physical Samsung Galaxy S4 that had been running Lollipop and security patches from 2015.</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2017/08/pasted-image-0.png\" alt=\"\" loading=\"lazy\"><br>\n<br /><br>\n<img src=\"http://blog.cloudflare.com/content/images/2017/08/pasted-image-1.png\" alt=\"\" loading=\"lazy\"></p>\n<p>This app, along with the others we tested, used innocuous-sounding names like “Device Analysis”, “Data Storage” “Package Manager”, and so forth.</p>\n<p>When the app is run, it appears to be a very basic ringtone app. Only three ringtones are provided. The app can play and set ringtones but has no other functionality.</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2017/08/pasted-image-2.png\" alt=\"\" loading=\"lazy\"></p>\n<p>In the background, this app spawns additional processes that continue to run even while the phone’s screen is locked. This allows the app to launch DDoS attacks from the phone in the background. When we left the phone on a charger and let it go to sleep, it continued to launch DDoS attacks.</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2017/08/pasted-image-3.png\" alt=\"\" loading=\"lazy\"></p>\n<p>Notably, it is no longer possible to install this application as Google’s PlayProtect feature now blocks this app from being installed. Google is also removing it from devices that already have it installed. All of the applications we tested that were part of this campaign produced this block message; disabling PlayProtect was necessary to run the malware.</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2017/08/pasted-image-4.png\" alt=\"\" loading=\"lazy\"></p>\n<h5 id=\"ringringddosvariationsinmaliciousapps\">Ring Ring! DDoS! - Variations in Malicious Apps</h5>\n<p>We tested multiple applications from this campaign. There were different variations in behavior and user interface and they weren’t all ringtone apps. All tests were conducted on the same phone.</p>\n<h5 id=\"xryufrix\">Xryufrix</h5>\n<p><code>Xryufrix</code> was the top hitter from the DDoS statistics, but when run, its performance was underwhelming. It’s possible there was a compatability issue <a href=\"https://www.cloudflare.com/learning/ddos/how-to-prevent-ddos-attacks/\">preventing</a> it from reaching its full DDoS potential. This app asked for fewer permissions upon initial install, but did ask for the same lock screen related device administrator permissions as <code>twdlphqg</code>. This one pretended to be a YouTube app. When it first opens, it queries the axclick domain for the DDoS attack commands as well as a <code>GET</code> request against <code>p[.]axclick[.]store/?utm_source=tfikztteuic</code>, which returns the Play Store URL of a different app located at <code>market://details?id=com[.]luckybooster[.]app</code>. When the user attempts to play a Youtube video, this app closes, deletes its icon from the app list, and makes itself impossible to execute afterwards, which is possibly the result of a crash. It also opens the Play store download link for the “Luckybooster” app, which did not DDoS when it was run. The <code>xryufrix</code> app does not launch DDoS attacks while the phone is asleep nor does it launch DDoS attacks at any time other than when the app is active.</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2017/08/pasted-image-5.png\" alt=\"\" loading=\"lazy\"><br>\n<br /><br>\n<img src=\"http://blog.cloudflare.com/content/images/2017/08/pasted-image-6.png\" alt=\"\" loading=\"lazy\"><br>\n<br /><br>\n<img src=\"http://blog.cloudflare.com/content/images/2017/08/pasted-image-7.png\" alt=\"\" loading=\"lazy\"></p>\n<!--kg-card-end: markdown-->",
		"id": "5d16453b41acde0011a9563f",
		"meta_description": "The WireX botnet comprises primarily Android devices running malicious applications and is designed to create DDoS traffic.",
		"meta_title": "The WireX Botnet: How Industry Collaboration Disrupted a DDoS Attack",
		"og_description": null,
		"og_image": null,
		"og_title": null,
		"primary_author": {
			"id": "5d1644b141acde0011a94f69",
			"name": "Jaime Cochran",
			"slug": "jaimecochran",
			"profile_image": "http://blog.cloudflare.com/content/images/2018/02/ucarecdn.jpg",
			"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-29.png",
			"bio": null,
			"website": "http://ethi.cx/",
			"location": "San Francisco",
			"facebook": null,
			"twitter": "@ackflags",
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/jaimecochran/"
		},
		"primary_tag": {
			"id": "5d16450341acde0011a951e3",
			"name": "DDoS",
			"slug": "ddos",
			"description": null,
			"feature_image": null,
			"visibility": "public",
			"meta_title": null,
			"meta_description": null,
			"og_image": null,
			"og_title": null,
			"og_description": null,
			"twitter_image": null,
			"twitter_title": null,
			"twitter_description": null,
			"codeinjection_head": null,
			"codeinjection_foot": null,
			"canonical_url": null,
			"accent_color": null,
			"url": "http://blog.cloudflare.com/tag/ddos/"
		},
		"published_at": "2017-08-28T15:00:07.000+01:00",
		"reading_time": 14,
		"slug": "the-wirex-botnet",
		"tags": [
			{
				"id": "5d16450341acde0011a951e3",
				"name": "DDoS",
				"slug": "ddos",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/ddos/"
			},
			{
				"id": "5d16450341acde0011a95169",
				"name": "Attacks",
				"slug": "attacks",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/attacks/"
			},
			{
				"id": "5d16450341acde0011a95214",
				"name": "Programming",
				"slug": "programming",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/programming/"
			},
			{
				"id": "5d16450341acde0011a95265",
				"name": "Security",
				"slug": "security",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Security.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Security",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Security'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/security/"
			},
			{
				"id": "5d16450341acde0011a951aa",
				"name": "Vulnerabilities",
				"slug": "vulnerabilities",
				"description": "Vulnerabilities (EN)",
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/vulnerabilities/"
			},
			{
				"id": "5d87c015fd9e450505d9658f",
				"name": "Bots",
				"slug": "bots",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/bots/"
			},
			{
				"id": "5d16450341acde0011a95160",
				"name": "Speed & Reliability",
				"slug": "speed-and-reliability",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Speed---Reliability-1.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Speed & Reliability",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Speed & Reliability'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/speed-and-reliability/"
			}
		],
		"title": "The WireX Botnet: How Industry Collaboration Disrupted a DDoS Attack",
		"twitter_description": null,
		"twitter_image": null,
		"twitter_title": null,
		"updated_at": "2023-10-27T21:42:21.000+01:00",
		"url": "http://blog.cloudflare.com/the-wirex-botnet/",
		"uuid": "4f040f13-e878-4514-812a-081b079ceab7",
		"visibility": "public"
	}
}