{
	"locale": "en-us",
	"post": {
		"id": "5f7254d3c9353501baf0c676",
		"uuid": "dd507f14-47fd-47d3-98af-8d621caca0cd",
		"title": "Introducing API Shield",
		"slug": "introducing-api-shield",
		"html": "<!--kg-card-begin: markdown--><p><em><small>This post is also available in <a href=\"http://blog.cloudflare.com/zh-cn/introducing-api-shield-zh-cn/\">简体中文</a>, <a href=\"http://blog.cloudflare.com/zh-tw/introducing-api-shield-zh-tw/\">繁體中文</a>, <a href=\"http://blog.cloudflare.com/ja-jp/introducing-api-shield-ja-jp/\">日本語</a>, <a href=\"http://blog.cloudflare.com/ko-kr/introducing-api-shield-ko-kr/\">한국어</a>, <a href=\"http://blog.cloudflare.com/de-de/introducing-api-shield-de-de/\">Deutsch</a>, <a href=\"http://blog.cloudflare.com/fr-fr/introducing-api-shield-fr-fr/\">Français</a>, <a href=\"http://blog.cloudflare.com/es-es/introducing-api-shield-es-es/\">Español</a>, <a href=\"http://blog.cloudflare.com/pt-br/introducing-api-shield-pt-br/\">Português</a> and <a href=\"http://blog.cloudflare.com/it-it/introducing-api-shield-it-it/\">Italiano</a>.</small></em></p>\n<!--kg-card-end: markdown--><p>APIs are the lifeblood of modern Internet-connected applications. Every millisecond they carry requests from mobile applications—place this food delivery order, “like” this picture—and directions to IoT devices—unlock the car door, start the wash cycle, my human just finished a 5k run—among countless other calls.</p><p>They’re also the target of widespread attacks designed to perform unauthorized actions or exfiltrate data, as data from Gartner increasingly shows: “by 2021, 90% of web-enabled applications will have more surface area for attack in the form of exposed APIs rather than the UI, up from 40% in 2019, and “Gartner predicted that, by 2022, API abuses will move from an infrequent to the most-frequent attack vector, resulting in data breaches for enterprise web applications”[1][2]. Of the 18 million requests per second that traverse Cloudflare’s network, 50% are directed towards APIs—with the majority of these requests blocked as malicious.</p><p>To combat these threats, Cloudflare is making it simple to <a href=\"https://www.cloudflare.com/application-services/solutions/api-security/\">secure APIs</a> through the use of strong client certificate-based identity and strict schema-based validation. As of today, these capabilities are available free for all plans within our new “API Shield” offering. And as of today, the security benefits <a href=\"http://blog.cloudflare.com/announcing-grpc/\">also extend to gRPC-based APIs</a>, which use binary formats such as protocol buffers rather than JSON, and have been growing in popularity with our customer base.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2020/10/image3.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>Continue reading to learn more about the new capabilities, or jump right to the \"Demonstration\" paragraph for examples of how to get started configuring your first API Shield rule.</p><h2 id=\"positive-security-models-and-client-certificates\">Positive security models and client certificates</h2><p>A “positive security” model is one that allows only known behavior and identities, while rejecting everything else. It is the opposite of the traditional “negative security” model enforced by a <a href=\"https://www.cloudflare.com/learning/ddos/glossary/web-application-firewall-waf/\">Web Application Firewall (WAF)</a> that allows everything <em>except</em> for requests coming from problematic IPs, ASNs, countries or requests with problematic signatures (SQL injection attempts, etc.).</p><p>Implementing a positive security model for APIs is the most direct way to eliminate the noise of credential stuffing attacks and other automated scanning tools. And the first step towards a positive model is deploying strong authentication such as mutual TLS authentication, which is not vulnerable to the <a href=\"https://spycloud.com/2020-annual-credential-exposure-report/\">reuse or sharing of passwords</a>.</p><p>Just as we simplified the issuance of server certificates back in 2014 with <a href=\"http://blog.cloudflare.com/introducing-universal-ssl/\">Universal SSL</a>, API Shield reduces the process of issuing client certificates to clicking a few buttons in the Cloudflare Dashboard. By providing a fully hosted private public key infrastructure (PKI), you can focus on your applications and features—rather than operating and securing your own certificate authority (CA).</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2020/10/API_Shield_Mutual_TLS.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><h2 id=\"enforcing-valid-requests-with-schema-validation\">Enforcing valid requests with schema validation</h2><p>Once developers can be sure that only legitimate clients (with SSL certificates in hand) are connecting to their APIs, the next step in implementing a positive security model is making sure that those clients are making valid requests. Extracting a client certificate from a device and reusing elsewhere is difficult, but not impossible, so it’s also important to make sure that the API is being called as intended.</p><p>Requests containing extraneous input may not have been anticipated by the API developer, and can cause problems if processed directly by the application, so these should be dropped at the edge if possible. API Schema validation works by matching the contents of API requests—the query parameters that come after the URL and contents of the POST body—against a contract or “schema” that contains the rules for what is expected. If validation fails, the API call is blocked protecting the origin from an invalid request or a malicious payload.</p><p>Schema validation is currently in closed beta for JSON payloads, with gRPC/protocol buffer support on the roadmap. If you would like to join the beta please open a support ticket with the subject “API Schema Validation Beta”. After the beta has ended, we plan to make schema validation available as part of the API Shield user interface.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2020/10/API_Shield_Schema_Protection.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><h2 id=\"demonstration\">Demonstration</h2><p>To demonstrate how the APIs powering IoT devices and mobile applications can be secured, we have built an API Shield demonstration using client certificates and schema validation.</p><p>Temperatures are captured by an IoT device, represented in the demo by a Raspberry Pi 3 Model B+ with an external infrared temperature sensor, and then transmitted via a POST request to a Cloudflare-protected API. Temperatures are subsequently retrieved by GET requests and then displayed in a mobile application built in Swift for iOS. </p><p>In both cases, the API was actually built using Cloudflare Workers® and Workers KV, but can be replaced by any Internet-accessible endpoint.</p><h3 id=\"1-api-configuration\">1. API Configuration</h3><p>Before configuring the IoT device and mobile application to communicate securely with the API, we need to bootstrap the API endpoints. To keep the example simple, while also allowing for additional customization, we’ve implemented the API as a Cloudflare Worker (borrowing code from the <a href=\"https://developers.cloudflare.com/workers/tutorials/build-a-jamstack-app\">To-Do List tutorial</a>).</p><p>In this particular example the temperatures are stored in Workers KV using the source IP address as a key, but this could easily be replaced by a <a href=\"https://developers.cloudflare.com/access/service-auth/mtls-headers/\">value from the client certificate</a>, e.g., the fingerprint. The code below saves a temperature and timestamp into KV when a POST is made, and returns the most recent 5 temperatures when a GET request is made.</p><pre><code>const defaultData = { temperatures: [] }\n\nconst getCache = key =&gt; TEMPERATURES.get(key)\nconst setCache = (key, data) =&gt; TEMPERATURES.put(key, data)\n\nasync function addTemperature(request) {\n\n    // pull previously recorded temperatures for this client\n    const ip = request.headers.get('CF-Connecting-IP')\n    const cacheKey = `data-${ip}`\n    let data\n    const cache = await getCache(cacheKey)\n    if (!cache) {\n        await setCache(cacheKey, JSON.stringify(defaultData))\n        data = defaultData\n    } else {\n        data = JSON.parse(cache)\n    }\n\n    // append the recorded temperatures with the submitted reading (assuming it has both temperature and a timestamp)\n    try {\n        const body = await request.text()\n        const val = JSON.parse(body)\n\n        if (val.temperature &amp;&amp; val.time) {\n            data.temperatures.push(val)\n            await setCache(cacheKey, JSON.stringify(data))\n            return new Response(\"\", { status: 201 })\n        } else {\n            return new Response(\"Unable to parse temperature and/or timestamp from JSON POST body\", { status: 400 })\n        }\n    } catch (err) {\n        return new Response(err, { status: 500 })\n    }\n}\n\nfunction compareTimestamps(a,b) {\n    return -1 * (Date.parse(a.time) - Date.parse(b.time))\n}\n\n// return the 5 most recent temperature measurements\nasync function getTemperatures(request) {\n    const ip = request.headers.get('CF-Connecting-IP')\n    const cacheKey = `data-${ip}`\n\n    const cache = await getCache(cacheKey)\n    if (!cache) {\n        return new Response(JSON.stringify(defaultData), { status: 200, headers: { 'content-type': 'application/json' } })\n    } else {\n        data = JSON.parse(cache)\n        const retval = JSON.stringify(data.temperatures.sort(compareTimestamps).splice(0,5))\n        return new Response(retval, { status: 200, headers: { 'content-type': 'application/json' } })\n    }\n}\n\nasync function handleRequest(request) {\n\n    if (request.method === 'POST') {\n        return addTemperature(request)\n    } else {\n        return getTemperatures(request)\n    }\n\n}\n\naddEventListener('fetch', event =&gt; {\n  event.respondWith(handleRequest(event.request))\n})</code></pre><p>Before adding mutual TLS authentication, we’ll test POST’ing a random temperature reading:</p><pre><code>$ TEMPERATURE=$(echo $((361 + RANDOM %11)) | awk '{printf(\"%.2f\",$1/10.0)}')\n$ TIMESTAMP=$(date -u +\"%Y-%m-%dT%H:%M:%SZ\")\n\n$ echo -e \"$TEMPERATURE\\n$TIMESTAMP\"\n36.30\n2020-09-28T02:57:49Z\n\n$ curl -v -H \"Content-Type: application/json\" -d '{\"temperature\":'''$TEMPERATURE''', \"time\": \"'''$TIMESTAMP'''\"}' https://shield.upinatoms.com/temps 2&gt;&amp;1 | grep \"&lt; HTTP/2\"\n&lt; HTTP/2 201 </code></pre><p>And here’s a subsequent read of that temperature, along with the previous 4 that were submitted:</p><pre><code>$ curl -s https://shield.upinatoms.com/temps | jq .\n[\n  {\n    \"temperature\": 36.3,\n    \"time\": \"2020-09-28T02:57:49Z\"\n  },\n  {\n    \"temperature\": 36.7,\n    \"time\": \"2020-09-28T02:54:56Z\"\n  },\n  {\n    \"temperature\": 36.2,\n    \"time\": \"2020-09-28T02:33:08Z\"\n  },\n    {\n    \"temperature\": 36.5,\n    \"time\": \"2020-09-28T02:29:22Z\"\n  },\n  {\n    \"temperature\": 36.9,\n    \"time\": \"2020-09-28T02:27:19Z\"\n  } \n]\n</code></pre><h3 id=\"2-client-certificate-issuance\">2. Client certificate issuance</h3><p>With our API in hand, it’s time to lock it down to require a valid client certificate. Before doing so we’ll want to generate those certificates. To do so, you can either go to the SSL/TLS → Client Certificates tab of the Cloudflare Dashboard and click “Create Certificate” or you can automate the process via API calls.</p><p>Because most developers at scale will be generating their own private keys and CSRs and requesting that they be signed via API, we’ll show that process here. Using Cloudflare’s PKI toolkit <a href=\"https://github.com/cloudflare/cfssl\">CFSSL</a> we’ll first create a bootstrap certificate for the iOS application, and then we’ll create a certificate for the IoT device:</p><figure class=\"kg-card kg-code-card\"><pre><code>$ cat &lt;&lt;'EOF' | tee -a csr.json\n{\n    \"hosts\": [\n        \"ios-bootstrap.devices.upinatoms.com\"\n    ],\n    \"CN\": \"ios-bootstrap.devices.upinatoms.com\",\n    \"key\": {\n        \"algo\": \"rsa\",\n        \"size\": 2048\n    },\n    \"names\": [{\n        \"C\": \"US\",\n        \"L\": \"Austin\",\n        \"O\": \"Temperature Testers, Inc.\",\n        \"OU\": \"Tech Operations\",\n        \"ST\": \"Texas\"\n    }]\n}\nEOF\n\n$ cfssl genkey csr.json | cfssljson -bare certificate\n2020/09/27 21:28:46 [INFO] generate received request\n2020/09/27 21:28:46 [INFO] received CSR\n2020/09/27 21:28:46 [INFO] generating key: rsa-2048\n2020/09/27 21:28:47 [INFO] encoded CSR\n\n$ mv certificate-key.pem ios-key.pem\n$ mv certificate.csr ios.csr\n\n// and do the same for the IoT sensor\n$ sed -i.bak 's/ios-bootstrap/sensor-001/g' csr.json\n$ cfssl genkey csr.json | cfssljson -bare certificate\n...\n$ mv certificate-key.pem sensor-key.pem\n$ mv certificate.csr sensor.csr</code></pre><figcaption>Generate a private key and CSR for the IoT device and iOS application</figcaption></figure><figure class=\"kg-card kg-code-card\"><pre><code>// we need to replace actual newlines in the CSR with ‘\\n’ before POST’ing\n$ CSR=$(cat ios.csr | perl -pe 's/\\n/\\\\n/g')\n$ request_body=$(&lt; &lt;(cat &lt;&lt;EOF\n{\n  \"validity_days\": 3650,\n  \"csr\":\"$CSR\"\n}\nEOF\n))\n\n// save the response so we can view it and then extract the certificate\n$ curl -H 'X-Auth-Email: YOUR_EMAIL' -H 'X-Auth-Key: YOUR_API_KEY' -H 'Content-Type: application/json' -d “$request_body” https://api.cloudflare.com/client/v4/zones/YOUR_ZONE_ID/client_certificates &gt; response.json\n\n$ cat response.json | jq .\n{\n  \"success\": true,\n  \"errors\": [],\n  \"messages\": [],\n  \"result\": {\n    \"id\": \"7bf7f70c-7600-42e1-81c4-e4c0da9aa515\",\n    \"certificate_authority\": {\n      \"id\": \"8f5606d9-5133-4e53-b062-a2e5da51be5e\",\n      \"name\": \"Cloudflare Managed CA for account 11cbe197c050c9e422aaa103cfe30ed8\"\n    },\n    \"certificate\": \"-----BEGIN CERTIFICATE-----\\nMIIEkzCCA...\\n-----END CERTIFICATE-----\\n\",\n    \"csr\": \"-----BEGIN CERTIFICATE REQUEST-----\\nMIIDITCCA...\\n-----END CERTIFICATE REQUEST-----\\n\",\n    \"ski\": \"eb2a48a19802a705c0e8a39489a71bd586638fdf\",\n    \"serial_number\": \"133270673305904147240315902291726509220894288063\",\n    \"signature\": \"SHA256WithRSA\",\n    \"common_name\": \"ios-bootstrap.devices.upinatoms.com\",\n    \"organization\": \"Temperature Testers, Inc.\",\n    \"organizational_unit\": \"Tech Operations\",\n    \"country\": \"US\",\n    \"state\": \"Texas\",\n    \"location\": \"Austin\",\n    \"expires_on\": \"2030-09-26T02:41:00Z\",\n    \"issued_on\": \"2020-09-28T02:41:00Z\",\n    \"fingerprint_sha256\": \"84b045d498f53a59bef53358441a3957de81261211fc9b6d46b0bf5880bdaf25\",\n    \"validity_days\": 3650\n  }\n}\n\n$ cat response.json | jq .result.certificate | perl -npe 's/\\\\n/\\n/g; s/\"//g' &gt; ios.pem\n\n// now ask that the second client certificate signing request be signed\n$ CSR=$(cat sensor.csr | perl -pe 's/\\n/\\\\n/g')\n$ request_body=$(&lt; &lt;(cat &lt;&lt;EOF\n{\n  \"validity_days\": 3650,\n  \"csr\":\"$CSR\"\n}\nEOF\n))\n\n$ curl -H 'X-Auth-Email: YOUR_EMAIL' -H 'X-Auth-Key: YOUR_API_KEY' -H 'Content-Type: application/json' -d \"$request_body\" https://api.cloudflare.com/client/v4/zones/YOUR_ZONE_ID/client_certificates | perl -npe 's/\\\\n/\\n/g; s/\"//g' &gt; sensor.pem</code></pre><figcaption>Ask Cloudflare to sign the CSRs with the private CA issued for your zone</figcaption></figure><h3 id=\"3-api-shield-rule-creation\">3. API Shield rule creation</h3><p>With certificates in hand we can now configure the API endpoint to require their use. Below is a demonstration of how to create such a rule. </p><p>The steps include specifying which hostnames to prompt for certificates, e.g., shield.upinatoms.com, and then creating the API Shield rule.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2020/10/API_Shield_demo.gif\" class=\"kg-image\" alt loading=\"lazy\"></figure><h3 id=\"4-iot-device-communication\">4. IoT Device Communication</h3><p>To prepare the IoT device for secure communication with our API endpoint we need to embed the certificate on the device, and then point our application to it so it can be used when making the POST request to the API endpoint. </p><p>We securely copied the private key and certificate into /etc/ssl/private/sensor-key.pem and /etc/ssl/certs/sensor.pem, and then modified our sample script to point to these files:</p><pre><code>import requests\nimport json\nfrom datetime import datetime\n\ndef readSensor():\n\n    # Takes a reading from a temperature sensor and store it to temp_measurement \n\n    dateTimeObj = datetime.now()\n    timestampStr = dateTimeObj.strftime(‘%Y-%m-%dT%H:%M:%SZ’)\n\n    measurement = {'temperature':str(36.5),'time':timestampStr}\n    return measurement\n\ndef main():\n\n    print(\"Cloudflare API Shield [IoT device demonstration]\")\n\n    temperature = readSensor()\n    payload = json.dumps(temperature)\n    \n    url = 'https://shield.upinatoms.com/temps'\n    json_headers = {'Content-Type': 'application/json'}\n    cert_file = ('/etc/ssl/certs/sensor.pem', '/etc/ssl/private/sensor-key.pem')\n    \n    r = requests.post(url, headers = json_headers, data = payload, cert = cert_file)\n    \n    print(\"Request body: \", r.request.body)\n    print(\"Response status code: %d\" % r.status_code)\n</code></pre><p>When the script attempts to connect to <a href=\"https://shield.upinatoms.com/temps\">https://shield.upinatoms.com/temps</a>, Cloudflare requests that a ClientCertificate is sent, and our script sends the contents of sensor.pem before demonstrating it has possession of sensor-key.pem as required to complete the SSL/TLS handshake.</p><p>If we fail to send the client certificate or attempt to include extraneous fields in the API request, the schema validation (configuration not shown) fails and the request is rejected:</p><pre><code>Cloudflare API Shield [IoT device demonstration]\nRequest body:  {\"temperature\": \"36.5\", \"time\": \"2020-09-28T15:52:19Z\"}\nResponse status code: 403</code></pre><p>If instead a valid certificate is presented and the payload follows the schema previously uploaded, our script POSTs the latest temperature reading to the API.</p><pre><code>Cloudflare API Shield [IoT device demonstration]\nRequest body:  {\"temperature\": \"36.5\", \"time\": \"2020-09-28T15:56:45Z\"}\nResponse status code: 201</code></pre><h3 id=\"5-mobile-application-ios-communication\">5. Mobile Application (iOS) Communication</h3><p>Now that temperature requests have been sent to our API endpoint, it’s time to read them securely from our mobile application using one of the client certificates. </p><p>For purposes of brevity, we’re going to embed a “bootstrap” certificate and key as a PKCS#12 file within the application bundle. In a real world deployment, this bootstrap certificate should only be used alongside users’ credentials to authenticate to an API endpoint that can return a unique user certificate. Corporate users will want to use MDM to distribute certificates for additional control and persistence options.</p><h4 id=\"package-the-certificate-and-private-key\">Package the certificate and private key</h4><p>Before adding the bootstrap certificate and private key, we need to combine them into a binary PKCS#12 file. This binary file will then be added to our iOS application bundle.</p><pre><code>$ openssl pkcs12 -export -out bootstrap-cert.pfx -inkey ios-key.pem -in ios.pem\nEnter Export Password:\nVerifying - Enter Export Password:</code></pre><h4 id=\"add-the-certificate-bundle-to-your-ios-application\">Add the certificate bundle to your iOS application</h4><p>Within XCode, click File → Add Files To \"[Project Name]\" and select your .pfx file. Make sure to check \"Add to target\" before confirming.</p><h4 id=\"modify-your-urlsession-code-to-use-the-client-certificate\">Modify your URLSession code to use the client certificate</h4><p><a href=\"https://leenarts.net/2020/02/28/client-certificate-with-urlsession-in-swift/\">This article</a> provides a nice walkthrough of using a PKCS#11 class and <a href=\"https://developer.apple.com/documentation/foundation/urlsessiondelegate\">URLSessionDelegate</a>  to modify your application to complete mutual TLS authentication when connecting to an API that requires it.</p><h2 id=\"looking-forward\">Looking Forward</h2><p>In the coming months, we plan to expand API Shield with a number of additional features designed to protect API traffic. For customers that want to use their own PKI, we will provide the ability to import their own CAs, something <a href=\"https://developers.cloudflare.com/access/service-auth/mtls/\">available today</a> as part of Cloudflare Access. </p><p>As we receive feedback on our schema validation beta, we will look to make the capability generally available to all customers. If you’re trying out the beta and have thoughts to share, we’d love to hear your feedback. </p><p>Beyond certificates and schema validation, we’re excited to layer on additional API security capabilities as well as deep analytics to help you better understand your APIs. If there are features you’d like to see, let us know in the comments below!</p><p></p><p></p><p><em>1: “By 2021, 90% of web-enabled applications will have more surface area for attack in the form of exposed APIs rather than the UI, up from 40% in 2019. Source: Gartner “Gartner’s API Strategy Maturity Model”, Saniye Alaybeyi, Mark O'Neill, October 21, 2019. (Gartner subscription required)</em></p><p><em>2: “Gartner predicted by 2022, API abuses will move from an infrequent to the most-frequent attack vector, resulting in data breaches for enterprise web applications. Source: Gartner “Cool Vendors in API Strategy”, Shameen Pillai, Paolo Malinverno, Mark O'Neill, Jeremy D'Hoinne, May 18, 2020 (Gartner subscription required)</em></p>",
		"comment_id": "5f7254d3c9353501baf0c676",
		"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Birthday-Week-OG-images_API_Shield.png",
		"featured": false,
		"visibility": "public",
		"created_at": "2020-09-28T22:25:39.000+01:00",
		"updated_at": "2024-04-12T17:06:16.000+01:00",
		"published_at": "2020-10-01T14:01:00.000+01:00",
		"custom_excerpt": "Of the 18 million requests per second that traverse Cloudflare’s network, 50% are directed towards APIs. Cloudflare is making it simple to secure APIs through the use of strong client certificate-based identity and strict schema-based validation.",
		"codeinjection_head": null,
		"codeinjection_foot": null,
		"custom_template": null,
		"canonical_url": null,
		"authors": [
			{
				"id": "5d1644b141acde0011a94f5c",
				"name": "Patrick R. Donahue",
				"slug": "patrick",
				"profile_image": "https://blog-cloudflare-com-assets.storage.googleapis.com/2020/04/me0-1.png",
				"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-108.png",
				"bio": null,
				"website": "https://www.cloudflare.com",
				"location": "San Francisco, CA",
				"facebook": null,
				"twitter": "@prdonahue",
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/patrick/"
			},
			{
				"id": "5f72ed0dc9353501baf0c6e4",
				"name": "Daniele Molteni",
				"slug": "daniele",
				"profile_image": "https://blog-cloudflare-com-assets.storage.googleapis.com/2020/10/meProfessional-1-flipped.jpg",
				"cover_image": null,
				"bio": null,
				"website": null,
				"location": "London, UK",
				"facebook": null,
				"twitter": null,
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/daniele/"
			}
		],
		"tags": [
			{
				"id": "5d16450341acde0011a95211",
				"name": "Birthday Week",
				"slug": "birthday-week",
				"description": "Collection of Cloudflare blog posts tagged 'Birthday Week'.",
				"feature_image": "http://blog.cloudflare.com/content/images/2023/09/Welcome-to-Birthday-Week-2023.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Birthday Week",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Birthday Week'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/birthday-week/"
			},
			{
				"id": "5d16450341acde0011a951ee",
				"name": "Product News",
				"slug": "product-news",
				"description": "Product News (EN)",
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Product-News-1.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Product News",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Product News'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/product-news/"
			},
			{
				"id": "5f725568c9353501baf0c682",
				"name": "API Shield",
				"slug": "api-shield",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/api-shield/"
			},
			{
				"id": "5d16450341acde0011a95265",
				"name": "Security",
				"slug": "security",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Security.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Security",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Security'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/security/"
			}
		],
		"primary_author": {
			"id": "5d1644b141acde0011a94f5c",
			"name": "Patrick R. Donahue",
			"slug": "patrick",
			"profile_image": "https://blog-cloudflare-com-assets.storage.googleapis.com/2020/04/me0-1.png",
			"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-108.png",
			"bio": null,
			"website": "https://www.cloudflare.com",
			"location": "San Francisco, CA",
			"facebook": null,
			"twitter": "@prdonahue",
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/patrick/"
		},
		"primary_tag": {
			"id": "5d16450341acde0011a95211",
			"name": "Birthday Week",
			"slug": "birthday-week",
			"description": "Collection of Cloudflare blog posts tagged 'Birthday Week'.",
			"feature_image": "http://blog.cloudflare.com/content/images/2023/09/Welcome-to-Birthday-Week-2023.png",
			"visibility": "public",
			"meta_title": "Cloudflare Blog: Birthday Week",
			"meta_description": "Collection of Cloudflare blog posts tagged 'Birthday Week'.",
			"og_image": null,
			"og_title": null,
			"og_description": null,
			"twitter_image": null,
			"twitter_title": null,
			"twitter_description": null,
			"codeinjection_head": null,
			"codeinjection_foot": null,
			"canonical_url": null,
			"accent_color": null,
			"url": "http://blog.cloudflare.com/tag/birthday-week/"
		},
		"url": "http://blog.cloudflare.com/introducing-api-shield/",
		"excerpt": "Of the 18 million requests per second that traverse Cloudflare’s network, 50% are directed towards APIs. Cloudflare is making it simple to secure APIs through the use of strong client certificate-based identity and strict schema-based validation.",
		"reading_time": 11,
		"access": true,
		"comments": false,
		"og_image": "https://blog-cloudflare-com-assets.storage.googleapis.com/2020/10/facebook-link-image.png",
		"og_title": null,
		"og_description": null,
		"twitter_image": "https://blog-cloudflare-com-assets.storage.googleapis.com/2020/10/twitter-shared-link.png",
		"twitter_title": null,
		"twitter_description": null,
		"meta_title": null,
		"meta_description": "Of the 18 million requests per second that traverse Cloudflare’s network, 50% are directed towards APIs. Cloudflare is making it simple to secure APIs through the use of strong client certificate-based identity and strict schema-based validation.",
		"email_subject": null,
		"frontmatter": null,
		"feature_image_alt": null,
		"feature_image_caption": null
	}
}