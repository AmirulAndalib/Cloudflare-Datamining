{
	"locale": "en-us",
	"post": {
		"id": "641a029c772e7f000a2a65c8",
		"uuid": "2659c042-629f-4963-bf96-34978fcc07c5",
		"title": "Node.js compatibility for Cloudflare Workers – starting with Async Context Tracking, EventEmitter, Buffer, assert, and util",
		"slug": "workers-node-js-asynclocalstorage",
		"html": "<figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2023/03/image1-43.png\" class=\"kg-image\" alt=\"Node.js compatibility for Cloudflare Workers – starting with Async Context Tracking, EventEmitter, Buffer, assert, and util\" loading=\"lazy\"></figure><p>Over the coming months, Cloudflare Workers will start to roll out built-in compatibility with Node.js core APIs as part of an effort to support increased compatibility across JavaScript runtimes.</p><p>We are happy to announce today that the first of these Node.js APIs – <code>AsyncLocalStorage</code>, <code>EventEmitter</code>, <code>Buffer</code>, <code>assert</code>, and parts of <code>util</code> – are now available for use. These APIs are provided directly by the <a href=\"https://github.com/cloudflare/workerd\">open-source Cloudflare Workers runtime</a>, with no need to bundle polyfill implementations into your own code.</p><p>These new APIs are available today — start using them by enabling the <code>nodejs_compat</code> <a href=\"https://developers.cloudflare.com/workers/platform/compatibility-dates/\">compatibility flag</a> in your Workers.</p><h3 id=\"async-context-tracking-with-the-asynclocalstorage-api\">Async Context Tracking with the AsyncLocalStorage API</h3><p>The <code>AsyncLocalStorage</code> API provides a way to track context across asynchronous operations. It allows you to pass a value through your program, even across multiple layers of asynchronous code, without having to pass a context value between operations.</p><p>Consider an example where we want to add debug logging that works through multiple layers of an application, where each log contains the ID of the current request. Without AsyncLocalStorage, it would be necessary to explicitly pass the request ID down through every function call that might invoke the logging function:</p><!--kg-card-begin: markdown--><pre><code class=\"language-JavaScript\">function logWithId(id, state) {\n  console.log(`${id} - ${state}`);\n}\n\nfunction doSomething(id) {\n  // We don't actually use id for anything in this function!\n  // It's only here because logWithId needs it.\n  logWithId(id, &quot;doing something&quot;);\n  setTimeout(() =&gt; doSomethingElse(id), 10);\n}\n\nfunction doSomethingElse(id) {\n  logWithId(id, &quot;doing something else&quot;);\n}\n\nlet idSeq = 0;\n\nexport default {\n  async fetch(req) {\n    const id = idSeq++;\n    doSomething(id);\n    logWithId(id, 'complete');\n    return new Response(&quot;ok&quot;);\n  }\n}\n</code></pre>\n<!--kg-card-end: markdown--><p>While this approach works, it can be cumbersome to coordinate correctly, especially as the complexity of an application grows. Using <code>AsyncLocalStorage</code> this becomes significantly easier by eliminating the need to explicitly pass the context around. Our application functions (<code>doSomething</code> and <code>doSomethingElse</code> in this case) never need to know about the request ID at all while the <code>logWithId</code> function does exactly what we need it to:</p><!--kg-card-begin: markdown--><pre><code class=\"language-JavaScript\">import { AsyncLocalStorage } from 'node:async_hooks';\n\nconst requestId = new AsyncLocalStorage();\n\nfunction logWithId(state) {\n  console.log(`${requestId.getStore()} - ${state}`);\n}\n\nfunction doSomething() {\n  logWithId(&quot;doing something&quot;);\n  setTimeout(() =&gt; doSomethingElse(), 10);\n}\n\nfunction doSomethingElse() {\n  logWithId(&quot;doing something else&quot;);\n}\n\nlet idSeq = 0;\n\nexport default {\n  async fetch(req) {\n    return requestId.run(idSeq++, () =&gt; {\n      doSomething();\n      logWithId('complete');\n      return new Response(&quot;ok&quot;);\n    });\n  }\n}\n</code></pre>\n<!--kg-card-end: markdown--><p>With the <code>nodejs_compat</code> <a href=\"https://developers.cloudflare.com/workers/platform/compatibility-dates/\">compatibility flag</a> enabled, import statements are used to access specific APIs. The Workers implementation of these APIs requires the use of the node: specifier prefix that was introduced recently in Node.js (e.g. <code>node:async_hooks</code>, <code>node:events</code>, etc)</p><p>We implement <a href=\"https://github.com/wintercg/proposal-common-minimum-api/blob/main/asynclocalstorage.md\">a subset</a> of the <code>AsyncLocalStorage</code> API in order to keep things as simple as possible. Specifically, we've chosen not to support the <code>enterWith()</code> and <code>disable()</code> APIs that are found in Node.js implementation simply because they make async context tracking more brittle and error prone.</p><p>Conceptually, at any given moment within a worker, there is a current \"Asynchronous Context Frame\", which consists of a map of storage cells, each holding a store value for a specific <code>AsyncLocalStorage</code> instance. Calling <code>asyncLocalStorage.run(...)</code> causes a new frame to be created, inheriting the storage cells of the current frame, but using the newly provided store value for the cell associated with <code>asyncLocalStorage</code>. </p><!--kg-card-begin: markdown--><pre><code class=\"language-JavaScript\">const als1 = new AsyncLocalStorage();\nconst als2 = new AsyncLocalStorage();\n\n// Code here runs in the root frame. There are two storage cells,\n// one for als1, and one for als2. The store value for each is\n// undefined.\n\nals1.run(123, () =&gt; {\n  // als1.run(...) creates a new frame (1). The store value for als1\n  // is set to 123, the store value for als2 is still undefined.\n  // This new frame is set to &quot;current&quot;.\n\n  als2.run(321, () =&gt; {\n    // als2.run(...) creates another new frame (2). The store value\n    // for als1 is still 123, the store value for als2 is set to 321.\n    // This new frame is set to &quot;current&quot;.\n    console.log(als1.getStore(), als2.getStore());\n  });\n\n  // Frame (1) is restored as the current. The store value for als1\n  // is still 123, but the store value for als2 is undefined again.\n});\n\n// The root frame is restored as the current. The store values for\n// both als1 and als2 are both undefined again.\n</code></pre>\n<!--kg-card-end: markdown--><p>Whenever an asynchronous operation is initiated in JavaScript, for example, creating a new JavaScript promise, scheduling a timer, etc, the current frame is captured and associated with that operation, allowing the store values at the moment the operation was initialized to be propagated and restored as needed.</p><!--kg-card-begin: markdown--><pre><code>const als = new AsyncLocalStorage();\nconst p1 = als.run(123, () =&gt; {\n  return promise.resolve(1).then(() =&gt; console.log(als.getStore());\n});\n\nconst p2 = promise.resolve(1); \nconst p3 = als.run(321, () =&gt; {\n  return p2.then(() =&gt; console.log(als.getStore()); // prints 321\n});\n\nals.run('ABC', () =&gt; setInterval(() =&gt; {\n  // prints &quot;ABC&quot; to the console once a second…\n  setInterval(() =&gt; console.log(als.getStore(), 1000);\n});\n\nals.run('XYZ', () =&gt; queueMicrotask(() =&gt; {\n  console.log(als.getStore());  // prints &quot;XYZ&quot;\n}));\n</code></pre>\n<!--kg-card-end: markdown--><p>Note that for unhandled promise rejections, the \"<code>unhandledrejection</code>\" event will automatically propagate the context that is associated with the promise that was rejected. This behavior is different from other types of events emitted by <code>EventTarget</code> implementations, which will propagate whichever frame is current when the event is emitted.</p><!--kg-card-begin: markdown--><pre><code class=\"language-JavaScript\">const asyncLocalStorage = new AsyncLocalStorage();\n\nasyncLocalStorage.run(123, () =&gt; Promise.reject('boom'));\nasyncLocalStorage.run(321, () =&gt; Promise.reject('boom2'));\n\naddEventListener('unhandledrejection', (event) =&gt; {\n  // prints 123 for the first unhandled rejection ('boom'), and\n  // 321 for the second unhandled rejection ('boom2')\n  console.log(asyncLocalStorage.getStore());\n});\n</code></pre>\n<!--kg-card-end: markdown--><p>Workers can use the <code>AsyncLocalStorage.snapshot()</code> method to create their own objects that capture and propagate the context:</p><!--kg-card-begin: markdown--><pre><code class=\"language-JavaScript\">const asyncLocalStorage = new AsyncLocalStorage();\n\nclass MyResource {\n  #runInAsyncFrame = AsyncLocalStorage.snapshot();\n\n  doSomething(...args) {\n    return this.#runInAsyncFrame((...args) =&gt; {\n      console.log(asyncLocalStorage.getStore());\n    }, ...args);\n  }\n}\n\nconst resource1 = asyncLocalStorage.run(123, () =&gt; new MyResource());\nconst resource2 = asyncLocalStorage.run(321, () =&gt; new MyResource());\n\nresource1.doSomething();  // prints 123\nresource2.doSomething();  // prints 321\n</code></pre>\n<!--kg-card-end: markdown--><p>For more, refer to the <a href=\"https://nodejs.org/dist/latest-v18.x/docs/api/async_context.html#class-asynclocalstorage\">Node.js documentation</a> about the <code>AsyncLocalStorage</code> API.</p><p>There is currently an effort underway to add a new <a href=\"https://github.com/tc39/proposal-async-context\">AsyncContext</a> mechanism (inspired by <code>AsyncLocalStorage</code>) to the JavaScript language itself. While it is still early days for the TC-39 proposal, there is good reason to expect it to progress through the committee. Once it does, we look forward to being able to make it available in the Cloudflare Workers platform. We expect our implementation of <code>AsyncLocalStorage</code> to be compatible with this new API.</p><p>The proposal for AsyncContext provides an excellent set of examples and <a href=\"https://github.com/tc39/proposal-async-context#motivation\">description of the motivation</a> of why async context tracking is useful.</p><h3 id=\"events-with-eventemitter\">Events with EventEmitter</h3><p>The EventEmitter API is one of the most fundamental Node.js APIs and is critical to supporting many other higher level APIs, including streams, crypto, net, and more. An EventEmitter is an object that emits named events that cause listeners to be called.</p><!--kg-card-begin: markdown--><pre><code class=\"language-JavaScript\">import { EventEmitter } from 'node:events';\n\nconst emitter = new EventEmitter();\nemitter.on('hello', (...args) =&gt; {\n  console.log(...args);\n});\n\nemitter.emit('hello', 1, 2, 3);\n</code></pre>\n<!--kg-card-end: markdown--><p>The <a href=\"https://github.com/cloudflare/workerd/blob/main/src/node/internal/events.ts\">implementation</a> in the Workers runtime fully supports the entire Node.js EventEmitter API including the captureRejections option that allows improved handling of async functions as event handlers:</p><!--kg-card-begin: markdown--><pre><code class=\"language-JavaScript\">const emitter = new EventEmitter({ captureRejections: true });\nemitter.on('hello', async (...args) =&gt; {\n  throw new Error('boom');\n});\nemitter.on('error', (err) =&gt; {\n  // the async promise rejection is emitted here!\n});\n</code></pre>\n<!--kg-card-end: markdown--><p>Please refer to the Node.js documentation for more details on the use of the <code>EventEmitter</code> API: <a href=\"https://nodejs.org/dist/latest-v19.x/docs/api/events.html#events\">https://nodejs.org/dist/latest-v19.x/docs/api/events.html#events</a>.</p><h3 id=\"buffer\">Buffer</h3><p>The <code>Buffer</code> API in Node.js predates the introduction of the standard TypedArray and DataView APIs in JavaScript by many years and has persisted as one of the most commonly used Node.js APIs for manipulating binary data. Today, every Buffer instance extends from the standard Uint8Array class but adds a range of unique capabilities such as built-in base64 and hex encoding/decoding, byte-order manipulation, and encoding-aware substring searching.</p><!--kg-card-begin: markdown--><pre><code class=\"language-JavaScript\">import { Buffer } from 'node:buffer';\n\nconst buf = Buffer.from('hello world', 'utf8');\n\nconsole.log(buf.toString('hex'));\n// Prints: 68656c6c6f20776f726c64\nconsole.log(buf.toString('base64'));\n// Prints: aGVsbG8gd29ybGQ=\n</code></pre>\n<!--kg-card-end: markdown--><p>Because a Buffer extends from Uint8Array, it can be used in any workers API that currently accepts Uint8Array, such as creating a new Response:</p><!--kg-card-begin: markdown--><pre><code class=\"language-JavaScript\">const response = new Response(Buffer.from(&quot;hello world&quot;));\n</code></pre>\n<!--kg-card-end: markdown--><p>Or interacting with streams:</p><!--kg-card-begin: markdown--><pre><code class=\"language-JavaScript\">const writable = getWritableStreamSomehow();\nconst writer = writable.getWriter();\nwriter.write(Buffer.from(&quot;hello world&quot;));\n</code></pre>\n<!--kg-card-end: markdown--><p>Please refer to the Node.js documentation for more details on the use of the Buffer API: <a href=\"https://nodejs.org/dist/latest-v19.x/docs/api/buffer.html\">https://nodejs.org/dist/latest-v19.x/docs/api/buffer.html</a>.</p><h3 id=\"assertions\">Assertions</h3><p>The assert module in Node.js provides a number of useful assertions that are useful when building tests.</p><!--kg-card-begin: markdown--><pre><code class=\"language-JavaScript\">import {\n  strictEqual,\n  deepStrictEqual,\n  ok,\n  doesNotReject,\n} from 'node:assert';\n\nstrictEqual(1, 1); // ok!\nstrictEqual(1, &quot;1&quot;); // fails! throws AssertionError\n\ndeepStrictEqual({ a: { b: 1 }}, { a: { b: 1 }});// ok!\ndeepStrictEqual({ a: { b: 1 }}, { a: { b: 2 }});// fails! throws AssertionError\n\nok(true); // ok!\nok(false); // fails! throws AssertionError\n\nawait doesNotReject(async () =&gt; {}); // ok!\nawait doesNotReject(async () =&gt; { throw new Error('boom') }); // fails! throws AssertionError\n</code></pre>\n<!--kg-card-end: markdown--><p>In the Workers implementation of assert, all assertions run in what Node.js calls the \"<a href=\"https://nodejs.org/dist/latest-v19.x/docs/api/assert.html#strict-assertion-mode\">strict assertion mode</a>\", which means that non-strict methods behave like their corresponding strict methods. For instance, <code>deepEqual()</code> will behave like <code>deepStrictEqual()</code>.</p><p>Please refer to the Node.js documentation for more details on the use of the assertion API: <a href=\"https://nodejs.org/dist/latest-v19.x/docs/api/assert.html\">https://nodejs.org/dist/latest-v19.x/docs/api/assert.html</a>.</p><h3 id=\"promisify-callbackify\">Promisify/Callbackify</h3><p>The <code>promisify</code> and callbackify APIs in Node.js provide a means of bridging between a Promise-based programming model and a callback-based model.</p><p>The <code>promisify</code> method allows taking a Node.js-style callback function and converting it into a Promise-returning async function:</p><!--kg-card-begin: markdown--><pre><code class=\"language-JavaScript\">import { promisify } from 'node:util';\n\nfunction foo(args, callback) {\n  try {\n    callback(null, 1);\n  } catch (err) {\n    // Errors are emitted to the callback via the first argument.\n    callback(err);\n  }\n}\n\nconst promisifiedFoo = promisify(foo);\nawait promisifiedFoo(args);\n</code></pre>\n<!--kg-card-end: markdown--><p>Similarly, callbackify converts a Promise-returning async function into a Node.js-style callback function:</p><!--kg-card-begin: markdown--><pre><code class=\"language-JavaScript\">import { callbackify } from 'node:util';\n\nasync function foo(args) {\n  throw new Error('boom');\n}\n\nconst callbackifiedFoo = callbackify(foo);\n\ncallbackifiedFoo(args, (err, value) =&gt; {\n  if (err) throw err;\n});\n</code></pre>\n<!--kg-card-end: markdown--><p>Together these utilities make it easy to properly handle all of the generally tricky nuances involved with properly bridging between callbacks and promises.</p><p>Please refer to the Node.js documentation for more information on how to use these APIs: <a href=\"https://nodejs.org/dist/latest-v19.x/docs/api/util.html#utilcallbackifyoriginal\">https://nodejs.org/dist/latest-v19.x/docs/api/util.html#utilcallbackifyoriginal</a>, <a href=\"https://nodejs.org/dist/latest-v19.x/docs/api/util.html#utilpromisifyoriginal\">https://nodejs.org/dist/latest-v19.x/docs/api/util.html#utilpromisifyoriginal</a>.</p><h3 id=\"type-brand-checking-with-util-types\">Type brand-checking with util.types</h3><p>The util.types API provides a reliable and generally more efficient way of checking that values are instances of various built-in types.</p><!--kg-card-begin: markdown--><pre><code class=\"language-JavaScript\">import { types } from 'node:util';\n\ntypes.isAnyArrayBuffer(new ArrayBuffer());  // Returns true\ntypes.isAnyArrayBuffer(new SharedArrayBuffer());  // Returns true\ntypes.isArrayBufferView(new Int8Array());  // true\ntypes.isArrayBufferView(Buffer.from('hello world')); // true\ntypes.isArrayBufferView(new DataView(new ArrayBuffer(16)));  // true\ntypes.isArrayBufferView(new ArrayBuffer());  // false\nfunction foo() {\n  types.isArgumentsObject(arguments);  // Returns true\n}\ntypes.isAsyncFunction(function foo() {});  // Returns false\ntypes.isAsyncFunction(async function foo() {});  // Returns true\n// .. and so on\n</code></pre>\n<!--kg-card-end: markdown--><p>Please refer to the Node.js documentation for more information on how to use the type check APIs: <a href=\"https://nodejs.org/dist/latest-v19.x/docs/api/util.html#utiltypes\">https://nodejs.org/dist/latest-v19.x/docs/api/util.html#utiltypes</a>. The workers implementation currently does not provide implementations of the <code>util.types.isExternal()</code>, <code>util.types.isProxy()</code>, <code>util.types.isKeyObject()</code>, or <code>util.type.isWebAssemblyCompiledModule()</code> APIs.</p><h3 id=\"what-s-next\">What's next</h3><p>Keep your eyes open for more Node.js core APIs coming to Cloudflare Workers soon! We currently have implementations of the string decoder, streams and crypto APIs in active development. These will be introduced into the workers runtime incrementally over time and any worker using the <code>nodejs_compat</code> compatibility flag will automatically pick up the new modules as they are added.</p>",
		"comment_id": "641a029c772e7f000a2a65c8",
		"feature_image": "http://blog.cloudflare.com/content/images/2023/03/image1-42.png",
		"featured": false,
		"visibility": "public",
		"created_at": "2023-03-21T19:16:44.000+00:00",
		"updated_at": "2024-02-14T19:45:10.000+00:00",
		"published_at": "2023-03-23T13:05:00.000+00:00",
		"custom_excerpt": "Over the coming months, Cloudflare Workers will start to roll out built-in compatibility with Node.js core APIs as part of an effort to support increased compatibility across JavaScript runtimes",
		"codeinjection_head": null,
		"codeinjection_foot": null,
		"custom_template": null,
		"canonical_url": null,
		"authors": [
			{
				"id": "618c3373015c6002aaf447a3",
				"name": "James M Snell",
				"slug": "jasnell",
				"profile_image": "http://blog.cloudflare.com/content/images/2021/11/mecoffee.jpg",
				"cover_image": "http://blog.cloudflare.com/content/images/2021/11/IMG_5946.jpg",
				"bio": null,
				"website": null,
				"location": "California",
				"facebook": null,
				"twitter": "@jasnell",
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/jasnell/"
			}
		],
		"tags": [
			{
				"id": "641adff2772e7f000a2a678f",
				"name": "#BLOG-1761",
				"slug": "hash-blog-1761",
				"description": null,
				"feature_image": null,
				"visibility": "internal",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/404/"
			},
			{
				"id": "6081bf116a6b1c01ba3a1304",
				"name": "Node.js",
				"slug": "node-js",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/node-js/"
			},
			{
				"id": "5d16450341acde0011a95253",
				"name": "Cloudflare Workers",
				"slug": "workers",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/workers/"
			},
			{
				"id": "5d16450341acde0011a95165",
				"name": "JavaScript",
				"slug": "javascript",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/javascript/"
			},
			{
				"id": "5d16450341acde0011a95204",
				"name": "Developers",
				"slug": "developers",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Developers-1.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Developers",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Developers'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developers/"
			},
			{
				"id": "64a3e2b834124c000b00b717",
				"name": "Developer Platform",
				"slug": "developer-platform",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developer-platform/"
			}
		],
		"primary_author": {
			"id": "618c3373015c6002aaf447a3",
			"name": "James M Snell",
			"slug": "jasnell",
			"profile_image": "http://blog.cloudflare.com/content/images/2021/11/mecoffee.jpg",
			"cover_image": "http://blog.cloudflare.com/content/images/2021/11/IMG_5946.jpg",
			"bio": null,
			"website": null,
			"location": "California",
			"facebook": null,
			"twitter": "@jasnell",
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/jasnell/"
		},
		"primary_tag": null,
		"url": "http://blog.cloudflare.com/workers-node-js-asynclocalstorage/",
		"excerpt": "Over the coming months, Cloudflare Workers will start to roll out built-in compatibility with Node.js core APIs as part of an effort to support increased compatibility across JavaScript runtimes",
		"reading_time": 8,
		"access": true,
		"comments": false,
		"og_image": "http://blog.cloudflare.com/content/images/2023/03/Node.js-compatibility-for-Cloudflare-Workers---starting-with-Async-Context-Tracking--EventEmitter--Buffer--assert--and-util-OG-1.png",
		"og_title": null,
		"og_description": null,
		"twitter_image": "http://blog.cloudflare.com/content/images/2023/03/Node.js-compatibility-for-Cloudflare-Workers---starting-with-Async-Context-Tracking--EventEmitter--Buffer--assert--and-util-OG.png",
		"twitter_title": null,
		"twitter_description": null,
		"meta_title": null,
		"meta_description": "Over the coming months, Cloudflare Workers will start to roll out built-in compatibility with Node.js core APIs as part of an effort to support increased compatibility across JavaScript runtimes.",
		"email_subject": null,
		"frontmatter": null,
		"feature_image_alt": null,
		"feature_image_caption": null
	}
}