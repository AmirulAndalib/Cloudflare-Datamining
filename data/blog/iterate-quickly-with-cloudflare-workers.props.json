{
	"post": {
		"id": "5d16453b41acde0011a95702",
		"uuid": "a6de569c-1271-449f-942e-f642cab27822",
		"title": "Test New Features and Iterate Quickly with Cloudflare Workers",
		"slug": "iterate-quickly-with-cloudflare-workers",
		"html": "<!--kg-card-begin: markdown--><p><img src=\"https://images.unsplash.com/photo-1526253038957-bce54e05968e?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjExNzczfQ&amp;s=9d7b88a36bbd544c26a37f356595fc67\" alt=\"\" loading=\"lazy\"><br>\n<small>Photo by <a href=\"https://unsplash.com/@nesabymakers?utm_source=ghost&amp;utm_medium=referral&amp;utm_campaign=api-credit\">NESA by Makers</a> / <a href=\"https://unsplash.com/?utm_source=ghost&amp;utm_medium=referral&amp;utm_campaign=api-credit\">Unsplash</a></small></p>\n<p>At Cloudflare, we believe that getting new products and features into the hands of customers as soon as possible is the best way to get great feedback. The thing about releasing products early and often is that sometimes they might not be initially ready for your entire user base. You might want to provide access to only particular sets of customers that may be: power users, those who have expressed interest participating in a beta, or customers in need of a new feature the most.</p>\n<p>As I have been meeting with many of the users who were in our own Workers beta program, I’ve seen (somewhat unsurprisingly) that many of our users share the same belief that they should be getting feedback from their own users early and often.</p>\n<p>However, I was surprised to learn about the difficulty that many beta program members had in creating the necessary controls to quickly and securely gate new or deprecated features when testing and releasing updates.</p>\n<p>Below are some ideas and recipes I’ve seen implemented inside of <a href=\"https://www.cloudflare.com/products/cloudflare-workers/\">Cloudflare Workers</a> to ensure the appropriate customers have access to the correct features.</p>\n<h3 id=\"howworkerswork\">How Workers Work</h3>\n<p>First, a brief primer on how Workers work.</p>\n<p>As soon as a Worker is deployed, it is available and ready to run at every one of Cloudflare’s 155+ data centers in response to a request made to your website, application or <a href=\"https://www.cloudflare.com/learning/security/api/what-is-an-api/\">API</a>. Workers are able to modify anything about both the request to and response from your origin server. They also have the ability to make subrequests to other endpoints in response to the initial request.</p>\n<p>Workers are able to make their own subrequests using the available fetch method. We’ll be relying on this as well as the fact that requests made via fetch are also cacheable by Cloudflare to make sure that gating of features is not just secure but also quick.</p>\n<h3 id=\"howtosecurelycacheuserpermissions\">How to Securely Cache User Permissions</h3>\n<p>Let’s say you have an endpoint on your origin that allows us to securely pull the permissions for a particular user.</p>\n<p><code>https://api.yoursite.com/user/{uid}</code></p>\n<p>From a Cloudflare Worker we can securely fetch this permission information using a token and have it returned either as JSON or as part of the headers.<br></p>\n<pre><code class=\"language-javascript\">// Create Request\n var permissionRequest = new Request(permissionsURL, {\n      method: 'GET', \n      headers: new Headers({\n        'X-Auth-Token': 'super-secret-token'\n      })\n    });\n// Make the request and wait for the response\nvar permissionResponse = await fetch(permissionRequest, { cf: { cacheTtl: 14400 } });\n\n// Getting Permissions returned in the Headers\nvar newFeatureAvailable = permissionResponse.headers.get('X-YourSite-NewFeature');\n\n// Getting Permissions returned as JSON\nvar jsonPermissions = await permissionResponse.json();\n</code></pre>\n<br>\n<p>As I wrote earlier, the fetch request actually caches the responses generated when using it. So, subsequent Workers calls can grab user permissions without having to go back to the origin’s endpoint.</p>\n<p>While the default cache TTL of 4 hours might work for many applications, fetch will also allow you to set an arbitrary TTL to ensure that your users are not granted permissions any longer than necessary. To set a TTL of 300 seconds (note: the free plan has a lower TTL limit of 2 hours or 7200 seconds) you would change the fetch above to be:<br>\n<br></p>\n<pre><code class=\"language-javascript\">var permissionResponse = await fetch(permissionRequest, { cf: { cacheTtl: 300 } });\n</code></pre>\n<br>\n<h4 id=\"anoteaboutcachingsensitiveobjects\">A Note about Caching Sensitive Objects</h4>\n<p>If you are storing sensitive information (like user permissions) in Cloudflare’s cache, it is always important to keep in mind that the url should never be publicly accessible, but rather only from within a Worker.</p>\n<p>The Worker set to run in front of <code>api.yoursite.com/user/{uid}</code> should either block all requests to the path from outside of a Cloudflare Worker or check to ensure the request has a valid secret key.</p>\n<h4 id=\"anoteaboutusingsupersecrettokens\">A Note about Using “Super-Secret-Tokens”</h4>\n<p>Tokens should be provided in your Worker when uploaded to Cloudflare and verified by your origin on each request. Extremely security conscious readers might be nervous about storing credentials in code, but note that Cloudflare strongly encourages 2FA as well as restricts Worker access to specific accounts. We are also exploring better ways of passing secrets to Workers.</p>\n<h3 id=\"commonwaysofgatingnewfeatures\">Common Ways of Gating New Features</h3>\n<p>Now that you have quickly fetched the user permissions from cache, it’s time to do something with them! There are endless things you could do, but for this post I will cover some of the more common ones including: restricting paths, A/B Testing, and custom routing between origins.</p>\n<h4 id=\"restrictingpaths\">Restricting Paths</h4>\n<p>Let’s say you’re releasing v2 of your current API. You want all users to still be able to send GET and POST requests to v1, but since you’re still performance tuning some new v2 features, only authorized users should be able to POST while everyone can GET. Continuing from the example before, this can be done with Cloudflare using the following code:<br>\n<br></p>\n<pre><code class=\"language-javascript\">const apiV2 = jsonPermissions['apiV2'];\n\n// Check to see if user in allowed to test the v2 API\nif (apiV2) {\n    // They're allowed to test v2 so pass everything through. \n    return fetch(request);\n} else {\n    // If they aren't specifically allowed to test v2 then we\n    // only allow GETs everything else returns a 403 from the edge.\n    if (request.method !== 'GET') {\n        return new Response('Sorry, this page is not available.',\n            { status: 403, statusText: 'Forbidden' });\n    }\n    return fetch(request);\n}\n</code></pre>\n<br>\n<h3 id=\"abtesting\">A/B Testing</h3>\n<br>\n<p><img src=\"http://blog.cloudflare.com/content/images/2018/06/workers-ab-test.png\" alt=\"workers-ab-test\" loading=\"lazy\"><br>\nWhen releasing a new API version you might also want to update your documentation with a new design, but before rolling out anything it’s important to run a test to make sure it improves (or doesn’t harm) your relevant metrics. A/B testing different versions of the documentation amongst users who have access to V2 of the API can be easily done with Cloudflare Workers:<br>\n<br></p>\n<pre><code class=\"language-javascript\">const apiV2 = jsonPermissions['apiV2'];\nconst group = jsonPermissions['testingGroup'];\n\n// Here we'll use a variable set in the JSON returned from\n// the  user API to determine the users test group, but you \n// could also do this randomly by assigning a cookie to send back.\n// Example: https://developers.cloudflare.com/workers/recipes/a-b-testing/\n\n// Make sure the user is allowed to see API V2\nif (apiV2) {\n    let url = new URL(request.url);\n    \n    // Append the user's test group to the forwared request\n    // Hidden from user: /docs/v2/ -&gt; /group-1/docs/v2/\n    url.pathname = `/${group}${url.pathname}`;\n    \n    const modifiedRequest = new Request(url, {\n        method: request.method,\n        headers: request.headers\n    });\n    const response = await fetch(modifiedRequest);\n\n    return response;\n} else {\n    // User shouldn't be allowed to see V2 docs\n    return new Response('Sorry, this page is not yet available.',\n        { status: 403, statusText: 'Forbidden' });\n}\n</code></pre>\n<br>\n<h4 id=\"customroutingbetweenorigins\">Custom Routing Between Origins</h4>\n<p>Spinning up a new version of an API or Application sometimes requires spinning up an entirely new origin server. Cloudflare Workers can easily route API calls to separate origins based on paths, headers, or anything else in the request. Here we’ll make sure the user has permission to access v2 of the API and then route the request to the dedicated origin:<br>\n<br></p>\n<pre><code class=\"language-javascript\">const apiV2Allowed = jsonPermissions['apiV2Allowed'];\n\nconst v1origin = 'https://prod-v1-api.yoursite.com';\nconst v2origin = 'https://beta-v2-api.yoursite.com';\n\n// Original URL: https://api.yoursite.com/v2/endpoint\nconst originalURL = new URL(request.url);\nconst originalPath = originalURL.pathname;\nconst apiVersion = originalPath.split('/')[1];\nconst endpoint = originalPath.split('/').splice(2).join('/');\n\n\nif (apiVersion === 'v2') {\n    if (apiV2Allowed) {\n        let newUrl = new URL(v2origin);\n        newUrl.pathname = endpoint;\n        const modifiedRequest = new Request(newUrl, {\n            method: request.method,\n            headers: request.headers\n        });\n        return fetch(modifiedRequest);\n    } else {\n        return new Response('Sorry, this API version is not available.',\n            { status: 403, statusText: 'Forbidden' });\n    }\n} else {\n    let newUrl = new URL(v1origin);\n    newUrl.pathname = endpoint;\n    const modifiedRequest = new Request(newUrl, {\n        method: request.method,\n        headers: request.headers\n    });\n    return fetch(modifiedRequest);\n}\n</code></pre>\n<br>\n<p>Think I should have included another way of gating features? Make sure to share it on our <a href=\"https://community.cloudflare.com/tags/recipe-exchange\">Cloudflare Community recipe exchange</a>.</p>\n<!--kg-card-end: markdown-->",
		"comment_id": "5b293c7c7cbc6900bf7f42f2",
		"feature_image": "http://blog.cloudflare.com/content/images/2018/06/photo-1526253038957-bce54e05968e.jpg",
		"featured": false,
		"visibility": "public",
		"created_at": "2018-06-19T18:25:16.000+01:00",
		"updated_at": "2024-02-12T20:55:02.000+00:00",
		"published_at": "2018-06-19T20:11:14.000+01:00",
		"custom_excerpt": "At Cloudflare, we believe that getting new products and features into the hands of customers as soon as possible is the best way to get great feedback. The thing about releasing products early and often is that sometimes they might not be initially ready for your entire user base.",
		"codeinjection_head": null,
		"codeinjection_foot": null,
		"custom_template": null,
		"canonical_url": null,
		"authors": [
			{
				"id": "5d1644b141acde0011a94fd8",
				"name": "Remy Guercio",
				"slug": "remy",
				"profile_image": "http://blog.cloudflare.com/content/images/2018/06/0.jpg",
				"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-110.png",
				"bio": null,
				"website": null,
				"location": null,
				"facebook": null,
				"twitter": null,
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/remy/"
			}
		],
		"tags": [
			{
				"id": "5d16450341acde0011a95253",
				"name": "Cloudflare Workers",
				"slug": "workers",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/workers/"
			},
			{
				"id": "5d16450341acde0011a95165",
				"name": "JavaScript",
				"slug": "javascript",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/javascript/"
			},
			{
				"id": "5d16450341acde0011a95252",
				"name": "Serverless",
				"slug": "serverless",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Serverless.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Serverless",
				"meta_description": "Cloudflare blog posts tagged 'serverless'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/serverless/"
			},
			{
				"id": "5d16450341acde0011a95204",
				"name": "Developers",
				"slug": "developers",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Developers-1.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Developers",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Developers'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developers/"
			},
			{
				"id": "64a3e2b834124c000b00b717",
				"name": "Developer Platform",
				"slug": "developer-platform",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developer-platform/"
			}
		],
		"primary_author": {
			"id": "5d1644b141acde0011a94fd8",
			"name": "Remy Guercio",
			"slug": "remy",
			"profile_image": "http://blog.cloudflare.com/content/images/2018/06/0.jpg",
			"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-110.png",
			"bio": null,
			"website": null,
			"location": null,
			"facebook": null,
			"twitter": null,
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/remy/"
		},
		"primary_tag": {
			"id": "5d16450341acde0011a95253",
			"name": "Cloudflare Workers",
			"slug": "workers",
			"description": null,
			"feature_image": null,
			"visibility": "public",
			"meta_title": null,
			"meta_description": null,
			"og_image": null,
			"og_title": null,
			"og_description": null,
			"twitter_image": null,
			"twitter_title": null,
			"twitter_description": null,
			"codeinjection_head": null,
			"codeinjection_foot": null,
			"canonical_url": null,
			"accent_color": null,
			"url": "http://blog.cloudflare.com/tag/workers/"
		},
		"url": "http://blog.cloudflare.com/iterate-quickly-with-cloudflare-workers/",
		"excerpt": "At Cloudflare, we believe that getting new products and features into the hands of customers as soon as possible is the best way to get great feedback. The thing about releasing products early and often is that sometimes they might not be initially ready for your entire user base.",
		"reading_time": 5,
		"access": true,
		"comments": false,
		"og_image": null,
		"og_title": null,
		"og_description": null,
		"twitter_image": null,
		"twitter_title": null,
		"twitter_description": null,
		"meta_title": null,
		"meta_description": null,
		"email_subject": null,
		"frontmatter": null,
		"feature_image_alt": null,
		"feature_image_caption": null
	},
	"locale": "en-us"
}