{
	"locale": "en-us",
	"post": {
		"access": true,
		"authors": [
			{
				"id": "5d1644b141acde0011a95020",
				"name": "Kristian Freeman",
				"slug": "kristian",
				"profile_image": "http://blog.cloudflare.com/content/images/2019/05/2fGb07-c_400x400.jpg",
				"cover_image": "http://blog.cloudflare.com/content/images/2019/05/general@2x-13.png",
				"bio": "Manager, Developer Advocacy team at Cloudflare. We help developers build amazing apps on Cloudflare, with tools like Workers, Pages, and more!",
				"website": "https://www.signalnerve.com",
				"location": "Austin, TX",
				"facebook": null,
				"twitter": "@kristianf_",
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/kristian/"
			}
		],
		"canonical_url": null,
		"codeinjection_foot": null,
		"codeinjection_head": null,
		"comment_id": "5ef1d4400685b903ef8612c7",
		"comments": false,
		"created_at": "2020-06-23T11:06:56.000+01:00",
		"custom_excerpt": "In this blog post, I want to explain the details of the full-stack take home exercise that we sent out to our 2020 internship applicants.",
		"custom_template": null,
		"email_subject": null,
		"excerpt": "In this blog post, I want to explain the details of the full-stack take home exercise that we sent out to our 2020 internship applicants.",
		"feature_image": "http://blog.cloudflare.com/content/images/2020/06/OG.png",
		"feature_image_alt": null,
		"feature_image_caption": null,
		"featured": false,
		"frontmatter": null,
		"html": "<p>This summer, Cloudflare announced that we were <a href=\"http://blog.cloudflare.com/cloudflare-doubling-size-of-2020-summer-intern-class/\">doubling the size of our Summer 2020 intern class</a>. Like everyone else at Cloudflare, our interns would be working remotely, and due to COVID-19, many companies had significantly reduced their intern class size, or outright cancelled their programs entirely.</p><p>With our announcement came a <em>huge</em> influx of  students interested in coming to Cloudflare. For applicants seeking engineering internships, we opted to create an exercise based on our serverless product <a href=\"https://workers.cloudflare.com/\">Cloudflare Workers</a>. I'm not a huge fan of timed coding exercises, which is a pretty traditional way that companies gauge candidate skill, so when I was asked to help contribute an example project that would be used instead, I was excited to jump on the project. In addition, it was a rare chance to have literally thousands of eager pairs of eyes on Workers, and on <a href=\"https://developers.cloudflare.com/workers/\">our documentation</a>, a project that I've been working on daily since I started at Cloudflare over a year ago.</p><p>In this blog post, I will explain the details of the full-stack take home exercise that we sent out to our 2020 internship applicants. We asked participants to spend no more than an afternoon working on it, and because it was a take home project, developers were able to look at documentation, copy-paste code, and generally solve it however they would like. I'll show <em>how</em> to solve the project, as well as some common mistakes and some of the implementations that came from reviewing submissions. If you're interested in checking out the exercise, or want to attempt it yourself, <a href=\"https://github.com/cloudflare-internship-2020/internship-application-fullstack\">the code is open-source on GitHub</a>. Note that applications for our internship program this year are closed, but it's still a fun exercise, and if you're interested in Cloudflare Workers, you should give it a shot!</p><h3 id=\"what-the-project-was-a-b-test-application\">What the project was: A/B Test Application</h3><p>Workers as a serverless platform excels at many different use-cases. For example, using the Workers runtime APIs, developers can directly generate responses and return them to the client: this is usually called an <em>originless</em> application. You can also make requests to an existing origin and enhance or alter the request or response in some way, this is known as an <em>edge</em> application. </p><p>In this exercise, we opted to have our applicants build an A/B test application, where the Workers code should make a request to an API, and return the response of one of two URLs. Because the application doesn’t make request to an origin, but serves a response (potentially with some modifications) from an API, it can be thought of as an originless application – everything is served from Workers.</p><!--kg-card-begin: markdown--><pre><code>Client &lt;-----&gt; Workers application &lt;-------&gt; API\n                                   |-------&gt; Route A\n                                   |-------&gt; Route B\n</code></pre>\n<!--kg-card-end: markdown--><p>A/B testing is just one of many potential things you can do with Workers. By picking something seemingly “simple”, we can hone in on how each applicant used the Workers APIs – making requests, parsing and modifying responses – as well as deploying their app using our command-line tool <a href=\"https://github.com/cloudflare/wrangler\">wrangler</a>. In addition, because Workers can do all these things directly on the edge, it meant that we could provide a <em>self-contained</em> exercise. It felt unfair to ask applicants to spin up their own servers, or host files in some service. As I learned during this process, Cloudflare Workers projects can be a great way to gauge experience in take home projects, without the usual deployment headaches!</p><p>To provide a foundation for the project, I created my own Workers application with three routes - first, an API route that returns an array with two URLs, and two HTML pages, each slightly different from the other (referred to as \"variants\").</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2020/06/image1-8.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2020/06/image2-7.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>With the API in place, the exercise could be completed with the following steps:</p><ol><li>Make a fetch request to the API URL (provided in the instructions)</li><li>Parse the response from the API and transform it into JSON</li><li>Randomly pick one of the two URLs from the array <code>variants</code> inside of the JSON response</li><li>Make a request to that URL, and return the response back from the Workers application to the client</li></ol><p>The exercise was designed specifically to be a little past beginner JavaScript. If you know JavaScript and have worked on web applications, a lot of this stuff, such as making fetch requests, getting JSON responses, and randomly picking values in an array, should be things you're familiar with, or have at least seen before. Again, remember that this exercise was a take-home test: applicants could look up code, read <a href=\"https://developers.cloudflare.com/workers/\">the Workers documentation</a>, and find the solution to the problem in whatever way they could. However, because there was an external API, and the variant URLs weren't explicitly mentioned in the prompt for the exercise, you still would need to correctly implement the fetch request and API response parsing in order to give a correct solution to the project.</p><p>Here's one solution:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">addEventListener('fetch', (event) =&gt; {\n  event.respondWith(handleRequest(event.request))\n})\n\n\n// URL returning a JSON response with variant URLs, in the format\n//   { variants: [url1, url2] }\nconst apiUrl = `https://cfw-takehome.developers.workers.dev/api/variants`\n\n\nconst random = array =&gt; array[Math.floor(Math.random() * array.length)]\n\n\nasync function handleRequest(request) {\n  const apiResp = await fetch(apiUrl)\n  const { variants } = await apiResp.json()\n  const url = random(variants)\n  return fetch(url)\n}</code></pre>\n<!--kg-card-end: markdown--><p>When an applicant completed the exercise, they needed to use wrangler to deploy their project to a registered <a href=\"http://blog.cloudflare.com/announcing-workers-dev/\">Workers.dev subdomain</a>. This falls under the free tier of Workers, so it was a great way to get people exploring <a href=\"https://github.com/cloudflare/wrangler\">wrangler</a>, our documentation, and the deploy process. We saw a number of GitHub issues filed on our docs and in the wrangler repo from people attempting to install wrangler and deploy their code, so it was great feedback on a number of things across the Workers ecosystem!</p><h3 id=\"extra-credit-using-the-workers-apis\">Extra credit: using the Workers APIs</h3><p>In addition to the main portion of the exercise, I added a few extra credit sections to the project. These were explicitly not required to submit the project (though the existence <em>of</em> the extra credit had an impact on submissions: see the next section of the blog post), but if you were able to quickly finish the initial part of the exercise, you could dive deeper into some more advanced topics (and advanced Workers runtime APIs) to build a more interesting submission.</p><h3 id=\"changing-contents-on-the-page\">Changing contents on the page</h3><p>With the variant responses being returned to the client, the first extra credit portion asked developers to replace the content on the page using Workers APIs. This could be done in two ways: simple text replacement, or using the <a href=\"https://developers.cloudflare.com/workers/reference/apis/html-rewriter/\">HTMLRewriter API</a> built into the Workers runtime.</p><p>JavaScript has a string <code>.replace</code> function like most programming languages, and for simple substitutions, you could use it inside of the Worker to replace pieces of text inside of the response body:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">// Rewrite using simple text replacement - this example modifies the CTA button\nasync function handleRequestWithTextReplacement(request) {\n  const apiResponse = await fetch(apiUrl)\n  const { variants } = await apiResponse.json()\n  const url = random(variants)\n  const response = await fetch(url)\n\n\n  // Get the response as a text string\n  const text = await response.text()\n\n\n  // Replace the Cloudflare URL string and CTA text\n  const replacedCtaText = text\n    .replace('https://cloudflare.com', 'https://workers.cloudflare.com')\n    .replace('Return to cloudflare.com', 'Return to Cloudflare Workers')\n  return new Response(replacedCtaText, response)\n}</code></pre>\n<!--kg-card-end: markdown--><p>If you’ve used string replacement at scale, on larger applications, you know that it can be fragile. The strings have to match <em>exactly</em>, and on a more technical level, reading <code>response.text()</code> into a variable means that Workers has to hold the entire response in memory. This problem is common when writing Workers applications, so in this exercise, we wanted to push people towards trying our runtime solution to this problem: the HTMLRewriter API.</p><p>The HTMLRewriter API provides a streaming selector-based interface for modifying a response as it passes through a Workers application. In addition, the API also allows developers to compose handlers to modify parts of the response using JavaScript classes or functions, so it can be a good way to test how people write JavaScript and their understanding of APIs. In the below example, we set up a new instance of the HTMLRewriter, and rewrite the <code>title</code> tag, as well as three pieces of content on the site: <code>h1#title</code>, <code>p#description</code>, and <code>a#url</code>:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">// Rewrite text/URLs on screen with HTML Rewriter\nasync function handleRequestWithRewrite(request) {\n  const apiResponse = await fetch(apiUrl)\n  const { variants } = await apiResponse.json()\n  const url = random(variants)\n  const response = await fetch(url)\n\n\n  // A collection of handlers for rewriting text and attributes\n  // using the HTMLRewriter\n  //\n  // https://developers.cloudflare.com/workers/reference/apis/html-rewriter/#handlers\n  const titleRewriter = {\n    element: (element) =&gt; {\n      element.setInnerContent('My Cool Application')\n    },\n  }\n  const headerRewriter = {\n    element: (element) =&gt; {\n      element.setInnerContent('My Cool Application')\n    },\n  }\n  const descriptionRewriter = {\n    element: (element) =&gt; {\n      element.setInnerContent(\n        'This is the replaced description of my cool project, using HTMLRewriter',\n      )\n    },\n  }\n  const urlRewriter = {\n    element: (element) =&gt; {\n      element.setAttribute('href', 'https://workers.cloudflare.com')\n      element.setInnerContent('Return to Cloudflare Workers')\n    },\n  }\n\n  // Create a new HTMLRewriter and attach handlers for title, h1#title,\n  // p#description, and a#url.\n  const rewriter = new HTMLRewriter()\n    .on('title', titleRewriter)\n    .on('h1#title', headerRewriter)\n    .on('p#description', descriptionRewriter)\n    .on('a#url', urlRewriter)\n\n\n  // Pass the variant response through the HTMLRewriter while sending it\n  // back to the client.\n  return rewriter.transform(response)\n}</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"persisting-variants\">Persisting variants</h3><p>A traditional A/B test application isn't as simple as randomly sending users to different URLs: for it to work correctly, it should also <em>persist</em> a chosen URL per-user. This means that when User A is sent to variant A, they should continue to see Variant A in subsequent visits. In this portion of the extra credit, applicants were encouraged to use Workers' close integration with the <code>Request</code> and <code>Response</code> classes to persist a cookie for the user, which can be parsed in subsequent requests to indicate a specific variant to be returned.</p><p>This exercise is dear to my heart, because surprisingly, I had no idea how to implement cookies before this year! I hadn't worked with request/response behavior as closely as I do with the Workers API in my past programming experience, so it seemed like a good challenge to encourage developers to check out our documentation, and wrap their head around how a crucial part of the web works! Below is an example implementation for persisting a variant using cookies:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">// Persist sessions with a cookie\nasync function handleRequestWithPersistence(request) {\n  let url, resp\n  const cookieHeader = request.headers.get('Cookie')\n\n  // If a Variant field is already set on the cookie...\n  if (cookieHeader &amp;&amp; cookieHeader.includes('Variant')) {\n    // Parse the URL from it using regexp\n    url = cookieHeader.match(/Variant=(.*)/)[1]\n    // and return it to the client\n    return fetch(url)\n  } else {\n    const apiResponse = await fetch(apiUrl)\n    const { variants } = await apiResponse.json()\n    url = random(variants)\n    response = await fetch(url)\n\n    // If the cookie isn't set, create a new Response\n    // passing in all the information from the original response,\n    // along with a Set-cookie header, setting the value `Variant`\n    // to the randomly selected variant URL.\n    return new Response(response.body, {\n      ...resp,\n      headers: {\n        'Set-cookie': `Variant=${url}`,\n      },\n    })\n  }\n}</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"deploying-to-a-domain\">Deploying to a domain</h3><p>Workers makes a great platform for these take home-style projects because the existence of <a href=\"https://workers.dev/\">workers.dev</a> and the ability to claim your workers.dev subdomain means you can deploy your Workers application without needing to own any domains. That being said, wrangler and Workers do have the ability to deploy to a domain, so for another piece of extra credit, applicants were encouraged to deploy their project to a domain that they owned! We were careful here to tell people <em>not</em> to buy a domain for this project: that's a potential financial burden that we don't want to put on anyone (especially interns), but for many web developers, they may already have test domains or even subdomains they could deploy their project to.</p><p>This extra credit section is particularly useful because it also gives developers a chance to dig into other Cloudflare features outside of Workers. Because deploying your Workers application to a domain requires that it be set up as a zone in the Cloudflare Dashboard, it's a great opportunity for interns to familiarize themselves with our onboarding process as they go through the exercise.</p><p>You can see an example Workers application deploy to a domain, as indicated by the <code>wrangler.toml</code> configuration file used to deploy the project:</p><!--kg-card-begin: markdown--><pre><code>name = &quot;my-fullstack-example&quot;\ntype = &quot;webpack&quot;\naccount_id = &quot;0a1f7e807cfb0a78bec5123ff1d3&quot;\nzone_id = &quot;9f7e1af6b59f99f2fa4478a159a4&quot;</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"where-people-went-wrong\">Where people went wrong</h3><p>By far the place where applicants struggled the most was in writing <em>clean code</em>. While we didn't evaluate submissions against a style guide, most people would have benefitted strongly from running their code through a \"code prettifier\": this could have been as simple as opening the file in VS Code or something similar, and using the \"Format Document\" option. Consistent indentation and similar \"readability\" problems made some submissions, even though they were technically correct, very hard to read!</p><p>In addition, there were many applicants who dove directly into the extra credit, without making sure that the base implementation was working correctly. Opening the API URL in-browser, copying one of the two variant URLs, and hard-coding it into the application isn't a valid solution to the exercise, but with that implementation in place, going and implementing the HTMLRewriter/content-rewriting aspect of the exercise makes it a pretty clear case of rushing! As I reviewed submissions, I found that this happened <em>a ton</em>, and it was a bummer to mark people down for incorrect implementations when it was clear that they were eager enough to approach some of the more complex aspects of the exercise.</p><p>On the topic of incorrect implementations, the most common mistake was misunderstanding or incorrectly implementing the solution to the exercise. A common version of this was hard-coding URLs as I mentioned above, but I also saw people copying the entire JSON array, misunderstanding how to randomly pick between two values in the array, or not preparing for a circumstance in which a <em>third</em> value could be added to that array. In addition, the second most common mistake around implementation was excessive bandwidth usage: instead of looking at the JSON response and picking a URL <em>before</em> fetching it, many people opted to get <em>both</em> URLs, and then return one of the two responses to the user. In a small serverless application, this isn't a huge deal, but in a larger application, excessive bandwidth usage or being wasteful with request time can be a huge problem!</p><h3 id=\"finding-the-solution-and-next-steps\">Finding the solution and next steps</h3><p>If you're interested in checking out more about the fullstack example exercise we gave to our intern applicants this year, check out the source on GitHub: <a href=\"https://github.com/cloudflare-internship-2020/internship-application-fullstack\">https://github.com/cloudflare-internship-2020/internship-application-fullstack</a>.</p><p>If you tried the exercise and want to build more stuff with Cloudflare Workers, check out our docs! We have tons of tutorials and templates available to help you get up and running: <a href=\"https://workers.cloudflare.com/docs\">https://workers.cloudflare.com/docs</a>.</p>",
		"id": "5ef1d4400685b903ef8612c7",
		"meta_description": "In this blog post, I want to explain the details of the full-stack take home exercise that we sent out to our 2020 internship applicants.",
		"meta_title": null,
		"og_description": null,
		"og_image": "https://blog-cloudflare-com-assets.storage.googleapis.com/2020/06/facebook-Linked_Image___OG.png",
		"og_title": null,
		"primary_author": {
			"id": "5d1644b141acde0011a95020",
			"name": "Kristian Freeman",
			"slug": "kristian",
			"profile_image": "http://blog.cloudflare.com/content/images/2019/05/2fGb07-c_400x400.jpg",
			"cover_image": "http://blog.cloudflare.com/content/images/2019/05/general@2x-13.png",
			"bio": "Manager, Developer Advocacy team at Cloudflare. We help developers build amazing apps on Cloudflare, with tools like Workers, Pages, and more!",
			"website": "https://www.signalnerve.com",
			"location": "Austin, TX",
			"facebook": null,
			"twitter": "@kristianf_",
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/kristian/"
		},
		"primary_tag": {
			"id": "5d16450341acde0011a95253",
			"name": "Cloudflare Workers",
			"slug": "workers",
			"description": null,
			"feature_image": null,
			"visibility": "public",
			"meta_title": null,
			"meta_description": null,
			"og_image": null,
			"og_title": null,
			"og_description": null,
			"twitter_image": null,
			"twitter_title": null,
			"twitter_description": null,
			"codeinjection_head": null,
			"codeinjection_foot": null,
			"canonical_url": null,
			"accent_color": null,
			"url": "http://blog.cloudflare.com/tag/workers/"
		},
		"published_at": "2020-06-23T12:00:00.000+01:00",
		"reading_time": 10,
		"slug": "lessons-from-the-2020-intern-assignment",
		"tags": [
			{
				"id": "5d16450341acde0011a95253",
				"name": "Cloudflare Workers",
				"slug": "workers",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/workers/"
			},
			{
				"id": "5d16450341acde0011a9520c",
				"name": "Careers",
				"slug": "careers",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/careers/"
			},
			{
				"id": "5e85af03c3ae9c01bc5711e7",
				"name": "Internship Experience",
				"slug": "internship-experience",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2022/08/image1-2-1.png",
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/internship-experience/"
			}
		],
		"title": "Lessons from a 2020 intern assignment",
		"twitter_description": null,
		"twitter_image": "https://blog-cloudflare-com-assets.storage.googleapis.com/2020/06/twitter-In-Stream_Wide___OG.png",
		"twitter_title": null,
		"updated_at": "2020-06-23T12:00:00.000+01:00",
		"url": "http://blog.cloudflare.com/lessons-from-the-2020-intern-assignment/",
		"uuid": "5992f549-3acb-4832-ad33-3f9fb9b0b883",
		"visibility": "public"
	}
}