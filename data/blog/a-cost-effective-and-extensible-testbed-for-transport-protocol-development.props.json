{
	"locale": "en-us",
	"post": {
		"id": "5e18a145135aa90272a7247d",
		"uuid": "ef85ab6b-739e-463c-a2ca-2462f52ac382",
		"title": "A cost-effective and extensible testbed for transport protocol development",
		"slug": "a-cost-effective-and-extensible-testbed-for-transport-protocol-development",
		"html": "<!--kg-card-begin: markdown--><p><small> <em>This was originally published on <a href=\"https://calendar.perfplanet.com/2019/how-to-develop-a-practical-transport-protocol/\">Perf Planet's 2019 Web Performance Calendar</a>.</em></small></p>\n<!--kg-card-end: markdown--><p>At Cloudflare, we develop protocols at multiple layers of the network stack. In the past, we focused on HTTP/1.1, HTTP/2, and TLS 1.3. Now, we are working on <a href=\"http://blog.cloudflare.com/http3-the-past-present-and-future/\">QUIC and HTTP/3</a>, which are still in IETF draft, but gaining a lot of interest.<br><br>QUIC is a secure and multiplexed transport protocol that aims to perform better than TCP under some network conditions. It is specified in a family of documents: a transport layer which specifies packet format and basic state machine, recovery and congestion control, security based on TLS 1.3, and an HTTP application layer mapping, which is now called <a href=\"https://www.cloudflare.com/learning/performance/what-is-http3/\">HTTP/3</a>.<br><br>Let’s focus on the transport and recovery layer first. This layer provides a basis for what is sent on the wire (the packet binary format) and how we send it reliably. It includes how to open the connection, how to handshake a new secure session with the help of TLS, how to send data reliably and how to react when there is packet loss or reordering of packets. Also it includes flow control and congestion control to interact well with other transport protocols in the same network. With confidence in the basic transport and recovery layer,  we can take a look at higher application layers such as HTTP/3.</p><p>To develop such a transport protocol, we need multiple stages of the development environment. Since this is a network protocol, it’s best to test in an actual physical network to see how works on the wire. We may start the development using localhost, but after some time we may want to send and receive packets with other hosts. We can build a lab with a couple of virtual machines, using Virtualbox, VMWare or even with Docker. We also have a local testing environment with a Linux VM. But sometimes these have a limited network (localhost only) or are noisy due to other processes in the same host or virtual machines.</p><p>Next step is to have a test lab, typically an isolated network focused on protocol analysis only consisting of dedicated x86 hosts. Lab configuration is particularly important for testing various cases - there is no one-size-fits-all scenario for protocol testing. For example, EDGE is still running in production mobile networks but LTE is dominant and 5G deployment is in early stages. WiFi is very common these days. We want to test our protocol in all those environments. Of course, we can't buy every type of machine or have a very expensive network simulator for every type of environment, so using cheap hardware and an open source OS where we can configure similar environments is ideal.</p><h2 id=\"the-quic-protocol-testing-lab\">The QUIC Protocol Testing lab</h2><p>The goal of the QUIC testing lab is to aid transport layer protocol development. To develop a transport protocol we need to have a way to control our network environment and a way to get as many different types of debugging data as possible. Also we need to get metrics for comparison with other protocols in production.</p><p>The QUIC Testing Lab has the following goals:</p><ul><li><em><strong>Help with multiple transport protocol development</strong></em>: Developing a new transport layer requires many iterations, from building and validating packets as per protocol spec, to making sure everything works fine under moderate load, to very harsh conditions such as low bandwidth and high packet loss. We need a way to run tests with various network conditions reproducibly in order to catch unexpected issues.</li><li><em><strong>Debugging multiple transport protocol development</strong></em>: Recording as much debugging info as we can is important for fixing bugs. Looking into packet captures definitely helps but we also need a detailed debugging log of the server and client to understand the what and why for each packet. For example, when a packet is sent, we want to know why. Is this because there is an application which wants to send some data? Or is this a retransmit of data previously known as lost? Or is this a loss probe which is not an actual packet loss but sent to see if the network is lossy?</li><li><em><strong>Performance comparison between each protocol</strong></em>: We want to understand the performance of a new protocol by comparison with existing protocols such as TCP, or with a previous version of the protocol under development. Also we want to test with varying parameters such as changing the congestion control mechanism, changing various timeouts, or changing the buffer sizes at various levels of the stack.</li><li><em><strong>Finding a bottleneck or errors easily</strong></em>: Running tests we may see an unexpected error - a transfer that timed out, or ended with an error, or a transfer was corrupted at the client side - each test needs to make sure every test is run correctly, by using a checksum of the original file to compare with what is actually downloaded, or by checking various error codes at the protocol of API level.</li></ul><p>When we have a test lab with separate hardware, we have benefits, as follows:<br></p><ul><li>Can configure the testing lab without public Internet access - safe and quiet.</li><li>Handy access to hardware and its console for maintenance purpose, or for adding or updating hardware.</li><li>Try other CPU architectures. For clients we use the Raspberry Pi for regular testing because this is ARM architecture (32bit or 64bit), similar to modern smartphones. So testing with ARM architecture helps for compatibility testing before going into a smartphone OS.</li><li>We can add a real smartphone for testing, such as Android or iPhone. We can test with WiFi but these devices also support Ethernet, so we can test them with a wired network for better consistency.</li></ul><h2 id=\"lab-configuration\">Lab Configuration</h2><p>Here is a diagram of our QUIC Protocol Testing Lab:</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2020/01/Screenshot-2019-07-01-00.35.06.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>This is a conceptual diagram and we need to configure a switch for connecting each machine. Currently, we have Raspberry Pis (2 and 3) as an Origin and a Client. And small Intel x86 boxes for the Traffic Shaper and Edge server plus Ethernet switches for interconnectivity.</p><ul><li>Origin is simply serving HTTP and HTTPS test objects using a web server. Client may download a file from Origin directly to simulate a download direct from a customer's origin server.</li><li>Client will download a test object from Origin or Edge, using a different protocol. In typical a configuration Client connects to Edge instead of Origin, so this is to simulate an edge server in the real world. For TCP/HTTP we are using the curl command line client and for QUIC, <a href=\"https://github.com/cloudflare/quiche\">quiche’s</a> http3_client with some modification.</li><li>Edge is running Cloudflare's web server to serve HTTP/HTTPS via TCP and also the QUIC protocol using quiche. Edge server is installed with the same Linux kernel used on Cloudflare's production machines in order to have the same low level network stack.</li><li>Traffic Shaper is sitting between Client and Edge (and Origin), controlling network conditions. Currently we are using FreeBSD and ipfw + dummynet. Traffic shaping can also be done using Linux' netem which provides additional network simulation features. </li></ul><p>The goal is to run tests with various network conditions, such as bandwidth, latency and packet loss upstream and downstream. The lab is able to run a plaintext HTTP test but currently our focus of testing is HTTPS over TCP and HTTP/3 over QUIC. Since QUIC is running over UDP, both TCP and UDP traffic need to be controlled.</p><h2 id=\"test-automation-and-visualization\">Test Automation and Visualization</h2><p>In the lab, we have a script installed in Client, which can run a batch of testing with various configuration parameters - for each test combination, we can define a test configuration, including:</p><ul><li>Network Condition - Bandwidth, Latency, Packet Loss (upstream and downstream)</li></ul><p>For example using netem traffic shaper we can simulate LTE network as below,(RTT=50ms, BW=22Mbps upstream and downstream, with BDP queue size)</p><!--kg-card-begin: markdown--><pre><code class=\"language-sh\">$ tc qdisc add dev eth0 root handle 1:0 netem delay 25ms\n$ tc qdisc add dev eth0 parent 1:1 handle 10: tbf rate 22mbit buffer 68750 limit 70000\n</code></pre>\n<!--kg-card-end: markdown--><ul><li>Test Object sizes - 1KB, 8KB, … 32MB</li><li>Test Protocols: HTTPS (TCP) and QUIC (UDP)</li><li>Number of runs and number of requests in a single connection</li></ul><p>The test script outputs a CSV file of results for importing into other tools for data processing and visualization - such as Google Sheets, Excel or even a jupyter notebook. Also it’s able to post the result to a database (Clickhouse in our case), so we can query and visualize the results.</p><p>Sometimes a whole test combination takes a long time - the current standard test set with simulated 2G, 3G, LTE, WiFi and various object sizes repeated 10 times for each request may take several hours to run. Large object testing on a slow network takes most of the time, so sometimes we also need to run a limited test (e.g. testing LTE-like conditions only for a smoke test) for quick debugging.</p><h3 id=\"chart-using-google-sheets-\">Chart using Google Sheets:</h3><p>The following comparison chart shows the total transfer time in msec for TCP vs QUIC for different network conditions. The QUIC protocol used here is a development version one.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2020/01/Screen-Shot-2020-01-13-at-3.09.41-PM.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><h2 id=\"debugging-and-performance-analysis-using-of-a-smartphone\">Debugging and performance analysis using of a smartphone</h2><p>Mobile devices have become a crucial part of our day to day life, so testing the new transport protocol on mobile devices is critically important for mobile app performance. To facilitate that, we need to have a mobile test app which will proxy data over the new transport protocol under development. With this we have the ability to analyze protocol functionality and performance in mobile devices with different network conditions.</p><p>Adding a smartphone to the testbed mentioned above gives an advantage in terms of understanding real performance issues. The major smartphone operating systems, iOS and Android, have quite different networking stack. Adding a smartphone to testbed gives the ability to understand these operating system network stacks in depth which aides new protocol designs.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2020/01/Screen-Shot-2020-01-13-at-3.52.03-PM.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>The above figure shows the network block diagram of another similar lab testbed used for protocol testing where a smartphone is connected both wired and wirelessly. A Linux netem based traffic shaper sits in-between the client and server shaping the traffic. Various networking profiles are fed to the traffic shaper to mimic real world scenarios. The client can be either an Android or iOS based smartphone, the server is a vanilla web server serving static files. Client, server and traffic shaper are all connected to the Internet along with the private lab network for management purposes.</p><p>The above lab has mobile devices for both Android or iOS  installed with a test app built with a proprietary client proxy software for proxying data over the new transport protocol under development. The test app also has the ability to make HTTP requests over TCP for comparison purposes. </p><p>The Android or iOS test app can be used to issue multiple HTTPS requests of different object sizes sequentially and concurrently using TCP and QUIC as underlying transport protocol. Later, TTOTAL (total transfer time) of each HTTPS request is used to compare TCP and QUIC performance over different network conditions. One such comparison is shown below,</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2020/01/Screen-Shot-2020-01-13-at-4.08.23-PM.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>The table above shows the total transfer time taken for TCP and QUIC requests over an LTE network profile fetching different objects with different concurrency levels using the test app. Here TCP goes over native OS network stack and QUIC goes over Cloudflare QUIC stack.</p><p>Debugging network performance issues is hard when it comes to mobile devices. By adding an actual smartphone into the testbed itself we have the ability to take packet captures at different layers. These are very critical in analyzing and understanding protocol performance.</p><p>It's easy and straightforward to capture packets and analyze them using the tcpdump tool on x86 boxes, but it's a challenge to capture packets on iOS and Android devices. On iOS device ‘rvictl’ lets us capture packets on an external interface. But ‘rvictl’ has some drawbacks such as timestamps being inaccurate. Since we are dealing with millisecond level events, timestamps need to be accurate to analyze the root cause of a problem.</p><p>We can capture packets on internal loopback interfaces on jailbroken iPhones and rooted Android devices. Jailbreaking a recent iOS device is nontrivial. We also need to make sure that autoupdate of any sort is disabled on such a phone otherwise it would disable the jailbreak and you have to start the whole process again. With a jailbroken phone we have root access to the device which lets us take packet captures as needed using tcpdump.</p><p>Packet captures taken using jailbroken iOS devices or rooted Android devices connected to the lab testbed help us analyze  performance bottlenecks and improve protocol performance.</p><p>iOS and Android devices different network stacks in their core operating systems. These packet captures also help us understand the network stack of these mobile devices, for example in iOS devices packets punted through loopback interface had a mysterious delay of 5 to 7ms.</p><h2 id=\"conclusion\">Conclusion</h2><p>Cloudflare is actively involved in helping to drive forward the QUIC and HTTP/3 standards by testing and optimizing these new protocols in simulated real world environments. By simulating a wide variety of networks we are working on our mission of Helping Build a Better Internet. For everyone, everywhere.</p><p><em>Would like to thank SangJo Lee, Hiren Panchasara, Lucas Pardue and Sreeni Tellakula for their contributions.</em></p>",
		"comment_id": "5e18a145135aa90272a7247d",
		"feature_image": "http://blog.cloudflare.com/content/images/2020/01/linkedin-In-Stream_Wide___Screenshot-2019-07-01-00.35.06.png",
		"featured": false,
		"visibility": "public",
		"created_at": "2020-01-10T16:07:33.000+00:00",
		"updated_at": "2023-07-10T20:41:55.000+01:00",
		"published_at": "2020-01-14T16:07:15.000+00:00",
		"custom_excerpt": "At Cloudflare, we develop protocols at multiple layers of the network stack. In the past, we focused on HTTP/1.1, HTTP/2, and TLS 1.3. Now, we are working on QUIC and HTTP/3, which are still in IETF draft, but gaining a lot of interest.",
		"codeinjection_head": null,
		"codeinjection_foot": null,
		"custom_template": null,
		"canonical_url": null,
		"authors": [
			{
				"id": "5e18b3e0135aa90272a724f1",
				"name": "Lohith Bellad",
				"slug": "lohith",
				"profile_image": "https://blog-cloudflare-com-assets.storage.googleapis.com/2020/03/Screen-Shot-2020-03-03-at-4.42.20-PM-1.png",
				"cover_image": "https://blog-cloudflare-com-assets.storage.googleapis.com/2020/03/general@2x-9.png",
				"bio": null,
				"website": null,
				"location": null,
				"facebook": null,
				"twitter": null,
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/lohith/"
			},
			{
				"id": "5d1644b141acde0011a94fb3",
				"name": "Junho Choi",
				"slug": "junho",
				"profile_image": "https://blog-cloudflare-com-assets.storage.googleapis.com/2020/05/junho_profile_300x300--1-.jpg",
				"cover_image": "https://blog-cloudflare-com-assets.storage.googleapis.com/2020/01/general@2x-2.png",
				"bio": null,
				"website": "https://saturnsoft.net",
				"location": null,
				"facebook": null,
				"twitter": "@junhochoi",
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/junho/"
			}
		],
		"tags": [
			{
				"id": "5d8bf7e1fd9e450505d96eb6",
				"name": "HTTP3",
				"slug": "http3",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/http3/"
			},
			{
				"id": "5d16450341acde0011a9525c",
				"name": "QUIC",
				"slug": "quic",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/quic/"
			},
			{
				"id": "5d16450341acde0011a951c9",
				"name": "TLS 1.3",
				"slug": "tls-1-3",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/tls-1-3/"
			},
			{
				"id": "5d16450341acde0011a95163",
				"name": "TCP",
				"slug": "tcp",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/tcp/"
			}
		],
		"primary_author": {
			"id": "5e18b3e0135aa90272a724f1",
			"name": "Lohith Bellad",
			"slug": "lohith",
			"profile_image": "https://blog-cloudflare-com-assets.storage.googleapis.com/2020/03/Screen-Shot-2020-03-03-at-4.42.20-PM-1.png",
			"cover_image": "https://blog-cloudflare-com-assets.storage.googleapis.com/2020/03/general@2x-9.png",
			"bio": null,
			"website": null,
			"location": null,
			"facebook": null,
			"twitter": null,
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/lohith/"
		},
		"primary_tag": {
			"id": "5d8bf7e1fd9e450505d96eb6",
			"name": "HTTP3",
			"slug": "http3",
			"description": null,
			"feature_image": null,
			"visibility": "public",
			"meta_title": null,
			"meta_description": null,
			"og_image": null,
			"og_title": null,
			"og_description": null,
			"twitter_image": null,
			"twitter_title": null,
			"twitter_description": null,
			"codeinjection_head": null,
			"codeinjection_foot": null,
			"canonical_url": null,
			"accent_color": null,
			"url": "http://blog.cloudflare.com/tag/http3/"
		},
		"url": "http://blog.cloudflare.com/a-cost-effective-and-extensible-testbed-for-transport-protocol-development/",
		"excerpt": "At Cloudflare, we develop protocols at multiple layers of the network stack. In the past, we focused on HTTP/1.1, HTTP/2, and TLS 1.3. Now, we are working on QUIC and HTTP/3, which are still in IETF draft, but gaining a lot of interest.",
		"reading_time": 9,
		"access": true,
		"comments": false,
		"og_image": "https://blog-cloudflare-com-assets.storage.googleapis.com/2020/01/facebook-Linked_Image___Screenshot-2019-07-01-00.35.06.png",
		"og_title": null,
		"og_description": "At Cloudflare, we develop protocols at multiple layers of the network stack. In the past, we focused on HTTP/1.1, HTTP/2, and TLS 1.3. Now, we are working on QUIC and HTTP/3, which are still in IETF draft, but gaining a lot of interest. ",
		"twitter_image": "https://blog-cloudflare-com-assets.storage.googleapis.com/2020/01/twitter-In-Stream_Wide___Screenshot-2019-07-01-00.35.06.png",
		"twitter_title": null,
		"twitter_description": "At Cloudflare, we develop protocols at multiple layers of the network stack. In the past, we focused on HTTP/1.1, HTTP/2, and TLS 1.3. Now, we are working on QUIC and HTTP/3, which are still in IETF draft, but gaining a lot of interest.",
		"meta_title": null,
		"meta_description": "At Cloudflare, we are working on QUIC and HTTP/3, which are still in IETF draft, but gaining a lot of interest.",
		"email_subject": null,
		"frontmatter": null,
		"feature_image_alt": null,
		"feature_image_caption": null
	}
}