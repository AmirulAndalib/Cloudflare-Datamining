{
	"locale": "en-us",
	"post": {
		"id": "5d16453b41acde0011a9557d",
		"uuid": "f1271243-f65b-4d0a-9e48-d3bb4d9b76a5",
		"title": "A tale of a DNS exploit: CVE-2015-7547",
		"slug": "a-tale-of-a-dns-exploit-cve-2015-7547",
		"html": "<!--kg-card-begin: markdown--><p><small><em>This post was written by Marek Vavruša and Jaime Cochran, who found out they were both independently working on the same glibc vulnerability attack vectors at 3am last Tuesday.</em></small></p>\n<p>A buffer overflow error in GNU libc DNS stub resolver code was <a href=\"https://sourceware.org/ml/libc-alpha/2016-02/msg00416.html\">announced last week</a> as <a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-7547\">CVE-2015-7547</a>. While it doesn't have any nickname yet (last year's <a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-0235\">Ghost</a> was more catchy), it is potentially disastrous as it affects any platform with recent GNU libc—CPEs, load balancers, servers and personal computers alike. The big question is: how exploitable is it in the real world?</p>\n<p>It turns out that the only mitigation that works is patching. Please patch your systems <em>now</em>, then come back and read this blog post to understand why attempting to mitigate this attack by limiting DNS response sizes does not work.</p>\n<p>But first, patch!</p>\n<h3 id=\"onpathattacker\">On-Path Attacker</h3>\n<p>Let's start with the <a href=\"https://github.com/fjserna/CVE-2015-7547\">PoC from Google</a>, it uses the first attack vector described in the vulnerability announcement. First, a 2048-byte UDP response forces buffer allocation, then a failure response forces a retry, and finally the last two answers smash the stack.</p>\n<pre><code class=\"language-bash\">$ echo &quot;nameserver 127.0.0.1&quot; | sudo tee /etc/resolv.conf\n$ sudo python poc.py &amp;\n$ valgrind curl http://foo.bar.google.com\n==17897== Invalid read of size 1\n==17897==    at 0x59F9C55: __libc_res_nquery (res_query.c:264)\n==17897==    by 0x59FA20F: __libc_res_nquerydomain (res_query.c:591)\n==17897==    by 0x59FA7A8: __libc_res_nsearch (res_query.c:381)\n==17897==    by 0x57EEAAA: _nss_dns_gethostbyname4_r (dns-host.c:315)\n==17897==    by 0x4242424242424241: ???\n==17897==  Address 0x4242424242424245 is not stack'd, malloc'd or (recently) free'd\nSegmentation fault\n</code></pre>\n<p>This proof of concept requires attacker talking with glibc stub resolver code either directly or through a simple forwarder. This situation happens when your DNS traffic is intercepted or when you’re using an untrusted network.</p>\n<p>One of the suggested mitigations in the announcement was to limit UDP response size to 2048 bytes, 1024 in case of TCP. Limiting UDP is, with all due respect, completely ineffective and only forces legitimate queries to retry over TCP. Limiting TCP answers is a plain protocol violation that cripples legitimate answers:</p>\n<pre><code class=\"language-bash\">$ dig @b.gtld-servers.net +tcp +dnssec NS root-servers.net | grep &quot;MSG SIZE&quot;\n;; MSG SIZE  rcvd: 1254\n</code></pre>\n<p>Regardless, let's see if response size clipping is effective at all. When calculating size limits, we have to take IP4 headers into account (20 octets), and also the UDP header overhead (8 octets), leading to a maximum allowed datagram size of 2076 octets. DNS/TCP may arrive fragmented—for the sake of argument, let's drop DNS/TCP altogether.</p>\n<pre><code class=\"language-bash\">$ sudo iptables -I INPUT -p udp --sport 53 -m length --length 2077:65535 -j DROP\n$ sudo iptables -I INPUT -p tcp --sport 53 -j DROP\n$ valgrind curl http://foo.bar.google.com\ncurl: (6) Could not resolve host: foo.bar.google.com\n</code></pre>\n<p>Looks like we've mitigated the first attack method, albeit with collateral damage. But what about the UDP-only <a href=\"https://gist.github.com/vavrusa/86efa3ac7ee89eab14c2#file-poc-udponly-py\">proof of concept</a>?</p>\n<pre><code class=\"language-bash\">$ echo &quot;nameserver 127.0.0.10&quot; | sudo tee /etc/resolv.conf\n$ sudo python poc-udponly.py &amp;\n$ valgrind curl http://foo.bar.google.com\n==18293== Syscall param socketcall.recvfrom(buf) points to unaddressable byte(s)\n==18293==    at 0x4F1E8C3: __recvfrom_nocancel (syscall-template.S:81)\n==18293==    by 0x59FBFD0: send_dg (res_send.c:1259)\n==18293==    by 0x59FBFD0: __libc_res_nsend (res_send.c:557)\n==18293==    by 0x59F9C0B: __libc_res_nquery (res_query.c:227)\n==18293==    by 0x59FA20F: __libc_res_nquerydomain (res_query.c:591)\n==18293==    by 0x59FA7A8: __libc_res_nsearch (res_query.c:381)\n==18293==    by 0x57EEAAA: _nss_dns_gethostbyname4_r (dns-host.c:315)\n==18293==    by 0x4F08AA0: gaih_inet (getaddrinfo.c:862)\n==18293==    by 0x4F0AC4C: getaddrinfo (getaddrinfo.c:2418)\n==18293==  Address 0xfff001000 is not stack'd, malloc'd or (recently) free'd\n*** Error in `curl': double free or corruption (out): 0x00007fe7331b2e00 ***\nAborted\n</code></pre>\n<p>While it's not possible to ship a whole attack payload in 2048 UDP response size, it still leads to memory corruption. When the announcement suggested blocking DNS UDP responses larger than 2048 bytes as a viable mitigation, it confused a <a href=\"https://blog.des.no/2016/02/freebsd-and-cve-2015-7547/\">lot of people</a>, including other <a href=\"http://blog.powerdns.com/2016/02/17/powerdns-cve-2015-7547-possible-mitigation/\">DNS vendors</a> and ourselves. This, and the following proof of concept show that it's not only futile, but harmful in long term if these rules are left enabled.</p>\n<p>So far, the presented attacks required a MitM scenario, where the attacker talks to a glibc resolver directly. A &quot;good enough&quot; mitigation is to run a local caching resolver, to isolate glibc code from the attacker. In fact, doing so not only improves the Internet performance with a local cache, but also prevents past and possibly future security vulnerabilities.</p>\n<h4 id=\"isacachingstubresolverreallygoodenough\">Is a caching stub resolver really good enough?</h4>\n<p>Unfortunately, no. A local stub resolver such as <a href=\"http://www.thekelleys.org.uk/dnsmasq/doc.html\">dnsmasq</a> alone is not sufficient to defuse this attack. It's easy to traverse, as it doesn't scrub upstream answers—let's see if the attack goes through with a <a href=\"https://gist.github.com/vavrusa/86efa3ac7ee89eab14c2#file-poc-dnsmasq-py\">modified proof of concept</a> that uses only well-formed answers and zero time-to-live (TTL) for cache traversal.</p>\n<pre><code class=\"language-bash\">$ echo &quot;nameserver 127.0.0.1&quot; | sudo tee /etc/resolv.conf\n$ sudo dnsmasq -d -a 127.0.0.1 -R -S 127.0.0.10 -z &amp;\n$ sudo python poc-dnsmasq.py &amp;\n$ valgrind curl http://foo.bar.google.com\n==20866== Invalid read of size 1\n==20866==    at 0x8617C55: __libc_res_nquery (res_query.c:264)\n==20866==    by 0x861820F: __libc_res_nquerydomain (res_query.c:591)\n==20866==    by 0x86187A8: __libc_res_nsearch (res_query.c:381)\n==20866==    by 0xA0C6AAA: _nss_dns_gethostbyname4_r (dns-host.c:315)\n==20866==    by 0x1C000CC04D4D4D4C: ???\nKilled\n</code></pre>\n<p>The big question is—now that we've seen that the mitigation strategies for MitM attacks are provably ineffective, can we exploit the flaw off-path through a caching DNS resolver?</p>\n<h3 id=\"anoffpathattackscenario\">An off-path attack scenario</h3>\n<p>Let's start with the first phase of the attack—a compliant resolver is never going to give out a response larger than 512 bytes over UDP to a client that doesn't support EDNS0. Since the glibc resolver doesn't do that by default, we have to escalate to TCP and perform the whole attack there. Also, the client should have at least two nameservers, otherwise it complicates a successful attack.</p>\n<pre><code class=\"language-bash\">$ echo &quot;nameserver 127.0.0.1&quot; | sudo tee /etc/resolv.conf\n$ echo &quot;nameserver 127.0.0.1&quot; | sudo tee -a /etc/resolv.conf\n$ sudo iptables -F INPUT\n$ sudo iptables -I INPUT -p udp --sport 53 -m length --length 2077:65535 -j DROP\n</code></pre>\n<p>Let's try it with a <a href=\"https://gist.github.com/vavrusa/86efa3ac7ee89eab14c2#file-poc-tcponly-py\">proof of concept</a> that merges both the DNS proxy and the attacker.</p>\n<ol>\n<li>\n<p>The DNS proxy on localhost is going to ask the attacker both queries over    UDP, and the attacker responds with a TC flag to force client to retry over    TCP.</p>\n</li>\n<li>\n<p>The attacker responds once with a TCP response of 2049 bytes or longer, then    forces the proxy to close the TCP connection to glibc resolver code. <em>This    is a critical step with no reliable way to achieve that.</em></p>\n</li>\n<li>\n<p>The attacker sends back a full attack payload, which the proxy happily    forwards to the glibc resolver client.</p>\n</li>\n</ol>\n<pre><code class=\"language-bash\">$ sudo python poc-tcponly.py &amp;\n$ valgrind curl http://foo.bar.google.com\n==18497== Invalid read of size 1\n==18497==    at 0x59F9C55: __libc_res_nquery (res_query.c:264)\n==18497==    by 0x59FA20F: __libc_res_nquerydomain (res_query.c:591)\n==18497==    by 0x59FA7A8: __libc_res_nsearch (res_query.c:381)\n==18497==    by 0x57EEAAA: _nss_dns_gethostbyname4_r (dns-host.c:315)\n==18497==    by 0x1C000CC04D4D4D4C: ???\n==18497==  Address 0x1000000000000103 is not stack'd, malloc'd or (recently) free'd\nKilled\n</code></pre>\n<h3 id=\"performingtheattackoverarealresolver\">Performing the attack over a real resolver</h3>\n<p>The key factor to a real world non-MitM cache resolver attack is to control the messages between the resolver and the client indirectly. We came to the conclusion that djbdns’ dnscache was the best target for attempting to illustrate an actual cache traversal.</p>\n<p>In order to fend off DoS attack vectors like <a href=\"https://en.wikipedia.org/wiki/Slowloris_(computer_security)\">slowloris</a>, which makes numerous simultaneous TCP connections and holds them open to clog up a service, DNS resolvers have a finite pool of parallel TCP connections. This is usually achieved by limiting these parallel TCP connections and closing the oldest or least-recently active one. For example—djbdns (dnscache) holds up to 20 parallel TCP connections, then starts dropping them, starting from the oldest one. Knowing this, we realised that we were able to terminate TCP connections with ease. Thus, one security fix becomes another bug’s treasure.</p>\n<p>In order to exploit this, the attacker can send a truncated UDP A+AAAA query, which triggers the necessary retry over TCP. The attacker responds with a valid answer with a TTL of 0 and dnscache sends the glibc client a truncated UDP response. At this point, the glibc function <code>send_vc()</code> retries with dnscache over TCP and since the previous answer's TTL was 0, dnscache asks the attacker’s server for the A+AAAA query again. The attacker responds to the A query with an answer larger than 2000 to induce glibc's buffer mismanagement, and dnscache then forwards it to the client. Now the attacker can either wait out the AAAA query while other clients are making perfectly legitimate requests or instead make 20 TCP connections back to dnscache, until dnscache terminates the attacker's connection.</p>\n<p>Now that we’ve met all the conditions to trigger another retry, the attacker sends back any valid A response and a valid, oversized AAAA that carries the payload (either in CNAME or AAAA RDATA), dnscache tosses this back to the client, triggering the overflow.</p>\n<p>It seems like a complicated process, but it really is not. Let’s have a look at our <a href=\"https://gist.github.com/vavrusa/689b48d2d6c16759fc85\">proof-of-concept</a>:</p>\n<pre><code class=\"language-bash\">$ echo &quot;nameserver 127.0.0.1&quot; | sudo tee /etc/resolv.conf\n$ echo &quot;nameserver 127.0.0.1&quot; | sudo tee -a /etc/resolv.conf\n$ sudo python poc-dnscache.py\n[TCP] Sending back first big answer with TTL=0\n[TCP] Sending back second big answer with TTL=0\n[TCP] Preparing the attack with an answer &gt;2k\n[TCP] Connecting back to caller to force it close original connection('127.0.0.1', 53)\n[TCP] Original connection was terminated, expecting to see requery...\n[TCP] Sending back a valid answer in A\n[TCP] Sending back attack payload in AAAA\n</code></pre>\n<p>Client:</p>\n<pre><code class=\"language-bash\">$ valgrind curl https://www.cloudflare.com/\n==6025== Process terminating with default action of signal 11 (SIGSEGV)\n==6025==  General Protection Fault\n==6025==    at 0x8617C55: __libc_res_nquery (res_query.c:264)\n==6025==    by 0x861820F: __libc_res_nquerydomain (res_query.c:591)\n==6025==    by 0x86187A8: __libc_res_nsearch (res_query.c:381)\n==6025==    by 0xA0C6AAA: _nss_dns_gethostbyname4_r (dns-host.c:315)\n==6025==    by 0x1C000CC04D4D4D4C: ???\nKilled\n</code></pre>\n<p>This PoC was made to simply illustrate that it’s not only probable, but possible that a <a href=\"https://www.cloudflare.com/learning/security/what-is-remote-code-execution/\">remote code execution</a> via DNS resolver cache traversal can and may be happening. So, patch. Now.</p>\n<p>We reached out to <a href=\"https://www.opendns.com\">OpenDNS</a>, knowing they had used djbdns as part of their codebase. They investigated and verified this particular attack does not affect their resolvers.</p>\n<h4 id=\"howaccidentaldefensessavedtheday\">How accidental defenses saved the day</h4>\n<p>Dan Kaminsky wrote <a href=\"http://dankaminsky.com/2016/02/20/skeleton/\">a thoughtful blog post</a> about scoping this issue. He argues: <br/><br/></p>\n<blockquote>\n<p>I’m just going to state outright:  Nobody has gotten this glibc flaw to work<br>\nthrough caches yet.  So we just don’t know if that’s possible.  Actual<br>\nexploit chains are subject to what I call the MacGyver effect.</p>\n</blockquote>\n<p><br/><br/>Current resolvers scrub and sanitize final answers, so the attack payload must be encoded in a well-formed DNS answer to survive a pass through the resolver. In addition, only some record types are safely left intact—as the attack payload is carried in AAAA query, only AAAA records in the answer section are safe from being scrubbed, thus forcing the attacker to encode the payload in these. One way to circumvent this limitation is to use a CNAME record, where the attack payload may be encoded in a CNAME target (maximum of 255 octets).</p>\n<p>The only good mitigation is to run a DNS resolver on <em>localhost</em> where the attacker can't introduce resource exhaustion, or at least enforce minimum cache TTL to defuse the waiting game attack.</p>\n<h3 id=\"takeaway\">Takeaway</h3>\n<p>You might think it's unlikely that you could become a MitM target, but the fact is that you <em>already are</em>. If you ever used a public Wi-Fi in an airport, hotel or maybe in a café, you may have noticed being redirected to a captcha portal for authentication purposes. This is a temporary <a href=\"https://www.cloudflare.com/learning/security/global-dns-hijacking-threat/\">DNS hijacking</a> redirecting you to an internal portal until you agree with the terms and conditions. What's even worse is a permanent DNS interception that you don't notice until you look at the actual answers. This happens on a daily basis and takes only a single name lookup to trigger the flaw.</p>\n<p>Neither DNSSEC nor independent public resolvers prevent it, as the attack happens between stub and the recursor on the <em>last mile</em>. The recent flaws highlight the fragility of not only legacy glibc code, but also stubs <a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-3484\">in general</a>. DNS is deceptively complicated protocol and should be treated carefully. A generally good mitigation is to shield yourself with a local caching DNS resolver<sup><a href=\"#resolvers\">1</a></sup>, or at least a <a href=\"https://dnscrypt.org\">DNSCrypt</a> tunnel. Arguably, there might be a vulnerability in the resolver as well, but it is contained to the daemon itself—not to everything using the C library (e.g., sudo).</p>\n<h3 id=\"areyouaffected\">Are you affected?</h3>\n<p>If you're running GNU libc between 2.9 and 2.22 then yes. Below is an informative list of several major platforms affected.</p>\n<table>\n<tr>\n\t<th>Platform</th>\n\t<th>Notice</th>\n\t<th>Status</th>\n</tr>\n<tr>\n\t<td>Debian</td>\n\t<td><a href='https://security-tracker.debian.org/tracker/CVE-2015-7547'>CVE-2015-7547</a></td>\n\t<td>Patched packages available (squeeze and newer)</td>\n</tr>\n<tr>\n\t<td>Ubuntu</td>\n\t<td><a href='http://www.ubuntu.com/usn/usn-2900-1/'>USN-2900-1</a></td>\n\t<td>Patched packages available (14.04 and newer)</td>\n</tr>\n<tr>\n\t<td>RHEL</td>\n\t<td><a href='https://access.redhat.com/articles/2161461'>KB2161461</a></td>\n\t<td>Patched packages available (RHEL 6-7)</td>\n</tr>\n<tr>\n\t<td>SUSE</td>\n\t<td><a href='https://www.suse.com/support/update/announcement/2016/suse-su-20160472-1.html'>SUSE-SU-2016:0472-1</a></td>\n\t<td>Patched packages available (latest)</td>\n</tr>\n<tr>\n\t<td>Network devices &amp; CPEs</td>\n\t<td><a href='https://www.reddit.com/r/networking/comments/46jfjf/cve20157547_mega_thread/'>Updated list of affected platforms</a></td>\n\t<td></td>\n</tr>\n</table>\n<p>The toughest problem with this issue is the long tail of custom CPEs and IoT devices, which can't be really enumerated. Consult the manufacturer's website for vulnerability disclosure. Keep in mind that if your CPE is affected by remote code execution, its network cannot be treated as safe anymore.</p>\n<p>If you're running OS X, iOS, Android or any BSD flavour<sup><a href=\"#bsd-affected\">2</a></sup>, you're not affected.</p>\n<ul>\n<li>[<a name=\"resolvers\">1</a>] Take a look at <a href=\"https://www.unbound.net\">Unbound</a>, <a href=\"https://www.powerdns.com/recursor.html\">PowerDNS Recursor</a> or <a href=\"https://www.knot-resolver.cz\">Knot DNS Resolver</a> for a compliant validating resolver.</li>\n<li>[<a name=\"bsd-affected\">2</a>] Applications running under Linux emulation and using glibc may be affected, make sure to update ports.</li>\n</ul>\n<!--kg-card-end: markdown-->",
		"comment_id": "4770",
		"feature_image": null,
		"featured": false,
		"visibility": "public",
		"created_at": "2016-02-29T00:27:30.000+00:00",
		"updated_at": "2023-07-10T21:21:18.000+01:00",
		"published_at": "2016-02-29T13:42:19.000+00:00",
		"custom_excerpt": "A buffer overflow error in GNU libc DNS stub resolver code was announced last week as CVE-2015-7547. While it doesn't have any nickname yet (last year's Ghost was more catchy), it is potentially disastrous.",
		"codeinjection_head": null,
		"codeinjection_foot": null,
		"custom_template": null,
		"canonical_url": null,
		"tags": [
			{
				"id": "5d16450341acde0011a951aa",
				"name": "Vulnerabilities",
				"slug": "vulnerabilities",
				"description": "Vulnerabilities (EN)",
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/vulnerabilities/"
			},
			{
				"id": "5d16450341acde0011a95188",
				"name": "OpenDNS",
				"slug": "opendns",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/opendns/"
			},
			{
				"id": "5d16450341acde0011a951d6",
				"name": "DNS",
				"slug": "dns",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/dns/"
			},
			{
				"id": "5d16450341acde0011a951ce",
				"name": "Reliability",
				"slug": "reliability",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/reliability/"
			},
			{
				"id": "5d16450341acde0011a95214",
				"name": "Programming",
				"slug": "programming",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/programming/"
			}
		],
		"authors": [
			{
				"id": "5d1644b141acde0011a94f68",
				"name": "Marek Vavruša",
				"slug": "marek",
				"profile_image": "http://blog.cloudflare.com/content/images/2022/08/Marek-Vavrus-a-1.png",
				"cover_image": null,
				"bio": null,
				"website": null,
				"location": null,
				"facebook": null,
				"twitter": null,
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/marek/"
			},
			{
				"id": "5d1644b141acde0011a94f69",
				"name": "Jaime Cochran",
				"slug": "jaimecochran",
				"profile_image": "http://blog.cloudflare.com/content/images/2018/02/ucarecdn.jpg",
				"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-29.png",
				"bio": null,
				"website": "http://ethi.cx/",
				"location": "San Francisco",
				"facebook": null,
				"twitter": "@ackflags",
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/jaimecochran/"
			}
		],
		"primary_author": {
			"id": "5d1644b141acde0011a94f68",
			"name": "Marek Vavruša",
			"slug": "marek",
			"profile_image": "http://blog.cloudflare.com/content/images/2022/08/Marek-Vavrus-a-1.png",
			"cover_image": null,
			"bio": null,
			"website": null,
			"location": null,
			"facebook": null,
			"twitter": null,
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/marek/"
		},
		"primary_tag": {
			"id": "5d16450341acde0011a951aa",
			"name": "Vulnerabilities",
			"slug": "vulnerabilities",
			"description": "Vulnerabilities (EN)",
			"feature_image": null,
			"visibility": "public",
			"meta_title": null,
			"meta_description": null,
			"og_image": null,
			"og_title": null,
			"og_description": null,
			"twitter_image": null,
			"twitter_title": null,
			"twitter_description": null,
			"codeinjection_head": null,
			"codeinjection_foot": null,
			"canonical_url": null,
			"accent_color": null,
			"url": "http://blog.cloudflare.com/tag/vulnerabilities/"
		},
		"url": "http://blog.cloudflare.com/a-tale-of-a-dns-exploit-cve-2015-7547/",
		"excerpt": "A buffer overflow error in GNU libc DNS stub resolver code was announced last week as CVE-2015-7547. While it doesn't have any nickname yet (last year's Ghost was more catchy), it is potentially disastrous.",
		"reading_time": 9,
		"access": true,
		"comments": false,
		"og_image": null,
		"og_title": null,
		"og_description": null,
		"twitter_image": null,
		"twitter_title": null,
		"twitter_description": null,
		"meta_title": null,
		"meta_description": null,
		"email_subject": null,
		"frontmatter": null,
		"feature_image_alt": null,
		"feature_image_caption": null
	}
}