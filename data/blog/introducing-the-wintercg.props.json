{
	"post": {
		"id": "6278dee15b2938000ab484db",
		"uuid": "13792f35-a0aa-4b39-b656-c9470129f840",
		"title": "A Community Group for Web-interoperable JavaScript runtimes",
		"slug": "introducing-the-wintercg",
		"html": "<!--kg-card-begin: markdown--><p><em><small>This post is also available in <a href=\"http://blog.cloudflare.com/es-es/introducing-the-wintercg-es-es/\">Español</a>, <a href=\"http://blog.cloudflare.com/de-de/introducing-the-wintercg-de-de/\">Deutsch</a>, <a href=\"http://blog.cloudflare.com/fr-fr/introducing-the-wintercg-fr-fr/\">Français</a>, <a href=\"http://blog.cloudflare.com/zh-cn/introducing-the-wintercg-zh-cn/\">简体中文</a>, <a href=\"http://blog.cloudflare.com/ja-jp/introducing-the-wintercg-ja-jp/\">日本語</a>.</small></em></p>\n<!--kg-card-end: markdown--><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2022/05/image1-10.png\" class=\"kg-image\" alt=\"A Community Group for Web-interoperable JavaScript runtimes\" loading=\"lazy\"></figure><p>Today, Cloudflare – in partnership with Vercel, Shopify, and individual core contributors to both <a href=\"https://nodejs.org\">Node.js</a> and <a href=\"https://deno.land\">Deno</a> – is announcing the establishment of a new <a href=\"https://www.w3.org/community/wintercg/\">Community Group</a> focused on the interoperable implementation of standardized <a href=\"https://www.cloudflare.com/learning/security/api/what-is-an-api/\">web APIs</a> in non-web browser, JavaScript-based development environments.</p><p>The <a href=\"https://w3.org\">W3C</a> and the <a href=\"https://whatwg.org/\">Web Hypertext Application Technology Working Group</a> (or WHATWG) have long pioneered the efforts to develop standardized APIs and features for the web as a development environment. APIs such as <a href=\"https://fetch.spec.whatwg.org/\">fetch()</a>, <a href=\"https://streams.spec.whatwg.org/\">ReadableStream and WritableStream</a>, <a href=\"https://url.spec.whatwg.org/\">URL</a>, <a href=\"https://wicg.github.io/urlpattern\">URLPattern</a>, <a href=\"https://encoding.spec.whatwg.org/\">TextEncoder</a>, and more have become ubiquitous and valuable components of modern web development. However, the charters of these existing groups have always been <a href=\"https://whatwg.org/faq#what-is-the-whatwg-working-on\">explicitly limited to</a> considering only the specific needs of web browsers, resulting in the development of standards that are not readily optimized for any environment that does not look exactly like a web browser. A good example of this effect is that some non-browser implementations of the <a href=\"https://streams.spec.whatwg.org/\">Streams standard</a> are an order of magnitude <a href=\"https://github.com/nodejs/undici/issues/1203\"><em>slower</em></a> than the equivalent Node.js streams and Deno reader implementations due largely to how the API is specified in the standard.</p><p>Serverless environments such as <a href=\"https://workers.cloudflare.com/\">Cloudflare Workers</a>, or runtimes like Node.js and Deno, have a broad wide range of requirements, issues, and concerns that are simply not relevant to web browsers, and vice versa. This disconnect and the lack of clear consideration of these differences while the various specifications have been developed, has led to a situation where the non-browser runtimes have implemented their own bespoke, ad-hoc solutions for functionality that is actually common across the environments.</p><p>This new effort is changing that by providing a venue to discuss and advocate for the common requirements of <em>all</em> web environments, deployed anywhere throughout the stack.</p><h2 id=\"what-s-in-it-for-developers\">What's in it for developers?</h2><p>Developers want their code to be portable. Once they write it, if they choose to move to a different environment (from Node.js to Deno, for instance) they don't want to have to completely <em>rewrite</em> it just to make it keep doing the exact same thing it already was.</p><p>One of the more common questions we get from Cloudflare users is how they can make use of some arbitrary module published to <a href=\"https://npmjs.org\">npm</a> that makes use of some set of Node.js-specific or Deno-specific APIs. The answer usually involves pulling in some arbitrary combination of polyfill implementations. The situation is similar with the Deno project, which has opted to integrate a polyfill of the full Node.js core API directly into their standard library. The more these environments implement the same common standards, the more the developer ecosystem can depend on the code they write just working, regardless of where it is being run.</p><p>Cloudflare Workers, Node.js, Deno, and web browsers are all very different from each other, but they share a good number of common functions. For instance, they all provide APIs for generating cryptographic hashes; they all deal in some way with streaming data; they all provide the ability to send an HTTP request somewhere. Where this overlap exists, and where the requirements and functionality are the same, the environments should all implement the same standardized mechanisms.</p><h2 id=\"the-web-interoperable-runtimes-community-group\">The Web-interoperable Runtimes Community Group</h2><p>The new <a href=\"https://github.com/wintercg\">Web-interoperable Runtimes Community Group</a> (or \"WinterCG\") operates under the established processes of the <a href=\"https://www.w3.org/community/about/\">W3C</a>.</p><p>The naming of this group is something that took us a while to settle on because it is critical to understanding the goals the group is trying to achieve (and what it is <em>not</em>). The key element is the phrase \"web-interoperable\".</p><p>We use \"web\" in exactly the same sense that the W3C and WHATWG communities use the term – precisely: <em>web browsers</em>. The term \"web-interoperable\", then, means implementing features in a manner that is <em>either identical or at least as consistent as possible</em> with the way those features are implemented in web browsers. For instance, the way that the new URL() constructor works in browsers is exactly how the new URL() constructor should work in Node.js, in Deno, and in Cloudflare Workers.</p><p>It is important, however, to acknowledge the fact that Node.js, Deno, and Cloudflare Workers are explicitly <strong>not</strong> web browsers. While this point should be obvious, it is important to call out because the differences between the various JavaScript environments can greatly impact the design decisions of standardized APIs. Node.js and Deno, for instance, each provide full access to the local file system. Cloudflare Workers, in contrast, has no local file system; and web browsers necessarily restrict applications from manipulating the local file system. Likewise, while web browsers inherently include a concept of a website's \"origin\" and implement mechanisms such as <a href=\"https://fetch.spec.whatwg.org/#http-cors-protocol\">CORS</a> to protect users against a variety of security threats, there is no equivalent concept of \"origins\" on the server-side where Node.js, Deno, and Cloudflare Workers operate.</p><p>Up to now, the W3C and WHATWG have concerned themselves strictly with the needs of web browsers. The new Web-interoperable Runtimes Community Group is explicitly addressing and advocating for the needs of everyone else.</p><p>It is not intended that WinterCG will go off and publish its own set of independent standard APIs. Ideas for new specifications that emerge from WinterCG will first be submitted for consideration by existing work streams in the W3C and WHATWG with the goal of gaining the broadest possible consensus. However, should it become clear that web browsers have no particular need for, or interest in, a feature that the other environments (such as Cloudflare Workers) have need for, WinterCG will be empowered to move forward with a specification of its own – with the constraint that nothing will be introduced that intentionally conflicts with or is incompatible with the established web standards.</p><p>WinterCG will be open for anyone to participate; it will operate under the established W3C processes and policies; all work will be openly accessible via the <a href=\"https://github.com/wintercg\">\"wintercg\" GitHub organization</a>; and everything it does will be centered on the goal of maximizing interoperability.</p><h2 id=\"work-in-progress\">Work in Progress</h2><p>WinterCG has already started work on a number of important work items.</p><h3 id=\"the-minimum-common-web-api\">The Minimum Common Web API</h3><p>From the introduction in the current <a href=\"https://github.com/wintercg/proposal-common-minimum-api\">draft of the specification</a>:</p><blockquote>\"The Minimum Common Web Platform API is a curated subset of standardized web platform APIs intended to define a minimum set of capabilities common to Browser and Non-Browser JavaScript-based runtime environments.\"</blockquote><p>Or put another way: It is a minimal set of <em>existing</em> web APIs that will be implemented consistently and correctly in Node.js, Deno, and Cloudflare Workers. Most of the APIs, with some exceptions and nuances, already exist in these environments, so the bulk of the work remaining is to ensure that those implementations are conformant to their relative specifications and portable across environments.</p><p>The table below lists all the APIs currently included in this subset (along with an indication of whether the API is currently or likely soon to be supported by Node.js, Deno, and Cloudflare Workers):</p><!--kg-card-begin: markdown--><table>\n<thead>\n<tr>\n<th></th>\n<th>Node.js</th>\n<th>Deno</th>\n<th>Cloudflare Workers</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://dom.spec.whatwg.org/#abortcontroller\">AbortController</a></td>\n<td>✔️</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td><a href=\"https://dom.spec.whatwg.org/#abortsignal\">AbortSignal</a></td>\n<td>✔️</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td><a href=\"https://streams.spec.whatwg.org/#bytelengthqueuingstrategy\">ByteLengthQueueingStrategy</a></td>\n<td>✔️</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td><a href=\"https://wicg.github.io/compression/#compression-stream\">CompressionStream</a></td>\n<td>✔️</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td><a href=\"https://streams.spec.whatwg.org/#countqueuingstrategy\">CountQueueingStrategy</a></td>\n<td>✔️</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td><a href=\"https://w3c.github.io/webcrypto/#dfn-Crypto\">Crypto</a></td>\n<td>✔️</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td><a href=\"https://w3c.github.io/webcrypto/#dfn-CryptoKey\">CryptoKey</a></td>\n<td>✔️</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td><a href=\"https://wicg.github.io/compression/#decompression-stream\">DecompressionStream</a></td>\n<td>✔️</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td><a href=\"https://webidl.spec.whatwg.org/#idl-DOMException\">DOMException</a></td>\n<td>✔️</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td><a href=\"https://dom.spec.whatwg.org/#event\">Event</a></td>\n<td>✔️</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td><a href=\"https://dom.spec.whatwg.org/#eventtarget\">EventTarget</a></td>\n<td>✔️</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td><a href=\"https://streams.spec.whatwg.org/#readablebytestreamcontroller\">ReadableByteStreamController</a></td>\n<td>✔️</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td><a href=\"https://streams.spec.whatwg.org/#readablestream\">ReadableStream</a></td>\n<td>✔️</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td><a href=\"https://streams.spec.whatwg.org/#readablestreambyobreader\">ReadableStreamBYOBReader</a></td>\n<td>✔️</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td><a href=\"https://streams.spec.whatwg.org/#readablestreambyobrequest\">ReadableStreamBYOBRequest</a></td>\n<td>✔️</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td><a href=\"https://streams.spec.whatwg.org/#readablestreamdefaultcontroller\">ReadableStreamDefaultController</a></td>\n<td>✔️</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td><a href=\"https://streams.spec.whatwg.org/#readablestreamdefaultreader\">ReadableStreamDefaultReader</a></td>\n<td>✔️</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td><a href=\"https://w3c.github.io/webcrypto/#dfn-SubtleCrypto\">SubtleCrypto</a></td>\n<td>✔️</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td><a href=\"https://encoding.spec.whatwg.org/#textdecoder\">TextDecoder</a></td>\n<td>✔️</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td><a href=\"https://encoding.spec.whatwg.org/#textdecoderstream\">TextDecoderStream</a></td>\n<td>✔️</td>\n<td>✔️</td>\n<td>(soon)</td>\n</tr>\n<tr>\n<td><a href=\"https://encoding.spec.whatwg.org/#textencoder\">TextEncoder</a></td>\n<td>✔️</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td><a href=\"https://encoding.spec.whatwg.org/#textencoderstream\">TextEncoderStream</a></td>\n<td>✔️</td>\n<td>✔️</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://streams.spec.whatwg.org/#transformstream\">TransformStream</a></td>\n<td>✔️</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td><a href=\"https://streams.spec.whatwg.org/#transformstreamdefaultcontroller\">TransformStreamDefaultController</a></td>\n<td>✔️</td>\n<td>✔️</td>\n<td>(soon)</td>\n</tr>\n<tr>\n<td><a href=\"https://url.spec.whatwg.org/#url\">URL</a></td>\n<td>✔️</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td><a href=\"https://wicg.github.io/urlpattern/#urlpattern-class\">URLPattern</a></td>\n<td>?</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td><a href=\"https://url.spec.whatwg.org/#urlsearchparams\">URLSearchParams</a></td>\n<td>✔️</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td><a href=\"https://streams.spec.whatwg.org/#writablestream\">WritableStream</a></td>\n<td>✔️</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td><a href=\"https://streams.spec.whatwg.org/#writablestreamdefaultcontroller\">WritableStreamDefaultController</a></td>\n<td>✔️</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td>globalThis.<a href=\"https://html.spec.whatwg.org/multipage/window-object.html#dom-self\">self</a></td>\n<td>?</td>\n<td>✔️</td>\n<td>(soon)</td>\n</tr>\n<tr>\n<td>globalThis.<a href=\"https://html.spec.whatwg.org/multipage/webappapis.html#dom-atob\">atob()</a></td>\n<td>✔️</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td>globalThis.<a href=\"https://html.spec.whatwg.org/multipage/webappapis.html#dom-btoa\">btoa()</a></td>\n<td>✔️</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td>globalThis.<a href=\"https://console.spec.whatwg.org/#namespacedef-console\">console</a></td>\n<td>✔️</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td>globalThis.<a href=\"https://w3c.github.io/webcrypto/#dom-windoworworkerglobalscope-crypto\">crypto</a></td>\n<td>✔️</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td>globalThis.navigator.<a href=\"https://html.spec.whatwg.org/multipage/system-state.html#dom-navigator-useragent\">userAgent</a></td>\n<td>?</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td>globalThis.<a href=\"https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-queuemicrotask\">queueMicrotask()</a></td>\n<td>✔️</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td>globalThis.<a href=\"https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout\">setTimeout()</a> / globalthis.<a href=\"https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-cleartimeout\">clearTimeout()</a></td>\n<td>✔️</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td>globalThis.<a href=\"https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-setinterval\">setInterval()</a> / globalThis.<a href=\"https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-clearinterval\">clearInterval()</a></td>\n<td>✔️</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td>globalThis.<a href=\"https://html.spec.whatwg.org/multipage/structured-data.html#dom-structuredclone\">structuredClone()</a></td>\n<td>✔️</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n</tbody>\n</table>\n<!--kg-card-end: markdown--><p>Whenever one of the environments diverges from the standardized definition of the API (such as Node.js implementation of setTimeout() and setInterval()), clear documentation describing the differences will be made available. Such differences should only exist for backwards compatibility with existing code.</p><h3 id=\"web-cryptography-streams\">Web Cryptography Streams</h3><p>The <a href=\"https://www.w3.org/TR/WebCryptoAPI/\">Web Cryptography API</a> provides a minimal (and very <em>limited</em>) APIs for  common cryptography operations. One of its key limitations is the fact that – unlike Node.js' <a href=\"https://nodejs.org/dist/latest-v18.x/docs/api/crypto.html\">built-in crypto module</a> – it does not have any support for streaming inputs and outputs to symmetric cryptographic algorithms. All Web Cryptography features operate on chunks of data held in memory, all at once. This strictly limits the performance and scalability of cryptographic operations. Using these APIs in any environment that is not a web browser, and trying to make them perform well, quickly becomes painful.</p><p>To address that issue, WinterCG has started <a href=\"https://github.com/wintercg/proposal-webcrypto-streams\">drafting a new specification for Web Crypto Streams</a> that will be submitted to the W3C for consideration as part of a larger effort currently being bootstrapped by the W3C to update the Web Cryptography specification. The goal is to bring streaming crypto operations to the whole of the web, including web browsers, in a way that conforms with existing standards.</p><h3 id=\"a-subset-of-fetch-for-servers\">A subset of fetch() for servers</h3><p>With the recent release of version 18.0.0, <a href=\"https://nodejs.org/dist/latest-v18.x/docs/api/globals.html#fetch\">Node.js has joined</a> the collection of JavaScript environments that provide an implementation of the WHATWG standardized fetch() API. There are, however, a number of important differences between the way Node.js, Deno, and Cloudflare Workers implement fetch() versus the way it is implemented in web browsers.</p><p>For one, server environments do not have a concept of \"origin\" like a web browser does. Features such as CORS intended to protect against cross-site scripting vulnerabilities are simply irrelevant on the server. Likewise, where web browsers are generally used by one individual user at a time and have a concept of a globally-scoped cookie store, server and serverless applications can be used by millions of users simultaneously and a globally-scoped cookie store that potentially contains session and authentication details would be both impractical and dangerous.</p><p>Because of the acute differences in the environments, it is often difficult to reason about, and gain consensus on, proposed changes in the fetch standard. Some proposed new API, for instance, might be fantastically relevant to fetch users on a server but completely useless to fetch users in a web browser. Some set of security concerns that are relevant to the Browser might have no impact whatsoever on the server.</p><p>To address this issue, and to make it easier for non-web browser environments to implement fetch in a consistent way, WinterCG is <a href=\"https://github.com/wintercg/fetch\">working on documenting a subset of the fetch</a> standard that deals specifically with those different requirements and constraints.</p><p>Critically, this subset will be fully compatible with the fetch standard; and is being cooperatively developed by the same folks who have worked on fetch in Node.js, Deno, and Cloudflare Workers. It is not intended that this will become a competing definition of the fetch standard, but rather a set of documented guidelines on how to implement fetch correctly in these other environments.</p><h2 id=\"we-re-just-getting-started\">We're just getting started</h2><p>The Web-interoperable Runtimes Community Group is just getting started, and we have a number of ambitious goals. Participation is open to everyone, and all work will be done in the open via GitHub at <a href=\"https://github.com/wintercg\">https://github.com/wintercg</a>. We are actively seeking collaboration with the W3C, the WHATWG, and the JavaScript community at large to ensure that web features are available, work consistently, and meet the requirements of all web developers working anywhere across the stack.</p><p>For more information on the WinterCG, refer to <a href=\"https://wintercg.org\">https://wintercg.org</a>. For details on how to participate, refer to <a href=\"https://github.com/wintercg/admin\">https://github.com/wintercg/admin</a>.</p><h3 id=\"join-us-at-cloudflare-connect-\"><em>Join us at Cloudflare Connect!</em></h3><p><em>Interested in learning more about building with Cloudflare Pages? If you’re based in the New York City area, join us on Thursday, May 12th for a series of workshops on how to build a full stack application on Pages! Follow along with a fully hands-on lab featuring Pages in conjunction with other products like Workers, Images and Cloudflare Gateway, and hear directly from our product managers.<a href=\"https://events.www.cloudflare.com/flow/cloudflare/connect2022nyc/landing/page/page\"> Register now</a>!</em></p>",
		"comment_id": "6278dee15b2938000ab484db",
		"feature_image": "http://blog.cloudflare.com/content/images/2022/05/image1-9.png",
		"featured": false,
		"visibility": "public",
		"created_at": "2022-05-09T10:29:05.000+01:00",
		"updated_at": "2024-02-15T23:31:24.000+00:00",
		"published_at": "2022-05-09T14:00:27.000+01:00",
		"custom_excerpt": "Cloudflare is excited to be a part of the launch of the Web-interoperable Runtimes Community Group, a new effort that brings contributors from Cloudflare Workers, Deno, and Node.js together to collaborate on common Web platform API standards",
		"codeinjection_head": null,
		"codeinjection_foot": null,
		"custom_template": null,
		"canonical_url": null,
		"authors": [
			{
				"id": "618c3373015c6002aaf447a3",
				"name": "James M Snell",
				"slug": "jasnell",
				"profile_image": "http://blog.cloudflare.com/content/images/2021/11/mecoffee.jpg",
				"cover_image": "http://blog.cloudflare.com/content/images/2021/11/IMG_5946.jpg",
				"bio": null,
				"website": null,
				"location": "California",
				"facebook": null,
				"twitter": "@jasnell",
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/jasnell/"
			}
		],
		"tags": [
			{
				"id": "6278df405b2938000ab484e5",
				"name": "#BLOG-1058",
				"slug": "hash-blog-1058",
				"description": null,
				"feature_image": null,
				"visibility": "internal",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/404/"
			},
			{
				"id": "6276b1455b2938000ab48480",
				"name": "Platform Week",
				"slug": "platform-week",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/platform-week/"
			},
			{
				"id": "5d16450341acde0011a95165",
				"name": "JavaScript",
				"slug": "javascript",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/javascript/"
			},
			{
				"id": "5d16450341acde0011a9518d",
				"name": "Community",
				"slug": "community",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/community/"
			},
			{
				"id": "5d16450341acde0011a95253",
				"name": "Cloudflare Workers",
				"slug": "workers",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/workers/"
			},
			{
				"id": "6081bf116a6b1c01ba3a1304",
				"name": "Node.js",
				"slug": "node-js",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/node-js/"
			},
			{
				"id": "5d16450341acde0011a95252",
				"name": "Serverless",
				"slug": "serverless",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Serverless.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Serverless",
				"meta_description": "Cloudflare blog posts tagged 'serverless'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/serverless/"
			},
			{
				"id": "64a3e2b834124c000b00b717",
				"name": "Developer Platform",
				"slug": "developer-platform",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developer-platform/"
			},
			{
				"id": "5d16450341acde0011a95204",
				"name": "Developers",
				"slug": "developers",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Developers-1.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Developers",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Developers'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developers/"
			}
		],
		"primary_author": {
			"id": "618c3373015c6002aaf447a3",
			"name": "James M Snell",
			"slug": "jasnell",
			"profile_image": "http://blog.cloudflare.com/content/images/2021/11/mecoffee.jpg",
			"cover_image": "http://blog.cloudflare.com/content/images/2021/11/IMG_5946.jpg",
			"bio": null,
			"website": null,
			"location": "California",
			"facebook": null,
			"twitter": "@jasnell",
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/jasnell/"
		},
		"primary_tag": null,
		"url": "http://blog.cloudflare.com/introducing-the-wintercg/",
		"excerpt": "Cloudflare is excited to be a part of the launch of the Web-interoperable Runtimes Community Group, a new effort that brings contributors from Cloudflare Workers, Deno, and Node.js together to collaborate on common Web platform API standards",
		"reading_time": 7,
		"access": true,
		"comments": false,
		"og_image": "http://blog.cloudflare.com/content/images/2022/05/A-Community-Group-for-Web-interoperable-JavaScript-runtimes-OG-3.png",
		"og_title": null,
		"og_description": null,
		"twitter_image": "http://blog.cloudflare.com/content/images/2022/05/A-Community-Group-for-Web-interoperable-JavaScript-runtimes-OG-2.png",
		"twitter_title": null,
		"twitter_description": null,
		"meta_title": null,
		"meta_description": "Cloudflare is excited to be a part of the launch of the Web-interoperable Runtimes Community Group, a new effort that brings contributors from Cloudflare Workers, Deno, and Node.js together to collaborate on common Web platform API standards.",
		"email_subject": null,
		"frontmatter": null,
		"feature_image_alt": null,
		"feature_image_caption": null
	},
	"locale": "en-us"
}