{
	"post": {
		"id": "610a9e55000cd501bd61bdc8",
		"uuid": "283bbd62-5681-4b8f-92bb-02a6e28708e8",
		"title": "Building a Pet Cam using a Raspberry Pi, Cloudflare Tunnels and Teams",
		"slug": "building-a-pet-cam-using-a-raspberry-pi-cloudflare-tunnels-and-teams",
		"html": "<figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2021/08/Pet-Cam.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>I adopted Ziggy in late 2020. It took me quite a while to get used to his routine and mix it with mine. He consistently jumped on the kitchen counter in search of food, albeit only when no one was around. And I only found out when he tossed the ceramic butter box. It shattered and made a loud bang in the late hours of the night. Thankfully, no one was asleep yet.</p><p>This got me thinking that I should keep an eye on his mischievous behaviour, even when I'm not physically at home. I briefly considered buying a pet cam, but I remembered I had bought a Raspberry Pi a few months before. It was hardly being used, and it had a case (like <a href=\"https://thepihut.com/collections/raspberry-pi-4-cases/products/pir-camera-case-for-raspberry-pi-4-3\">this</a>) allowing a camera module to be added. I hadn’t found a use for the camera module — until now.</p><p>This was a perfect weekend project: I would set up my own pet cam, connect it to the Internet, and make it available for me to check from anywhere in the world. I also wanted to ensure that only I could access it and that it had some easy way to login, possibly using my Google account. The solution? Cloudflare Tunnel and Teams. Cloudflare would help me expose a service running in an internal network using <a href=\"https://www.cloudflare.com/en-gb/products/tunnel/\">Tunnel</a> while providing a security solution on top of it to keep it secure. <a href=\"https://www.cloudflare.com/en-gb/teams/\">Teams</a> on the other hand, would help me by adding access control in the form of Google authentication.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2021/08/image10.jpg\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>So all I am left to do is configure my Raspberry Pi to be able to run a camera as a web service. That weekend, I started researching for it and made a list of things I needed:</p><ul><li>A Raspberry Pi with a compatible camera module. I used a <a href=\"https://www.raspberrypi.org/products/raspberry-pi-4-model-b/\">Raspberry Pi 4 model B</a> with <a href=\"https://www.raspberrypi.org/products/camera-module-v2/\">camera module v2</a>.</li><li>Linux knowledge.</li><li>A domain name I could make changes to.</li><li>Understanding of how DNS works.</li><li>A Cloudflare account with Cloudflare for Teams+Tunnel access.</li><li>Internet connection.</li></ul><p>In this blog post, I’ll walk you through the process I followed to set everything up for the pet cam. To keep things simple and succinct, I will not cover how to set up your Raspberry Pi, but you should make sure it has Internet access and that you can run shell commands on it, either via <a href=\"https://www.cloudflare.com/learning/access-management/what-is-ssh/\">SSH</a> or using a <a href=\"https://www.realvnc.com/en/\">VNC connection</a>.</p><h3 id=\"setup\">Setup</h3><p>The first thing we need to do is connect the camera module to the Raspberry Pi. For more detailed instructions, follow the <a href=\"https://projects.raspberrypi.org/en/projects/getting-started-with-picamera/1\">official guide</a>, steps 1 to 3.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2021/08/image2.jpg\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>After setting up the camera and testing that it works, we need to set it up as a camera with a web server. This is so we can access it at a URL such as <a href=\"https://192.168.0.2:8080\">https://192.168.0.2:8080</a> within the local network, to which the Raspberry Pi is also connected. To do that, we will use <a href=\"https://motion-project.github.io/\">Motion</a>, a program for setting up the camera module v2 as a web server.</p><p>To install Motion, input these commands:</p><!--kg-card-begin: markdown--><pre><code>$ sudo apt-get update &amp;&amp; sudo apt-get upgrade\n$ sudo apt install autoconf automake build-essential pkgconf libtool git libzip-dev libjpeg-dev gettext libmicrohttpd-dev libavformat-dev libavcodec-dev libavutil-dev libswscale-dev libavdevice-dev default-libmysqlclient-dev libpq-dev libsqlite3-dev libwebp-dev\n$ sudo wget https://github.com/Motion-Project/motion/releases/download/release-4.3.1/pi_buster_motion_4.3.1-1_armhf.deb\n$ sudo dpkg -i pi_buster_motion_4.3.1-1_armhf.deb\n</code></pre>\n<!--kg-card-end: markdown--><p>The above commands will update the local packages with new versions from the repositories and then install that version of Motion from Motion’s GitHub project.</p><p>Next, we need to configure Motion using:</p><!--kg-card-begin: markdown--><pre><code>$ sudo vim /etc/motion/motion.conf\n# Find the following lines and update them to following:\n# daemon on\n# stream_localhost off\n# save and exit\n</code></pre>\n<!--kg-card-end: markdown--><p>After that, we need to set Motion up as a daemon, so it runs whenever the system is restarted:</p><!--kg-card-begin: markdown--><pre><code>$ sudo vim /etc/default/motion\n# and change the following line \n# start_motion_daemon=yes\n# save and exit and run the next command\n$ sudo service motion start\n</code></pre>\n<!--kg-card-end: markdown--><p>Great. Now that we have Motion set up, we can see the live feed from our camera in a browser on Raspberry Pi module at the default URL: <a href=\"http://0.0.0.0:8081\"><strong>http://localhost:8081</strong></a> (the port can be changed in the config edit step above). Alternatively, we can open it on another machine within the same network by replacing 0.0.0.0 with the IP of the Raspberry Pi in the network.</p><p>For now, the camera web server is available only within our local network. However, I wanted to keep an eye on Ziggy no matter where I am, as long as I have Internet access and a browser. This is perfect for <a href=\"https://www.cloudflare.com/en-gb/products/tunnel/\">Cloudflare Tunnel</a>. An alternative would be to open a port in the firewall on the router in my home network, but I hate that idea of having to mess with the router configuration. I am not really an expert at that, and if I leave a backdoor open to my internal network, it can get scary quickly!</p><p>The Cloudflare Tunnel documentation takes us through <a href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/install-and-setup/installation\">its installation</a>. The only issue is that the architecture of the Raspberry Pi is based on armv7l (32-bit)<em> </em>and there is no package for it in the remote repositories<em>.</em> We could build cloudflared from source if we wanted as it’s an <a href=\"https://github.com/cloudflare/cloudflared\">open source project</a>, but an easier route is to <code>wget</code> it.</p><!--kg-card-begin: markdown--><pre><code>$ wget https://bin.equinox.io/c/VdrWdbjqyF/cloudflared-stable-linux-arm.tgz\n# a quick check of version shall confirm if it installed correctly\n$ cloudflared -v \ncloudflared version 2021.5.10 (built 2021-05-26-1355 UTC)\n</code></pre>\n<!--kg-card-end: markdown--><p>Let’s set up our Tunnel now:</p><!--kg-card-begin: markdown--><pre><code>$ cloudflared tunnel create camera\nTunnel credentials written to /home/pi/.cloudflared/5f8182ba-906c-4910-98c3-7d042bda0594.json. cloudflared chose this file based on where your origin certificate was found. Keep this file secret. To revoke these credentials, delete the tunnel.\n\nCreated tunnel camera with id 5f8182ba-906c-4910-98c3-7d042bda0594\n</code></pre>\n<!--kg-card-end: markdown--><p>Now we need to configure the Tunnel to forward the traffic to the Motion webcam server:</p><!--kg-card-begin: markdown--><pre><code>$ vim /home/pi/.cloudflared/config.yaml \n# And add the following.\ntunnel: 5f8182ba-906c-4910-98c3-7d042bda0594\ncredentials-file: /home/pi/.cloudflared/5f8182ba-906c-4910-98c3-7d042bda0594.json \n\ningress:\n  - hostname: camera.imohak.com\n    service: http://0.0.0.0:9095\n  - service: http_status:404\n</code></pre>\n<!--kg-card-end: markdown--><p>The Tunnel uuid should be the one created with the command above and so should the path of the credential file. The ingress should have the domain we want to use. In my case I have set up camera.imohak.com as my domain and 404 as the fallback rule.</p><p>Next, we need to route the DNS to this Tunnel:</p><!--kg-card-begin: markdown--><pre><code>$ cloudflared tunnel route dns 5f8182ba-906c-4910-98c3-7d042bda0594 camera.imohak.com\n</code></pre>\n<!--kg-card-end: markdown--><p>This adds a DNS CNAME record, which can be verified from the Cloudflare dashboard as shown here:</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2021/08/image9.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>Let’s test the Tunnel!</p><!--kg-card-begin: markdown--><pre><code>$ cloudflared tunnel run camera\n2021-06-15T21:44:41Z INF Starting tunnel tunnelID=5f8182ba-906c-4910-98c3-7d042bda0594\n2021-06-15T21:44:41Z INF Version 2021.5.10\n2021-06-15T21:44:41Z INF GOOS: linux, GOVersion: go1.16.3, GoArch: arm\n2021-06-15T21:44:41Z INF Settings: map[cred-file:/home/pi/.cloudflared/5f8182ba-906c-4910-98c3-7d042bda0594.json credentials-file:/home/pi/.cloudflared/5f8182ba-906c-4910-98c3-7d042bda0594.json]\n2021-06-15T21:44:41Z INF cloudflared will not automatically update when run from the shell. To enable auto-updates, run cloudflared as a service: https://developers.cloudflare.com/argo-tunnel/reference/service/\n2021-06-15T21:44:41Z INF Generated Connector ID: 7e38566e-0d33-426d-b64d-326d0592486a\n2021-06-15T21:44:41Z INF Initial protocol http2\n2021-06-15T21:44:41Z INF Starting metrics server on 127.0.0.1:43327/metrics\n2021-06-15T21:44:42Z INF Connection 6e7e0168-22a4-4804-968d-0674e4c3b4b1 registered connIndex=0 location=DUB\n2021-06-15T21:44:43Z INF Connection fc83017d-46f9-4cee-8fc6-e4ee75c973f5 registered connIndex=1 location=LHR\n2021-06-15T21:44:44Z INF Connection 62d28eee-3a1e-46ef-a4ba-050ae6e80aba registered connIndex=2 location=DUB\n2021-06-15T21:44:44Z INF Connection 564164b1-7d8b-4c83-a920-79b279659491 registered connIndex=3 location=LHR\n</code></pre>\n<!--kg-card-end: markdown--><p>Next, we go to the browser and open the URL camera.imohak.com.</p><p><strong>Voilà. </strong>Or, not quite yet.</p><h3 id=\"locking-it-down\">Locking it Down</h3><p>We still haven’t put any requirement for authentication on top of the server. Right now, anyone who knows about the domain can just open it and look at what is happening inside my house. Frightening, right? Thankfully we have two options now: </p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2021/08/image7-1.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><ol><li><strong>Use <a href=\"https://motion-project.github.io/motion_config.html#webcontrol_authentication\">Motion’s inbuilt authentication mechanisms</a></strong>. However, we shall not choose this option as it’s just another username/password to remember which one can easily forget and who knows if in the future, there is a vulnerability found in the way motion authenticates and my credentials are leaked? We are looking for an SSO using Google which is easy and quick to use and gives us a secure login based on Google credentials.</li><li><strong>Use Cloudflare Access</strong>. Access gives us the ability to create policies based on IP addresses and email addresses, and it lets us integrate different <a href=\"https://developers.cloudflare.com/cloudflare-one/identity\">types of authentication methods</a>, such as OTP or <a href=\"https://developers.cloudflare.com/cloudflare-one/identity/idp-integration/google\">Google</a>. In our case, we require authentication through Google.</li></ol><p>To take advantage of this Cloudflare Access functionality, the first step is to set up Cloudflare for Teams. Visit <a href=\"https://dash.teams.cloudflare.com/\">https://dash.teams.cloudflare.com/</a>, follow the <a href=\"https://developers.cloudflare.com/cloudflare-one/setup\">setup guide</a> and choose a team name (imohak in my case).</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"http://blog.cloudflare.com/content/images/2021/08/image6-1.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2021/08/image13.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>After this, we have two things left to do: add a login method and add an application. Let’s cover how we add a login method first. Navigate to <strong>Configuration</strong> &gt; <strong>Authentication</strong> and click on <strong>+Add</strong>,<strong> </strong>under the Login tab. The Dashboard will show us a list of identity providers to choose from. Select <strong>Google</strong> — follow <a href=\"https://developers.cloudflare.com/cloudflare-one/identity/idp-integration/google\">this guide</a> for a walkthrough of how to set up a Google Cloud application, get a ClientID and Client Secret, and use them to configure the identity provider in Teams.</p><p>After adding a login method and testing it, we should see a confirmation page like this:</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2021/08/image4-2.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2021/08/image11.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>The last thing we need to do is to add the pet-cam subdomain as an application protected behind Teams. This enables us to enforce the Google authentication requirement we have configured before. To do that, navigate to <strong>Access</strong> &gt; <strong>Applications</strong>, click on <strong>Add an application</strong>, and select <strong>Self-hosted.</strong></p><p>On the next page, we specify a name, session duration and also the URL at which the application should be accessible. We add the subdomain <strong>camera.imohak.com </strong>and also name the app ‘camera’ to keep it simple.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2021/08/image5-6.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>Next, we select Google as an identity provider for this application. Given that we are not choosing multiple authentication methods, I can also enable Instant Auth — this means we don’t need to select Google when we open the URL.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2021/08/image3-7.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>Now we add policies to the application. Here, we add an email check so that after the Google authentication, a check is made to ensure the specified email address is the only one who is able to access the URL. If needed, we can choose to configure other, more <a href=\"https://developers.cloudflare.com/cloudflare-one/policies/zero-trust\">complex rules</a>. At this point, we click on <strong>Next</strong> and finish the setup.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2021/08/image12.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><h3 id=\"the-result\">The Result</h3><p>The setup is now complete. Time to test everything! After opening the browser and entering my URL, <strong>voilà. </strong>Now, when I visit this URL, I see a Google authentication page and, after logging in, Ziggy eating his dinner.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2021/08/image8.png\" class=\"kg-image\" alt loading=\"lazy\"></figure>",
		"comment_id": "610a9e55000cd501bd61bdc8",
		"feature_image": "http://blog.cloudflare.com/content/images/2021/08/image1-8.png",
		"featured": false,
		"visibility": "public",
		"created_at": "2021-08-04T15:04:05.000+01:00",
		"updated_at": "2023-07-05T20:00:59.000+01:00",
		"published_at": "2021-08-19T13:59:03.000+01:00",
		"custom_excerpt": "This was a perfect weekend project: I would set up my own pet cam, connect it to the Internet, and make it available for me to check from anywhere in the world.",
		"codeinjection_head": null,
		"codeinjection_foot": null,
		"custom_template": null,
		"canonical_url": null,
		"tags": [
			{
				"id": "610a9eeb000cd501bd61bdce",
				"name": "#BLOG-539",
				"slug": "hash-blog-539",
				"description": null,
				"feature_image": null,
				"visibility": "internal",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/404/"
			},
			{
				"id": "609916252d012001babc67eb",
				"name": "Cloudflare Tunnel",
				"slug": "cloudflare-tunnel",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/cloudflare-tunnel/"
			},
			{
				"id": "5e13bb91135aa90272a71e1e",
				"name": "Cloudflare Zero Trust",
				"slug": "cloudflare-zero-trust",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/cloudflare-zero-trust/"
			},
			{
				"id": "5d16450341acde0011a9525e",
				"name": "Raspberry Pi",
				"slug": "raspberry-pi",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/raspberry-pi/"
			},
			{
				"id": "611d220df3e86e01bb7d7a02",
				"name": "Road to Zero Trust",
				"slug": "road-to-zero-trust",
				"description": "Mini Cloudflare Teams series about Zero Trust.",
				"feature_image": "http://blog.cloudflare.com/content/images/2021/08/Copy-of-Mini-Teams-Week.png",
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/road-to-zero-trust/"
			},
			{
				"id": "5eafe962ad4c4401bca11b64",
				"name": "Zero Trust",
				"slug": "zero-trust",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Zero-Trust.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Zero Trust",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Zero Trust'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/zero-trust/"
			},
			{
				"id": "5d16450341acde0011a95265",
				"name": "Security",
				"slug": "security",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Security.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Security",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Security'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/security/"
			},
			{
				"id": "5d16450341acde0011a95204",
				"name": "Developers",
				"slug": "developers",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Developers-1.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Developers",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Developers'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developers/"
			}
		],
		"authors": [
			{
				"id": "60be1ea827f68203f39a4258",
				"name": "Mohak Kataria",
				"slug": "mohak",
				"profile_image": "http://blog.cloudflare.com/content/images/2021/06/mohak.png",
				"cover_image": null,
				"bio": null,
				"website": null,
				"location": null,
				"facebook": null,
				"twitter": null,
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/mohak/"
			}
		],
		"primary_author": {
			"id": "60be1ea827f68203f39a4258",
			"name": "Mohak Kataria",
			"slug": "mohak",
			"profile_image": "http://blog.cloudflare.com/content/images/2021/06/mohak.png",
			"cover_image": null,
			"bio": null,
			"website": null,
			"location": null,
			"facebook": null,
			"twitter": null,
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/mohak/"
		},
		"primary_tag": null,
		"url": "http://blog.cloudflare.com/building-a-pet-cam-using-a-raspberry-pi-cloudflare-tunnels-and-teams/",
		"excerpt": "This was a perfect weekend project: I would set up my own pet cam, connect it to the Internet, and make it available for me to check from anywhere in the world.",
		"reading_time": 8,
		"access": true,
		"comments": false,
		"og_image": "http://blog.cloudflare.com/content/images/2021/08/Building-a-Pet-Cam-using-a-Raspberry-Pi--Cloudflare-Tunnels-and-Teams-OG-3.png",
		"og_title": null,
		"og_description": null,
		"twitter_image": "http://blog.cloudflare.com/content/images/2021/08/Building-a-Pet-Cam-using-a-Raspberry-Pi--Cloudflare-Tunnels-and-Teams-OG-2.png",
		"twitter_title": null,
		"twitter_description": null,
		"meta_title": null,
		"meta_description": "This was a perfect weekend project: I would set up my own pet cam, connect it to the Internet, and make it available for me to check from anywhere in the world.",
		"email_subject": null,
		"frontmatter": null,
		"feature_image_alt": null,
		"feature_image_caption": null
	},
	"locale": "en-us"
}