{
	"locale": "en-us",
	"post": {
		"access": true,
		"authors": [
			{
				"id": "642adf70adcb86000a716cd5",
				"name": "Adam Murray",
				"slug": "adam-murray",
				"profile_image": "http://blog.cloudflare.com/content/images/2023/04/adam_headshot-1.jpg",
				"cover_image": null,
				"bio": null,
				"website": null,
				"location": null,
				"facebook": null,
				"twitter": "@admah",
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/adam-murray/"
			},
			{
				"id": "6186c9a51a6fe202ab7b100e",
				"name": "Brendan Coll",
				"slug": "brendan-coll",
				"profile_image": "http://blog.cloudflare.com/content/images/2021/11/brendan-coll.png",
				"cover_image": null,
				"bio": null,
				"website": null,
				"location": null,
				"facebook": null,
				"twitter": "@_mrbbot",
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/brendan-coll/"
			}
		],
		"canonical_url": null,
		"codeinjection_foot": null,
		"codeinjection_head": null,
		"comment_id": "655b88b17f068e000a850028",
		"comments": false,
		"created_at": "2023-11-20T16:26:25.000+00:00",
		"custom_excerpt": "We provide many tools to help you debug Cloudflare Workers; from your local environment all the way into production. In this post, we highlight some of the tools we currently offer, and do a deep dive into one specific area - breakpoint debugging - a tool we recently added into our workerd runtime",
		"custom_template": null,
		"email_subject": null,
		"excerpt": "We provide many tools to help you debug Cloudflare Workers; from your local environment all the way into production. In this post, we highlight some of the tools we currently offer, and do a deep dive into one specific area - breakpoint debugging - a tool we recently added into our workerd runtime",
		"feature_image": "http://blog.cloudflare.com/content/images/2023/11/Debugging.png",
		"feature_image_alt": "Better debugging for Cloudflare Workers, now with breakpoints",
		"feature_image_caption": null,
		"featured": false,
		"frontmatter": null,
		"html": "<figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2023/11/Debugging-1.png\" class=\"kg-image\" alt=\"Better debugging for Cloudflare Workers, now with breakpoints\" loading=\"lazy\" width=\"2400\" height=\"1351\"></figure><p>As developers, we’ve all experienced times when our code doesn’t work like we expect it to. Whatever the root cause is, being able to quickly dive in, diagnose the problem, and ship a fix is invaluable. <br><br>If you’re developing with Cloudflare Workers, we provide many tools to help you debug your applications; from your local environment all the way into production. This additional insight helps save you time and resources and provides visibility into how your application actually works — which can help you optimize and refactor code even before it goes live.</p><p>In this post, we’ll explore some of the tools we currently offer, and do a deep dive into one specific area — breakpoint debugging — looking at not only how to use it, but how we recently implemented it in our runtime, <a href=\"https://github.com/cloudflare/workerd\">workerd</a>.</p><h2 id=\"available-debugging-tools\">Available Debugging Tools</h2><h3 id=\"logs\">Logs</h3><p><code>console.log</code>. It might be the simplest tool for a developer to debug, but don’t underestimate it. Built into the Cloudflare runtime is node-like logging, which provides detailed, color-coded logs. Locally, you can view these logs in a terminal window, and they will look like this:</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2023/11/image5-2.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"618\" height=\"547\"></figure><p>Outside local development, once your Worker is deployed, <code>console.log</code> statements are visible via the Real-time Logs interface in the Cloudflare Dashboard or via the Workers CLI tool, <a href=\"https://developers.cloudflare.com/workers/wrangler/install-and-update/\">Wrangler</a>, using the <a href=\"https://developers.cloudflare.com/workers/wrangler/commands/#tail\"><code>wrangler tail</code></a> command. Each log that comes through <code>wrangler tail</code> is structured JSON, and the command has options to filter and search incoming logs to make results as relevant as possible.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2023/11/image2-4.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"1281\" height=\"523\"></figure><p>If you’d like to send these logs to third-parties for processing and storage, you can leverage <a href=\"https://developers.cloudflare.com/workers/observability/logpush/\">Workers Trace Events Logpush</a> which supports a variety of <a href=\"https://developers.cloudflare.com/logs/get-started/enable-destinations/\">destinations</a>.</p><h3 id=\"devtools\">DevTools</h3><p>In addition to logging, you can also leverage <a href=\"https://github.com/cloudflare/workers-sdk/tree/main/packages/wrangler-devtools\">our implementation</a> of <a href=\"https://developer.chrome.com/docs/devtools/overview/\">Chrome’s DevTools</a> to do things like view and debug network requests, take memory heap snapshots, and monitor CPU usage.</p><p>This interactive tool provides even further insight and information about your Cloudflare Workers, and can be started from within Wrangler by running <a href=\"https://developers.cloudflare.com/workers/wrangler/commands/#dev\"><code>wrangler dev</code></a> and pressing <strong>[d] </strong>once the dev server is spun up. It can also be accessed by the editor that is built into the <a href=\"https://dash.cloudflare.com/login?redirect_uri=https%3A%2F%2Fdash.cloudflare.com%2F%3Faccount%3Dworkers\">Cloudflare Dashboard</a> or the <a href=\"https://workers.new\">Workers Playground</a>.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2023/11/image6-1.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"1058\" height=\"469\"></figure><h3 id=\"breakpoints\">Breakpoints</h3><p>Breakpoints allow developers to stop code execution at specific points (lines) to evaluate what is happening. This is great for situations where you might have a race condition or times when you don’t know exactly what is happening, and your code isn’t behaving as expected. Breakpoints allow you to walk through your code line by line to see how it behaves.</p><!--kg-card-begin: html--><div style=\"position: relative; padding-top: 65.72700296735906%;\">\n  <iframe\n    src=\"https://customer-eq7kiuol0tk9chox.cloudflarestream.com/df30046696c3f34d61bcfa817705131c/iframe?muted=true&preload=true&loop=true&autoplay=true&poster=https%3A%2F%2Fcustomer-eq7kiuol0tk9chox.cloudflarestream.com%2Fdf30046696c3f34d61bcfa817705131c%2Fthumbnails%2Fthumbnail.jpg%3Ftime%3D%26height%3D600\"\n    style=\"border: none; position: absolute; top: 0; left: 0; height: 100%; width: 100%;\"\n    allow=\"accelerometer; gyroscope; autoplay; encrypted-media; picture-in-picture;\"\n    allowfullscreen=\"true\"\n  ></iframe>\n</div><!--kg-card-end: html--><p>You can get started with breakpoint debugging from within the Wrangler CLI by running <a href=\"https://developers.cloudflare.com/workers/wrangler/commands/#dev\"><code>wrangler dev</code></a> and pressing <strong>[d] </strong>to open up a DevTools debugger session. If you prefer to debug via your IDE, we support VSCode and WebStorm.</p><p><strong>Setting up VSCode</strong><br>To set up VSCode to debug Cloudflare Workers with breakpoints, you’ll need to create a new <code>.vscode/launch.json</code> file with the following content:</p><!--kg-card-begin: markdown--><pre><code class=\"language-JavaScript\">{\n  &quot;configurations&quot;: [\n    {\n  &quot;name&quot;: &quot;Wrangler&quot;,\n  &quot;type&quot;: &quot;node&quot;,\n  &quot;request&quot;: &quot;attach&quot;,\n  &quot;port&quot;: 9229,\n  &quot;cwd&quot;: &quot;/&quot;,\n  &quot;resolveSourceMapLocations&quot;: null,\n  &quot;attachExistingChildren&quot;: false,\n  &quot;autoAttachChildProcesses&quot;: false\n    }\n  ]\n}\n</code></pre>\n<!--kg-card-end: markdown--><p>Once you’ve created this configuration in <code>launch.json</code>, open your project in VSCode. Open a new terminal window from VSCode, and run <code>npx wrangler dev</code> to start a local dev server.</p><p>At the top of the <strong>Run &amp; Debug</strong> panel, you should see an option to select a configuration. Choose <strong>Wrangler</strong>, and select the play icon. You should see <strong>Wrangler: Remote Process [0] </strong>show up in the Call Stack panel on the left. Go back to a <strong>.js</strong> or <strong>.ts</strong> file in your project and add at least one breakpoint.</p><p>Open your browser and go to the Worker’s local URL (default http://127.0.0.1:8787). The breakpoint should be hit, and you should see details about your code at the specified line.</p><p><strong>Setting up WebStorm</strong><br>To set up WebStorm with breakpoint debugging, create a new “Attach to Node.js/Chrome” Debug Configuration, setting the port to <code>9229</code>:</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2023/11/image4-2.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"738\" height=\"654\"></figure><p>Run <code>npx wrangler dev</code> to start a local dev server, then start the Debug Configuration:</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2023/11/Screenshot-2023-11-28-at-10.07.57.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"2070\" height=\"224\"></figure><p>Add a breakpoint, then open your browser and go to the Worker’s local URL (default http://127.0.0.1:8787). The breakpoint should be hit, and you should see details about your code at the specified line.</p><h2 id=\"how-we-enabled-breakpoint-debugging-via-workerd\">How we enabled breakpoint debugging via workerd</h2><p>Both <a href=\"http://blog.cloudflare.com/workerd-open-source-workers-runtime/\">workerd</a> and Cloudflare Workers embed <a href=\"https://v8.dev/\">V8</a> to run workers code written in JavaScript and WASM. V8 is a component of the world’s most widely used web browser today, <a href=\"https://www.google.com/chrome/\">Google Chrome</a>, and it is also widely used embedded into open source projects like <a href=\"https://nodejs.org/\">Node.js</a>.</p><p>The Google Chrome team has created a set of web developer tools, <a href=\"https://developer.chrome.com/docs/devtools/\">Chrome DevTools</a>, that are built directly into the browser. These provide a wide range of features for inspecting, debugging, editing, and optimizing web pages. Chrome DevTools are exposed through a UI in Chrome that talks to the components of the browser, such as V8, using the <a href=\"https://chromedevtools.github.io/devtools-protocol/\">Chrome DevTools Protocol</a> (CDP). The protocol uses JSON-RPC transmitted over a websocket to exchange messages and notifications between clients, like the DevTools UI, and the components of Chrome. Within Chrome Devtools protocols are domains (DOM, Debugger, Media) that group related commands by functionality that can be implemented by different components in Chrome.</p><p>V8 supports the following CDP domains:</p><ul><li>Runtime</li><li>Debugger</li><li>Profiler</li><li>HeapProfiler</li></ul><p>These domains are available to all projects that embed V8, including workerd, so long as the embedding application is able to route messages between a DevTools client and V8. DevTools clients use the Debugger domain to implement debugging functionality. The Debugger domain exposes all the commands to debug an application, such as setting breakpoints. It also sends debugger events, like hitting a breakpoint, up to DevTools clients, so they can present the state of the script in a debugger UI.</p><p>While workerd has supported CDP since its first release, support for the Debugger domain is new. The Debugger domain differs from the other domains exposed by V8 because it requires the ability to suspend the execution of a script whilst it is being debugged. This presents a complication for introducing breakpoint debugging in workerd, because workerd runs each Worker in a V8 isolate in which there is just a single thread that receives incoming requests and runs the scripts associated with them.</p><p>Why is this a problem? Workerd uses an event-driven programming model and its single thread is responsible for both responding to incoming requests and for running JavaScript / WASM code. In practice, this is implemented via an event loop that sits at the bottom of the call stack that sends and receives network messages and calls event handlers that run JavaScript code. The thread needs to fall back into the event loop after running event handlers to be able to process network messages. However, the V8 API for handling breakpoints expects execution to be suspended within a method implemented by the embedder that is called from V8 when a breakpoint is hit. This method is called from the event handler that is running JavaScript in V8. Unfortunately, this prevents the workerd thread from falling back into the event loop and processing any incoming network events, including all CDP commands relating to debugging. So if a client asks to resume execution by sending a CDP command, it cannot be relayed to the executing thread because it is unable to fall into the eventloop whilst in a breakpoint.</p><p>We solved this event processing problem by adding an I/O thread to workerd. The I/O thread handles sending and receiving CDP messages, because the thread executing JavaScript can be suspended due to hitting a breakpoint or a JavaScript `debugger` statement. The I/O thread wakes the JavaScript thread when CDP commands arrive and also handles sending responses back to the CDP client. Conceptually, this was not difficult, but it required some careful synchronization to avoid dropped messages.</p><h2 id=\"use-the-source\">Use the Source</h2><p>When debugging, JavaScript developers expect to see their source code in the debugger. For this to work, the embedded V8 needs to be able to locate sources. It is common for JavaScript code to be generated either by combining and minifying multiple JavaScript sources, or by transpiling to JavaScript from another language, such as <a href=\"https://www.typescriptlang.org/\">TypeScript</a>, <a href=\"https://dart.dev/\">Dart</a>, <a href=\"https://coffeescript.org/\">CoffeeScript</a>, or <a href=\"https://elm-lang.org/\">Elm</a>. To render the source code in the debugger in its original form, the embedded V8 needs to know 1) where the source code came from and 2) how any given line of JavaScript visible to V8 maps back to the original sources before any transformation of the original sources was applied. The standard solution to this problem is to embed a <a href=\"https://firefox-source-docs.mozilla.org/devtools-user/debugger/how_to/use_a_source_map/index.html\">source map</a> into the JavaScript code that JavaScript engine runs. The embedding is performed through a special comment in the JavaScript running in the JavaScript engine:</p><p><code>//# sourceMappingURL=generated.js.map</code></p><p>This source map’s URL is resolved relative to the source URL. This can be set when instantiating a source file with the V8 API, or via another special comment:</p><p><code>//# sourceURL=file:///absolute/path/to/generated.js</code></p><p>An example source map looks something like this:</p><!--kg-card-begin: markdown--><pre><code class=\"language-JavaScript\">{\n  &quot;version&quot;: 3,\n  &quot;sources&quot;: [&quot;../src/index.ts&quot;],\n  &quot;sourcesContent&quot;: [&quot;interface Env { ... }\\n\\nexport default ...&quot;],\n  &quot;mappings&quot;: &quot;;AAIA,IAAO,mBAA8B;AAAA,EACjC,MAAM,MAAM,SAAS,KAAK,KAAK;...&quot;,\n  &quot;names&quot;: []\n}\n</code></pre>\n<!--kg-card-end: markdown--><p>Each of the relative paths in <code>sources</code> are resolved relative to the source map’s fully-qualified URL. When DevTools connects to V8 and enables the Debugger domain, V8 will send information on all parsed scripts including the source map’s fully-qualified URL. In our example, this would be <code>file:///absolute/path/to/generated.js.map</code>. DevTools needs to fetch this URL along with source URLs to perform source mapping. Unfortunately, our patched version of DevTools is hosted at <a href=\"https://devtools.devprod.cloudflare.dev/\">https://devtools.devprod.cloudflare.dev/</a>, and browsers prohibit fetching <code>file://</code> URLs from non-<code>file://</code> origins for security reasons. However, we need to use <code>file://</code> URLs so IDEs like Visual Studio Code can match up source files from source maps to files on disk. To get around this, we used Wrangler's inspector proxy to rewrite the CDP script parsed messages sent by V8 to use a different protocol if the <code>User-Agent</code> of the inspector WebSocket handshake is a browser.</p><p>Now that we can set breakpoints and fetch source maps, DevTools works as normal. When a user tries to set a breakpoint in an original source file, DevTools will use the map’s <code>mappings</code> to find the location in the generated JavaScript file and set a breakpoint there. This is the opposite problem to source mapping error stack traces. When V8 hits this JavaScript breakpoint, DevTools will pause on the location in the original source file. Stepping through the source file requires mapping the stepped-over segment to generated code, sending the step-over command to V8, then mapping back the new paused location in generated code to the original source file.</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"http://blog.cloudflare.com/content/images/2023/11/image3-5.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"1500\" height=\"1105\"><figcaption><em>(sequence diagram showing process of setting, hitting, and stepping over breakpoints) (<a href=\"https://mermaid.live/edit#pako:eNq1VUtvEzEQ_iuWTyClG1DUA6sqh6pCQmpLlRJxqHNw1pONidde_AitVvnvjOPdNgmbEgTsyfbMfN88dxpaGAE0pw6-B9AFXEleWl4xTfDjhTeWTB3YdK-59bKQNdeeXMH6izHK_Sr5arkuVZ_ND2NXYEUSdABn43FnkePjPJQl2Aw0nytImp0YNVuEnCRJez3rx3CFlbW_49aBuJjbcUOcCbaAG15PJ9eIQRdSQT4cZlk2lFrAY_bNZRWvGR0QfCObA36k6bz-I5rkZkt0EYIU4wOK3mTcgo-WmTJctOcJJOzEE6w6DX4ngy8BNMTDo48ADWOMrsE6aXQ85qOtNaOdfWyBPdt78OTSAl_VRmofvXmTEuhd_uHtKQV24F8ALp-mVu3F1FOZGJOSGm5DNY9Q56NjMR7pkl0_GjJ_Zv8UNen7_HyUv8t7iV_NYxJp44FYWS49MYttwmKWtHBkEkfL-VM6tubhuYkKrtRHHEVAigd0ZzYgUbCUO3mLotc9n3Wu4yzLNUcf94awv7UP6oeyFM_d1r1jLeGhJp_X3dz_pvqoHHXbeVnJ-lo67MUHvHj8Y8QC7deabNpqz04veD-3BReqLgwB_yIxk13Ivyjx_yrWsSiZpgNaga24FLgEmvjKqF9CBfgXwKOABQ_KM8r0BlV58Ob-SRc09zbAgIZaIGa7M7pHEBLXxk3aK9v1svkJ1EsiBw\">mermaid URL</a>)</em></figcaption></figure><h2 id=\"future-work\">Future Work</h2><p>Both the Visual Studio Code and WebStorm configurations for breakpoint debugging require attaching to an <em>existing</em> dev server. It would be great if your IDE could <em>launch</em> the dev server too, and automatically attach to it.</p><p>When you debug a Node.js program in Visual Studio Code or WebStorm, an additional <a href=\"https://nodejs.org/api/cli.html#-r---require-module\"><code>--require</code></a> hook is added to the <a href=\"https://nodejs.org/api/cli.html#node_optionsoptions\"><code>NODE_OPTIONS</code></a> environment variable. This hook registers the process’s inspector URL with the editor over a well-known socket. This means if your Node.js process spawns another Node.js child process, your editor will debug that child process too. This is how Visual Studio Code’s <a href=\"https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_javascript-debug-terminal\">JavaScript Debug Terminal</a> works, and is how editors can debug Node.js processes started by npm scripts.</p><p>Our plan is to detect this <code>--require</code> hook, and register <code>workerd</code> child processes started by Wrangler and Miniflare. This will mean you can debug <code>npm</code> launch tasks, without having to worry about starting the dev server and then attaching to it.</p><h2 id=\"start-debugging\">Start debugging!</h2><p>All the debugging tools listed above are ready to be used today. Logs and DevTools can be accessed either by logging into the Cloudflare dashboard or by downloading <a href=\"https://www.npmjs.com/package/wrangler\">Wrangler</a>, the command-line tool for the Cloudflare Developer Platform. Breakpoint debugging and Node-style logging is built into the latest version of Wrangler, and can be accessed by running <code>npx wrangler@latest dev</code> in a terminal window. Let us know what you think in the #wrangler channel on the <a href=\"https://discord.gg/cloudflaredev\">Cloudflare Developers Discord</a>, and please <a href=\"https://github.com/cloudflare/workers-sdk/issues/new/choose\">open a GitHub issue</a> if you hit any unexpected behavior.</p>",
		"id": "655b88b17f068e000a850028",
		"meta_description": "We provide many tools to help you debug Cloudflare Workers; from your local environment all the way into production. In this post, we highlight some of the tools we currently offer, and do a deep dive into one specific area - breakpoint debugging - a tool we recently added into our workerd runtime. ",
		"meta_title": null,
		"og_description": null,
		"og_image": "http://blog.cloudflare.com/content/images/2023/11/Better-debugging-for-Cloudflare-Workers--now-with-breakpoints-OG-1.png",
		"og_title": null,
		"primary_author": {
			"id": "642adf70adcb86000a716cd5",
			"name": "Adam Murray",
			"slug": "adam-murray",
			"profile_image": "http://blog.cloudflare.com/content/images/2023/04/adam_headshot-1.jpg",
			"cover_image": null,
			"bio": null,
			"website": null,
			"location": null,
			"facebook": null,
			"twitter": "@admah",
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/adam-murray/"
		},
		"primary_tag": null,
		"published_at": "2023-11-28T14:00:20.000+00:00",
		"reading_time": 9,
		"slug": "debugging-cloudflare-workers",
		"tags": [
			{
				"id": "655b88f37f068e000a85002c",
				"name": "#BLOG-2013",
				"slug": "hash-blog-2013",
				"description": null,
				"feature_image": null,
				"visibility": "internal",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/404/"
			},
			{
				"id": "5d16450341acde0011a95253",
				"name": "Cloudflare Workers",
				"slug": "workers",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/workers/"
			},
			{
				"id": "5d16450341acde0011a95204",
				"name": "Developers",
				"slug": "developers",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Developers-1.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Developers",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Developers'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developers/"
			},
			{
				"id": "65c0d31851a92e000adeae66",
				"name": "#front-page",
				"slug": "hash-front-page",
				"description": null,
				"feature_image": null,
				"visibility": "internal",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/404/"
			}
		],
		"title": "Better debugging for Cloudflare Workers, now with breakpoints",
		"twitter_description": null,
		"twitter_image": "http://blog.cloudflare.com/content/images/2023/11/Better-debugging-for-Cloudflare-Workers--now-with-breakpoints-OG.png",
		"twitter_title": null,
		"updated_at": "2024-03-01T19:27:33.000+00:00",
		"url": "http://blog.cloudflare.com/debugging-cloudflare-workers/",
		"uuid": "6504586c-f93f-4447-9174-5ebea670e5de",
		"visibility": "public"
	}
}