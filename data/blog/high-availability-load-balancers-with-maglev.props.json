{
	"browserLocale": "en-us",
	"locale": "en-us",
	"post": {
		"access": true,
		"authors": [
			{
				"id": "5d1644b141acde0011a94f67",
				"name": "Terin Stock",
				"slug": "terin-stock",
				"profile_image": "http://blog.cloudflare.com/content/images/2022/08/terin-stock.png",
				"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-141.png",
				"bio": null,
				"website": null,
				"location": null,
				"facebook": null,
				"twitter": "@terinjokes",
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/terin-stock/"
			}
		],
		"canonical_url": null,
		"codeinjection_foot": null,
		"codeinjection_head": null,
		"comment_id": "5ee0b4f6c2524901bc7ae3fa",
		"comments": false,
		"created_at": "2020-06-10T11:24:54.000+01:00",
		"custom_excerpt": "We own and operate physical infrastructure for our backend services. We need an effective way to route arbitrary TCP and UDP traffic between services and also from outside these data centers.",
		"custom_template": null,
		"email_subject": null,
		"excerpt": "We own and operate physical infrastructure for our backend services. We need an effective way to route arbitrary TCP and UDP traffic between services and also from outside these data centers.",
		"feature_image": "http://blog.cloudflare.com/content/images/2020/06/image1-3.png",
		"feature_image_alt": null,
		"feature_image_caption": null,
		"featured": false,
		"frontmatter": null,
		"html": "<figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2020/06/image1-4.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><h2 id=\"background\">Background</h2><p>We run many backend services that power our customer dashboard, APIs, and features available at our edge. We own and operate physical infrastructure for our backend services. We need an effective way to route arbitrary TCP and UDP traffic between services and also from outside these data centers.</p><p>Previously, all traffic for these backend services would pass through several layers of stateful TCP proxies and NATs before reaching an available instance. This solution worked for several years, but as we grew it caused our service and operations teams many issues. Our service teams needed to deal with drops of availability, and our operations teams had much toil when needing to do maintenance on load balancer servers.</p><h2 id=\"goals\">Goals</h2><p>With the experience with our stateful TCP proxy and NAT solutions in mind, we had several goals for a replacement load balancing service, while remaining on our own infrastructure:</p><ol><li>Preserve source IPs through routing decisions to destination servers. This allows us to support servers that require client IP addresses as part of their operation, without workarounds such as X-Forwarded-For headers or the PROXY TCP extension.</li><li>Support an architecture where backends are located across many racks and subnets. This prevents solutions that cannot be routed by existing network equipment.</li><li>Allow operation teams to perform maintenance with zero downtime. We should be able to remove load balancers at any time without causing any connection resets or downtime for services.</li><li>Use Linux tools and features that are commonplace and well-tested. There are a lot of very cool networking features in Linux we could experiment with, but we wanted to optimize for least surprising behavior for operators who do not primarily work with these load balancers.</li><li>No explicit connection synchronization between load balancers. We found that communication between load balancers significantly increased the system complexity, allowing for more opportunities for things to go wrong.</li><li>Allow for staged rollout from the previous load balancer implementation. We should be able to migrate the traffic of specific services between the two implementations to find issues and gain confidence in the system.</li></ol><h2 id=\"reaching-zero-downtime\">Reaching Zero Downtime</h2><h3 id=\"problems\">Problems</h3><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2020/06/image6-1.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>Previously, when traffic arrived at our backend data centers, our routers would pick and forward packets to one of the L4 load balancers servers it knew about.  These L4 load balancers would determine what service the traffic was for, then forward the traffic to one of the service's L7 servers.</p><p>This architecture worked fine during normal operations. However, issues would quickly surface whenever the set of load balancers changed. Our routers would forward traffic to the new set and it was very likely traffic would arrive to a different load balancer than before. As each load balancer maintained its own connection state, it would be unable to forward  traffic for these new in-progress connections. These connections would then be reset, potentially causing errors for our customers.</p><h3 id=\"consistent-hashing\">Consistent Hashing</h3><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2020/06/image5-1.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>During normal operations, our new architecture has similar behavior to the previous design. A L4 load balancer would be selected by our routers, which would then forward traffic to a service's L7 server.</p><p>There's a significant change when the set of load balancers changes. As our load balancers are now stateless, it doesn't matter which load balancer our router selects to forward traffic to, they'll end up reaching the same backend server.</p><h2 id=\"implementation\">Implementation</h2><h3 id=\"bgp\">BGP</h3><p>Our load balancer servers announce service IP addresses to our data centers’ routers using BGP, unchanged from the previous solution. Our routers choose which load balancers will receive packets based on a routing strategy called equal-cost multi-path routing (ECMP).</p><p>ECMP hashes information from packets to pick a path for that packet. The hash function used by routers is often fixed in firmware. Routers that chose a poor hashing function, or chose bad inputs, can create unbalanced network and server load, or break assumptions made by the protocol layer.</p><p>We worked with our networking team to ensure ECMP is configured on our routers to hash only based on the packet's 5-tuple—the protocol, source address and port, and destination address and port.</p><p>For maintenance, our operators can withdraw the BGP session and traffic will transparently shift to other load balancers. However, if a load balancer suddenly becomes unavailable, such as with a kernel panic or power failure, there is a short delay before the BGP keepalive mechanism fails and routers terminate the session.</p><p>It's possible for routers to terminate BGP sessions after a much shorter delay using the Bidirectional Forwarding Detection (BFD) protocol between the router and load balancers. Different routers have different limitations and restrictions on BFD that makes it difficult to use in an environment heavily using L2 link aggregation and VXLANs.</p><p>We're continuing to work with our networking team to find solutions to reduce the time to terminate BGP sessions, using tools and configurations they're most comfortable with.</p><h3 id=\"selecting-backends-with-maglev\">Selecting Backends with Maglev</h3><p>To ensure all load balancers are sending traffic to the same backends, we decided to use the <a href=\"https://research.google/pubs/pub44824/\">Maglev connection scheduler</a>. Maglev is a consistent hash scheduler hashing a 5-tuple of information from each packet—the protocol, source address and port, and destination address and port—to determine a backend server.</p><p>By being a consistent hash, the same backend server is chosen by every load balancer for a packet without needing to persist any connection state. This allows us to transparently move traffic between load balancers without requiring explicit connection synchronization between them.</p><h3 id=\"ipvs-and-foo-over-udp\">IPVS and Foo-Over-UDP</h3><p>Where possible, we wanted to use commonplace and reliable Linux features. Linux has implemented a powerful layer 4 load balancer, the IP Virtual Server (IPVS), since the early 2000s. IPVS has supported the Maglev scheduler <a href=\"https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=039f32e8cdea29b4d0680df7a83817b5ec4166e1\">since Linux 4.18</a>.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2020/06/image2-3.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>Our load balancer and application servers are spread across multiple racks and subnets. To route traffic from the load balancer we opted to use Foo-Over-UDP encapsulation.</p><p>In Foo-Over-UDP encapsulation a new IP and UDP header are added around the original packet. When these packets arrive on the destination server, the Linux kernel removes the outer IP and UDP headers and inserts the inner payload back into the networking stack for processing as if the packet had originally been received on that server.</p><p>Compared to other encapsulation methods—such as IPIP, GUE, and GENEVE—we felt Foo-Over-UDP struck a nice balance between features and flexibility. Direct Server Return, where application servers reply directly to clients and bypass the load balancers, was implemented as a byproduct of the encapsulation. There was no state associated with the encapsulation, each server only required one encapsulation interface to receive traffic from all load balancers.</p><p><strong>Example Load Balancer Configuration</strong></p><!--kg-card-begin: markdown--><pre><code># Load in the kernel modules required for IPVS and FOU.\n$ modprobe ip_vs &amp;&amp; modprobe ip_vs_mh &amp;&amp; modprobe fou\n\n# Create one tunnel between the load balancer and\n# an application server. The IPs are the machines'\n# real IPs on the network.\n$ ip link add name lbtun1 type ipip \\\nremote 192.0.2.1 local 192.0.2.2 ttl 2 \\\nencap fou encap-sport auto encap-dport 5555\n\n# Inform the kernel about the VIPs that might be announced here.\n$ ip route add table local local 198.51.100.0/24 \\\ndev lo proto kernel\n\n# Give the tunnel an IP address local to this machine.\n# Traffic on this machine destined for this IP address will\n# be sent down the tunnel.\n$ ip route add 203.0.113.1 dev lbtun1 scope link\n\n# Tell IPVS about the service, and that it should use the\n# Maglev scheduler.\n$ ipvsadm -A -t 198.51.100.1:80 -s mh\n\n# Tell IPVS about a backend for this service.\n$ ipvsadm -a -t 198.51.100.1:80 -r 203.0.113.1:80\n</code></pre>\n<!--kg-card-end: markdown--><p><strong>Example Application Server Configuration</strong></p><!--kg-card-begin: markdown--><pre><code># The kernel module may need to be loaded.\n$ modprobe fou\n\n# Setup an IPIP receiver.\n# ipproto 4 = IPIP (not IPv4)\n$ ip fou add port 5555 ipproto 4\n\n# Bring up the tunnel.\n$ ip link set dev tunl0 up\n\n# Disable reverse path filtering on tunnel interface.\n$ sysctl -w net.ipv4.conf.tunl0.rp_filter=0\n$ sysctl -w net.ipv4.conf.all.rp_filter=0\n</code></pre>\n<!--kg-card-end: markdown--><p>IPVS does not support Foo-Over-UDP as a packet forwarding method. To work around this limitation, we've created virtual interfaces that implement Foo-Over-UDP encapsulation. We can then use IPVS's direct packet forwarding method along with the kernel routing table to choose a specific interface.</p><p>Linux is often configured to ignore packets that arrive on an interface that is different from the interface used for replies. As packets will now be arriving on the virtual \"tunl0\" interface, we need to disable reverse path filtering on this interface. The kernel uses the higher value of the named and \"all\" interfaces, so you may need to decrease \"all\" and adjust other interfaces.</p><h3 id=\"mtus-and-encapsulation\">MTUs and Encapsulation</h3><p>The maximum IPv4 packet size, or maximum transmission unit (MTU), we accept from the internet is 1500 bytes. To ensure we did not fragment these packets during encapsulation we increased our internal MTUs from the default to accommodate the IP and UDP headers.</p><p>The team had underestimated the complexity of changing the MTU across all our racks of equipment. We had to adjust the MTU across all our routers and switches, of our bonded and VXLAN interfaces, and finally our Foo-Over-UDP encapsulation. Even with a carefully orchestrated rollout, and we still uncovered MTU-related bugs with our switches and server stack, many of which manifested first as issues on other parts of the network.</p><h3 id=\"node-agent\">Node Agent</h3><p>We've written a Go agent running on each load balancer that synchronizes with a control plane layer that's tracking the location of services. The agent then configures the system based on active services and available backend servers.</p><p>To configure IPVS and the routing table we're using packages built upon the <a href=\"https://github.com/mdlayher/netlink\">netlink</a> Go package. We're <a href=\"https://github.com/cloudflare/ipvs\">open sourcing</a> the IPVS netlink package we built today, which supports querying, creating and updating IPVS virtual servers, destinations, and statistics.</p><p>Unfortunately, there is no official programming interface for iptables, so we must instead execute the iptables binary. The agent computes an ideal set of iptables chains and rules, which is then reconciled with the live rules.</p><p><strong>Subset of iptables for a service</strong></p><!--kg-card-begin: markdown--><pre><code>*filter\n-A INPUT -d 198.51.100.0/24 -m comment --comment \\\n&quot;leif:nhAi5v93jwQYcJuK&quot; -j LEIFUR-LB\n-A LEIFUR-LB -d 198.51.100.1/32 -p tcp -m comment --comment \\\n&quot;leif:G4qtNUVFCkLCu4yt&quot; -m multiport --dports 80 -j LEIFUR-GQ4OKHRLCJYOWIN9\n-A LEIFUR-GQ4OKHRLCJYOWIN9 -s 10.0.0.0/8 -m comment --comment \\\n&quot;leif:G4qtNUVFCkLCu4yt&quot; -j ACCEPT\n-A LEIFUR-GQ4OKHRLCJYOWIN9 -s 172.16.0.0/12 -m comment --comment \\\n&quot;leif:0XxZ2OwlQWzIYFTD&quot; -j ACCEPT\n</code></pre>\n<!--kg-card-end: markdown--><p>The iptables output of a rule may differ significantly from the input given by our ideal rule. To avoid needing to parse the entire iptables rule in our comparisons, we store a hash of the rule, including the position in the chain, as an iptables comment. We then can compare the comment to our ideal rule to determine if we need to take any actions. On chains that are shared (such as INPUT) the agent ignores unmanaged rules.</p><h2 id=\"kubernetes-integration\">Kubernetes Integration</h2><p>We use the network load balancer described here as a <a href=\"https://www.cloudflare.com/learning/performance/cloud-load-balancing-lbaas/\">cloud load balancer</a> for Kubernetes. A controller assigns virtual IP addresses to Kubernetes services requesting a load balancer IP. These IPs get configured by the agent in IPVS. Traffic is directed to a subset of cluster nodes for handling by kube-proxy, unless the External Traffic Policy is set to \"Local\" in which case the traffic is sent to the specific backends the workloads are running on.</p><p>This allows us to have internal Kubernetes clusters that better replicate the load balancer behavior of managed clusters on cloud providers. Services running Kubernetes, such as ingress controllers, <a href=\"https://www.cloudflare.com/learning/security/api/what-is-an-api-gateway/\">API gateways</a>, and databases, have access to correct client IP addresses of load balanced traffic.</p><h2 id=\"future-work\">Future Work</h2><ul><li>Continuing a close eye on future developments of IPVS and alternatives, including nftlb and Express Data Path (XDP) and eBPF.</li><li>Migrate to nftables. The \"flat priorities\" and lack of programmable interface for iptables makes it ill-suited for including automated rules alongside rules added by operators. We hope as more projects and operations move to nftables we'll be able to switch without creating a \"blind-spot\" to operations.</li><li>Failures of a load balancer can result in temporary outages due to BGP hold timers. We'd like to improve how we're handling the failures with BGP sessions.</li><li>Investigate using Lightweight Tunnels to reduce the number of Foo-Over-UDP interfaces are needed on the load balancer nodes.</li></ul><h2 id=\"additional-reading\">Additional Reading</h2><ul><li><a href=\"https://vincent.bernat.im/en/blog/2018-multi-tier-loadbalancer\"><em>Multi-tier load-balancing with Linux</em></a>. Vincent Bernat (2018). Describes a network load balancer using IPVS and IPIP.</li><li><a href=\"https://githubengineering.com/introducing-glb/\"><em>Introducing the GitHub Load Balancer</em></a>. Joe Williams, Theo Julienne (2017). Describes a similar split layer 4 and layer 7 architecture, using consistent hashing and Foo-Over-UDP. They seemed to have limitations with IPVS that looked to have been resolved.</li><li><a href=\"https://lwn.net/Articles/614348/\"><em>Foo over UDP</em></a>. Jonathan Corbet (2014). Describes the basics of IPIP and Foo-Over-UDP, which was just introduced at the time.</li><li><a href=\"https://www.netdevconf.org/0.1/sessions/11.html\"><em>UDP encapsulation, FOU, GUE, &amp; RCO</em></a>. Tom Herbert (2015). Describes the different UDP encapsulation options.</li><li><a href=\"https://archive.nanog.org/sites/default/files/1_Saino_Hashing_On_Broken_Assumptions.pdf\"><em>Hashing on broken assumptions</em></a>. Lorenzo Saino (2017). Farther discussion on hashing difficulties with ECMP.</li><li><a href=\"https://archive.nanog.org/meetings/nanog45/presentations/Monday/Scholl_BFD_N45.pdf\"><em>BFD (Bidirectional Forwarding Detection): Does it work and is it worth it?</em></a>. Tom School (2009). Discussion on BFD with common protocols and where it can become a problem.</li></ul>",
		"id": "5ee0b4f6c2524901bc7ae3fa",
		"meta_description": "We own and operate physical infrastructure for our backend services. We need an effective way to route arbitrary TCP and UDP traffic between services and also from outside these data centers.",
		"meta_title": null,
		"og_description": null,
		"og_image": null,
		"og_title": null,
		"primary_author": {
			"id": "5d1644b141acde0011a94f67",
			"name": "Terin Stock",
			"slug": "terin-stock",
			"profile_image": "http://blog.cloudflare.com/content/images/2022/08/terin-stock.png",
			"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-141.png",
			"bio": null,
			"website": null,
			"location": null,
			"facebook": null,
			"twitter": "@terinjokes",
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/terin-stock/"
		},
		"primary_tag": {
			"id": "5d16450341acde0011a95159",
			"name": "Load Balancing",
			"slug": "loadbalancing",
			"description": null,
			"feature_image": null,
			"visibility": "public",
			"meta_title": null,
			"meta_description": null,
			"og_image": null,
			"og_title": null,
			"og_description": null,
			"twitter_image": null,
			"twitter_title": null,
			"twitter_description": null,
			"codeinjection_head": null,
			"codeinjection_foot": null,
			"canonical_url": null,
			"accent_color": null,
			"url": "http://blog.cloudflare.com/tag/loadbalancing/"
		},
		"published_at": "2020-06-10T12:00:00.000+01:00",
		"reading_time": 9,
		"slug": "high-availability-load-balancers-with-maglev",
		"tags": [
			{
				"id": "5d16450341acde0011a95159",
				"name": "Load Balancing",
				"slug": "loadbalancing",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/loadbalancing/"
			},
			{
				"id": "5d16450341acde0011a951ee",
				"name": "Product News",
				"slug": "product-news",
				"description": "Product News (EN)",
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Product-News-1.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Product News",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Product News'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/product-news/"
			},
			{
				"id": "5d16450341acde0011a95160",
				"name": "Speed & Reliability",
				"slug": "speed-and-reliability",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Speed---Reliability-1.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Speed & Reliability",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Speed & Reliability'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/speed-and-reliability/"
			}
		],
		"title": "High Availability Load Balancers with Maglev",
		"twitter_description": null,
		"twitter_image": null,
		"twitter_title": null,
		"updated_at": "2023-04-05T22:27:16.000+01:00",
		"url": "http://blog.cloudflare.com/high-availability-load-balancers-with-maglev/",
		"uuid": "c90b520c-60dc-4202-b0ba-e6e66a5b5e5f",
		"visibility": "public"
	}
}