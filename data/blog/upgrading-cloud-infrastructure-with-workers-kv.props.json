{
	"post": {
		"id": "5d16453b41acde0011a957a2",
		"uuid": "f870b8a1-cd7c-48b4-9850-2e8e8eb5d371",
		"title": "Upgrading Cloud Infrastructure Made Easier and Safer Using Cloudflare Workers and Workers KV",
		"slug": "upgrading-cloud-infrastructure-with-workers-kv",
		"html": "<p><em>This is a guest post by </em><a href=\"https://twitter.com/bcnzer\"><em>Ben Chartrand</em></a><em>, who is a Development Manager at </em><a href=\"https://www.gettimely.com/\"><em>Timely</em></a><em>. You can check out some of Ben's other Workers projects on his</em><a href=\"https://github.com/bcnzer\"><em> GitHub</em></a><em> and his </em><a href=\"https://liftcodeplay.com/\"><em>blog</em></a><em>.</em></p><p>At <a href=\"https://www.gettimely.com/\">Timely</a> we started a project to migrate our web applications from legacy Azure services to a modern PaaS offering. In theory it meant no code changes.</p><p>We decided to start with our webhooks. All our endpoints can be grouped into four categories:</p><ol><li>Integration with internal tools i.e. HelpScout, monitoring endpoint for PagerDuty</li><li>Payment confirmations</li><li>Calendar integrations i.e. Google Calendar</li><li>SMS confirmations</li></ol><p>Despite their limited number, these are vitally important. We did a lot of testing but it was clear we’d only really know if everything was working once we had production traffic. How could we migrate traffic?</p><h3 id=\"option-1\">Option 1</h3><p>Change the CNAME to point to the new hosting infrastructure. This is high risk. DNS takes time to propagate so, if we needed to roll back, it would take time. We would also be shifting over everything at once.</p><h3 id=\"option-2\">Option 2</h3><p>Use a traffic manager to shift a percentage of traffic using Cloudflare Load Balancing. We could start at, say, 5% traffic to the new infrastructure and, assuming everything appears to be ok, slowly increase the traffic.</p><p>In our case the vast majority of our traffic goes to our calendar integration endpoints. The other endpoints were unlikely to receive traffic, especially if started with just 5% of traffic. This wasn’t the best option.</p><h3 id=\"enter-option-3-cloudflare-workers-and-workers-kv\">Enter Option 3: Cloudflare Workers and Workers KV</h3><p>I remember thinking: wouldn’t it be great if we could migrate traffic one endpoint at a time? We have about 20. We could start at the low risk endpoints and progressively move our way up.</p><p>We were able to write a Cloudflare Worker script that:</p><ul><li>Detected the path i.e. <em>/webhooks/paypal</em></li><li>If the path matched one our endpoints, we checked Workers KV (Key Value storage) to see if that endpoint was enabled. This was our feature flag / setting</li><li>If it was enabled and the path matched we redirected to the new infrastructure. This involved changing the domain but otherwise keeping the request as-is i.e. <strong>webhooks.currentdomain.com/webhooks/paypal</strong> to <strong>webhooks.newinfrastructure.com/webhooks/paypal</strong></li></ul><p>The first step was to add <code>passThroughOnException</code> mentioned in <a href=\"http://blog.cloudflare.com/dogfooding-edge-workers/\">this post</a>.</p><pre><code>addEventListener('fetch', event =&gt; {\n event.passThroughOnException()\n event.respondWith(handleRequest(event))\n})</code></pre><p>Next, in the handleRequest method, I created a map of each endpoint (the path) and the corresponding Workers KV key, so I know where to look for the setting.</p><pre><code>const endpoints = new Map()\n   endpoints.set('/monitoring', 'monitoring')\n   endpoints.set('/paypal', 'payPalIpnWebHook')\n   // more endpoints\n   endpoints.set('/helpscout', 'helpScoutWebHook')</code></pre><p>Next I inspect the path for each request. If the path matches then we check the setting. If so, we set a redirect flag.</p><pre><code>   for (var [key, value] of endpoints.entries()) {\n     if (currentUrl.pathname.startsWith(key)) {\n       const flag = await WEBHOOK_SETTINGS.get(value)\n       if (flag == 1) {\n         console.log(`redirected: ${key}`)\n         redirect = true\n         break\n       }\n     }\n   }</code></pre><p>If the redirect flag is true we change the hostname in the request but leave everything else as-is. This involves creating a new Request object. If we are not redirecting we fetch the request.</p><pre><code>   // Handle the request\n   let response = null\n   if (redirect) {\n     // Redirect to the new infra\n     const newUrl = request.url.replace(currentHost, newHost)\n     const init = {\n         method: request.method,\n         headers: request.headers,\n         body: request.body\n     }\n     console.log(newUrl)\n     const redirectedRequest = new Request(newUrl, init)\n     console.log(redirectedRequest)\n\n     response = await fetch(redirectedRequest)\n   } else {\n     // Handle with the existing infra\n     response = await fetch(request)\n   }\n</code></pre><h3 id=\"complete-code\">Complete Code</h3><pre><code>addEventListener('fetch', event =&gt; {\n event.passThroughOnException()\n event.respondWith(handleRequest(event))\n})\n\nfunction postLog(data) {\n return fetch(\"http://logs-01.loggly.com/inputs/&lt;my id&gt;/tag/http/\", {\n   method: \"POST\",\n   body: data\n })\n}\n\nasync function handleRequest(event) {\n try {\n   const request = event.request\n   const currentHost = 'webhooks.currentdomain.com'\n   const newHost = 'webhooks.newinfrastructure.com'\n\n   const currentUrl = new URL(request.url)\n   let redirect = false\n\n   // This is a map of the paths and the corresponding KV entry\n   const endpoints = new Map()\n   endpoints.set('/monitoring', 'monitoring')\n   endpoints.set('/paypal', 'payPalIpnWebHook')\n   // more endpoints\n   endpoints.set('/helpscout', 'helpScoutWebHook')\n\n   for (var [key, value] of endpoints.entries()) {\n     if (currentUrl.pathname.startsWith(key)) {\n       const flag = await WEBHOOK_SETTINGS.get(value)\n       if (flag == 1) {\n         console.log(`redirected: ${key}`)\n         redirect = true\n         break\n       }\n     }\n   }\n\n   // Handle the request\n   let response = null\n   if (redirect) {\n     // Redirect to the new infra\n     const newUrl = request.url.replace(currentHost, newHost)\n     const init = {\n         method: request.method,\n         headers: request.headers,\n         body: request.body\n     }\n     console.log(newUrl)\n     const redirectedRequest = new Request(newUrl, init)\n     console.log(redirectedRequest)\n\n     response = await fetch(redirectedRequest)\n   } else {\n     // Handle with the existing infra\n     response = await fetch(request)\n   }\n\n   return response\n } catch (error) {\n   event.waitUntil(postLog(error))\n   throw error\n }\n}\n</code></pre><h3 id=\"why-use-workers-kv\">Why use Workers KV?</h3><p>We could have written everything as a hard coded script, which was updated each time to enable/disable redirection of traffic. This would require the team to make code changes and deploy the worker every time we wanted to make a change.</p><p>Using Workers KV, I enabled any member of the team to enable/disable endpoints using the Cloudflare API. To make things easier I created a Postman collection and shared it.</p><h3 id=\"go-live-problems-and-solutions-\">Go Live Problems - and Solutions!</h3><p>We went live with our first endpoint. The Workers script and KV worked fine but I noticed a small number of exceptions were being reported in Workers &gt; Worker Status.</p><p></p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2019/01/Chart1.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p></p><p>Cloudflare provides <a href=\"https://www.google.com/url?q=https://developers.cloudflare.com/workers/writing-workers/debugging-tips/&amp;sa=D&amp;ust=1547151883991000\">Debugging Tips</a>. I followed the section “Make subrequests to your debug server” and decided to incorporate <a href=\"https://www.google.com/url?q=https://www.loggly.com/&amp;sa=D&amp;ust=1547151883991000\">Loggly</a>. I could now catch the exceptions and send it to Loggly by running a POST using <code>fetch</code> to the URL provided by Loggly. With this I quickly determined what the problem was and corrected the issue.</p><p>Another problem that came up was a plethora of 403s. This was highly visible in the Workers &gt; Status Code graph (the green).</p><p></p><p></p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2019/01/Chart2.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p></p><p>Turns out our IIS box had <a href=\"https://docs.microsoft.com/en-us/iis/configuration/system.webserver/security/dynamicipsecurity/denybyrequestrate\">rate limiting</a> setup. Instead of returning a 429 (Too Many Requests), it returned 403 (Forbidden). Phew - it wasn’t an issue with my Worker or the new infrastructure!</p><p>We could have set up the rate limiting on the new infrastructure but we instead opted for <a href=\"https://www.cloudflare.com/rate-limiting/\">Cloudflare Rate Limiting</a>. It was cheap, easy to setup and meant the blocked requests didn’t even hit our infrastructure in the first place.</p><h3 id=\"where-to-from-here\">Where to From Here?</h3><p>As I write this we’ve transitioned all traffic. All endpoints are enabled. Once we’re ready to decommission the old infrastructure we will:</p><ul><li>Change the CNAME to point to the new infrastructure</li><li>Disable the worker</li><li>Celebrate!</li></ul><p>We’ll then move onto our new web application, such as our API or main web app. We’re likely to use one of two options:</p><ol><li>Use the traffic manager to migrate a percentage of traffic</li><li>Migrate traffic on a per-customer basis. It would be similar to above except we would store a setting per-customer (KV would store a setting per customer and we know the customer by the request header, which would have the customer ID). We could, for example, start with internal test accounts, then our beta users and, at the very end, migrate our VIPs.</li></ol><p></p><p>Upgrading Cloud Infrastructure Made Easier and Safer Using Cloudflare Workers and Workers KV</p>",
		"comment_id": "5c379c41d2cc5400c0702152",
		"feature_image": "http://blog.cloudflare.com/content/images/2019/01/workers-kv-for-jgc-s-post-@2x.png",
		"featured": false,
		"visibility": "public",
		"created_at": "2019-01-10T19:25:53.000+00:00",
		"updated_at": "2024-02-12T20:28:54.000+00:00",
		"published_at": "2019-01-10T22:00:00.000+00:00",
		"custom_excerpt": "At Timely we started a project to migrate our web applications from legacy Azure services to a modern PaaS offering. In theory it meant no code changes. We decided to start with our webhooks. ",
		"codeinjection_head": null,
		"codeinjection_foot": null,
		"custom_template": null,
		"canonical_url": null,
		"authors": [
			{
				"id": "5d1644b141acde0011a94f96",
				"name": "Guest Author",
				"slug": "guest-author",
				"profile_image": "https://blog-cloudflare-com-assets.storage.googleapis.com/2019/10/Screen-Shot-2019-10-09-at-11.21.59-AM.png",
				"cover_image": "http://blog.cloudflare.com/content/images/2019/05/general@2x-9.png",
				"bio": null,
				"website": null,
				"location": null,
				"facebook": null,
				"twitter": null,
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/guest-author/"
			}
		],
		"tags": [
			{
				"id": "5d16450341acde0011a95253",
				"name": "Cloudflare Workers",
				"slug": "workers",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/workers/"
			},
			{
				"id": "5d16450341acde0011a95278",
				"name": "Cloudflare Workers KV",
				"slug": "cloudflare-workers-kv",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/cloudflare-workers-kv/"
			},
			{
				"id": "5d16450341acde0011a95252",
				"name": "Serverless",
				"slug": "serverless",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Serverless.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Serverless",
				"meta_description": "Cloudflare blog posts tagged 'serverless'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/serverless/"
			},
			{
				"id": "5d16450341acde0011a95204",
				"name": "Developers",
				"slug": "developers",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Developers-1.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Developers",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Developers'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developers/"
			},
			{
				"id": "64a3e2b834124c000b00b717",
				"name": "Developer Platform",
				"slug": "developer-platform",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developer-platform/"
			}
		],
		"primary_author": {
			"id": "5d1644b141acde0011a94f96",
			"name": "Guest Author",
			"slug": "guest-author",
			"profile_image": "https://blog-cloudflare-com-assets.storage.googleapis.com/2019/10/Screen-Shot-2019-10-09-at-11.21.59-AM.png",
			"cover_image": "http://blog.cloudflare.com/content/images/2019/05/general@2x-9.png",
			"bio": null,
			"website": null,
			"location": null,
			"facebook": null,
			"twitter": null,
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/guest-author/"
		},
		"primary_tag": {
			"id": "5d16450341acde0011a95253",
			"name": "Cloudflare Workers",
			"slug": "workers",
			"description": null,
			"feature_image": null,
			"visibility": "public",
			"meta_title": null,
			"meta_description": null,
			"og_image": null,
			"og_title": null,
			"og_description": null,
			"twitter_image": null,
			"twitter_title": null,
			"twitter_description": null,
			"codeinjection_head": null,
			"codeinjection_foot": null,
			"canonical_url": null,
			"accent_color": null,
			"url": "http://blog.cloudflare.com/tag/workers/"
		},
		"url": "http://blog.cloudflare.com/upgrading-cloud-infrastructure-with-workers-kv/",
		"excerpt": "At Timely we started a project to migrate our web applications from legacy Azure services to a modern PaaS offering. In theory it meant no code changes. We decided to start with our webhooks. ",
		"reading_time": 5,
		"access": true,
		"comments": false,
		"og_image": null,
		"og_title": null,
		"og_description": null,
		"twitter_image": null,
		"twitter_title": null,
		"twitter_description": null,
		"meta_title": null,
		"meta_description": null,
		"email_subject": null,
		"frontmatter": null,
		"feature_image_alt": null,
		"feature_image_caption": null
	},
	"locale": "en-us"
}