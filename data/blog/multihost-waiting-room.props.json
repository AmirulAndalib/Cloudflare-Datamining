{
	"post": {
		"id": "651a79fc4c31ae000aa0ebf8",
		"uuid": "268f7005-196d-45a7-a825-84ca92bc2b02",
		"title": "Waiting Room adds multi-host and path coverage, unlocking broader protection and multilingual setups",
		"slug": "multihost-waiting-room",
		"html": "<!--kg-card-begin: markdown--><p><small>This post is also available in <a href=\"http://blog.cloudflare.com/ja-jp/multihost-waiting-room-ja-jp/\">日本語</a>, <a href=\"http://blog.cloudflare.com/fr-fr/multihost-waiting-room-fr-fr/\">Français</a>, <a href=\"http://blog.cloudflare.com/es-es/multihost-waiting-room-es-es/\">Español</a> and <a href=\"http://blog.cloudflare.com/de-de/multihost-waiting-room-de-de/\">Deutsch</a>.</small></p>\n<!--kg-card-end: markdown--><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2023/10/image4.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"1300\" height=\"600\"></figure><p><a href=\"https://www.cloudflare.com/application-services/products/waiting-room/\">Cloudflare Waiting Room</a> protects sites from overwhelming traffic surges by placing excess visitors in a fully customizable virtual waiting room, admitting them dynamically as spots become available. Instead of throwing error pages or delivering poorly-performing site pages, Waiting Room empowers customers to take control of their end-user experience during unmanageable traffic surges.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2023/10/image1.png\" class=\"kg-image\" alt=\"Customize the look and feel of your waiting room to enhance the end user experience!\" loading=\"lazy\" width=\"1440\" height=\"1024\"></figure><p>A key decision customers make when setting up a waiting room is what pages it will protect. Before now, customers could select one hostname and path combination to determine what pages would be covered by a waiting room. Today, we are thrilled to announce that Waiting Room now supports coverage of multiple hostname and path combinations with a single waiting room, giving customers more flexibility and offering broader site coverage without interruptions to end-user flows. This new capability is available to all Enterprise customers with an Advanced Purchase of Waiting Room.</p><h3 id=\"waiting-room-site-placement\">Waiting Room site placement</h3><p>As part of the simple, no-coding-necessary process for deploying a waiting room, customers specify a hostname and path combination to indicate which pages are covered by a particular waiting room. When a site visitor makes a preliminary request to that hostname and path or any of its subpaths, they will be issued a waiting room cookie and either be admitted to the site or placed in a waiting room if the site is at capacity.</p><p>Last year, we added <a href=\"http://blog.cloudflare.com/waiting-room-bypass-rules/\">Waiting Room Bypass Rules</a>, giving customers many options for creating exceptions to this hostname and path coverage. This unlocked capabilities such as User Agent Bypassing, geo-targeting, URL exclusions, and administrative IP bypassing. It also allowed for some added flexibility regarding which pages a waiting room would apply to on a customer’s site by adding the ability to exclude URLs, paths, and query strings. While this update allowed for greater specificity regarding which traffic should be gated by Waiting Room, it didn’t offer the broader coverage that many customers still needed to protect greater portions of their sites with a single waiting room.</p><h3 id=\"why-customers-needed-broader-waiting-room-coverage\">Why customers needed broader Waiting Room coverage</h3><p>Let’s review some simple yet impactful examples of why this broader coverage option was important for our customers. Imagine you have an online store, example.com, and you want to ensure that a single waiting room covers the entire customer journey — from the homepage, to product browsing, to checkout. Many sites would delineate these steps in the flow using paths: example.com/, example.com/shop/product1, example.com/checkout. Because Waiting Room assumes an implied wildcard at the end of a waiting room’s configured path, this use case was already satisfied for these sites. Thus, placing a waiting room at example.com/ would cover all the URLs associated with every step of this customer journey. In this setup, once a site visitor has passed the waiting room, they would not be re-queued at any step in their user flow because they are still using the same waiting room’s cookie, which indicates to Waiting Room that they are the same user between URLs.</p><p>However, many sites delineate different steps of this type of shopping flow using subdomains instead of or as well as paths. For example, many sites will have their checkout page on a different subdomain, such as checkout.example.com. Before now, if a customer had this site structure and wanted to protect their entire site with a single waiting room, they would have needed to deploy a waiting room at example.com/ and another at checkout.example.com/. This option was not ideal for many customers because a site visitor could be queued at two different parts of the same customer journey. This is because the waiting room at checkout.example.com/ would count the same visitor as a different user than the waiting room covering example.com/.</p><p>That said, there are cases where it is wise to separate waiting rooms on a single site. For example, a ticketing website could place a waiting room at its apex domain (example.com) and distinct waiting rooms with pre-queues on pages for specific events (example.com/popular_artist_tour). The waiting room set at example.com/ ensures that the main point of entry to the site does not get overwhelmed and crash when ticket sales for any one event open. The waiting room placed on the specific event page ensures that traffic for a single event can start queuing ahead of the event without impacting traffic going to other parts of the site.</p><p>Ultimately, whether a customer wants one or multiple waiting rooms to protect their site, we wanted to give our customers the flexibility to deploy Waiting Room however was best for their use cases and site structure. We’re thrilled to announce that Waiting Room now supports multi-hostname and path coverage with a single waiting room!</p><h3 id=\"getting-started-with-multi-host-and-path-coverage\">Getting started with multi-host and path coverage</h3><p>Customers can now configure a waiting room on multiple hostname and path combinations — or routes — belonging to the same zone. To do so, navigate to Traffic &gt; Waiting Room and select Create. The name of your domain will already be populated. To add additional routes to your waiting room configuration, select Add Hostname and Path. You can then enter another hostname and path to be covered by the same waiting room. Remember, there is an implied wildcard after each path. Therefore, creating a waiting room for each URL you want your waiting room to cover is unnecessary. Only create additional routes for URLs that wouldn’t be covered by the other hostname and path combinations you have already entered.</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"http://blog.cloudflare.com/content/images/2023/10/image3.png\" class=\"kg-image\" alt=\"Add multiple hostname and path combinations to your waiting room by selecting Add Hostname and Path\" loading=\"lazy\" width=\"1910\" height=\"670\"></figure><p>When deploying a waiting room that covers multiple hostname and path combinations, you must create a unique cookie name for this waiting room (more on that later!). Then, proceed with the <a href=\"https://developers.cloudflare.com/waiting-room/how-to/create-waiting-room/\">same workflow</a> as usual to deploy your waiting room.</p><h3 id=\"deploying-a-multi-language-waiting-room\">Deploying a multi-language waiting room</h3><p>A frequent customer request was the ability to cover a multi-language site with a single waiting room — offering different text per language while counting all site traffic toward the same waiting room limits. There are various ways a site can be structured to delineate between different language options, but the two most common are either by subdomain or path. For a site that uses path delineation, this could look like example.com/en and example.com/es for English and Spanish, respectively. For a site using subdomain delineation, this could look like en.example.com/ and es.example.com/. Before multihost Waiting Room coverage, the subdomain variation would not have been able to be covered by a single waiting room.</p><p>Waiting Room’s existing configuration options already supported the path variation. However, this was only true if the customer wanted to gate the entire site, which they could do by placing the waiting room at example.com/. Many e-commerce customers asked for the ability to gate different high-demand product pages selling the same product but with different language options. For instance, consider example.com/en/product_123 and example.com/es/product_123, where the customer wants the same waiting room and traffic limits to cover both URLs. Before now, this would not have been possible without some complex bypass rule logic.</p><p>Now, customers can deploy a waiting room that accommodates either the subdomain or path approach to structuring a multi-language site. The only remaining step is setting up your waiting room to serve different languages when a user is queued in a waiting room. This can be achieved by constructing a template that reads the URL to determine the locale and define the appropriate translations for each of the locales within the template.</p><p>Here is an example of a template that determines the locale from the URL path, and renders the translated text:</p><!--kg-card-begin: markdown--><pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Waiting Room powered by Cloudflare&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;section&gt;\n      &lt;h1 id=&quot;inline-msg&quot;&gt;\n        You are now in line.\n      &lt;/h1&gt;\n      &lt;h1 id=&quot;patience-msg&quot;&gt;\n        Thank you for your patience.\n      &lt;/h1&gt;\n    &lt;/section&gt;\n    &lt;h2 id=&quot;waitTime&quot;&gt;&lt;/h2&gt;\n\n    &lt;script&gt;\n      var locale = location.pathname.split(&quot;/&quot;)[1] || &quot;en&quot;;\n      var translations = {\n        &quot;en&quot;: {\n          &quot;waittime_60_less&quot;: &quot;Your estimated wait time is {{waitTime}} minute.&quot;,\n          &quot;waittime_60_greater&quot;: &quot;Your estimated wait time is {{waitTimeHours}} hours and {{waitTimeHourMinutes}} minutes.&quot;,\n          &quot;inline-msg&quot;: &quot;You are now in line.&quot;,\n          &quot;patience-msg&quot;: &quot;Thank you for your patience.&quot;,\n        },\n        &quot;es&quot;: {\n          &quot;waittime_60_less&quot;: &quot;El tiempo de espera estimado es {{waitTime}} minuto.&quot;,\n          &quot;waittime_60_greater&quot;: &quot;El tiempo de espera estimado es {{waitTimeHours}} de horas y {{waitTimeHourMinutes}} minutos.&quot;,\n          &quot;inline-msg&quot;: &quot;Ahora se encuentra en la fila de espera previa.&quot;,\n          &quot;patience-msg&quot;: &quot;Gracias por su paciencia.&quot;,\n        }\n      };\n\n      {{#waitTimeKnown}}\n      var minutes = parseInt( {{waitTime}} , 10);\n      var time = document.getElementById('waitTime');\n\n      if ( minutes &lt; 61) {\n        time.innerText = translations[locale][&quot;waittime_60_less&quot;]\n      } else {\n        time.innerText = translations[locale][&quot;waittime_60_greater&quot;]\n      }\n      {{/waitTimeKnown}}\n\n      // translate template text for each of the elements with “id” suffixed with “msg”\n      for (const msg of [&quot;inline-msg&quot;, &quot;patience-msg&quot;]) {\n        const el = document.getElementById(msg);\n        if (el == null) continue;\n        el.innerText = translations[locale][msg];\n      }\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<!--kg-card-end: markdown--><p>Here’s how the template works: given a site distinguishes different locales with various paths such as <code>/en/product_123</code> or <code>/es/product_123</code> in the <code>&lt;script /&gt;</code> body after the rendering the page, the locale is extracted from the <code>location.pathname</code> via <code>locale = location.pathname.split(“/”)[1]</code>. If there isn’t a locale specified within the <code>translations</code> object we default it to “en”. For example, if a user visits example.com/product_123, then by default render the English text template.</p><p>Similarly, in order to support a multi-language waiting room for sites that delineate site structure via subdomain, it would only require you to update how you extract the locale from the URL. Instead of looking at the <code>pathname</code> we look at the <code>hostname</code> property of the <code>window.location</code> object like <code>locale = location.hostname.split(“.”)[0]</code>, given, we have site structure as following: en.example.com, es.example.com.</p><p>The above code is a pared down example of starter templates we have added to our <a href=\"https://developers.cloudflare.com/waiting-room/how-to/customize-waiting-room/#multiple-language-support\">developer documentation</a>, which we have included to make it easier for you to get started with a multi-language waiting room. You can download these templates and edit them to have the look and feel aligned with your site and with the language options your site offers.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"http://blog.cloudflare.com/content/images/2023/10/image2.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"1999\" height=\"1197\"><figcaption>This is an example of the starter template provided in dev docs. This waiting room is in Queue-all mode and displays the Spanish text when the user visits example.com/es/product_123.</figcaption></figure><p>These templates can further be expanded to include other languages by adding translations to the `translations` object for each of the locales. Thus, a single template is able to serve multiple languages depending on whatever the locale the site is being served as either via subdomain or path.</p><h3 id=\"how-we-handle-cookies-with-a-multihostname-and-path-waiting-room\">How we handle cookies with a multihostname and path waiting room</h3><p>The waiting room assigns a <code>__cfwaitingroom</code> <a href=\"https://developers.cloudflare.com/waiting-room/reference/waiting-room-cookie/\">cookie</a> to each user to manage the state of the user that determines the position of the user in line <a href=\"http://blog.cloudflare.com/building-waiting-room-on-workers-and-durable-objects/#:~:text=What%20is%20in%20the%20cookie%20returned%20to%20an%20end%20user%3F\">among other properties</a> needed to make the queueing decisions for the user. Traditionally, for a single hostname and path configuration it was trivial to just set the cookie as <code>__cfwaitingroom=[cookie-value]; Domain=example.com; Path=/es/product_123</code>. This ensured that when the page refreshed it would send us the same Waiting Room cookie for us to examine and update. However, this became non-trivial when we wanted to share the same cookie across different subdomain or path combinations, for example, on <code>example.com/en/product_123</code>.</p><h3 id=\"approaches-to-setting-multiple-cookies\">Approaches to setting multiple cookies</h3><p>There were two approaches that we brainstormed and evaluated to allow the sharing of the cookie for the same waiting room. </p><p>The first approach we considered was to issue multiple <code>Set-Cookie</code> headers in the HTTP response. For example, in the multi-language example above, we could issue the following in the response header:</p><!--kg-card-begin: markdown--><pre><code>Set-Cookie: __cfwaitingroom=[cookie-value]…Domain=example.com; Path=/en/product_123 …\nSet-Cookie: __cfwaitingroom=[cookie-value]...Domain=example.com; Path=/es/product_123 …\n</code></pre>\n<!--kg-card-end: markdown--><p>This approach would allow us to handle the multiple hostnames and paths for the same waiting room. However, it does not present itself as a very scalable solution. Per <a href=\"https://datatracker.ietf.org/doc/html/rfc6265#section-5.2\">RFC6265</a>, there isn’t a strict limit defined in the specification, browsers have their own implementation-specific limits. For example, Chrome allows the response header to grow up to <a href=\"https://source.chromium.org/chromium/chromium/src/+/main:net/http/http_stream_parser.h;l=168;drc=4cc7ba01d3c5dc996ddc98f9d0bd709e3d5bbfd3?q=ERR_RESPONSE_HEADERS_TOO_BIG&amp;ss=chromium\">256K bytes</a> before throwing the transaction with ERR_RESPONSE_HEADERS_TOO_BIG. Additionally, in this case, the response header would grow proportionally to the number of unique hostname and path combinations, and we would be redundantly repeating the same cookie value N (where N is the number of additional routes) number of times. While this approach would have allowed us to effectively handle a bounded list of hostname and path combinations that need to be set, it was not ideal for cases where we can expect more than a handful routes for a particular site.</p><p>The second approach that we considered and chose to move forward with was to set the cookie on the apex domain (or the most common subdomain). In other words, we would figure out the most common subdomain from the list of routes and use that as the domain. Similarly, for the paths, this would entail determining the least common prefix from the list of paths and use that as the value to be set on the path attribute. For example, consider a waiting room with the following two routes configured, a.example.com/shoes/product_123 and b.example.com/shoes/product_456.</p><p>To determine the domain that would be set for the cookie, we can see that <code>example.com</code> is the most common subdomain among the list of domains. Applying the most common subdomain algorithm, we would get <code>example.com</code> as the domain. Applying the least common prefix algorithm on the set of paths, <code>/shoes/product_123</code> and <code>/shoes/product_456</code>, we would get <code>/shoes</code> as the path. Thus, the set-cookie header would be the following:</p><!--kg-card-begin: markdown--><pre><code>Set-Cookie: … __cfwaitingroom=[cookie-value]; Domain=example.com; Path=/shoes …\n</code></pre>\n<!--kg-card-end: markdown--><p>Now, when a visitor accesses any of the pages covered by this waiting room, we can guarantee Waiting Room receives the right cookie and there will only be Set-Cookie included in the response header.</p><p>However, we are still not there yet. Although we are able to identify the common subdomain (or apex domain) and common path prefix, there would still be a problem if routes from one waiting room would overlap with another waiting room. For example, say we configure two waiting rooms for the same site where we are selling our special shoes:</p><!--kg-card-begin: html--><p>Waiting Room A<br />\n&nbsp; &nbsp; a.example.com/shoes/product_123<br />\n&nbsp; &nbsp; b.example.com/shoes/product_456</p>\n\n<p>Waiting Room B<br />\n&nbsp; &nbsp; c.example.com/shoes/product_789<br />\n&nbsp; &nbsp; d.example.com/shoes/product_012</p><!--kg-card-end: html--><p>If we apply the same algorithm as described above, we would get the same domain and path properties set for the two cookies. For Waiting Room A, the domain would be <code>example.com</code> and the path would be <code>/shoes</code>. Similarly, for Waiting Room B, the most common subdomain would also be example.com and least common path prefix would be <code>/shoes</code>. This would effectively prevent us from distinguishing the two cookies and route the visitor to the right waiting room. In order to solve the issue of overlapping cookie names, we introduced the requirement of setting a custom suffix that is unique to the customer’s zone. This is why it is required to provide a custom cookie suffix when configuring a waiting room that covers multiple hostnames or paths. Therefore, if Waiting Room A was assigned cookie suffix “a” and Waiting Room B was assigned cookie suffix “b”, the two <code>Set-Cookie</code> definitions would look like the following:</p><p><br><strong>Waiting Room A</strong></p><!--kg-card-begin: markdown--><pre><code>Set-Cookie: __cfwaitingroom_a=[cookie-value]; Domain=example.com; Path=/shoes\n</code></pre>\n<!--kg-card-end: markdown--><p><strong>Waiting Room B</strong></p><!--kg-card-begin: markdown--><pre><code>Set-Cookie: __cfwaitingroom_b=[cookie-value]; Domain=example.com; Path=/shoes\n</code></pre>\n<!--kg-card-end: markdown--><p>When a visitor makes a request to any pages where the two different waiting rooms are configured, Waiting Room can distinguish and select which cookie corresponds to the given request and use this to determine which waiting room’s settings apply to that user depending on where they are on the site.</p><p>With the addition of multihost and multipath Waiting Room coverage, we’re thrilled to offer more flexible options for incorporating Waiting Room into your site, giving your visitors the best experience possible while protecting your site during times of high traffic. Make sure your site is always protected from traffic surges. Try out <a href=\"https://dash.cloudflare.com/?to=/:account/:zone/traffic/waiting-rooms\">Waiting Room</a> today or <a href=\"https://www.cloudflare.com/application-services/products/waiting-room/\">reach out to us</a> to learn more about the Advanced Waiting Room!</p>",
		"comment_id": "651a79fc4c31ae000aa0ebf8",
		"feature_image": "http://blog.cloudflare.com/content/images/2023/10/cloudflare-waiting-room-hero-illustration-3.png",
		"featured": false,
		"visibility": "public",
		"created_at": "2023-10-02T09:06:20.000+01:00",
		"updated_at": "2023-10-19T08:31:07.000+01:00",
		"published_at": "2023-10-04T14:00:44.000+01:00",
		"custom_excerpt": "Today, we are thrilled to announce that Waiting Room now supports coverage of multiple hostname and path combinations with a single waiting room, giving customers more flexibility and offering broader site coverage without interruptions to end-user flows",
		"codeinjection_head": null,
		"codeinjection_foot": null,
		"custom_template": null,
		"canonical_url": null,
		"authors": [
			{
				"id": "6239dbaf216a93000b53cd99",
				"name": "Arielle Olache",
				"slug": "arielle",
				"profile_image": "http://blog.cloudflare.com/content/images/2022/03/20181111-144427-Original-1-.jpg",
				"cover_image": null,
				"bio": null,
				"website": null,
				"location": null,
				"facebook": null,
				"twitter": null,
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/arielle/"
			},
			{
				"id": "651ad5ea4c31ae000aa0eda1",
				"name": "Yawar Jamal",
				"slug": "yawar",
				"profile_image": "http://blog.cloudflare.com/content/images/2023/10/dp.jpg",
				"cover_image": null,
				"bio": null,
				"website": null,
				"location": null,
				"facebook": null,
				"twitter": null,
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/yawar/"
			}
		],
		"tags": [
			{
				"id": "651a7c184c31ae000aa0ec0d",
				"name": "#BLOG-2121",
				"slug": "hash-blog-2121",
				"description": null,
				"feature_image": null,
				"visibility": "internal",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/404/"
			},
			{
				"id": "600a4c1d0dd44e01ba8322d1",
				"name": "Waiting Room",
				"slug": "waiting-room",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/waiting-room/"
			},
			{
				"id": "5d16450341acde0011a9516e",
				"name": "Always Online",
				"slug": "always-online",
				"description": "Always Online",
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/always-online/"
			},
			{
				"id": "5d16450341acde0011a9516d",
				"name": "Traffic",
				"slug": "traffic",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/traffic/"
			}
		],
		"primary_author": {
			"id": "6239dbaf216a93000b53cd99",
			"name": "Arielle Olache",
			"slug": "arielle",
			"profile_image": "http://blog.cloudflare.com/content/images/2022/03/20181111-144427-Original-1-.jpg",
			"cover_image": null,
			"bio": null,
			"website": null,
			"location": null,
			"facebook": null,
			"twitter": null,
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/arielle/"
		},
		"primary_tag": null,
		"url": "http://blog.cloudflare.com/multihost-waiting-room/",
		"excerpt": "Today, we are thrilled to announce that Waiting Room now supports coverage of multiple hostname and path combinations with a single waiting room, giving customers more flexibility and offering broader site coverage without interruptions to end-user flows",
		"reading_time": 11,
		"access": true,
		"comments": false,
		"og_image": "http://blog.cloudflare.com/content/images/2023/10/Waiting-Room-adds-multi-host-and-path-coverage--unlocking-broader-protection-and-multilingual-setups-OG-1.png",
		"og_title": null,
		"og_description": null,
		"twitter_image": "http://blog.cloudflare.com/content/images/2023/10/Waiting-Room-adds-multi-host-and-path-coverage--unlocking-broader-protection-and-multilingual-setups-OG.png",
		"twitter_title": null,
		"twitter_description": null,
		"meta_title": null,
		"meta_description": "Today, we are thrilled to announce that Waiting Room now supports coverage of multiple hostname and path combinations with a single waiting room, giving customers more flexibility and offering broader site coverage without interruptions to end-user flows.",
		"email_subject": null,
		"frontmatter": null,
		"feature_image_alt": null,
		"feature_image_caption": null
	},
	"locale": "en-us"
}