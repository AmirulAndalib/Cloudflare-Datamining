{
	"locale": "en-us",
	"post": {
		"id": "5d16453b41acde0011a95754",
		"uuid": "9cdbd3e6-420d-40d0-bc46-202cf79ebce5",
		"title": "Custom Load Balancing With Cloudflare Workers",
		"slug": "update-response-headers-on-cloudflare-workers",
		"html": "<p><em>The following is a guest post by <a href=\"https://www.linkedin.com/in/jayaprabhakar/\">Jayaprabhakar Kadarkarai</a>, Developer of <a href=\"https://www.codiva.io/\">Codiva.io</a>, an Online IDE used by computer science students across the world. He works full stack to deliver low latency and scalable web applications. </em></p><p>Have you launched your website? Getting a lot of traffic? And you are planning to add more servers? You’ll need load balancing to maintain the scalability and reliability of your website. Cloudflare offers powerful <a href=\"https://www.cloudflare.com/load-balancing/\">Load Balancing</a>, but there are situations where off-the-shelf options can’t satisfy your specific needs. For those situations, you can write your own Cloudflare Worker.</p><p>In this post, we’ll learn about load balancers and how to set them up at a low cost with Cloudflare Service Workers.</p><p>This post assumes you have a basic understanding of JavaScript, as that’s the language used to write a Cloudflare Worker.</p><h3 id=\"the-basic-pattern\">The Basic Pattern</h3><p>The basic pattern starts with adding ‘fetch’ event listener to intercept the requests. You can configure which requests to intercept on the Cloudflare dashboard or using the <a href=\"https://developers.cloudflare.com/workers/api/#create-a-route\">Cloudflare API</a>.</p><p>Then, modify the hostname of the URL and send the request to the new host.</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">addEventListener('fetch', event =&gt; {\n  var url = new URL(event.request.url);\n\n  // https://example.com/path/ to https://myorigin.example.com/path\n  url.hostname = 'myorigin.' + url.hostname\n  \n  event.respondWith(fetch(url));\n});\n</code></pre>\n<!--kg-card-end: markdown--><p>This doesn’t do anything useful yet, but this is the basic pattern that will be used in the rest of the examples.</p><h3 id=\"load-balancer-with-random-routing\">Load Balancer with Random Routing</h3><p>When you have a list of origin servers, pick a random host to route to.</p><p>This is a very basic load balancing technique to evenly distribute the traffic across all origin servers.</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">var hostnames = [\n  &quot;0.example.com&quot;,\n  &quot;1.example.com&quot;,\n  &quot;2.example.com&quot;\n];\n\naddEventListener('fetch', event =&gt; {\n  var url = new URL(event.request.url);\n\n  // Randomly pick the next host \n  url.hostname = hostnames[getRandomInt(hostnames.length)];\n  \n  event.respondWith(fetch(url));\n});\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * max);\n}\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"load-balancer-with-fallback\">Load Balancer with Fallback</h3><p>What about when a host is down? A simple fallback strategy is to route the request to a different host. Use this only if you know the requests are idempotent. In general, this means GET requests are okay, but you might wish to handle POST requests another way.</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">addEventListener('fetch', event =&gt; {\n\n  // Randomly pick the primary host\n  var primary = getRandomInt(hostnames.length);\n\n  var primaryUrl = new URL(event.request.url);\n  primaryUrl.hostname = hostnames[primary];\n\n  var timeoutId = setTimeout(function() {\n    var backup;\n    do {\n        // Naive solution to pick a backup host\n        backup = getRandomInt(hostnames.length);\n    } while(backup === primary);\n\n    var backupUrl = new URL(event.request.url);\n    backupUrl.hostname = hostnames[backup];\n\n    event.respondWith(fetch(backupUrl));\n  }, 2000 /* 2 seconds */);\n\n  fetch(primaryUrl)\n    .then(function(response) {\n        clearTimeout(timeoutId);\n        event.respondWith(response);\n    });\n});\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"geographic-routing\">Geographic Routing</h3><p>Cloudflare adds <a href=\"https://support.cloudflare.com/hc/en-us/articles/200168236-What-does-Cloudflare-IP-Geolocation-do-\">CF-IPCountry</a> header to all requests once Cloudflare IP Geolocation is enabled.</p><p>You can access it using:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">var countryCode = event.request.headers.get(‘CF-IPCountry’);\n</code></pre>\n<!--kg-card-end: markdown--><p>We can use the countryCode to route requests from different locations to different servers in different regions. </p><p>For example, 80% of the traffic to Codiva.io is from the US and India. So, I have servers in two different regions (Oregon, USA; and Mumbai, India). Requests from India and  other countries near it are routed to servers in India. All other requests are routed to the US data center.</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">const US_HOST = &quot;us.example.com&quot;\nconst IN_HOST = &quot;in.example.com&quot;\n\nvar COUNTRIES_MAP = {\n  IN: IN_HOST,\n  PK: IN_HOST,\n  BD: IN_HOST,\n  SL: IN_HOST,\n  NL: IN_HOST\n}\naddEventListener('fetch', event =&gt; {\n  var url = new URL(event.request.url);\n\n  var countryCode = event.request.headers.get('CF-IPCountry');\n  if (COUNTRIES_MAP[countryCode]) {\n    url.hostname = COUNTRIES_MAP[countryCode];\n  } else {\n    url.hostname = US_HOST;\n  }\n  \n  event.respondWith(fetch(url));\n});\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"putting-it-all-together\">Putting it all together</h3><p></p><p>Now, let us combine the geographic routing, random load balancing and fallback into a single worker:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">const US_HOSTS = [\n  &quot;0.us.example.com&quot;,\n  &quot;1.us.example.com&quot;,\n  &quot;2.us.example.com&quot;\n];\n\nconst IN_HOSTS = [\n  &quot;0.in.example.com&quot;,\n  &quot;1.in.example.com&quot;,\n  &quot;2.in.example.com&quot;\n];\n\nvar COUNTRIES_MAP = {\n  IN: IN_HOSTS,\n  PK: IN_HOSTS,\n  BD: IN_HOSTS,\n  SL: IN_HOSTS,\n  NL: IN_HOSTS\n}\naddEventListener('fetch', event =&gt; {\n  var url = new URL(event.request.url);\n\n  var countryCode = event.request.headers.get('CF-IPCountry');\n  var hostnames = US_HOSTS;\n  if (COUNTRIES_MAP[countryCode]) {\n    hostnames = COUNTRIES_MAP[countryCode];\n  }\n  // Randomly pick the next host \n  var primary = hostnames[getRandomInt(hostnames.length)];\n\n  var primaryUrl = new URL(event.request.url);\n  primaryUrl.hostname = hostnames[primary];\n\n  // Fallback if there is no response within timeout\n  var timeoutId = setTimeout(function() {\n    var backup;\n    do {\n        // Naive solution to pick a backup host\n        backup = getRandomInt(hostnames.length);\n    } while(backup === primary);\n\n    var backupUrl = new URL(event.request.url);\n    backupUrl.hostname = hostnames[backup];\n\n    event.respondWith(fetch(backupUrl));\n  }, 2000 /* 2 seconds */);\n\n  fetch(primaryUrl)\n    .then(function(response) {\n        clearTimeout(timeoutId);\n        event.respondWith(response);\n    });  \n});\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * max);\n}\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"recap\">Recap</h3><p>In this article, you saw the power of Cloudflare workers and how simple it is to use it. Before implementing custom load balancer with workers, take a look at <a href=\"https://www.cloudflare.com/load-balancing/\">Cloudflare’s load balancer</a>.</p><p>For more examples, take a look at the <a href=\"https://developers.cloudflare.com/workers/recipes/\">recipes</a> on the developer docs page. </p>",
		"comment_id": "5baaa9d19fbc7c00bf371bb1",
		"feature_image": null,
		"featured": false,
		"visibility": "public",
		"created_at": "2018-09-25T22:34:09.000+01:00",
		"updated_at": "2024-02-12T20:42:40.000+00:00",
		"published_at": "2018-10-03T08:59:00.000+01:00",
		"custom_excerpt": "Getting lots of traffic? Planning to add more servers? You’ll need load balancing to maintain the reliability of your site. Cloudflare offers powerful Load Balancing, but there are situations where some options can’t satisfy your specific needs. For those situations, you can write your own Worker.",
		"codeinjection_head": null,
		"codeinjection_foot": null,
		"custom_template": null,
		"canonical_url": null,
		"tags": [
			{
				"id": "5d16450341acde0011a95253",
				"name": "Cloudflare Workers",
				"slug": "workers",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/workers/"
			},
			{
				"id": "5d16450341acde0011a95252",
				"name": "Serverless",
				"slug": "serverless",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Serverless.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Serverless",
				"meta_description": "Cloudflare blog posts tagged 'serverless'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/serverless/"
			},
			{
				"id": "5d16450341acde0011a95204",
				"name": "Developers",
				"slug": "developers",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Developers-1.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Developers",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Developers'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developers/"
			},
			{
				"id": "5d16450341acde0011a95165",
				"name": "JavaScript",
				"slug": "javascript",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/javascript/"
			},
			{
				"id": "64a3e2b834124c000b00b717",
				"name": "Developer Platform",
				"slug": "developer-platform",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developer-platform/"
			}
		],
		"authors": [
			{
				"id": "5d1644b141acde0011a94f96",
				"name": "Guest Author",
				"slug": "guest-author",
				"profile_image": "https://blog-cloudflare-com-assets.storage.googleapis.com/2019/10/Screen-Shot-2019-10-09-at-11.21.59-AM.png",
				"cover_image": "http://blog.cloudflare.com/content/images/2019/05/general@2x-9.png",
				"bio": null,
				"website": null,
				"location": null,
				"facebook": null,
				"twitter": null,
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/guest-author/"
			}
		],
		"primary_author": {
			"id": "5d1644b141acde0011a94f96",
			"name": "Guest Author",
			"slug": "guest-author",
			"profile_image": "https://blog-cloudflare-com-assets.storage.googleapis.com/2019/10/Screen-Shot-2019-10-09-at-11.21.59-AM.png",
			"cover_image": "http://blog.cloudflare.com/content/images/2019/05/general@2x-9.png",
			"bio": null,
			"website": null,
			"location": null,
			"facebook": null,
			"twitter": null,
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/guest-author/"
		},
		"primary_tag": {
			"id": "5d16450341acde0011a95253",
			"name": "Cloudflare Workers",
			"slug": "workers",
			"description": null,
			"feature_image": null,
			"visibility": "public",
			"meta_title": null,
			"meta_description": null,
			"og_image": null,
			"og_title": null,
			"og_description": null,
			"twitter_image": null,
			"twitter_title": null,
			"twitter_description": null,
			"codeinjection_head": null,
			"codeinjection_foot": null,
			"canonical_url": null,
			"accent_color": null,
			"url": "http://blog.cloudflare.com/tag/workers/"
		},
		"url": "http://blog.cloudflare.com/update-response-headers-on-cloudflare-workers/",
		"excerpt": "Getting lots of traffic? Planning to add more servers? You’ll need load balancing to maintain the reliability of your site. Cloudflare offers powerful Load Balancing, but there are situations where some options can’t satisfy your specific needs. For those situations, you can write your own Worker.",
		"reading_time": 3,
		"access": true,
		"comments": false,
		"og_image": null,
		"og_title": null,
		"og_description": null,
		"twitter_image": null,
		"twitter_title": null,
		"twitter_description": null,
		"meta_title": null,
		"meta_description": null,
		"email_subject": null,
		"frontmatter": null,
		"feature_image_alt": null,
		"feature_image_caption": null
	}
}