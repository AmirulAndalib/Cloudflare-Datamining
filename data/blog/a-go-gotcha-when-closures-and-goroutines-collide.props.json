{
	"browserLocale": "en-us",
	"locale": "en-us",
	"post": {
		"access": true,
		"authors": [
			{
				"id": "5d1644b141acde0011a94f2c",
				"name": "John Graham-Cumming",
				"slug": "john-graham-cumming",
				"profile_image": "http://blog.cloudflare.com/content/images/2017/03/url-2.jpg",
				"cover_image": "http://blog.cloudflare.com/content/images/2023/05/Twitter-Header-@cloudflare-US.png",
				"bio": null,
				"website": null,
				"location": "Lisbon, Portugal",
				"facebook": null,
				"twitter": null,
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/john-graham-cumming/"
			}
		],
		"canonical_url": null,
		"codeinjection_foot": null,
		"codeinjection_head": null,
		"comment_id": "4643",
		"comments": false,
		"created_at": "2015-03-25T14:15:37.000+00:00",
		"custom_excerpt": "Here's a small Go gotcha that it's easy to fall into when using goroutines and closures. Here's a simple program that prints out the numbers 0 to 9.",
		"custom_template": null,
		"email_subject": null,
		"excerpt": "Here's a small Go gotcha that it's easy to fall into when using goroutines and closures. Here's a simple program that prints out the numbers 0 to 9.",
		"feature_image": null,
		"feature_image_alt": null,
		"feature_image_caption": null,
		"featured": false,
		"frontmatter": null,
		"html": "<!--kg-card-begin: markdown--><p>Here's a small Go gotcha that it's easy to fall into when using goroutines and closures. Here's a simple program that prints out the numbers 0 to 9:</p>\n<p>(You can play with this in the Go Playground <a href=\"https://play.golang.org/p/dLfrQ7JCf5\">here</a>)</p>\n<pre><code>package main\n\nimport &quot;fmt&quot;\n\nfunc main() {\n\tfor i := 0; i &lt; 10; i++ {\n\t\tfmt.Printf(&quot;%d &quot;, i)\n\t}\n}\n</code></pre>\n<p>It's output is easy to predict:</p>\n<pre><code>0 1 2 3 4 5 6 7 8 9\n</code></pre>\n<p>If you decided that it would be nice to run those <code>fmt.Printf</code>s concurrently using goroutines you might be surprised by the result. Here's a version of the code that runs each <code>fmt.Printf</code> in its own goroutine and uses a <code>sync.WaitGroup</code> to wait for the goroutines to terminate.</p>\n<pre><code>package main\n\nimport (\n\t&quot;fmt&quot;\n    &quot;runtime&quot;\n\t&quot;sync&quot;\n)\n\nfunc main() {\n\truntime.GOMAXPROCS(runtime.NumCPU())\n    \n\tvar wg sync.WaitGroup\n\tfor i := 0; i &lt; 10; i++ {\n\t\twg.Add(1)\n\t\tgo func() {\n\t\t\tfmt.Printf(&quot;%d &quot;, i)\n\t\t\twg.Done()\n\t\t}()\n\t}\n\t\n\twg.Wait()\n}\n</code></pre>\n<p>(This code is in the Go Playground <a href=\"https://play.golang.org/p/VmW3H-xqsz\">here</a>). If you're thinking concurrently then you'll likely predict that the output will be the numbers 0 to 9 in some random order depending on precisely when the 10 goroutines run.</p>\n<p>But the output is actually:</p>\n<pre><code>10 10 10 10 10 10 10 10 10 10\n</code></pre>\n<p>Why?</p>\n<p>Because each of those goroutines is sharing the single variable <code>i</code> across the ten closures generated by the <code>func()</code> used for each goroutine.</p>\n<p>The output from the goroutines will depend on the value of <code>i</code> when they start running. In the example, above they didn't actually start running until the loop had terminated and <code>i</code> had the value 10.</p>\n<p>This programmer error can have other weird effects depending on the variable that's being shared across the goroutine closures.</p>\n<p>To solve this the simplest solution is to create a new variable, a parameter to the <code>func()</code> and pass <code>i</code> into the function call. Like this:</p>\n<pre><code>package main\n\nimport (\n\t&quot;fmt&quot;\n    &quot;runtime&quot;\n\t&quot;sync&quot;\n)\n\nfunc main() {\n\truntime.GOMAXPROCS(runtime.NumCPU())\n    \n\tvar wg sync.WaitGroup\n\tfor i := 0; i &lt; 10; i++ {\n\t\twg.Add(1)\n\t\tgo func(i int) {\n\t\t\tfmt.Printf(&quot;%d &quot;, i)\n\t\t\twg.Done()\n\t\t}(i)\n\t}\n\t\n\twg.Wait()\n}\n</code></pre>\n<p>(The code for that is <a href=\"https://play.golang.org/p/IeFgq5CNOk\">here</a>). That works correctly.</p>\n<p>This is such a common gotcha that it's also in the <a href=\"https://golang.org/doc/faq#closures_and_goroutines\">FAQ</a>.</p>\n<!--kg-card-end: markdown-->",
		"id": "5d16453b41acde0011a95511",
		"meta_description": null,
		"meta_title": null,
		"og_description": null,
		"og_image": null,
		"og_title": null,
		"primary_author": {
			"id": "5d1644b141acde0011a94f2c",
			"name": "John Graham-Cumming",
			"slug": "john-graham-cumming",
			"profile_image": "http://blog.cloudflare.com/content/images/2017/03/url-2.jpg",
			"cover_image": "http://blog.cloudflare.com/content/images/2023/05/Twitter-Header-@cloudflare-US.png",
			"bio": null,
			"website": null,
			"location": "Lisbon, Portugal",
			"facebook": null,
			"twitter": null,
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/john-graham-cumming/"
		},
		"primary_tag": {
			"id": "5d16450341acde0011a95215",
			"name": "Go",
			"slug": "go",
			"description": null,
			"feature_image": null,
			"visibility": "public",
			"meta_title": null,
			"meta_description": null,
			"og_image": null,
			"og_title": null,
			"og_description": null,
			"twitter_image": null,
			"twitter_title": null,
			"twitter_description": null,
			"codeinjection_head": null,
			"codeinjection_foot": null,
			"canonical_url": null,
			"accent_color": null,
			"url": "http://blog.cloudflare.com/tag/go/"
		},
		"published_at": "2015-03-25T16:23:01.000+00:00",
		"reading_time": 1,
		"slug": "a-go-gotcha-when-closures-and-goroutines-collide",
		"tags": [
			{
				"id": "5d16450341acde0011a95215",
				"name": "Go",
				"slug": "go",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/go/"
			},
			{
				"id": "5d16450341acde0011a95214",
				"name": "Programming",
				"slug": "programming",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/programming/"
			},
			{
				"id": "5d16450341acde0011a95221",
				"name": "Best Practices",
				"slug": "best-practices",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/best-practices/"
			}
		],
		"title": "A Go Gotcha: When Closures and Goroutines Collide",
		"twitter_description": null,
		"twitter_image": null,
		"twitter_title": null,
		"updated_at": "2024-02-20T17:23:01.000+00:00",
		"url": "http://blog.cloudflare.com/a-go-gotcha-when-closures-and-goroutines-collide/",
		"uuid": "b46443d7-0197-4436-9d94-d29813e51a26",
		"visibility": "public"
	}
}