{
	"locale": "en-us",
	"post": {
		"access": true,
		"authors": [
			{
				"id": "61296cb499b32402a7c0e188",
				"name": "Bas Westerbaan",
				"slug": "bas",
				"profile_image": "http://blog.cloudflare.com/content/images/2021/11/me.png",
				"cover_image": null,
				"bio": null,
				"website": "https://bas.westerbaan.name",
				"location": "The Netherlands",
				"facebook": null,
				"twitter": "@bwesterb",
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/bas/"
			},
			{
				"id": "5d1644b141acde0011a94ff4",
				"name": "Christopher Patton",
				"slug": "christopher-patton",
				"profile_image": "http://blog.cloudflare.com/content/images/2018/09/0-8.jpg",
				"cover_image": null,
				"bio": null,
				"website": null,
				"location": null,
				"facebook": null,
				"twitter": null,
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/christopher-patton/"
			},
			{
				"id": "5db3884bfd9e450505d99559",
				"name": "Peter Wu",
				"slug": "peter-wu",
				"profile_image": "http://blog.cloudflare.com/content/images/2023/05/_tmp_mini_magick20221201-42-hdr80s.jpg",
				"cover_image": null,
				"bio": null,
				"website": "https://lekensteyn.nl/",
				"location": null,
				"facebook": null,
				"twitter": "@Lekensteyn",
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/peter-wu/"
			}
		],
		"canonical_url": null,
		"codeinjection_foot": null,
		"codeinjection_head": null,
		"comment_id": "62ea7e6816a4db000b20bbc5",
		"comments": false,
		"created_at": "2022-08-03T14:55:52.000+01:00",
		"custom_excerpt": "The future is post quantum. Enable post-quantum key agreement on your test zone today and get a headstart",
		"custom_template": null,
		"email_subject": null,
		"excerpt": "The future is post quantum. Enable post-quantum key agreement on your test zone today and get a headstart",
		"feature_image": "http://blog.cloudflare.com/content/images/2022/08/image2-1.png",
		"feature_image_alt": null,
		"feature_image_caption": null,
		"featured": false,
		"frontmatter": null,
		"html": "<figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2022/08/image2-4.png\" class=\"kg-image\" alt=\"Experiment with post-quantum cryptography today\" loading=\"lazy\"></figure><p>Practically all data sent over the Internet today is at <a href=\"http://blog.cloudflare.com/the-quantum-menace/\">risk </a>in the future if a sufficiently large and stable quantum computer is created. Anyone who captures data now could decrypt it.</p><p>Luckily, there is a solution: we can switch to so-called <em>post-quantum (<strong>PQ</strong>) cryptography</em>, which is designed to be secure against attacks of quantum computers. After a six-year worldwide selection process, in July 2022, NIST <a href=\"http://blog.cloudflare.com/nist-post-quantum-surprise/\">announced</a> they will standardize <a href=\"https://pq-crystals.org/kyber/index.shtml\">Kyber</a>, a post-quantum key agreement scheme. The standard will be ready in 2024, but we want to help drive the adoption of post-quantum cryptography.</p><p>Today we have added support for the <em>X25519Kyber512Draft00</em> and <em>X25519Kyber768Draft00</em> hybrid post-quantum key agreements to a number of test domains, including <a href=\"https://pq.cloudflareresearch.com/\">pq.cloudflareresearch.com</a>.</p><p><em>Do you want to experiment with post-quantum on your test website for free? Mail </em><a href=\"mailto:ask-research@cloudflare.com\"><em>ask-research@cloudflare.com</em></a><em> to enroll your test website, but read the fine-print below.</em></p><h2 id=\"what-does-it-mean-to-enable-post-quantum-on-your-website\">What does it mean to enable post-quantum on your website?</h2><p>If you enroll your website to the post-quantum beta, we will add support for these two extra key agreements <strong>alongside</strong> the existing classical encryption schemes such as X25519. If your browser doesn’t support these post-quantum key agreements (and none at the time of writing do), then your browser will continue working with a classically secure, but not quantum-resistant, connection.</p><h3 id=\"then-how-to-test-it\">Then how to test it?</h3><p>We have open-sourced a fork of <a href=\"https://github.com/cloudflare/boringssl-pq\">BoringSSL</a> and <a href=\"https://github.com/cloudflare/go\">Go</a> that has support for these post-quantum key agreements. With those and an enrolled test domain, you can check how your application performs with post-quantum key exchanges. We are working on support for more libraries and languages.</p><h3 id=\"what-to-look-for\">What to look for?</h3><p>Kyber and classical key agreements such as X25519 have different performance characteristics: Kyber requires less computation, but has bigger keys and requires a bit more RAM to compute. It could very well make the connection faster if used on its own.</p><p>We are not using Kyber on its own though, but are using <strong>hybrids</strong>. That means we are doing both an X25519 <em>and</em> Kyber key agreement such that the connection is still classically secure if either is broken. That also means that connections will be a bit slower. In our experiments, the difference is <a href=\"http://blog.cloudflare.com/the-tls-post-quantum-experiment/\">very</a> <a href=\"http://blog.cloudflare.com/post-quantumify-cloudflare/\">small</a>, but it’s best to check for yourself.</p><h2 id=\"the-fine-print\">The fine-print</h2><p>Cloudflare’s post-quantum cryptography support is a beta service for experimental use only. Enabling post-quantum on your website will subject the website to Cloudflare’s Beta Services terms and will impact other Cloudflare services on the website as described below.</p><h3 id=\"no-stability-or-support-guarantees\">No stability or support guarantees</h3><p>Over the coming months, both Kyber and the way it’s integrated into <a href=\"https://www.cloudflare.com/learning/ssl/transport-layer-security-tls/\">TLS</a> will change for several reasons, including:</p><ol><li>Kyber will see small, but backward-incompatible changes in the coming months.</li><li>We want to be compatible with other early adopters and will change our integration accordingly.</li><li>As, together with the cryptography community, we find issues, we will add workarounds in our integration.</li></ol><p>We will update our forks accordingly, but cannot guarantee any long-term stability or continued support. PQ support may become unavailable at any moment. We will post updates on <a href=\"https://pq.cloudflareresearch.com\">pq.cloudflareresearch.com</a>.</p><h3 id=\"features-in-enrolled-domains\">Features in enrolled domains</h3><p>For the moment, we are running enrolled zones on a slightly different infrastructure for which not all features, notably QUIC, are available.</p><p>With that out of the way, it’s…</p><h2 id=\"demo-time-\">Demo time!</h2><h3 id=\"boringssl\">BoringSSL</h3><p>With the following commands build our <a href=\"https://github.com/cloudflare/boringssl-pq\">fork of BoringSSL</a> and create a TLS connection with pq.cloudflareresearch.com using the compiled <code>bssl</code> tool. Note that we do not enable the post-quantum key agreements by default, so you have to pass the <code>-curves</code> flag.</p><!--kg-card-begin: markdown--><pre><code>$ git clone https://github.com/cloudflare/boringssl-pq\n[snip]\n$ cd boringssl-pq &amp;&amp; mkdir build &amp;&amp; cd build &amp;&amp; cmake .. -GNinja &amp;&amp; ninja \n[snip]\n$ ./tool/bssl client -connect pq.cloudflareresearch.com -server-name pq.cloudflareresearch.com -curves Xyber512D00\n\tConnecting to [2606:4700:7::a29f:8a55]:443\nConnected.\n  Version: TLSv1.3\n  Resumed session: no\n  Cipher: TLS_AES_128_GCM_SHA256\n  ECDHE curve: X25519Kyber512Draft00\n  Signature algorithm: ecdsa_secp256r1_sha256\n  Secure renegotiation: yes\n  Extended master secret: yes\n  Next protocol negotiated: \n  ALPN protocol: \n  OCSP staple: no\n  SCT list: no\n  Early data: no\n  Encrypted ClientHello: no\n  Cert subject: CN = *.pq.cloudflareresearch.com\n  Cert issuer: C = US, O = Let's Encrypt, CN = E1\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"go\">Go</h3><p>Our <a href=\"https://github.com/cloudflare/go\">Go fork</a> doesn’t enable the post-quantum key agreement by default. The following simple Go program enables PQ by default for the http package and GETs pq.cloudflareresearch.com.</p><!--kg-card-begin: markdown--><pre><code class=\"language-go\">package main\n\nimport (\n    &quot;context&quot;\n    &quot;crypto/tls&quot;\n    &quot;fmt&quot;\n    &quot;net/http&quot;\n)\n\nfunc main() {\n    req, err := http.NewRequestWithContext(\n        context.WithValue(\n            context.Background(),\n            tls.CFEventHandlerContextKey{},\n            func(ev tls.CFEvent) {\n                switch e := ev.(type) {\n                case tls.CFEventTLS13HRR:\n                    fmt.Printf(&quot;HelloRetryRequest\\n&quot;)\n                case tls.CFEventTLS13NegotiatedKEX:\n                    switch e.KEX {\n                    case tls.X25519Kyber512Draft00:\n                        fmt.Printf(&quot;Used X25519Kyber512Draft00\\n&quot;)\n                    default:\n                        fmt.Printf(&quot;Used %d\\n&quot;, e.KEX)\n                    }\n                }\n            },\n        ),\n        &quot;GET&quot;,\n        &quot;https://pq.cloudflareresearch.com&quot;,\n        nil,\n    )\n    if err != nil {\n        panic(err)\n    }\n\n    http.DefaultTransport.(*http.Transport).TLSClientConfig = &amp;tls.Config{\n        CurvePreferences: []tls.CurveID{tls.X25519Kyber512Draft00, tls.X25519},\n    }\n\n    if _, err = (&amp;http.Client{}).Do(req); err != nil {\n        fmt.Println(err)\n    }\n}\n</code></pre>\n<!--kg-card-end: markdown--><p>To run we need to compile our <a href=\"https://github.com/cloudflare/go\">Go fork</a>:</p><!--kg-card-begin: markdown--><pre><code>$ git clone https://github.com/cloudflare/go\n[snip]\n$ cd go/src &amp;&amp; ./all.bash\n[snip]\n$ ../bin/go run path/to/example.go\nUsed X25519Kyber512Draft00\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"on-the-wire\">On the wire</h3><p>So what does this look like on the wire? With <a href=\"https://www.wireshark.org/\">Wireshark</a> we can capture the packet flow. First a non-post quantum HTTP/2 connection with X25519:</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2022/08/image1-8.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>This is a normal <a href=\"https://www.cloudflare.com/learning/ssl/what-happens-in-a-tls-handshake/\">TLS 1.3 handshake</a>: the client sends a ClientHello with an X25519 keyshare, which fits in a single packet. In return, the server sends its own 32 byte X25519 keyshare. It also sends various other messages, such as the certificate chain, which requires two packets in total.</p><p>Let’s check out Kyber:</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2022/08/image3-2.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>As you can see the ClientHello is a bit bigger, but still fits within a single packet. The response takes three packets now, instead of two, because of the larger server keyshare.</p><h2 id=\"under-the-hood\">Under the hood</h2><p>Want to add client support yourself? We are using a <a href=\"https://www.ietf.org/archive/id/draft-ietf-tls-hybrid-design-04.txt\">hybrid</a> of <a href=\"https://datatracker.ietf.org/doc/html/rfc7748\">X25519</a> and Kyber <a href=\"https://pq-crystals.org/kyber/data/kyber-specification-round3-20210804.pdf\">version 3.02</a>. We are writing out the details of the latter in <a href=\"https://github.com/bwesterb/draft-schwabe-cfrg-kyber\">version 00 of this CRFG IETF draft</a>, hence the name. We are using TLS <a href=\"https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml#tls-parameters-8\">group identifiers</a> <code>0xfe30</code> and <code>0xfe31</code> for <em>X25519Kyber512Draft00</em> and <em>X25519Kyber768Draft00</em> respectively.</p><p>There are some differences between our Go and BoringSSL forks that are interesting to compare.</p><ul><li>Our <a href=\"https://github.com/cloudflare/go\">Go fork</a> uses our fast <a href=\"https://github.com/cloudflare/circl/tree/main/kem/kyber\">AVX2 optimized implementation of Kyber</a> from <a href=\"http://blog.cloudflare.com/introducing-circl/\">CIRCL</a>. In contrast, our BoringSSL fork uses the simpler <a href=\"https://github.com/pq-crystals/kyber/tree/master/ref\">portable reference implementation</a>. Without the AVX2 optimisations it’s easier to evaluate. The downside is that it’s slower. Don’t be mistaken: it is still very fast, but you can check yourself.</li><li>Our Go fork only sends one keyshare. If the server doesn’t support it, it will respond with a HelloRetryRequest message and the client will fallback to one the server does support. This adds a roundtrip.<br>Our BoringSSL fork, on the other hand, will send two keyshares: the post-quantum hybrid and a classical one (if a classical key agreement is still enabled). If the server doesn’t recognize the first, it will be able to use the second. In this way we avoid a roundtrip if the server does not support the post-quantum key agreement.</li></ul><h2 id=\"looking-ahead\">Looking ahead</h2><p>The quantum future is here. In the coming years the Internet will move to post-quantum cryptography. Today we are offering our customers the tools to get a headstart and test post-quantum key agreements. We love to hear your feedback: e-mail it to <a href=\"mailto:ask-research@cloudflare.com\">ask-research@cloudflare.com</a>.</p><p>This is just a small, but important first step. We will continue our efforts to move towards a secure and private quantum-secure Internet. Much more to come — watch this space.</p>",
		"id": "62ea7e6816a4db000b20bbc5",
		"meta_description": "The future is post quantum. Enable post-quantum key agreement on your test zone today and get a headstart.",
		"meta_title": null,
		"og_description": null,
		"og_image": "http://blog.cloudflare.com/content/images/2022/08/Experiment-with-post-quantum-cryptography-today-OG-1.png",
		"og_title": null,
		"primary_author": {
			"id": "61296cb499b32402a7c0e188",
			"name": "Bas Westerbaan",
			"slug": "bas",
			"profile_image": "http://blog.cloudflare.com/content/images/2021/11/me.png",
			"cover_image": null,
			"bio": null,
			"website": "https://bas.westerbaan.name",
			"location": "The Netherlands",
			"facebook": null,
			"twitter": "@bwesterb",
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/bas/"
		},
		"primary_tag": null,
		"published_at": "2022-08-04T14:00:00.000+01:00",
		"reading_time": 6,
		"slug": "experiment-with-pq",
		"tags": [
			{
				"id": "62ea7ed516a4db000b20bbcc",
				"name": "#BLOG-1270",
				"slug": "hash-blog-1270",
				"description": null,
				"feature_image": null,
				"visibility": "internal",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/404/"
			},
			{
				"id": "60008826c93df003f34848e4",
				"name": "Post-Quantum",
				"slug": "post-quantum",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2022/02/image1-32.png",
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/post-quantum/"
			},
			{
				"id": "5d16450341acde0011a95277",
				"name": "Cryptography",
				"slug": "cryptography",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/cryptography/"
			},
			{
				"id": "5d16450341acde0011a95147",
				"name": "TLS",
				"slug": "tls",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/tls/"
			},
			{
				"id": "5fce48a395ca4301baec175e",
				"name": "Research",
				"slug": "research",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/research/"
			}
		],
		"title": "Experiment with post-quantum cryptography today",
		"twitter_description": null,
		"twitter_image": "http://blog.cloudflare.com/content/images/2022/08/Experiment-with-post-quantum-cryptography-today-OG.png",
		"twitter_title": null,
		"updated_at": "2024-02-01T21:35:52.000+00:00",
		"url": "http://blog.cloudflare.com/experiment-with-pq/",
		"uuid": "87ac8b1f-2035-4827-910f-bfaff2e81533",
		"visibility": "public"
	}
}