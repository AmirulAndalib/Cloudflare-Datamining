{
	"browserLocale": "en-us",
	"locale": "en-us",
	"post": {
		"access": true,
		"authors": [
			{
				"id": "5d1644b141acde0011a94f30",
				"name": "Marek Majkowski",
				"slug": "marek-majkowski",
				"profile_image": "http://blog.cloudflare.com/content/images/2017/03/b5967d6c687939594adb6992723d0529.jpeg",
				"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-101.png",
				"bio": null,
				"website": null,
				"location": null,
				"facebook": null,
				"twitter": "@majek04",
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/marek-majkowski/"
			}
		],
		"canonical_url": null,
		"codeinjection_foot": null,
		"codeinjection_head": null,
		"comment_id": "4968",
		"comments": false,
		"created_at": "2017-06-28T11:26:09.000+01:00",
		"custom_excerpt": "Last month we shared statistics on some popular reflection attacks. Back then the average SSDP attack size was ~12 Gbps.",
		"custom_template": null,
		"email_subject": null,
		"excerpt": "Last month we shared statistics on some popular reflection attacks. Back then the average SSDP attack size was ~12 Gbps.",
		"feature_image": "http://blog.cloudflare.com/content/images/2017/10/7a9f87325c0e3921-qps-1.png",
		"feature_image_alt": null,
		"feature_image_caption": null,
		"featured": false,
		"frontmatter": null,
		"html": "<!--kg-card-begin: markdown--><p>Last month we <a href=\"http://blog.cloudflare.com/reflections-on-reflections/\">shared statistics on some popular reflection</a> attacks. Back then the average SSDP attack size was ~12 Gbps and largest SSDP reflection we recorded was:</p>\n<ul>\n<li>30 Mpps (millions of packets per second)</li>\n<li>80 Gbps (billions of bits per second)</li>\n<li>using 940k reflector IPs</li>\n</ul>\n<p>This changed a couple of days ago when we noticed an unusually large SSDP amplification. It's worth deeper investigation since it crossed the symbolic threshold of 100 Gbps.</p>\n<p>The packets per second chart during the attack looked like this:</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2017/06/7a9f87325c0e3921-qps-1.png\" alt=\"\" loading=\"lazy\"></p>\n<p>The bandwidth usage:</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2017/06/7a9f87325c0e3921-bps-2.png\" alt=\"\" loading=\"lazy\"></p>\n<p>This packet flood lasted 38 minutes. According to our sampled netflow data it utilized 930k reflector servers. We estimate that the during 38 minutes of the attack each reflector sent 112k packets to Cloudflare.</p>\n<p>The reflector servers are across the globe, with a large presence in Argentina, Russia and China. Here are the unique IPs per country:</p>\n<pre><code>$ cat ips-nf-ct.txt|uniq|cut -f 2|sort|uniq -c|sort -nr|head\n 439126 CN\n 135783 RU\n  74825 AR\n  51222 US\n  41353 TW\n  32850 CA\n  19558 MY\n  18962 CO\n  14234 BR\n  10824 KR\n  10334 UA\n   9103 IT\n   ...\n</code></pre>\n<p>The reflector IP distribution across ASNs is typical. It pretty much follows the world’s largest residential ISPs:</p>\n<pre><code>$ cat ips-nf-asn.txt |uniq|cut -f 2|sort|uniq -c|sort -nr|head\n 318405 4837   # CN China Unicom\n  84781 4134   # CN China Telecom\n  72301 22927  # AR Telefonica de Argentina\n  23823 3462   # TW Chunghwa Telecom\n  19518 6327   # CA Shaw Communications Inc.\n  19464 4788   # MY TM Net\n  18809 3816   # CO Colombia Telecomunicaciones\n  11328 28573  # BR Claro SA\n   7070 10796  # US Time Warner Cable Internet\n   6840 8402   # RU OJSC &quot;Vimpelcom&quot;\n   6604 3269   # IT Telecom Italia\n   6377 12768  # RU JSC &quot;ER-Telecom Holding&quot;\n   ...\n</code></pre>\n<h3 id=\"whatsssdpanyway\">What's SSDP anyway?</h3>\n<p>The attack was composed of UDP packets with source port 1900. This port is used by the <a href=\"https://en.wikipedia.org/wiki/Simple_Service_Discovery_Protocol\">SSDP</a> and is used by the UPnP protocols. UPnP is one of the <a href=\"https://en.wikipedia.org/wiki/Zero-configuration_networking#UPnP\">zero-configuration networking</a> protocols. Most likely your home devices support it, allowing them to be easily discovered by your computer or phone. When a new device (like your laptop) joins the network, it can query the local network for specific devices, like internet gateways, audio systems, TVs, or printers. Read more on <a href=\"http://www.zeroconf.org/zeroconfandupnp.html\">how UPnP compares to Bonjour</a>.</p>\n<p><a href=\"http://www.upnp-hacks.org/upnp.html\">UPnP</a> is poorly standardised, but here's a snippet from <a href=\"https://web.archive.org/web/20151107123618/http://upnp.org/specs/arch/UPnP-arch-DeviceArchitecture-v2.0.pdf\">the spec</a> about the <code>M-SEARCH</code> frame - the main method for discovery:</p>\n<p><em>When a control point is added to the network, the UPnP discovery protocol allows that control point to search for devices of interest on the network. It does this by multicasting on the reserved address and port (239.255.255.250:1900) a search message with a pattern, or target, equal to a type or identifier for a device or service.</em></p>\n<p>Responses to <code>M-SEARCH</code> frame:</p>\n<p><em>To be found by a network search, a device shall send a unicast UDP response to the source IP address and port that sent the request to the multicast address. Devices respond if the ST header field of the <code>M-SEARCH</code> request is “ssdp:all”, “upnp:rootdevice”, “uuid:” followed by a UUID that exactly matches the one advertised by the device, or if the <code>M-SEARCH</code> request matches a device type or service type supported by the device.</em></p>\n<p>This works in practice. For example, my Chrome browser regularly asks for a Smart TV I guess:</p>\n<pre><code>$ sudo tcpdump -ni eth0 udp and port 1900 -A\nIP 192.168.1.124.53044 &gt; 239.255.255.250.1900: UDP, length 175\nM-SEARCH * HTTP/1.1\nHOST: 239.255.255.250:1900\nMAN: &quot;ssdp:discover&quot;\nMX: 1\nST: urn:dial-multiscreen-org:service:dial:1\nUSER-AGENT: Google Chrome/58.0.3029.110 Windows\n</code></pre>\n<p>This frame is sent to a multicast IP address. Other devices listening on that address and supporting this specific <code>ST</code> (search-target) multiscreen type are supposed to answer.</p>\n<p>Apart from queries for specific device types, there are two &quot;generic&quot; <code>ST</code> query types:</p>\n<ul>\n<li><code>upnp:rootdevice</code>: search for root devices</li>\n<li><code>ssdp:all</code>: search for all UPnP devices and services</li>\n</ul>\n<p>To emulate these queries you can run this python script (based on <a href=\"https://www.electricmonk.nl/log/2016/07/05/exploring-upnp-with-python/\">this work</a>):</p>\n<pre><code class=\"language-.py\">#!/usr/bin/env python2\nimport socket\nimport sys\n\ndst = &quot;239.255.255.250&quot;\nif len(sys.argv) &gt; 1:\n    dst = sys.argv[1]\nst = &quot;upnp:rootdevice&quot;\nif len(sys.argv) &gt; 2:\n    st = sys.argv[2]\n\nmsg = [\n    'M-SEARCH * HTTP/1.1',\n    'Host:239.255.255.250:1900',\n    'ST:%s' % (st,),\n    'Man:&quot;ssdp:discover&quot;',\n    'MX:1',\n    '']\n\ns = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)\ns.settimeout(10)\ns.sendto('\\r\\n'.join(msg), (dst, 1900) )\n\nwhile True:\n    try:\n        data, addr = s.recvfrom(32*1024)\n    except socket.timeout:\n        break\n    print &quot;[+] %s\\n%s&quot; % (addr, data)\n</code></pre>\n<p>On my home network two devices show up:</p>\n<pre><code>$ python ssdp-query.py\n[+] ('192.168.1.71', 1026)\nHTTP/1.1 200 OK\nCACHE-CONTROL: max-age = 60\nEXT:\nLOCATION: http://192.168.1.71:5200/Printer.xml\nSERVER: Network Printer Server UPnP/1.0 OS 1.29.00.44 06-17-2009\nST: upnp:rootdevice\nUSN: uuid:Samsung-Printer-1_0-mrgutenberg::upnp:rootdevice\n\n[+] ('192.168.1.70', 36319)\nHTTP/1.1 200 OK\nLocation: http://192.168.1.70:49154/MediaRenderer/desc.xml\nCache-Control: max-age=1800\nContent-Length: 0\nServer: Linux/3.2 UPnP/1.0 Network_Module/1.0 (RX-S601D)\nEXT:\nST: upnp:rootdevice\nUSN: uuid:9ab0c000-f668-11de-9976-000adedd7411::upnp:rootdevice\n</code></pre>\n<h3 id=\"thefirewall\">The firewall</h3>\n<p>Now that we understand the basics of SSDP, understanding the reflection attack should be easy. You see, there are in fact two ways of delivering the <code>M-SEARCH</code> frame:</p>\n<ul>\n<li>what we presented, over the multicast address</li>\n<li>directly to a UPnP/SSDP enabled host on a normal unicast address</li>\n</ul>\n<p>The latter method works. We can specifically target my printer IP address:</p>\n<pre><code>$ python ssdp-query.py 192.168.1.71\n[+] ('192.168.1.71', 1026)\nHTTP/1.1 200 OK\nCACHE-CONTROL: max-age = 60\nEXT:\nLOCATION: http://192.168.1.71:5200/Printer.xml\nSERVER: Network Printer Server UPnP/1.0 OS 1.29.00.44 06-17-2009\nST: upnp:rootdevice\nUSN: uuid:Samsung-Printer-1_0-mrgutenberg::upnp:rootdevice\n</code></pre>\n<p>Now the problem is easily seen: the SSDP protocol does not check whether the querying party is in the same network as the device. It will happily respond to an <code>M-SEARCH</code> delivered over the public Internet. All it takes is a tiny misconfiguration in a firewall - port 1900 UDP open to the world - and a perfect target for UDP amplification will be available.</p>\n<p>Given a misconfigured target our script will happily work over the internet:</p>\n<pre><code>$ python ssdp-query.py 100.42.x.x\n[+] ('100.42.x.x', 1900)\nHTTP/1.1 200 OK\nCACHE-CONTROL: max-age=120\nST: upnp:rootdevice\nUSN: uuid:3e55ade9-c344-4baa-841b-826bda77dcb2::upnp:rootdevice\nEXT:\nSERVER: TBS/R2 UPnP/1.0 MiniUPnPd/1.2\nLOCATION: http://192.168.2.1:40464/rootDesc.xml\n</code></pre>\n<h3 id=\"theamplification\">The amplification</h3>\n<p>The real damage is done by the <code>ssdp:all</code> <code>ST</code> type though. These responses are <em>much</em> larger:</p>\n<pre><code>$ python ssdp-query.py 100.42.x.x ssdp:all\n[+] ('100.42.x.x', 1900)\nHTTP/1.1 200 OK\nCACHE-CONTROL: max-age=120\nST: upnp:rootdevice\nUSN: uuid:3e55ade9-c344-4baa-841b-826bda77dcb2::upnp:rootdevice\nEXT:\nSERVER: TBS/R2 UPnP/1.0 MiniUPnPd/1.2\nLOCATION: http://192.168.2.1:40464/rootDesc.xml\n\n[+] ('100.42.x.x', 1900)\nHTTP/1.1 200 OK\nCACHE-CONTROL: max-age=120\nST: urn:schemas-upnp-org:device:InternetGatewayDevice:1\nUSN: uuid:3e55ade9-c344-4baa-841b-826bda77dcb2::urn:schemas-upnp-org:device:InternetGatewayDevice:1\nEXT:\nSERVER: TBS/R2 UPnP/1.0 MiniUPnPd/1.2\nLOCATION: http://192.168.2.1:40464/rootDesc.xml\n\n... 6 more response packets....\n</code></pre>\n<p>In this particular case, a single SSDP <code>M-SEARCH</code> packet triggered 8 response packets. tcpdump view:</p>\n<pre><code>$ sudo tcpdump -ni en7 host 100.42.x.x -ttttt\n 00:00:00.000000 IP 192.168.1.200.61794 &gt; 100.42.x.x.1900: UDP, length 88\n 00:00:00.197481 IP 100.42.x.x.1900 &gt; 192.168.1.200.61794: UDP, length 227\n 00:00:00.199634 IP 100.42.x.x.1900 &gt; 192.168.1.200.61794: UDP, length 299\n 00:00:00.202938 IP 100.42.x.x.1900 &gt; 192.168.1.200.61794: UDP, length 295\n 00:00:00.208425 IP 100.42.x.x.1900 &gt; 192.168.1.200.61794: UDP, length 275\n 00:00:00.209496 IP 100.42.x.x.1900 &gt; 192.168.1.200.61794: UDP, length 307\n 00:00:00.212795 IP 100.42.x.x.1900 &gt; 192.168.1.200.61794: UDP, length 289\n 00:00:00.215522 IP 100.42.x.x.1900 &gt; 192.168.1.200.61794: UDP, length 291\n 00:00:00.219190 IP 100.42.x.x.1900 &gt; 192.168.1.200.61794: UDP, length 291\n</code></pre>\n<p>That target exposes 8x packet count amplification and 26x bandwidth amplification. Sadly, this is typical for SSDP.</p>\n<h3 id=\"ipspoofing\">IP Spoofing</h3>\n<p>The final step for the attack is to fool the vulnerable servers to flood the target IP - not the attacker. For that the attacker needs to <a href=\"https://en.wikipedia.org/wiki/IP_address_spoofing\">spoof the source IP address</a> on their queries.</p>\n<p>We probed the reflector IPs used in the shown 100 Gbps+ attack.  We found that out of the 920k reflector IPs, only 350k (38%) still respond to SSDP probes.</p>\n<p>Out of the reflectors that responded, each sent on average 7 packets:</p>\n<pre><code>$ cat results-first-run.txt|cut -f 1|sort|uniq -c|sed -s 's#^ \\+##g'|cut -d &quot; &quot; -f 1| ~/mmhistogram -t &quot;Response packets per IP&quot; -p\nResponse packets per IP min:1.00 avg:6.99 med=8.00 max:186.00 dev:4.44 count:350337\nResponse packets per IP:\n value |-------------------------------------------------- count\n     0 |                    ****************************** 23.29%\n     1 |                                              ****  3.30%\n     2 |                                                **  2.29%\n     4 |************************************************** 38.73%\n     8 |            ************************************** 29.51%\n    16 |                                               ***  2.88%\n    32 |                                                    0.01%\n    64 |                                                    0.00%\n   128 |                                                    0.00%\n</code></pre>\n<p>The response packets had 321 bytes (+/- 29 bytes) on average. Our request packets had 110 bytes.</p>\n<p>According to our measurements with the <code>ssdp:all</code> <code>M-SEARCH</code> attacker would be able to achieve:</p>\n<ul>\n<li><strong>7x</strong> packet number amplification</li>\n<li><strong>20x</strong> bandwidth amplification</li>\n</ul>\n<p>We can estimate the 43 Mpps/112 Gbps attack was generated with roughly:</p>\n<ul>\n<li>6.1 Mpps of spoofing capacity</li>\n<li>5.6 Gbps of spoofed bandwidth</li>\n</ul>\n<p>In other words: a single well connected 10 Gbps server able to perform IP spoofing can deliver a significant SSDP attack.</p>\n<h3 id=\"moreonthessdpservers\">More on the SSDP servers</h3>\n<p>Since we probed the vulnerable SSDP servers, here are the most common <code>Server</code> header values we received:</p>\n<pre><code> 104833 Linux/2.4.22-1.2115.nptl UPnP/1.0 miniupnpd/1.0\n  77329 System/1.0 UPnP/1.0 IGD/1.0\n  66639 TBS/R2 UPnP/1.0 MiniUPnPd/1.2\n  12863 Ubuntu/7.10 UPnP/1.0 miniupnpd/1.0\n  11544 ASUSTeK UPnP/1.0 MiniUPnPd/1.4\n  10827 miniupnpd/1.0 UPnP/1.0\n   8070 Linux UPnP/1.0 Huawei-ATP-IGD\n   7941 TBS/R2 UPnP/1.0 MiniUPnPd/1.4\n   7546 Net-OS 5.xx UPnP/1.0\n   6043 LINUX-2.6 UPnP/1.0 MiniUPnPd/1.5\n   5482 Ubuntu/lucid UPnP/1.0 MiniUPnPd/1.4\n   4720 AirTies/ASP 1.0 UPnP/1.0 miniupnpd/1.0\n   4667 Linux/2.6.30.9, UPnP/1.0, Portable SDK for UPnP devices/1.6.6\n   3334 Fedora/10 UPnP/1.0 MiniUPnPd/1.4\n   2814  1.0\n   2044 miniupnpd/1.5 UPnP/1.0\n   1330 1\n   1325 Linux/2.6.21.5, UPnP/1.0, Portable SDK for UPnP devices/1.6.6\n    843 Allegro-Software-RomUpnp/4.07 UPnP/1.0 IGD/1.00\n    776 Upnp/1.0 UPnP/1.0 IGD/1.00\n    675 Unspecified, UPnP/1.0, Unspecified\n    648 WNR2000v5 UPnP/1.0 miniupnpd/1.0\n    562 MIPS LINUX/2.4 UPnP/1.0 miniupnpd/1.0\n    518 Fedora/8 UPnP/1.0 miniupnpd/1.0\n    372 Tenda UPnP/1.0 miniupnpd/1.0\n    346 Ubuntu/10.10 UPnP/1.0 miniupnpd/1.0\n    330 MF60/1.0 UPnP/1.0 miniupnpd/1.0\n    ...\n</code></pre>\n<p>The most common <code>ST</code> header values we saw:</p>\n<pre><code> 298497 upnp:rootdevice\n 158442 urn:schemas-upnp-org:device:InternetGatewayDevice:1\n 151642 urn:schemas-upnp-org:device:WANDevice:1\n 148593 urn:schemas-upnp-org:device:WANConnectionDevice:1\n 147461 urn:schemas-upnp-org:service:WANCommonInterfaceConfig:1\n 146970 urn:schemas-upnp-org:service:WANIPConnection:1\n 145602 urn:schemas-upnp-org:service:Layer3Forwarding:1\n 113453 urn:schemas-upnp-org:service:WANPPPConnection:1\n 100961 urn:schemas-upnp-org:device:InternetGatewayDevice:\n 100180 urn:schemas-upnp-org:device:WANDevice:\n  99017 urn:schemas-upnp-org:service:WANCommonInterfaceConfig:\n  98112 urn:schemas-upnp-org:device:WANConnectionDevice:\n  97246 urn:schemas-upnp-org:service:WANPPPConnection:\n  96259 urn:schemas-upnp-org:service:WANIPConnection:\n  93987 urn:schemas-upnp-org:service:Layer3Forwarding:\n  91108 urn:schemas-wifialliance-org:device:WFADevice:\n  90818 urn:schemas-wifialliance-org:service:WFAWLANConfig:\n  35511 uuid:IGD{8c80f73f-4ba0-45fa-835d-042505d052be}000000000000\n   9822 urn:schemas-upnp-org:service:WANEthernetLinkConfig:1\n   7737 uuid:WAN{84807575-251b-4c02-954b-e8e2ba7216a9}000000000000\n   6063 urn:schemas-microsoft-com:service:OSInfo:1\n    ...\n</code></pre>\n<p>The vulnerable IPs are seem to be mostly unprotected home routers.</p>\n<h3 id=\"openssdpisavulnerability\">Open SSDP is a vulnerability</h3>\n<p>It's not a novelty that allowing UDP port 1900 traffic from the Internet to your home printer or such is not a good idea. This problem has been known since at least January 2013:</p>\n<ul>\n<li><a href=\"https://community.rapid7.com/community/infosec/blog/2013/01/29/security-flaws-in-universal-plug-and-play-unplug-dont-play\">&quot;Security Flaws in Universal Plug and Play: Unplug, Don't Play&quot;</a></li>\n</ul>\n<p>Authors of SSDP clearly didn't give any thought to UDP amplification potential. There are a number of obvious recommendations about future use of SSDP protocol:</p>\n<ul>\n<li>\n<p>The authors of SSDP should answer if there is any real world use of unicast <code>M-SEARCH</code> queries. From what I understand <code>M-SEARCH</code> only makes practical sense as a multicast query in local area network.</p>\n</li>\n<li>\n<p>Unicast <code>M-SEARCH</code> support should be either deprecated or at least rate limited, in similar way to <a href=\"http://www.redbarn.org/dns/ratelimits\">DNS Response Rate Limit techniques</a>.</p>\n</li>\n<li>\n<p><code>M-SEARCH</code> responses should be only delivered to local network. Responses routed over the network make little sense and open described vulnerability.</p>\n</li>\n</ul>\n<p>In the meantime we recommend:</p>\n<ul>\n<li>\n<p>Network administrators should ensure inbound UDP port 1900 is blocked on firewall.</p>\n</li>\n<li>\n<p>Internet service providers should <strong>never allow IP spoofing</strong> to be performed on their network. IP spoofing is the true root cause of the issue. See the infamous <a href=\"http://www.bcp38.info/index.php/Main_Page\">BCP38</a>.</p>\n</li>\n<li>\n<p>Internet service providers should allow their customers to use <strong>BGP flowspec</strong> to rate limit inbound UDP source port 1900 traffic, to relieve congestion during large SSDP attacks.</p>\n</li>\n<li>\n<p>Internet providers should internally collect <strong>netflow</strong> protocol samples. The netflow is needed to identify the true source of the attack. With netflow it's trivial to answer questions like: &quot;Which of my customers sent 6.4Mpps of traffic to port 1900?&quot;. Due to privacy concerns we recommend collecting netflow samples with largest possible sampling value: 1 in 64k packets. This will be sufficient to track DDoS attacks while preserving decent privacy of single customer connections.</p>\n</li>\n<li>\n<p>Developers should not roll out their own UDP protocols without careful consideration of UDP amplification problems. UPnP should be properly standardized and scrutinized.</p>\n</li>\n<li>\n<p>End users are encouraged to use the script scan their network for UPnP enabled devices. Consider if these devices should be allowed to access to the internet.</p>\n</li>\n</ul>\n<p>Furthermore, we prepared on online checking website. Click if you want to know if your public IP address has a vulnerable SSDP service:</p>\n<ul>\n<li><a href=\"https://badupnp.benjojo.co.uk/\">https://badupnp.benjojo.co.uk/</a></li>\n</ul>\n<p>Sadly, the most unprotected routers we saw in the described attack were from China, Russia and Argentina, places not historically known for the most agile internet service providers.</p>\n<h3 id=\"summary\">Summary</h3>\n<p>Cloudflare customers are fully protected from SSDP and other L3 amplification attacks. These attacks are nicely deflected by <a href=\"http://blog.cloudflare.com/how-cloudflares-architecture-allows-us-to-scale-to-stop-the-largest-attacks/\">Cloudflare anycast</a> infrastructure and require no special action. Unfortunately the raising of SSDP attack sizes might be a tough problem for other Internet citizens. We should encourage our ISPs to stop IP spoofing within their network, support BGP flowspec and configure in netflow collection.</p>\n<p><em>This article is a joint work of Marek Majkowski and Ben Cartwright-Cox.</em></p>\n<p>Dealing with large attacks sounds like fun? <a href=\"https://boards.greenhouse.io/cloudflare/jobs/589572\">Join our world famous DDoS team</a> in London, Austin, San Francisco and our elite office in Warsaw, Poland.</p>\n<!--kg-card-end: markdown-->",
		"id": "5d16453b41acde0011a95627",
		"meta_description": null,
		"meta_title": null,
		"og_description": null,
		"og_image": null,
		"og_title": null,
		"primary_author": {
			"id": "5d1644b141acde0011a94f30",
			"name": "Marek Majkowski",
			"slug": "marek-majkowski",
			"profile_image": "http://blog.cloudflare.com/content/images/2017/03/b5967d6c687939594adb6992723d0529.jpeg",
			"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-101.png",
			"bio": null,
			"website": null,
			"location": null,
			"facebook": null,
			"twitter": "@majek04",
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/marek-majkowski/"
		},
		"primary_tag": {
			"id": "5d16450341acde0011a951e3",
			"name": "DDoS",
			"slug": "ddos",
			"description": null,
			"feature_image": null,
			"visibility": "public",
			"meta_title": null,
			"meta_description": null,
			"og_image": null,
			"og_title": null,
			"og_description": null,
			"twitter_image": null,
			"twitter_title": null,
			"twitter_description": null,
			"codeinjection_head": null,
			"codeinjection_foot": null,
			"canonical_url": null,
			"accent_color": null,
			"url": "http://blog.cloudflare.com/tag/ddos/"
		},
		"published_at": "2017-06-28T16:45:49.000+01:00",
		"reading_time": 10,
		"slug": "ssdp-100gbps",
		"tags": [
			{
				"id": "5d16450341acde0011a951e3",
				"name": "DDoS",
				"slug": "ddos",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/ddos/"
			},
			{
				"id": "5d16450341acde0011a951ce",
				"name": "Reliability",
				"slug": "reliability",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/reliability/"
			},
			{
				"id": "5d16450341acde0011a95214",
				"name": "Programming",
				"slug": "programming",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/programming/"
			},
			{
				"id": "5d16450341acde0011a95265",
				"name": "Security",
				"slug": "security",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Security.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Security",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Security'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/security/"
			},
			{
				"id": "5d16450341acde0011a95169",
				"name": "Attacks",
				"slug": "attacks",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/attacks/"
			}
		],
		"title": "Stupidly Simple DDoS Protocol (SSDP) generates 100 Gbps DDoS",
		"twitter_description": null,
		"twitter_image": null,
		"twitter_title": null,
		"updated_at": "2018-08-29T02:27:13.000+01:00",
		"url": "http://blog.cloudflare.com/ssdp-100gbps/",
		"uuid": "aca8b6e4-4a08-4a83-ae3d-7f459e40d74a",
		"visibility": "public"
	}
}