{
	"locale": "en-us",
	"post": {
		"id": "6413a068772e7f000a2a5939",
		"uuid": "2cb9e0ae-791f-4b77-8d0e-18fdce3d766f",
		"title": "How we built DMARC Management using Cloudflare Workers",
		"slug": "how-we-built-dmarc-management",
		"html": "<!--kg-card-begin: markdown--><p><small>This post is also available in <a href=\"http://blog.cloudflare.com/zh-cn/how-we-built-dmarc-management-zh-cn/\">简体中文</a>, <a href=\"http://blog.cloudflare.com/zh-tw/how-we-built-dmarc-management-zh-tw/\">繁體中文</a>, <a href=\"http://blog.cloudflare.com/ja-jp/how-we-built-dmarc-management-ja-jp/\">日本語</a>, <a href=\"http://blog.cloudflare.com/ko-kr/how-we-built-dmarc-management-ko-kr/\">한국어</a>, <a href=\"http://blog.cloudflare.com/de-de/how-we-built-dmarc-management-de-de/\">Deutsch</a>, <a href=\"http://blog.cloudflare.com/fr-fr/how-we-built-dmarc-management-fr-fr/\">Français</a> and <a href=\"http://blog.cloudflare.com/es-es/how-we-built-dmarc-management-es-es/\">Español</a>.</small></p>\n<!--kg-card-end: markdown--><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2023/03/How-we-built-DMARC-Management.png\" class=\"kg-image\" alt=\"How we built DMARC Management\" loading=\"lazy\"></figure><h3 id=\"what-are-dmarc-reports\">What are DMARC reports</h3><p><a href=\"https://www.cloudflare.com/en-gb/learning/dns/dns-records/dns-dmarc-record/\">DMARC</a> stands for Domain-based Message Authentication, Reporting, and Conformance. It's an email authentication protocol that helps protect against email <a href=\"https://www.cloudflare.com/learning/access-management/phishing-attack/\">phishing</a> and <a href=\"https://www.cloudflare.com/learning/email-security/what-is-email-spoofing/\">spoofing</a>.</p><p>When an email is sent, DMARC allows the domain owner to set up a DNS record that specifies which authentication methods, such as <a href=\"https://www.cloudflare.com/learning/dns/dns-records/dns-spf-record/\">SPF</a> (Sender Policy Framework) and <a href=\"https://www.cloudflare.com/learning/dns/dns-records/dns-dkim-record/\">DKIM</a> (DomainKeys Identified Mail), are used to verify the email's authenticity. When the email fails these authentication checks DMARC instructs the recipient's email provider on how to handle the message, either by quarantining it or rejecting it outright.</p><p>DMARC has become increasingly important in today's Internet, where email phishing and spoofing attacks are becoming more sophisticated and prevalent. By implementing DMARC, domain owners can protect their brand and their customers from the negative impacts of these attacks, including loss of trust, reputation damage, and financial loss.</p><p>In addition to <a href=\"https://www.cloudflare.com/learning/dns/dns-records/protect-domains-without-email/\">protecting</a> against phishing and spoofing attacks, DMARC also provides <a href=\"https://www.rfc-editor.org/rfc/rfc7489\">reporting</a> capabilities. Domain owners can receive reports on email authentication activity, including which messages passed and failed DMARC checks, as well as where these messages originated from.</p><p>DMARC management involves the configuration and maintenance of DMARC policies for a domain. Effective DMARC management requires ongoing monitoring and analysis of email authentication activity, as well as the ability to make adjustments and updates to DMARC policies as needed.</p><p>Some key components of effective DMARC management include:</p><ul><li>Setting up DMARC policies: This involves configuring the domain's DMARC record to specify the appropriate authentication methods and policies for handling messages that fail authentication checks. Here’s what a DMARC DNS record looks like:</li></ul><p><code>v=DMARC1; p=reject; rua=mailto:dmarc@example.com</code></p><p>This specifies that we are going to use DMARC version 1, our policy is to reject emails if they fail the DMARC checks, and the email address to which providers should send DMARC reports.</p><ul><li>Monitoring email authentication activity: DMARC reports are an important tool for domain owners to ensure <a href=\"https://www.cloudflare.com/zero-trust/products/email-security/\">email security</a> and deliverability, as well as compliance with industry standards and regulations. By regularly monitoring and analyzing DMARC reports, domain owners can <a href=\"https://www.cloudflare.com/learning/email-security/how-to-prevent-phishing/\">identify email threats</a>, optimize email campaigns, and improve overall email authentication.</li><li>Making adjustments as needed: Based on analysis of DMARC reports, domain owners may need to make adjustments to DMARC policies or authentication methods to ensure that email messages are properly authenticated and protected from phishing and spoofing attacks.</li><li>Working with email providers and third-party vendors: Effective DMARC management may require collaboration with email providers and third-party vendors to ensure that DMARC policies are being properly implemented and enforced.</li></ul><p>Today we launched <a href=\"http://blog.cloudflare.com/dmarc-management\">DMARC management</a>. This is how we built it.</p><h3 id=\"how-we-built-it\">How we built it</h3><p>As a leading provider of cloud-based security and performance solutions, we at Cloudflare take a specific approach to test our products. We \"dogfood\" our own tools and services, which means we use them to run our business. This helps us identify any issues or bugs before they affect our customers.</p><p>We use our own products internally, such as <a href=\"https://workers.cloudflare.com/\">Cloudflare Workers</a>, a serverless platform that allows developers to run their code on our global network. Since its launch in 2017, the Workers ecosystem has grown significantly. Today, there are thousands of developers building and deploying applications on the platform. The power of the Workers ecosystem lies in its ability to enable developers to build sophisticated applications that were previously impossible or impractical to run so close to clients. Workers can be used to build APIs, generate dynamic content, optimize images, perform real-time processing, and much more. The possibilities are virtually endless. We used Workers to power services like <a href=\"http://blog.cloudflare.com/technology-behind-radar2/\">Radar 2.0</a>, or software packages like <a href=\"http://blog.cloudflare.com/welcome-to-wildebeest-the-fediverse-on-cloudflare/\">Wildebeest</a>.</p><p>Recently our <a href=\"https://developers.cloudflare.com/email-routing/\">Email Routing</a> product joined forces with Workers, enabling <a href=\"http://blog.cloudflare.com/announcing-route-to-workers/\">processing incoming emails</a> via Workers scripts. As the <a href=\"https://developers.cloudflare.com/email-routing/email-workers/\">documentation</a> states: “With Email Workers you can leverage the power of Cloudflare Workers to implement any logic you need to <a href=\"https://www.cloudflare.com/learning/email-security/what-is-email-routing/\">process your emails</a> and create complex rules. These rules determine what happens when you receive an email.” Rules and verified addresses can all be configured via our <a href=\"https://developers.cloudflare.com/api/operations/email-routing-destination-addresses-list-destination-addresses\">API</a>. <br></p><p>Here’s how a simple Email Worker looks like:</p><pre><code class=\"language-js\">export default {\n  async email(message, env, ctx) {\n    const allowList = [\"friend@example.com\", \"coworker@example.com\"];\n    if (allowList.indexOf(message.headers.get(\"from\")) == -1) {\n      message.setReject(\"Address not allowed\");\n    } else {\n      await message.forward(\"inbox@corp\");\n    }\n  }\n}</code></pre><p>Pretty straightforward, right?</p><p>With the ability to programmatically process incoming emails in place, it seemed like the perfect way to handle incoming DMARC report emails in a scalable and efficient manner, letting Email Routing and Workers do the heavy lifting of receiving an unbound number of emails from across the globe. A high level description of what we needed is:</p><ol><li>Receive email and extract report</li><li>Publish relevant details to analytics platform</li><li>Store the raw report</li></ol><p>Email Workers enable us to do #1 easily. We just need to create a worker with an email() handler. This handler will receive the <a href=\"https://www.rfc-editor.org/rfc/rfc5321\">SMTP</a> envelope elements, a pre-parsed version of the email headers, and a stream to read the entire raw email.</p><p>For #2 we can also look into the Workers platform, and we will find the <a href=\"https://developers.cloudflare.com/analytics/analytics-engine/\">Workers Analytics Engine</a>. We just need to define an appropriate schema, which depends both on what’s present in the reports and the queries we plan to do later. Afterwards we can query the data using either the <a href=\"https://developers.cloudflare.com/analytics/graphql-api/\">GraphQL</a> or <a href=\"https://developers.cloudflare.com/analytics/analytics-engine/sql-api/\">SQL</a> API.</p><p>For #3 we don’t need to look further than our <a href=\"https://www.cloudflare.com/products/r2/\">R2</a> object storage. It is <a href=\"https://developers.cloudflare.com/r2/examples/demo-worker/\">trivial</a> to access R2 from a Worker. After extracting the reports from the email we will store them in R2 for posterity.</p><p>We built this as a managed service that you can enable on your zone, and added a dashboard interface for convenience, but in reality all the tools are available for you to deploy your own DMARC reports processor on top of Cloudflare Workers, in your own account, without having to worry about servers, scalability or performance.</p><h3 id=\"architecture\">Architecture</h3><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2023/03/Screenshot-2023-03-16-at-4.18.08-PM.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p><a href=\"https://developers.cloudflare.com/email-routing/email-workers/\">Email Workers</a> is a feature of our Email Routing product. The Email Routing component runs in all our nodes, so any one of them is able to process incoming mail, which is important because we announce the Email ingress BGP prefix from all our datacenters. Sending emails to an Email Worker is as easy as setting a rule in the Email Routing dashboard.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2023/03/pasted-image-0--4--3.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>When the Email Routing component receives an email that matches a rule to be delivered to a Worker, it will contact our internal version of the recently open-sourced <a href=\"https://github.com/cloudflare/workerd\">workerd</a> runtime, which also runs on all nodes. The RPC schema that governs this interaction is defined in a <a href=\"https://github.com/capnproto/capnproto\">Capnproto</a> schema, and allows the body of the email to be streamed to Edgeworker as it’s read. If the worker script decides to forward this email, Edgeworker will contact Email Routing using a capability sent in the original request.</p><pre><code class=\"language-js\">jsg::Promise&lt;void&gt; ForwardableEmailMessage::forward(kj::String rcptTo, jsg::Optional&lt;jsg::Ref&lt;Headers&gt;&gt; maybeHeaders) {\n  auto req = emailFwdr-&gt;forwardEmailRequest();\n  req.setRcptTo(rcptTo);\n\n  auto sendP = req.send().then(\n      [](capnp::Response&lt;rpc::EmailMetadata::EmailFwdr::ForwardEmailResults&gt; res) mutable {\n    auto result = res.getResponse().getResult();\n    JSG_REQUIRE(result.isOk(), Error, result.getError());\n  });\n  auto&amp; context = IoContext::current();\n  return context.awaitIo(kj::mv(sendP));\n}\n\n</code></pre><p>In the context of DMARC reports this is how we handle the incoming emails:</p><!--kg-card-begin: markdown--><ol>\n<li>Fetch the recipient of the email being processed, this is the RUA that was used. RUA is a DMARC configuration parameter that indicates where aggregate DMARC processing feedback should be reported pertaining to a certain domain. This recipient can be found in the “to” attribute of the message.</li>\n</ol>\n<pre><code>const ruaID = message.to\n</code></pre>\n<ol start=\"2\">\n<li>Since we handle DMARC reports for an unbounded number of domains, we use Workers KV to store some information about each one and key this information on the RUA. This also lets us know if we should be receiving these reports.</li>\n</ol>\n<pre><code>const accountInfoRaw = await env.KV_DMARC_REPORTS.get(dmarc:${ruaID})\n</code></pre>\n<ol start=\"3\">\n<li>At this point, we want to read the entire email into an arrayBuffer in order to parse it. Depending on the size of the report we may run into the limits of the free Workers plan. If this happens, we recommend that you switch to the <a href=\"https://www.cloudflare.com/workers-unbound-beta/\">Workers Unbound</a> resource model which does not have this issue.</li>\n</ol>\n<pre><code>const rawEmail = new Response(message.raw)\nconst arrayBuffer = await rawEmail.arrayBuffer()\n</code></pre>\n<ol start=\"4\">\n<li>Parsing the raw email involves, among other things, parsing its MIME parts. There are multiple libraries available that allow one to do this. For example, you could use <a href=\"https://www.npmjs.com/package/postal-mime\">postal-mime</a>:</li>\n</ol>\n<pre><code>const parser = new PostalMime.default()\nconst email = await parser.parse(arrayBuffer)\n</code></pre>\n<ol start=\"5\">\n<li>Having parsed the email we now have access to its attachments. These attachments are the DMARC reports themselves and they can be compressed. The first thing we want to do is store them in their compressed form in <a href=\"https://developers.cloudflare.com/r2/data-access/workers-api/workers-api-usage/\">R2</a> for long-term storage. They can be useful later on for re-processing or investigating interesting reports. Doing this is as simple as calling put() on the R2 binding. In order to facilitate retrieval later we recommend that you spread the report files across directories based on the current time.</li>\n</ol>\n<pre><code>await env.R2_DMARC_REPORTS.put(\n    `${date.getUTCFullYear()}/${date.getUTCMonth() + 1}/${attachment.filename}`,\n    attachment.content\n  )\n</code></pre>\n<ol start=\"6\">\n<li>\n<p>We now need to look into the attachment mime type. The raw form of DMARC reports is XML, but they can be compressed. In this case we need to decompress them first. DMARC reporter files can use multiple compression algorithms. We use the MIME type to know which one to use. For <a href=\"https://en.wikipedia.org/wiki/Zlib\">Zlib</a> compressed reports <a href=\"https://www.npmjs.com/package/pako\">pako</a> can be used while for ZIP compressed reports <a href=\"https://www.npmjs.com/package/unzipit\">unzipit</a> is a good choice.</p>\n</li>\n<li>\n<p>Having obtained the raw XML form of the report, <a href=\"https://www.npmjs.com/package/fast-xml-parser\">fast-xml-parser</a> has worked well for us in parsing them. Here’s how the DMARC report XML looks:</p>\n</li>\n</ol>\n<pre><code>&lt;feedback&gt;\n  &lt;report_metadata&gt;\n    &lt;org_name&gt;example.com&lt;/org_name&gt;\n    &lt;emaildmarc-reports@example.com&lt;/email&gt;\n   &lt;extra_contact_info&gt;http://example.com/dmarc/support&lt;/extra_contact_info&gt;\n    &lt;report_id&gt;9391651994964116463&lt;/report_id&gt;\n    &lt;date_range&gt;\n      &lt;begin&gt;1335521200&lt;/begin&gt;\n      &lt;end&gt;1335652599&lt;/end&gt;\n    &lt;/date_range&gt;\n  &lt;/report_metadata&gt;\n  &lt;policy_published&gt;\n    &lt;domain&gt;business.example&lt;/domain&gt;\n    &lt;adkim&gt;r&lt;/adkim&gt;\n    &lt;aspf&gt;r&lt;/aspf&gt;\n    &lt;p&gt;none&lt;/p&gt;\n    &lt;sp&gt;none&lt;/sp&gt;\n    &lt;pct&gt;100&lt;/pct&gt;\n  &lt;/policy_published&gt;\n  &lt;record&gt;\n    &lt;row&gt;\n      &lt;source_ip&gt;192.0.2.1&lt;/source_ip&gt;\n      &lt;count&gt;2&lt;/count&gt;\n      &lt;policy_evaluated&gt;\n        &lt;disposition&gt;none&lt;/disposition&gt;\n        &lt;dkim&gt;fail&lt;/dkim&gt;\n        &lt;spf&gt;pass&lt;/spf&gt;\n      &lt;/policy_evaluated&gt;\n    &lt;/row&gt;\n    &lt;identifiers&gt;\n      &lt;header_from&gt;business.example&lt;/header_from&gt;\n    &lt;/identifiers&gt;\n    &lt;auth_results&gt;\n      &lt;dkim&gt;\n        &lt;domain&gt;business.example&lt;/domain&gt;\n        &lt;result&gt;fail&lt;/result&gt;\n        &lt;human_result&gt;&lt;/human_result&gt;\n      &lt;/dkim&gt;\n      &lt;spf&gt;\n        &lt;domain&gt;business.example&lt;/domain&gt;\n        &lt;result&gt;pass&lt;/result&gt;\n      &lt;/spf&gt;\n    &lt;/auth_results&gt;\n  &lt;/record&gt;\n&lt;/feedback&gt;\n</code></pre>\n<ol start=\"8\">\n<li>We now have all the data in the report at our fingertips. What we do from here on depends a lot on how we want to present the data. For us, the goal was to display meaningful data extracted from them in our Dashboard. Therefore we needed an Analytics platform where we could push the enriched data. Enter, <a href=\"https://developers.cloudflare.com/analytics/analytics-engine/\">Workers Analytics Engine</a>. The Analytics engine is perfect for this task since it allows us to <a href=\"https://developers.cloudflare.com/analytics/analytics-engine/get-started/#3-write-data-from-your-worker\">send</a> data to it from a worker, and exposes a <a href=\"https://developers.cloudflare.com/analytics/graphql-api/\">GraphQL API</a> to interact with the data afterwards. This is how we obtain the data to show in our dashboard.</li>\n</ol>\n<!--kg-card-end: markdown--><p>In the future, we are also considering integrating <a href=\"https://developers.cloudflare.com/queues/\">Queues</a> in the workflow to asynchronously process the report and avoid waiting for the client to complete it.</p><p>We managed to implement this project end-to-end relying only on the Workers infrastructure, proving that it’s possible, and advantageous, to build non-trivial apps without having to worry about scalability, performance, storage and security issues.</p><h3 id=\"open-sourcing\">Open sourcing</h3><p>As we mentioned before, we built a managed service that you can enable and use, and we will manage it for you. But, everything we did can also be deployed by you, in your account, so that you can manage your own DMARC reports. It’s easy, and free. To help you with that, we are releasing an open-source version of a Worker that processes DMARC reports in the way described above: <a href=\"https://github.com/cloudflare/dmarc-email-worker\">https://github.com/cloudflare/dmarc-email-worker</a></p><p>If you don’t have a dashboard where to show the data, you can also <a href=\"https://developers.cloudflare.com/analytics/analytics-engine/worker-querying/\">query</a> the Analytics Engine from a Worker. Or, if you want to store them in a relational database, then there’s <a href=\"https://developers.cloudflare.com/d1/platform/client-api/\">D1</a> to the rescue. The possibilities are endless and we are excited to find out what you’ll build with these tools.</p><p>Please contribute, make your own, we’ll be listening.</p><h3 id=\"final-words\">Final words</h3><p>We hope that this post has furthered your understanding of the Workers platform. Today Cloudflare takes advantage of this platform to build most of our services, and we think you should too.</p><p>Feel free to contribute to our open-source version and show us what you can do with it.</p><p>The Email Routing is also working on expanding the Email Workers API more functionally, but that deserves another blog soon.</p>",
		"comment_id": "6413a068772e7f000a2a5939",
		"feature_image": "http://blog.cloudflare.com/content/images/2023/03/How-we-built-DMARC-Management-1.png",
		"featured": false,
		"visibility": "public",
		"created_at": "2023-03-16T23:04:08.000+00:00",
		"updated_at": "2024-01-09T20:34:20.000+00:00",
		"published_at": "2023-03-17T13:00:00.000+00:00",
		"custom_excerpt": "At Cloudflare, we use the Workers platform and our product stack to build new services. Read how we made the new DMARC Management solution entirely on top of our APIs.\n",
		"codeinjection_head": null,
		"codeinjection_foot": null,
		"custom_template": null,
		"canonical_url": null,
		"authors": [
			{
				"id": "6034f17687ee1b01ba88e1c3",
				"name": "André Cruz",
				"slug": "andre-cruz",
				"profile_image": "http://blog.cloudflare.com/content/images/2021/02/andre2.jpg",
				"cover_image": null,
				"bio": null,
				"website": null,
				"location": "Lisbon, Portugal",
				"facebook": null,
				"twitter": "@edevil",
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/andre-cruz/"
			},
			{
				"id": "6356a2ee63069f000aeecd0b",
				"name": "Nelson Duarte",
				"slug": "nelson-duarte",
				"profile_image": "http://blog.cloudflare.com/content/images/2022/10/me_1x1.jpg",
				"cover_image": null,
				"bio": null,
				"website": null,
				"location": "Portugal",
				"facebook": null,
				"twitter": null,
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/nelson-duarte/"
			}
		],
		"tags": [
			{
				"id": "6413a0bd772e7f000a2a5943",
				"name": "#BLOG-1751",
				"slug": "hash-blog-1751",
				"description": null,
				"feature_image": null,
				"visibility": "internal",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/404/"
			},
			{
				"id": "6057788c17ca5101ba6f1a7d",
				"name": "Security Week",
				"slug": "security-week",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2024/03/image4-2.png",
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/security-week/"
			},
			{
				"id": "62161aff1b8fa8000b5ddc9e",
				"name": "Email Security",
				"slug": "email-security",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/email-security/"
			},
			{
				"id": "5d16450341acde0011a95265",
				"name": "Security",
				"slug": "security",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Security.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Security",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Security'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/security/"
			},
			{
				"id": "64139739772e7f000a2a58f8",
				"name": "DMARC",
				"slug": "dmarc",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/dmarc/"
			}
		],
		"primary_author": {
			"id": "6034f17687ee1b01ba88e1c3",
			"name": "André Cruz",
			"slug": "andre-cruz",
			"profile_image": "http://blog.cloudflare.com/content/images/2021/02/andre2.jpg",
			"cover_image": null,
			"bio": null,
			"website": null,
			"location": "Lisbon, Portugal",
			"facebook": null,
			"twitter": "@edevil",
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/andre-cruz/"
		},
		"primary_tag": null,
		"url": "http://blog.cloudflare.com/how-we-built-dmarc-management/",
		"excerpt": "At Cloudflare, we use the Workers platform and our product stack to build new services. Read how we made the new DMARC Management solution entirely on top of our APIs.\n",
		"reading_time": 9,
		"access": true,
		"comments": false,
		"og_image": "http://blog.cloudflare.com/content/images/2023/03/How-we-built-DMARC-Management-using-Cloudflare-Workers-OG-1.png",
		"og_title": null,
		"og_description": null,
		"twitter_image": "http://blog.cloudflare.com/content/images/2023/03/How-we-built-DMARC-Management-using-Cloudflare-Workers-OG.png",
		"twitter_title": null,
		"twitter_description": null,
		"meta_title": null,
		"meta_description": null,
		"email_subject": null,
		"frontmatter": null,
		"feature_image_alt": null,
		"feature_image_caption": null
	}
}