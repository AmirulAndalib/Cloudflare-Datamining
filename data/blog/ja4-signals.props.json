{
	"locale": "en-us",
	"post": {
		"access": true,
		"authors": [
			{
				"id": "5d1644b141acde0011a94fbd",
				"name": "Alex Bocharov",
				"slug": "alex-bocharov",
				"profile_image": "http://blog.cloudflare.com/content/images/2018/02/27b2849.jpg",
				"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-66.png",
				"bio": null,
				"website": null,
				"location": null,
				"facebook": null,
				"twitter": null,
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/alex-bocharov/"
			},
			{
				"id": "63657ebbabc75e000aadf4e7",
				"name": "Adam Martinetti",
				"slug": "adam-martinetti",
				"profile_image": "http://blog.cloudflare.com/content/images/2022/12/_tmp_uploaded20220909-4-1lugsmy.jpg",
				"cover_image": null,
				"bio": null,
				"website": null,
				"location": null,
				"facebook": null,
				"twitter": "@adamemcf",
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/adam-martinetti/"
			}
		],
		"canonical_url": null,
		"codeinjection_foot": null,
		"codeinjection_head": null,
		"comment_id": "667deb80a4598c000bd706b4",
		"comments": false,
		"created_at": "2024-06-27T23:45:20.000+01:00",
		"custom_excerpt": "Explore how Cloudflare's JA4 fingerprinting and inter-request signals provide robust and scalable insights for advanced web security and threat detection",
		"custom_template": null,
		"email_subject": null,
		"excerpt": "Explore how Cloudflare's JA4 fingerprinting and inter-request signals provide robust and scalable insights for advanced web security and threat detection",
		"feature_image": "http://blog.cloudflare.com/content/images/2024/06/image2-18.png",
		"feature_image_alt": "Advancing Threat Intelligence: JA4 fingerprints and inter-request signals",
		"feature_image_caption": null,
		"featured": false,
		"frontmatter": null,
		"html": "<figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2024/06/image2-17.png\" class=\"kg-image\" alt=\"Advancing Threat Intelligence: JA4 fingerprints and inter-request signals\" loading=\"lazy\" width=\"1999\" height=\"1125\"></figure><p>For many years, Cloudflare has used advanced fingerprinting techniques to help block online threats, in products like our <a href=\"http://blog.cloudflare.com/meet-gatebot-a-bot-that-allows-us-to-sleep\">DDoS engine</a>, <a href=\"http://blog.cloudflare.com/patching-the-internet-fixing-the-wordpress-br/\">our WAF</a>, and <a href=\"https://www.cloudflare.com/application-services/products/bot-management/\">Bot Management</a>. For the purposes of Bot Management, fingerprinting characteristic elements of client software help us quickly identify what kind of software is making an HTTP request. It’s an efficient and accurate way to differentiate a browser from a Python script, while preserving user privacy. These fingerprints are used on their own for simple rules, and they underpin complex machine learning models as well. </p><p>Making sure our fingerprints keep pace with the pace of change on the Internet is a constant and critical task. Bots will always adapt to try and look more browser-like. Less frequently, browsers will introduce major changes to their behavior and affect the entire Internet landscape. Last year, Google <a href=\"https://chromestatus.com/feature/5124606246518784\">did exactly that</a>, making older TLS fingerprints almost useless for identifying the latest version of Chrome.</p><h2 id=\"cloudflare-network-fingerprinting-techniques\">Cloudflare network fingerprinting techniques</h2><p>These methods are instrumental in accurately scoring and classifying bots, enhancing security measures, and enriching data analytics capabilities. Below are some examples of the fingerprinting techniques we have implemented over the years:</p><p><strong>HTTP Signature:</strong> The HTTP Signature technique involves analyzing <a href=\"https://en.wikipedia.org/wiki/List_of_HTTP_header_fields\">HTTP headers</a> and other request attributes to create a unique signature for each client. This method is particularly useful for identifying and managing bot traffic, as it can detect inconsistencies between the HTTP signature and the claimed user-agent.</p><p><strong>ClientHello fingerprint (v1 &amp; v2)</strong>: The <a href=\"https://www.cloudflare.com/learning/ssl/what-happens-in-a-tls-handshake/\">ClientHello</a> fingerprint technique involves analyzing the <a href=\"https://datatracker.ietf.org/doc/html/rfc5246#section-7.4.1.2\">ClientHello message</a> during the TLS handshake. This message contains various parameters, such as <a href=\"https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml#tls-parameters-4\">cipher suites</a>, <a href=\"https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml\">extensions</a>, and <a href=\"https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml#tls-parameters-8\">supported groups</a>, which can be used to create a unique fingerprint for each client. The first version of ClientHello fingerprint was introduced as part of Cloudflare's broader TLS fingerprinting efforts, with subsequent improvements leading to version 2. These fingerprints help in identifying the client software and its configuration, providing a static identifier that can be used to detect anomalies and potential threats.</p><p><strong>HTTP/2 fingerprint:</strong> HTTP/2 fingerprinting focuses on the unique characteristics of the <a href=\"https://datatracker.ietf.org/doc/html/rfc9113\">HTTP/2 protocol</a>, such as the settings frame, stream priority information, and the order of pseudo-header fields. Supported by all major browsers, this method was introduced to leverage the protocol's binary framing layer, which provides a rich set of attributes for creating unique client fingerprints.</p><p><strong>HTTP/3 and QUIC fingerprints</strong>: As <a href=\"https://www.cloudflare.com/learning/performance/what-is-http3/\">HTTP/3</a> and the QUIC protocol gain popularity, Cloudflare has developed fingerprinting techniques tailored to these advanced protocols. Running over QUIC, HTTP/3 uses <a href=\"https://www.cloudflare.com/learning/ddos/glossary/user-datagram-protocol-udp/\">UDP</a> and introduces unique handshake mechanisms, distinct from TCP-based protocols. Cloudflare’s techniques focus on specific attributes like QUIC version and transport parameters to generate precise fingerprints. These are vital for managing and identifying traffic, particularly in environments that heavily use Google products.</p><p><strong>JA3 fingerprint</strong>: This TLS fingerprinting technique, introduced by <a href=\"https://github.com/salesforce/ja3\">Salesforce researchers</a> in 2017 and later adopted by Cloudflare, involves creating a hash of the TLS ClientHello message. This hash includes the ordered list of TLS cipher suites, extensions, and other parameters, providing a unique identifier for each client. While JA3 is broadly utilized for detecting malicious activity and pinpointing specific client software, it shares similarities with Cloudflare's proprietary ClientHello fingerprints (v1 &amp; v2). However, the latter distinguish themselves by utilizing different components of the ClientHello message and employing alternative encoding schemes.</p><p>These fingerprinting techniques power Cloudflare's <a href=\"https://developers.cloudflare.com/bots/concepts/bot-score/#heuristics\">Heuristic engine</a> and <a href=\"https://developers.cloudflare.com/bots/concepts/bot-score/#machine-learning\">machine learning</a> models, both of which compute a <a href=\"http://blog.cloudflare.com/cloudflare-bot-management-machine-learning-and-more/\">Bot Score</a>. This score assesses the likelihood — on a scale from 0 to 100 — of whether a request originated from an automated program (low score) or a human (high score). Additionally, these models leverage aggregated traffic statistics from all fingerprint types, and other dimensions, and integrate features throughout the <a href=\"https://www.cloudflare.com/learning/ddos/glossary/open-systems-interconnection-model-osi/\">OSI model's layers</a> (L1 to L7), enabling them to analyze every request for all customers. They provide sophisticated, real-time security analysis with inferences delivered at <a href=\"http://blog.cloudflare.com/scalable-machine-learning-at-cloudflare\">microsecond latency</a>, providing prompt and precise responses to potential threats.</p><h3 id=\"limitations-of-ja3-fingerprint\">Limitations of JA3 fingerprint</h3><p>In early 2023, Google <a href=\"https://chromestatus.com/feature/5124606246518784\">implemented a change in Chromium-based browsers</a> to shuffle the order of TLS extensions – a strategy aimed at disrupting the detection capabilities of JA3 and enhancing the robustness of the TLS ecosystem. This modification was prompted by concerns that fixed fingerprint patterns could lead to rigid server implementations, potentially causing complications each time Chrome updates were rolled out. Over time, JA3 became less useful due to the following reasons:</p><p><strong>Randomization of TLS extensions:</strong> Browsers began randomizing the order of TLS extensions in their ClientHello messages. This change meant that the JA3 fingerprints, which relied on the sequential order of these extensions, would vary with each connection, making it unreliable for identifying unique clients​. (Further information can be found at <a href=\"https://www.stamus-networks.com/blog/ja3-fingerprints-fade-browsers-embrace-tls-extension-randomization\">Stamus Networks</a>.)​</p><p><strong>Inconsistencies across tools</strong>: Different tools and databases that implemented JA3 fingerprinting often produced varying results due to discrepancies in how they handled TLS extensions and other protocol elements. This inconsistency hindered the effectiveness of JA3 fingerprints for reliable cross-organization sharing and threat intelligence.​ (Further information can be found at <a href=\"https://fingerprint.com/blog/limitations-ja3-fingerprinting-accurate-device-identification/\">Fingerprint</a>.)​</p><p><strong>Vulnerability to evasion:</strong> While the static and simplistic nature of JA3 made it vulnerable to evasion, Cloudflare's proprietary ClientHello fingerprint v2 (CHFPv2) addressed this challenge by accounting for the randomization of TLS extensions. In our internal implementations, TLS extensions are sorted before being incorporated into the fingerprint, effectively mitigating the impact of randomization for Cloudflare customers. </p><p><strong>Limited scope and lack of adaptability</strong>: JA3 focused solely on elements within the TLS ClientHello packet, covering only a narrow portion of the OSI model’s layers. This limited scope often missed crucial context about a client's environment. Additionally, as newer transport layer protocols like QUIC became popular, JA3’s methodology – originally designed for older versions of TLS and excluding modern protocols – proved ineffective.</p><h2 id=\"enter-ja4-fingerprint\">Enter JA4 fingerprint</h2><p>In response to these challenges, <a href=\"https://foxio.io/\">FoxIO</a> developed JA4, a successor to JA3 that offers a more robust, adaptable, and reliable method for fingerprinting TLS clients across various protocols, including emerging standards like QUIC. Officially launched in September 2023, JA4 is part of the broader <a href=\"https://blog.foxio.io/ja4%2B-network-fingerprinting\">JA4+ suite</a> that includes fingerprints for multiple protocols such as TLS, HTTP, and SSH. This suite is designed to be interpretable by both humans and machines, thereby enhancing threat detection and security analysis capabilities.</p><p>JA4 fingerprint is resistant to the randomization of TLS extensions and incorporates additional useful dimensions, such as Application Layer Protocol Negotiation (ALPN), which were not part of JA3. The introduction of JA4 has been met with positive reception in the cybersecurity community, with several open-source tools and commercial products beginning to incorporate it into their systems, including <a href=\"https://developers.cloudflare.com/bots/concepts/ja3-ja4-fingerprint/\">Cloudflare</a>. The JA4 fingerprint is available under the <a href=\"https://github.com/FoxIO-LLC/ja4/blob/main/License%20FAQ.md\">BSD 3-Clause license</a>, promoting seamless upgrades from JA3. Other fingerprints within the suite, such as JA4S (TLS Server Response) and JA4H (HTTP Client Fingerprinting), are licensed under the proprietary FoxIO License, which is designed for broader use but requires specific arrangements for commercial monetization.</p><p>Let’s take a look at specific JA4 fingerprint example, representing the latest version of Google Chrome on Linux:</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2024/06/Screenshot-2024-06-27-at-4.04.07-PM.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"1296\" height=\"828\"></figure><ol><li><strong>Protocol Identifier (t): </strong>Indicates the use of TLS over TCP. This identifier is crucial for determining the underlying protocol, distinguishing it from <em>q</em> for QUIC or <em>d</em> for DTLS.</li><li><strong>TLS Version (13): </strong>Represents TLS version 1.3, confirming that the client is using one of the latest secure protocols. The version number is derived from analyzing the highest version supported in the ClientHello, excluding any <a href=\"https://www.rfc-editor.org/rfc/rfc8701.html\">GREASE</a> values.</li><li><strong>SNI Presence (d): </strong>The presence of a domain name in the <a href=\"https://www.cloudflare.com/en-gb/learning/ssl/what-is-sni/\">Server Name Indication</a>. This indicates that the client specifies a domain (d), rather than an IP address (it would indicate the absence of SNI).</li><li><strong>Cipher Suites Count (15): </strong>Reflects the total number of cipher suites included in the ClientHello, excluding any GREASE values. It provides insight into the cryptographic options the client is willing to use.</li><li><strong>Extensions Count (16): </strong>Indicates the count of distinct extensions presented by the client in the ClientHello. This measure helps identify the range of functionalities or customizations the client supports.</li><li><strong>ALPN Values (h2): </strong>Represents the Application-Layer Protocol Negotiation protocol, in this case, HTTP/2, which indicates the protocol preferences of the client for optimized web performance.</li><li><strong>Cipher Hash (8daaf6152771): </strong>A truncated SHA256 hash of the list of cipher suites, sorted in hexadecimal order. This unique hash serves as a compact identifier for the client’s cipher suite preferences.</li><li><strong>Extension Hash (02713d6af862): </strong>A truncated SHA256 hash of the sorted list of extensions combined with the list of signature algorithms. This hash provides a unique identifier that helps differentiate clients based on the extensions and signature algorithms they support.</li></ol><p>Here is a <a href=\"https://www.wireshark.org/\">Wireshark</a> example of TLS ClientHello from the latest Chrome on Linux querying <a href=\"https://www.cloudflare.com\">https://www.cloudflare.com</a>:</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2024/06/image1-25.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"1999\" height=\"1115\"></figure><p>Integrating JA4 support into Cloudflare required rethinking our approach to parsing TLS ClientHello messages, which were previously handled in separate implementations across C, Lua, and Go. Recognizing the need to boost performance and ensure memory safety, we developed a new Rust-based crate, <code>client-hello-parser</code>. This unified parser not only simplifies modifications by centralizing all related logic but also prepares us for future transitions, such as replacing nginx with an upcoming Rust-based service. Additionally, this streamlined parser facilitates the exposure of JA4 fingerprints across our platform, improving the integration with Cloudflare's firewall rules, Workers, and analytics systems.</p><h2 id=\"parsing-clienthello\">Parsing ClientHello</h2><p><code>client-hello-parser</code> is an internal Rust crate designed for parsing TLS ClientHello messages. It aims to simplify the process of analyzing TLS traffic by providing a straightforward way to decode and inspect the initial handshake messages sent by clients when establishing TLS connections. This crate efficiently populates a <code>ClientHelloParsed</code> struct with relevant parsed fields, including version 1 and version 2 fingerprints, and JA3 and JA4 hashes, which are essential for network traffic analysis and fingerprinting.</p><p>Key benefits of the <code>client-hello-parser</code> library include:</p><p><strong>Optimized memory usage</strong>: The library achieves amortized zero heap allocations, verified through extensive testing with the <a href=\"https://crates.io/crates/dhat\">dhat</a> crate to track memory allocations. Utilizing the <a href=\"https://crates.io/crates/tinyvec\">tiny_vec</a> crate, it begins with stack allocations for small vectors backed by fixed-size arrays, resorting to heap allocations only when these vectors exceed their initial size. This method ensures efficient reuse of all vectors, maintaining amortized zero heap allocations.</p><p><strong>Memory safety:</strong> Reinforced by Rust's robust borrow checker and complemented by extensive fuzzing, which has helped identify and resolve potential security vulnerabilities previously undetected in C implementations.</p><p><strong>Ultra-low latency</strong>: The parser benefits from using <a href=\"https://crates.io/crates/faster-hex\">faster_hex</a> for efficient hex encoding/decoding, which utilizes SIMD instructions to speed up processing. The use of Rust iterators also helps in optimizing performance, often allowing the compiler to generate SIMD-optimized assembly code. This efficiency is further enhanced through the use of <code>BigEndianIterator,</code> which allows for efficient streaming-like processing of TLS ClientHello bytes in a single pass.</p><p>Parser benchmark results:</p><pre><code>client_hello_benchmark/parse/parse-short-502\n                        time:   [497.15 ns 497.23 ns 497.33 ns]\n                        thrpt:  [2.0107 Melem/s 2.0111 Melem/s 2.0115 Melem/s]\nclient_hello_benchmark/parse/parse-long-1434\n                        time:   [992.82 ns 993.55 ns 994.99 ns]\n                        thrpt:  [1.0050 Melem/s 1.0065 Melem/s 1.0072 Melem/s]</code></pre><p>The benchmark results demonstrate that the parser efficiently handles different sizes of ClientHello messages, with shorter messages being processed at a rate of approximately 2 million elements per second, and longer messages at around 1 million elements per second, showcasing the effectiveness of SIMD optimizations and Rust's iterator performance in real-world applications.</p><p><strong>Robust testing suite:</strong> Includes dozens of real-life TLS ClientHello message examples, with parsed components verified against Wireshark with <a href=\"https://github.com/fullylegit/ja3\">JA3</a> and <a href=\"https://github.com/FoxIO-LLC/ja4/tree/main/wireshark\">JA4</a> plugins. Additionally, <a href=\"https://github.com/rust-fuzz/cargo-fuzz\">Cargo fuzzer</a> with memory sanitizer ensures no memory leaks or edge cases leading to core dumps. Backward compatibility tests with the legacy C parser, imported as a dependency and called via FFI, confirm that both parsers yield equivalent results.</p><p><strong>Seamless integration with nginx</strong>: The crate, compiled as a dynamic library, is linked to the nginx binary, ensuring a smooth transition from the legacy parser to the new Rust-based parser through backwards compatibility tests.</p><p>The transition to a new Rust-based parser has enabled the retirement of multiple implementations across different languages (C, Lua, and Go), significantly enhancing performance and parser robustness against edge cases. This shift also facilitates the easier integration of new features and business logic for parsing TLS ClientHello messages, streamlining future expansions and security updates.</p><p>With Cloudflare JA4 fingerprints implemented on our network, we were left with another problem to solve. When JA3 was released, we saw some scenarios where customers were surprised by traffic from a new JA3 fingerprint and blocked it, only to find the fingerprint was a new browser release, or an OS update had caused a change in the fingerprint used by their mobile device. By giving customers just a hash, customers still lack context. We wanted to give our customers the necessary context to help them make informed decisions about the safety of a fingerprint, so they can act quickly and confidently on it. As more of our customers embrace AI, we’ve heard more demand from our customers to break out the signals that power our bot detection. These customers want to run complex models on proprietary data that has to stay in their control, but they want to have Cloudflare’s unique perspective on Internet traffic when they do it. To us, both use cases sounded like the same problem. </p><h2 id=\"enter-ja4-signals\">Enter JA4 Signals</h2><p>In the ever-evolving landscape of web security, traditional fingerprinting techniques like JA3 and JA4 have proven invaluable for identifying and managing web traffic. However, these methods alone are not sufficient to address the sophisticated tactics employed by malicious agents. Fingerprints can be easily spoofed, they change frequently, and traffic patterns and behaviors are constantly evolving. This is where JA4 Signals come into play, providing a robust and comprehensive approach to traffic analysis.</p><p>JA4 Signals are inter-request features computed based on the last hour of all traffic that Cloudflare sees globally. On a daily basis, we analyze over <strong>15 million</strong> unique JA4 fingerprints generated from more than 500 million user agents and billions of IP addresses. This breadth of data enables JA4 Signals to provide aggregated statistics that offer deeper insights into global traffic patterns – far beyond what single-request or connection fingerprinting can achieve. These signals are crucial for enhancing security measures, whether through simple firewall rules, Workers scripts, or advanced machine learning models.</p><p>Let's consider a specific example of JA4 Signals from a Firewall events activity log, which involves the latest version of Chrome:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://lh7-us.googleusercontent.com/docsz/AD_4nXd9VfMjqVte2PFwN2RfbHjDkTmcPZ4gPSXXvf_nJS6cyG5nHWCMhHVguEuFw3wLF5Nwfu2UP_k2EyWZ7o1ZKtqMUsiLxeg44Qzyye00zdPdsYQjq-rAHtuMPlCXRosMMgltvOksKMHg-dzgBYSlbBhBcNsz?key=-AlmnCfdoiEId8rFUEZbWA\" class=\"kg-image\" alt loading=\"lazy\" width=\"779\" height=\"552\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2024/06/image5-8.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"1520\" height=\"830\"></figure><p>This example highlights that a particular HTTP request received a Bot Score of 95, suggesting it likely originated from a human user operating a browser rather than an automated program or a bot. Please note that ratio and quantile-based signal values fall within the range of [0.0 to 1.0], whereas rank-based signal values are integer values within the range of [1 to N]. Analyzing JA4 Signals in this context provides deeper insight into the behavior of this client (latest Linux Chrome) in comparison to other network clients and their respective JA4 fingerprints:</p><!--kg-card-begin: html--><style type=\"text/css\">\n.tg  {border-collapse:collapse;border-spacing:0;margin:0px auto;}\n.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg .tg-bvb2{background-color:#EFEFEF;color:#1D1F20;font-weight:bold;text-align:center;text-decoration:underline;\n  vertical-align:middle}\n.tg .tg-5y8f{color:#1D1F20;text-align:center;vertical-align:middle}\n.tg .tg-uzsc{background-color:#FFF;color:#1D1F20;text-align:left;vertical-align:middle}\n.tg .tg-37bx{color:#1D1F20;text-align:left;vertical-align:middle}\n@media screen and (max-width: 767px) {.tg {width: auto !important;}.tg col {width: auto !important;}.tg-wrap {overflow-x: auto;-webkit-overflow-scrolling: touch;margin: auto 0px;}}</style>\n<div class=\"tg-wrap\"><table class=\"tg\" style=\"undefined;table-layout: fixed; width: 100%\"><colgroup>\n<col style=\"width: 176.444444px\">\n<col style=\"width: 226.444444px\">\n<col style=\"width: 126.444444px\">\n<col style=\"width: 151.444444px\">\n</colgroup>\n<thead>\n  <tr>\n    <th class=\"tg-bvb2\"><span style=\"font-weight:700;font-style:normal;text-decoration:underline;color:#1D1F20;background-color:transparent\">JA4 Signal</span></th>\n    <th class=\"tg-bvb2\"><span style=\"font-weight:700;font-style:normal;text-decoration:underline;color:#1D1F20;background-color:transparent\">Description</span></th>\n    <th class=\"tg-bvb2\"><span style=\"font-weight:700;font-style:normal;text-decoration:underline;color:#1D1F20;background-color:transparent\">Value example</span></th>\n    <th class=\"tg-bvb2\"><span style=\"font-weight:700;font-style:normal;text-decoration:underline;color:#1D1F20;background-color:transparent\">Interpretation</span></th>\n  </tr></thead>\n<tbody>\n  <tr>\n    <td class=\"tg-5y8f\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#1D1F20;background-color:transparent\">browser_ratio_1h</span></td>\n    <td class=\"tg-uzsc\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#1D1F20;background-color:#FFF\">The ratio of requests originating from browser-based user agents for the JA4 fingerprint in the last hour. Higher values suggest a higher proportion of browser-based requests.</span></td>\n    <td class=\"tg-5y8f\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#1D1F20;background-color:transparent\">0.942</span></td>\n    <td class=\"tg-37bx\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#1D1F20;background-color:transparent\">Indicates a 94.2% browser-based request rate for this JA4.</span></td>\n  </tr>\n  <tr>\n    <td class=\"tg-5y8f\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#1D1F20;background-color:transparent\">cache_ratio_1h</span></td>\n    <td class=\"tg-uzsc\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#1D1F20;background-color:#FFF\">The ratio of cacheable responses for the JA4 fingerprint in the last hour. Higher values suggest a higher proportion of responses that can be cached.</span></td>\n    <td class=\"tg-5y8f\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#1D1F20;background-color:transparent\">0.534</span></td>\n    <td class=\"tg-37bx\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#1D1F20;background-color:transparent\">Shows a 53.4% cacheable response rate for this JA4.</span></td>\n  </tr>\n  <tr>\n    <td class=\"tg-5y8f\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#1D1F20;background-color:transparent\">h2h3_ratio_1h</span></td>\n    <td class=\"tg-37bx\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#1D1F20;background-color:transparent\">The ratio of HTTP/2 and HTTP/3 requests combined with the total number of requests for the JA4 fingerprint in the last hour. Higher values indicate a higher proportion of HTTP/2 and HTTP/3 requests compared to other protocol versions.</span></td>\n    <td class=\"tg-5y8f\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#1D1F20;background-color:transparent\">0.987</span></td>\n    <td class=\"tg-37bx\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#1D1F20;background-color:transparent\">Reflects a 98.7% rate of HTTP/2 and HTTP/3 requests.</span></td>\n  </tr>\n  <tr>\n    <td class=\"tg-5y8f\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#1D1F20;background-color:transparent\">heuristic_ratio_1h</span></td>\n    <td class=\"tg-37bx\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#1D1F20;background-color:transparent\">The ratio of requests with a scoreSrc value of “heuristics” for the JA4 fingerprint in the last hour. Higher values suggest a larger proportion of requests being flagged by heuristic-based scoring.</span></td>\n    <td class=\"tg-5y8f\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#1D1F20;background-color:transparent\">0.007</span></td>\n    <td class=\"tg-37bx\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#1D1F20;background-color:transparent\">Suggests a 0.7% rate of heuristic-based scoring for requests.</span></td>\n  </tr>\n  <tr>\n    <td class=\"tg-5y8f\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#1D1F20;background-color:transparent\">ips_quantile_1h</span></td>\n    <td class=\"tg-uzsc\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#1D1F20;background-color:#FFF\">The quantile position of the JA4 fingerprint based on the number of unique client IP addresses across all fingerprints in the last hour. Higher values indicate a relatively higher number of distinct client IPs compared to other fingerprints.</span></td>\n    <td class=\"tg-5y8f\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#1D1F20;background-color:transparent\">1</span></td>\n    <td class=\"tg-37bx\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#1D1F20;background-color:transparent\">Indicates a high diversity of client IPs for this JA4.</span></td>\n  </tr>\n  <tr>\n    <td class=\"tg-5y8f\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#1D1F20;background-color:transparent\">ips_rank_1h</span></td>\n    <td class=\"tg-uzsc\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#1D1F20;background-color:#FFF\">The rank of the JA4 fingerprint based on the number of unique client IP addresses across all fingerprints in the last hour. Lower values indicate a higher number of distinct client IPs associated with the fingerprint.</span></td>\n    <td class=\"tg-5y8f\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#1D1F20;background-color:transparent\">2</span></td>\n    <td class=\"tg-37bx\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#1D1F20;background-color:transparent\">High volume of IPs compared to other JA4s.</span></td>\n  </tr>\n  <tr>\n    <td class=\"tg-5y8f\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#1D1F20;background-color:transparent\">paths_rank_1h</span></td>\n    <td class=\"tg-uzsc\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#1D1F20;background-color:#FFF\">The rank of the JA4 fingerprint based on the number of unique request paths across all fingerprints in the last hour. Lower values indicate a higher diversity of request paths associated with the fingerprint.</span></td>\n    <td class=\"tg-5y8f\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#1D1F20;background-color:transparent\">2</span></td>\n    <td class=\"tg-37bx\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#1D1F20;background-color:transparent\">High diversity of request paths.</span></td>\n  </tr>\n  <tr>\n    <td class=\"tg-5y8f\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#1D1F20;background-color:transparent\">reqs_quantile_1h</span></td>\n    <td class=\"tg-uzsc\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#1D1F20;background-color:#FFF\">The quantile position of the JA4 fingerprint based on the number of requests across all fingerprints in the last hour. Higher values indicate a relatively higher number of requests compared to other fingerprints.</span></td>\n    <td class=\"tg-5y8f\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#1D1F20;background-color:transparent\">1</span></td>\n    <td class=\"tg-37bx\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#1D1F20;background-color:transparent\">High volume of requests compared to other JA4s.</span></td>\n  </tr>\n  <tr>\n    <td class=\"tg-5y8f\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#1D1F20;background-color:transparent\">reqs_rank_1h</span></td>\n    <td class=\"tg-uzsc\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#1D1F20;background-color:#FFF\">The rank of the JA4 fingerprint based on the number of requests across all fingerprints in the last hour. Lower values indicate a higher number of requests associated with the fingerprint.</span></td>\n    <td class=\"tg-5y8f\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#1D1F20;background-color:transparent\">2</span></td>\n    <td class=\"tg-37bx\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#1D1F20;background-color:transparent\">High request count for this JA4.</span></td>\n  </tr>\n  <tr>\n    <td class=\"tg-5y8f\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#1D1F20;background-color:transparent\">uas_rank_1h</span></td>\n    <td class=\"tg-uzsc\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#1D1F20;background-color:#FFF\">The rank of the JA4 fingerprint based on the number of distinct user agents across all fingerprints in the last hour. Lower values indicate a higher diversity of user agents associated with the fingerprint.</span></td>\n    <td class=\"tg-5y8f\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#1D1F20;background-color:transparent\">1</span></td>\n    <td class=\"tg-37bx\"><span style=\"font-weight:400;font-style:normal;text-decoration:none;color:#1D1F20;background-color:transparent\">Highest diversity of user agents for this JA4.</span></td>\n  </tr>\n</tbody></table></div><!--kg-card-end: html--><p>The JA4 fingerprint and JA4 Signals are now available in the Firewall Rules UI, Bot Analytics and Workers. Customers can now use these fields to write custom rules, rate-limiting rules, transform rules, or Workers logic using JA4 fingerprint and JA4 Signals.</p><p>Let's demonstrate how to use JA4 Signals with the following Worker example. This script processes incoming requests by parsing and categorizing JA4 Signals, providing a clear structure for further analysis or rule application within Cloudflare Workers:</p><pre><code class=\"language-JavaScript\">/**\n * Event listener for 'fetch' events. This triggers on every request to the worker.\n */\naddEventListener('fetch', event =&gt; {\n  event.respondWith(handleRequest(event.request))\n})\n\n/**\n * Main handler for incoming requests.\n * @param {Request} request - The incoming request object from the fetch event.\n * @returns {Response} A response object with JA4 Signals in JSON format.\n */\nasync function handleRequest(request) {\n  // Safely access the ja4Signals object using optional chaining, which prevents errors if properties are undefined.\n  const ja4Signals = request.cf?.botManagement?.ja4Signals || {};\n\n  // Construct the response content, including both the original ja4Signals and the parsed signals.\n  const responseContent = {\n    ja4Signals: ja4Signals,\n    jaSignalsParsed: parseJA4Signals(ja4Signals)\n  };\n\n  // Return a JSON response with appropriate headers.\n  return new Response(JSON.stringify(responseContent), {\n    status: 200,\n    headers: {\n      \"content-type\": \"application/json;charset=UTF-8\"\n    }\n  })\n}\n\n/**\n * Parses the JA4 Signals into categorized groups based on their names.\n * @param {Object} ja4Signals - The JA4 Signals object that may contain various metrics.\n * @returns {Object} An object with categorized JA4 Signals: ratios, ranks, and quantiles.\n */\nfunction parseJA4Signals(ja4Signals) {\n  // Define the keys for each category of signals.\n  const ratios = ['h2h3_ratio_1h', 'heuristic_ratio_1h', 'browser_ratio_1h', 'cache_ratio_1h'];\n  const ranks = ['uas_rank_1h', 'paths_rank_1h', 'reqs_rank_1h', 'ips_rank_1h'];\n  const quantiles = ['reqs_quantile_1h', 'ips_quantile_1h'];\n\n  // Return an object with each category containing only the signals that are present.\n  return {\n    ratios: filterKeys(ja4Signals, ratios),\n    ranks: filterKeys(ja4Signals, ranks),\n    quantiles: filterKeys(ja4Signals, quantiles)\n  };\n}\n\n/**\n * Filters the keys in the ja4Signals object that match the list of specified keys and are not undefined.\n * @param {Object} ja4Signals - The JA4 Signals object.\n * @param {Array&lt;string&gt;} keys - An array of keys to filter from the ja4Signals object.\n * @returns {Object} A filtered object containing only the specified keys that are present in ja4Signals.\n */\nfunction filterKeys(ja4Signals, keys) {\n  const filtered = {};\n  // Iterate over the specified keys and add them to the filtered object if they exist in ja4Signals.\n  keys.forEach(key =&gt; {\n    // Check if the key exists and is not undefined to handle optional presence of each signal.\n    if (ja4Signals &amp;&amp; ja4Signals[key] !== undefined) {\n      filtered[key] = ja4Signals[key];\n    }\n  });\n  return filtered;\n}</code></pre><p>When JA4 Signals are present, the output from the Worker might look like this:</p><pre><code class=\"language-JavaScript\">{\n  \"ja4Signals\": {\n    \"h2h3_ratio_1h\": 0.98826485872269,\n    \"heuristic_ratio_1h\": 7.288895722013e-05,\n    \"reqs_quantile_1h\": 0.99905741214752,\n    \"uas_rank_1h\": 901,\n    \"browser_ratio_1h\": 0.93640440702438,\n    \"paths_rank_1h\": 655,\n    \"reqs_rank_1h\": 850,\n    \"cache_ratio_1h\": 0.18918327987194,\n    \"ips_rank_1h\": 662,\n    \"ips_quantile_1h\": 0.99926590919495\n  },\n  \"jaSignalsParsed\": {\n    \"ratios\": {\n      \"h2h3_ratio_1h\": 0.98826485872269,\n      \"heuristic_ratio_1h\": 7.288895722013e-05,\n      \"browser_ratio_1h\": 0.93640440702438,\n      \"cache_ratio_1h\": 0.18918327987194\n    },\n    \"ranks\": {\n      \"uas_rank_1h\": 901,\n      \"paths_rank_1h\": 655,\n      \"reqs_rank_1h\": 850,\n      \"ips_rank_1h\": 662\n    },\n    \"quantiles\": {\n      \"reqs_quantile_1h\": 0.99905741214752,\n      \"ips_quantile_1h\": 0.99926590919495\n    }\n  }\n}</code></pre><p>And when JA4 Signals are missing, the output appears as follows:</p><pre><code class=\"language-JavaScript\">{\n  \"ja4Signals\": {},\n  \"jaSignalsParsed\": {\n    \"ratios\": {},\n    \"ranks\": {},\n    \"quantiles\": {}\n  }\n}</code></pre><h3 id=\"benefits-of-ja4-signals\">Benefits of JA4 Signals</h3><ul><li><strong>Comprehensive traffic analysis</strong>: JA4 Signals aggregate data over an hour to provide a holistic view of traffic patterns. This method enhances the ability to identify emerging threats and abnormal behaviors by analyzing changes over time rather than in isolation.</li><li><strong>Precision in anomaly detection</strong>: Leveraging detailed inter-request features, JA4 Signals enable the precise detection of anomalies that may be overlooked by single-request fingerprinting. This leads to more accurate identification of sophisticated cyber threats.</li><li><strong>Globally scalable insights</strong>: By synthesizing data at a global scale, JA4 Signals harness the strength of Cloudflare’s network intelligence. This extensive analysis makes the system less susceptible to manipulation and provides a resilient foundation for security protocols.</li><li><strong>Dynamic security enforcement</strong>: JA4 Signals can dynamically inform security rules, from simple firewall configurations to complex machine learning algorithms. This adaptability ensures that security measures evolve in tandem with changing traffic patterns and emerging threats.</li><li><strong>Reduction in false positives and negatives</strong>: With the detailed insights provided by JA4 Signals, security systems can distinguish between legitimate and malicious traffic more effectively, reducing the occurrence of false positives and negatives and improving overall system reliability.</li></ul><h2 id=\"conclusion\">Conclusion</h2><p>The introduction of JA4 fingerprint and JA4 Signals marks a significant milestone in advancing Cloudflare’s security offerings, including Bot Management and <a href=\"https://www.cloudflare.com/ddos/\">DDoS protection</a>. These tools not only enhance the robustness of our traffic analysis but also showcase the continuous evolution of our network fingerprinting techniques. The efficiency of computing JA4 fingerprints enables real-time detection and response to emerging threats. Similarly, by leveraging aggregated statistics and inter-request features, JA4 Signals provide deep insights into traffic patterns at speeds measured in microseconds, ensuring that no detail is too small to be captured and analyzed.</p><p>These security features are underpinned by the scalable techniques and open-sourced libraries outlined in <a href=\"http://blog.cloudflare.com/scalable-machine-learning-at-cloudflare\">\"Every request, every microsecond: scalable machine learning at Cloudflare\"</a>. This discussion highlights how Cloudflare's innovations not only analyze vast amounts of data but also transform this analysis into actionable, reliable, and dynamically adaptable security measures.</p><p>Any Enterprise business with a bot problem will benefit from Cloudflare’s unique JA4 implementation and our perspective on bot traffic, but customers who run their own internal threat models will also benefit from access to data insights from a network that processes over 50 million requests per second. Please <a href=\"https://www.cloudflare.com/plans/enterprise/contact/\">get in touch</a> with us to learn more about our Bot Management offering.</p>",
		"id": "667deb80a4598c000bd706b4",
		"meta_description": "Explore how Cloudflare's JA4 fingerprinting and inter-request signals provide robust and scalable insights for advanced web security and threat detection",
		"meta_title": null,
		"og_description": null,
		"og_image": "http://blog.cloudflare.com/content/images/2024/06/BLOG-2361-1.png",
		"og_title": null,
		"primary_author": {
			"id": "5d1644b141acde0011a94fbd",
			"name": "Alex Bocharov",
			"slug": "alex-bocharov",
			"profile_image": "http://blog.cloudflare.com/content/images/2018/02/27b2849.jpg",
			"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-66.png",
			"bio": null,
			"website": null,
			"location": null,
			"facebook": null,
			"twitter": null,
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/alex-bocharov/"
		},
		"primary_tag": null,
		"published_at": "2024-08-12T14:00:52.000+01:00",
		"reading_time": 16,
		"slug": "ja4-signals",
		"tags": [
			{
				"id": "667debd0a4598c000bd706bb",
				"name": "#BLOG-2361",
				"slug": "hash-blog-2361",
				"description": null,
				"feature_image": null,
				"visibility": "internal",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/404/"
			},
			{
				"id": "5eb280586fa3db01bc6a31b2",
				"name": "Bot Management",
				"slug": "bot-management",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/bot-management/"
			},
			{
				"id": "5d16450341acde0011a95265",
				"name": "Security",
				"slug": "security",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Security.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Security",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Security'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/security/"
			},
			{
				"id": "5d16450341acde0011a951e6",
				"name": "WAF",
				"slug": "waf",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/waf/"
			},
			{
				"id": "6391bd0f3833d8000a01b91e",
				"name": "Application Services",
				"slug": "application-services",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/application-services/"
			}
		],
		"title": "Advancing Threat Intelligence: JA4 fingerprints and inter-request signals",
		"twitter_description": null,
		"twitter_image": "http://blog.cloudflare.com/content/images/2024/06/BLOG-2361.png",
		"twitter_title": null,
		"updated_at": "2024-08-12T13:59:31.000+01:00",
		"url": "http://blog.cloudflare.com/ja4-signals/",
		"uuid": "0c4c55de-aa56-4e20-8217-1722b47ff301",
		"visibility": "public"
	}
}