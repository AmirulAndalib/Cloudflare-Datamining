{
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Alex Forster",
				"slug": "alex-forster",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/slt3lc6tev37/4pCN3DTLyeVoIeQ2amvqdy/5edf6fd0715e849b4b079a20c529aac5/alex-forster.png",
				"location": null,
				"website": null,
				"twitter": "@alex_forster",
				"facebook": null
			}
		],
		"excerpt": "This post tells the story of how a missing shell option called “pipefail” slowed Cloudflare down.",
		"feature_image": "https://cf-assets.www.cloudflare.com/slt3lc6tev37/QH2rrW2TGXO58Hmm43x5I/a4f328f5dcfaf13d72cc52ab2cd36258/pipefail-how-a-missing-shell-option-slowed-cloudflare-down.png",
		"featured": false,
		"html": "\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/slt3lc6tev37/3E6lhMo3qjyAuKxbUDRZmq/dd3cf31af336f217bf709bd92af77f95/image4-4.png\" alt=\"PIPEFAIL: How a missing shell option slowed Cloudflare down\" class=\"kg-image\" width=\"1200\" height=\"675\" loading=\"lazy\"/>\n            \n            </figure><p>At Cloudflare, we’re used to being the fastest in the world. However, for approximately 30 minutes last December, <a href=\"https://www.cloudflarestatus.com/incidents/qz5m74q8q0jl\">Cloudflare was slow</a>. Between 20:10 and 20:40 UTC on December 16, 2021, web requests served by Cloudflare were artificially delayed by up to five seconds before being processed. This post tells the story of how a missing shell option called “pipefail” slowed Cloudflare down.</p><h2>Background</h2><p>Before we can tell this story, we need to introduce you to some of its characters.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/slt3lc6tev37/2W5dv9p2aH8jQJ7TgRHg3k/623025487adbc9220f4b078cca110bb2/image7-3.png\" alt=\"\" class=\"kg-image\" width=\"1999\" height=\"1506\" loading=\"lazy\"/>\n            \n            </figure><p>Cloudflare’s <b>Front Line</b> protects millions of users from some of the <a href=\"/cloudflare-thwarts-17-2m-rps-ddos-attack-the-largest-ever-reported/\">largest attacks</a> ever recorded. This protection is orchestrated by a sidecar service called <code><b>dosd</b></code>, which analyzes traffic and looks for attacks. When <code>dosd</code> detects an attack, it provides Front Line with a list of attack fingerprints that describe how Front Line can match and block the attack traffic.</p><p>Instances of <code>dosd</code> run on every Cloudflare server, and they communicate with each other using a peer-to-peer mesh to identify malicious traffic patterns. This decentralized design allows <code>dosd</code> to perform analysis with much higher fidelity than is possible with a centralized system, but its scale also imposes some strict performance requirements. To meet these requirements, we need to provide <code>dosd</code> with very fast access to large amounts of configuration data, which naturally means that <code>dosd</code> depends on <b>Quicksilver</b>. Cloudflare developed <a href=\"/moving-quicksilver-into-production/\">Quicksilver</a> to manage configuration data and replicate it around the world in milliseconds, allowing it to be accessed by services like <code>dosd</code> in microseconds.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/slt3lc6tev37/5GMjP5VPXF8I00vVTs8TYG/afae530c5b580f969610bee1ba4238bf/image2-5.png\" alt=\"\" class=\"kg-image\" width=\"1999\" height=\"1506\" loading=\"lazy\"/>\n            \n            </figure><p>One piece of configuration data that <code>dosd</code> needs comes from the <b>Addressing API</b>, which is our authoritative IP address management service. The addressing data it provides is important because <code>dosd</code> uses it to understand what kind of traffic is expected on particular IPs. Since addressing data doesn’t change very frequently, we use a simple <b>Kubernetes cron job</b> to query it at 10 minutes past each hour and write it into Quicksilver, allowing it to be efficiently accessed by <code>dosd</code>.</p><p>With this context, let’s walk through the change we made on December 16 that ultimately led to the slowdown.</p><h2>The Change</h2><p>Approximately once a week, all of our Bug Fixes and Performance Improvements to the Front Line codebase are released to the network. On December 16, the Front Line team released a fix for a subtle bug in how the code handled compression in the presence of a <code>Cache-Control: no-transform</code> header. Unfortunately, the team realized pretty quickly that this fix actually broke some customers who had started <i>depending</i> on that buggy behavior, so the team decided to roll back the release and work with those customers to correct the issue.</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/slt3lc6tev37/2CY4wCLdkRVp38bNOgLSYc/458239ef68b60c77dde8ed58a4db8130/image3-5.png\" alt=\"\" class=\"kg-image\" width=\"1999\" height=\"560\" loading=\"lazy\"/>\n            \n            </figure><p>Here’s a graph showing the progression of the rollback. While most releases and rollbacks are fully automated, this particular rollback needed to be performed manually due to its urgency. Since this was a manual rollback, SREs decided to perform it in two batches as a safety measure. The first batch went to our smaller tier 2 and 3 data centers, and the second batch went to our larger tier 1 data centers.</p><p>SREs started the first batch at 19:25 UTC, and it completed in about 30 minutes. Then, after verifying that there were no issues, they started the second batch at 20:10. That’s when the slowdown started.</p><h2>The Slowdown</h2><p>Within minutes of starting the second batch of rollbacks, alerts started firing. “Traffic levels are dropping.” “CPU utilization is dropping.” “A P0 incident has been automatically declared.” The timing could not be a coincidence. Somehow, a deployment of known-good code, which had been limited to a subset of the network and which had just been successfully performed 40 minutes earlier, appeared to be causing a global problem.</p><p>A P0 incident is an “all hands on deck” emergency, so dozens of Cloudflare engineers quickly began to assess impact to their services and test their theories about the root cause. The rollback was paused, but that did not fix the problem. Then, approximately 10 minutes after the start of the incident, my team – the DOS team – received a concerning alert: “<code>dosd</code> is not running on numerous servers.” Before that alert fired we had been investigating whether the slowdown was caused by an unmitigated attack, but this required our immediate attention.</p><p>Based on service logs, we were able to see that <code>dosd</code> was <a href=\"https://doc.rust-lang.org/book/ch09-03-to-panic-or-not-to-panic.html\">panicking</a> because the customer addressing data in Quicksilver was corrupted in some way. Remember: the data in this Quicksilver key is important. Without it, <code>dosd</code> could not make correct choices anymore, so it refused to continue.</p><p>Once we realized that the addressing data was corrupted, we had to figure out how it was corrupted so that we could fix it. The answer turned out to be pretty obvious: the Quicksilver key was completely empty.</p><p>Following the old adage – “did you try restarting it?” – we decided to manually re-run the Kubernetes cron job that populates this key and see what happened. At 20:40 UTC, the cron job was manually triggered. Seconds after it completed, <code>dosd</code> started running again, and traffic levels began returning to normal. We confirmed that the Quicksilver key was no longer empty, and the incident was over.</p><h2>The Aftermath</h2><p>Despite fixing the problem, we still didn’t really understand what had just happened.</p><!--kg-card-begin: html--><h5>Why was the Quicksilver key empty?</h5><!--kg-card-end: html--><p>It was urgent that we quickly figure out how an empty value was written into that Quicksilver key, because for all we knew, it could happen again at any moment.</p><p>We started by looking at the Kubernetes cron job, which turned out to have a bug:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/slt3lc6tev37/3aUI8NLFqWrUDAwPCgITNq/684d8aa4209303d196d30bd50b1c4060/cron.png\" alt=\"\" class=\"kg-image\" width=\"1600\" height=\"438\" loading=\"lazy\"/>\n            \n            </figure><p>This cron job is implemented using a small Bash script. If you’re unfamiliar with Bash (particularly <a href=\"https://en.wikipedia.org/wiki/Pipeline_(Unix)\">shell pipelining</a>), here’s what it does:</p><p>First, the <code>dos-make-addr-conf</code> executable runs. Its job is to query the Addressing API for various bits of JSON data and serialize it into a <a href=\"https://toml.io/\">Toml</a> document, which gets written Into <code>config.toml</code>. Afterward, that Toml is passed as input into the <code>dosctl</code> executable, whose job is to simply write it into a Quicksilver key called <code>template_vars</code>.</p><p>Can you spot the bug? Here’s a hint: what happens if <code>dos-make-addr-conf</code> fails for some reason and exits with a non-zero error code? It turns out that, by default, the shell pipeline ignores the error code and continues executing! This means that the output of <code>dos-make-addr-conf</code> (which could be empty) gets unconditionally written into <code>dosctl</code> and used as the value of the <code>template_vars</code> key, regardless of whether <code>dos-make-addr-conf</code> succeeded or failed.</p><p>30 years ago, when the first users of Bourne shell were burned by this problem, a shell option called “pipefail” was introduced. Enabling this option changes the shell’s behavior so that, when any command in a pipeline series fails, the entire pipeline fails. However, this option is not enabled by default, so it’s widely recommended as best practice that all scripts should start by enabling <a href=\"https://sipb.mit.edu/doc/safe-shell/\">this (and a few other) options</a>.</p><p>Here’s the fixed version of that cron job:</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/slt3lc6tev37/1T2JIQhn9ok8YfZPVrRBR3/ae39fe5b1ef24ca11e23afbae3c3ceaa/cron-fixed.png\" alt=\"\" class=\"kg-image\" width=\"1600\" height=\"496\" loading=\"lazy\"/>\n            \n            </figure><p>This bug was particularly insidious because <code>dosd</code> actually did attempt to gracefully handle the case where this Quicksilver key contained invalid Toml. However, an empty string is a perfectly valid Toml document. If an error message had been accidentally written into this Quicksilver key instead of an empty string, then <code>dosd</code> would have rejected the update and continued to use the previous value.</p><!--kg-card-begin: html--><h5>Why did that cause the Front Line to slow down?</h5><!--kg-card-end: html--><p>We had figured out how an empty key could be written into Quicksilver, and we were confident that it wouldn’t happen again. However, we still needed to untangle how that empty key caused such a severe incident.</p><p>As I mentioned earlier, the Front Line relies on <code>dosd</code> to tell it how to mitigate attacks, but it doesn’t depend on <code>dosd</code> directly to serve requests. Instead, once every few seconds, the Front Line asynchronously asks <code>dosd</code> for new attack fingerprints and stores them in an in-memory cache. This cache is consulted while serving each request, and if <code>dosd</code> ever fails to provide fresh attack fingerprints, then the stale fingerprints will continue to be used instead. So how could this have caused the impact that we saw?</p>\n            <figure class=\"kg-card kg-image-card \">\n            \n            <Image src=\"https://cf-assets.www.cloudflare.com/slt3lc6tev37/USGRrOwhXqmL8Aotx0Ydw/acc9230e82561705988a61f06702951a/image6-3.png\" alt=\"\" class=\"kg-image\" width=\"1999\" height=\"1506\" loading=\"lazy\"/>\n            \n            </figure><p>As part of the rollback process, the Front Line’s code needed to be reloaded. Reloading this code implicitly flushed the in-memory caches, including the attack fingerprint data from <code>dosd</code>. The next time that a request tried to consult with the cache, the caching layer realized that it had no attack fingerprints to return and a “cache miss” happened.</p><p>To handle a cache miss, the caching layer tried to reach out to <code>dosd</code>, and this is when the slowdown happened. While the caching layer was waiting for <code>dosd</code> to reply, it blocked all pending requests from progressing. Since <code>dosd</code> wasn’t running, the attempt eventually timed out after five seconds when the caching layer gave up. But in the meantime, each pending request was stuck waiting for the timeout to happen. Once it did, all the pending requests that were queued up over the five-second timeout period became unblocked and were finally allowed to progress. This cycle repeated over and over again every five seconds on every server until the <code>dosd</code> failure was resolved.</p><p>To trigger this slowdown, not only did <code>dosd</code> have to fail, but the Front Line’s in-memory cache had to also be flushed at the same time. If <code>dosd</code> had failed, but the Front Line’s cache had not been flushed, then the stale attack fingerprints would have remained in the cache and request processing would not have been impacted.</p><!--kg-card-begin: html--><h5>Why didn’t the first rollback cause this problem?</h5><!--kg-card-end: html--><p>These two batches of rollbacks were performed by forcing servers to run a <a href=\"https://docs.saltproject.io/en/latest/ref/states/highstate.html\">Salt highstate</a>. When each batch was executed, thousands of servers began running highstates at the same time. The highstate process involves, among other things, contacting the Addressing API in order to retrieve various bits of customer addressing information.</p><p>The first rollback started at 19:25 UTC, and the second rollback started 45 minutes later at 20:10. Remember how I mentioned that our Kubernetes cron job only runs on the 10th minute of every hour? At 21:10 – exactly the time that our cron job started executing – thousands of servers also began to highstate, flooding the Addressing API with requests. All of these requests were queued up and <i>eventually</i> served, but it took the Addressing API a few minutes to work through the backlog. This delay was long enough to cause our cron job to time out, and, due to the “pipefail”  bug, inadvertently clobber the Quicksilver key that it was responsible for updating.</p><p>To trigger the “pipefail” bug, not only did we have to flood the Addressing API with requests, we also had to do it at exactly 10 minutes after the hour. If SREs had started the second batch of rollbacks a few minutes earlier or later, this bug would have continued to lay dormant.</p><h2>Lessons Learned</h2><p>This was a unique incident where a chain of small or unlikely failures cascaded into a severe and painful outage that we deeply regret. In response, we have hardened each link in the chain:</p><ul><li><p>A manual rollback inadvertently triggered the thundering herd problem, which overwhelmed the Addressing API. We have since significantly scaled out the Addressing API, so that it can handle high request rates if it ever again has to.</p></li><li><p>An error in a Kubernetes cron job caused invalid data to be written to Quicksilver. We have since made sure that, when this cron job fails, it is no longer possible for that failure to clobber the Quicksilver key.</p></li><li><p><code>dosd</code> did not correctly handle all possible error conditions when loading configuration data from Quicksilver, causing it to fail. We have since taken these additional conditions into account where necessary, so that <code>dosd</code> will gracefully degrade in the face of corrupt Quicksilver data.</p></li><li><p>The Front Line had an unexpected dependency on <code>dosd</code>, which caused it to fail when <code>dosd</code> failed. We have since removed all such dependencies, and the Front Line will now gracefully survive <code>dosd</code> failures.</p></li></ul><p>More broadly, this incident has served as an example to us of why code and systems must always be resilient to failure, no matter how unlikely that failure may seem.</p>",
		"id": "6n12upwKATxTxAiY2DIYoV",
		"localeList": {
			"name": "PIPEFAIL: How a missing shell option slowed Cloudflare down Config",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": "At Cloudflare, we’re used to being the fastest in the world. However, for approximately 30 minutes last December, Cloudflare was slow. Between 20:10 and 20:40 UTC on December 16th, web requests served by Cloudflare were artificially delayed by up to five seconds before being processed. This post tells the story of how a missing shell option called “pipefail” slowed Cloudflare down.",
		"metadata": {
			"title": "PIPEFAIL: How a missing shell option slowed Cloudflare down",
			"description": "At Cloudflare, we’re used to being the fastest in the world. However, for approximately 30 minutes last December, Cloudflare was slow. Between 20:10 and 20:40 UTC on December 16th, web requests served by Cloudflare were artificially delayed by up to five seconds before being processed. This post tells the story of how a missing shell option called “pipefail” slowed Cloudflare down.",
			"imgPreview": "https://cf-assets.www.cloudflare.com/slt3lc6tev37/4cTeLXK7Sh5UBlUdmNS31B/425c442380fe67db09943fc86948bada/pipefail-how-a-missing-shell-option-slowed-cloudflare-down-SM93yI.png"
		},
		"primary_author": {},
		"published_at": "2022-04-05T13:57:28.000+01:00",
		"reading_time": 8,
		"slug": "pipefail-how-a-missing-shell-option-slowed-cloudflare-down",
		"tags": [
			{
				"id": "3cCNoJJ5uusKFBLYKFX1jB",
				"name": "Post Mortem",
				"slug": "post-mortem"
			},
			{
				"id": "4yliZlpBPZpOwBDZzo1tTh",
				"name": "Outage",
				"slug": "outage"
			},
			{
				"id": "2UVIYusJwlvsmPYl2AvSuR",
				"name": "Deep Dive",
				"slug": "deep-dive"
			},
			{
				"id": "48r7QV00gLMWOIcM1CSDRy",
				"name": "Speed & Reliability",
				"slug": "speed-and-reliability"
			}
		],
		"title": "PIPEFAIL: How a missing shell option slowed Cloudflare down",
		"updated_at": "2024-08-27T01:33:01.627Z",
		"url": "https://blog.cloudflare.com/pipefail-how-a-missing-shell-option-slowed-cloudflare-down"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.blurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}