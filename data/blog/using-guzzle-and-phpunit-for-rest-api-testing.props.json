{
	"post": {
		"id": "5d16453b41acde0011a955e5",
		"uuid": "78284e05-29b5-46a8-b37d-9c1baa6d92b4",
		"title": "Using Guzzle and PHPUnit for REST API Testing",
		"slug": "using-guzzle-and-phpunit-for-rest-api-testing",
		"html": "<!--kg-card-begin: markdown--><p><img src=\"http://blog.cloudflare.com/content/images/2016/12/IMG_2787.jpg\" alt=\"\" loading=\"lazy\"></p>\n<p>APIs are increasingly becoming the backbone of the modern internet - whether you're ordering food from an app on your phone or browsing a blog using a modern JavaScript framework, chances are those requests are flowing through an API. Given the need for APIs to evolve through refactoring and extension, having great automated tests allows you to develop fast without needing to slow down to run manual tests to work out what’s broken. Additionally, by having tests in place you’re able to firmly identify the requirements that your API should meet, your API tests effectively form a tangible and executable specification. API Testing offers an end-to-end mechanism of testing the behaviour of your API which has advantages in both reliability and also development productivity.</p>\n<p>In this post I'll be demonstrating how you can test RESTful APIs in an automated fashion using PHP, by building a testing framework through creative use of two packages - Guzzle and PHPUnit. The resulting tests will be something you can run outside of your API as part of your deployment or CI (Continuous Integration) process.</p>\n<p>Guzzle acts as a powerful HTTP client which we can use to simulate HTTP Requests against our API. Though PHPUnit acts as a Unit Test framework (based on XUnit), in this case we will be using this powerful testing framework to test the HTTP responses we get back from our APIs using Guzzle.</p>\n<h2 id=\"preparingourenvironment\">Preparing our Environment</h2>\n<p>In order to pull in the required packages, we’ll be using Composer - a dependency manager for PHP. Inside our Composer project, we can simply require the dependencies we’re after:</p>\n<pre><code class=\"language-sh\">$ composer require phpunit/phpunit\n$ composer require guzzlehttp/guzzle\n$ composer update\n</code></pre>\n<p>When we ran <code>composer require</code> for each of the two packages, Composer went ahead and actually downloaded the packages we want, these are stored in the <code>vendor</code> directory. Additionally when we ran <code>composer update</code>, Composer updated it’s <a href=\"http://www.php-fig.org/psr/psr-4/\">PSR-4</a> autoload script that allows us to pull in all the dependencies we’ve required with one file include, you can find this in <code>vendor/autoload.php</code>.</p>\n<p>With our dependencies in place, we can now configure PHPUnit to use Guzzle. In order to do this, we need to tell PHPUnit where our Composer autoload file is, but also where our tests are located. We can do this through writing a <code>phpunit.xml</code> in the root directory of our project:</p>\n<pre><code class=\"language-xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;phpunit bootstrap=&quot;vendor/autoload.php&quot;&gt;\n    &lt;testsuites&gt;\n        &lt;testsuite name=&quot;REST API Test Suite&quot;&gt;\n            &lt;directory suffix=&quot;.php&quot;&gt;./tests/&lt;/directory&gt;\n        &lt;/testsuite&gt;\n    &lt;/testsuites&gt;\n&lt;/phpunit&gt;\n</code></pre>\n<p>In the XML above, the two noteworthy elements are the opening <code>phpunit</code> tag (which defines with a bootstrap property where our Composer autoload script is), additionally we have a <code>testsuite</code> element which defines our test suites (and a child <code>directory</code> property to define where the specific tests live). From here, we can just add an empty directory called <code>tests</code> for our tests to reside in.</p>\n<p>If we now run PHPUnit (through the command <code>./vendor/bin/phpunit</code>), we should see an output similar to the one I get below:</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2016/12/runningPHPUnitNoTests.png\" alt=\"PHPUnit indicating that there have been no tests executed\" loading=\"lazy\"></p>\n<p>With our environment defined, we’re ready to move on to the next step. First; purely for the sake of convenience, I’ve added a shortcut to my <code>composer.json</code> file so that when I run <code>composer test</code> it will point to <code>./vendor/bin/phpunit</code>. You can do this by adding the following JSON to your <code>composer.json</code> file:</p>\n<pre><code class=\"language-json\">  &quot;scripts&quot;: {\n    &quot;test&quot;: &quot;./vendor/bin/phpunit&quot;\n  }\n</code></pre>\n<h2 id=\"writingourtests\">Writing our Tests</h2>\n<p>As an example, I’ll be writing tests against an endpoint at httpbin.org. The first test I’ll write will be against the <code>/user-agent</code> endpoint, so I’ll create a file called <code>UserAgentTest.php</code>, be sure to extend the <code>PHPUnit_Framework_TestCase</code> class:</p>\n<pre><code class=\"language-php\">&lt;?php\n\nclass UserAgentTest extends PHPUnit_Framework_TestCase\n{\n}\n</code></pre>\n<p>Before each test, PHPUnit will run the <code>setUp</code> method and after the test has executed it will run the <code>tearDown</code> method in the class (if they exist). By utilising these methods we can instantiate our Guzzle HTTP client ready for each test and then return to a clean slate afterwards:</p>\n<pre><code class=\"language-php\">&lt;?php\n\nclass UserAgentTest extends PHPUnit_Framework_TestCase\n{\n    private $http;\n\n    public function setUp()\n    {\n        $this-&gt;http = new GuzzleHttp\\Client(['base_uri' =&gt; 'https://httpbin.org/']);\n    }\n\n    public function tearDown() {\n        $this-&gt;http = null;\n    }\n}\n</code></pre>\n<p>Note that if you feel even more adventurous, you can utilise environment variables (through the <code>getenv</code> method) to set the <code>baseurl</code> - for this tutorial however, I’ll be keeping things simple.</p>\n<p>With our <code>setUp</code> and <code>tearDown</code> methods in place, we can now go ahead and actually create our test methods. As I’ll start off by testing against the <code>GET</code> HTTP verb, I’ll name the first test method <code>testGet</code>. From here, we can make the request and then check the properties we get back.</p>\n<pre><code class=\"language-php\">public function testGet()\n{\n    $response = $this-&gt;http-&gt;request('GET', 'user-agent');\n\n    $this-&gt;assertEquals(200, $response-&gt;getStatusCode());\n\n    $contentType = $response-&gt;getHeaders()[&quot;Content-Type&quot;][0];\n    $this-&gt;assertEquals(&quot;application/json&quot;, $contentType);\n\n    $userAgent = json_decode($response-&gt;getBody())-&gt;{&quot;user-agent&quot;};\n    $this-&gt;assertRegexp('/Guzzle/', $userAgent);\n}\n</code></pre>\n<p>In the method above, I’ve made a GET request to the user-agent endpoint. I can then check the response code I get back was indeed <code>200</code> using the first assertion. The next assertion I test against is whether the <code>Content-Type</code> header indicates the response is JSON. Finally I check that the JSON body itself actually contains the phrase “Guzzle” in the user-agent property.</p>\n<p>We can add additional assertions as required, but we can also add additional methods for other HTTP verbs. For example, here’s a simple test to see if I get a <code>405</code> status code when I make a PUT request to the <code>/user-agent</code> endpoint:</p>\n<pre><code class=\"language-php\">public function testPut()\n{\n    $response = $this-&gt;http-&gt;request('PUT', 'user-agent', ['http_errors' =&gt; false]);\n\n    $this-&gt;assertEquals(405, $response-&gt;getStatusCode());\n}\n</code></pre>\n<p>Next time we run PHPUnit, we can see if our tests pass successfully and also get insight into some statistics surrounding the execution of these tests:</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2016/12/Screen-Shot-2016-12-28-at-08.36.57.png\" alt=\"Running composer test, terminal indicating that 2 tests have been run with 4 assertions\" loading=\"lazy\"></p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>That’s all there is to this simple approach to API testing. If you want some insight into the overall code, feel free to review the project files in the <a href=\"https://github.com/IcyApril/Test-the-REST\">Github repository</a>.</p>\n<p>If you find yourself using this testing set-up, be sure to review the <a href=\"http://docs.guzzlephp.org/en/latest/request-options.html\">Guzzle Request Options</a> to learn what kind of HTTP requests you can run with Guzzle and also check out the <a href=\"https://phpunit.de/manual/current/en/appendixes.assertions.html\">types of assertions</a> of you can run with PHPUnit.</p>\n<!--kg-card-end: markdown-->",
		"comment_id": "4888",
		"feature_image": "http://blog.cloudflare.com/content/images/2016/12/IMG_2787-1.jpg",
		"featured": false,
		"visibility": "public",
		"created_at": "2016-12-28T08:10:36.000+00:00",
		"updated_at": "2018-08-28T21:54:56.000+01:00",
		"published_at": "2016-12-28T14:10:46.000+00:00",
		"custom_excerpt": "APIs are increasingly becoming the backbone of the modern internet - whether you're ordering food from an app on your phone or browsing a blog using a modern JavaScript framework, chances are those requests are flowing through an API. ",
		"codeinjection_head": null,
		"codeinjection_foot": null,
		"custom_template": null,
		"canonical_url": null,
		"tags": [
			{
				"id": "5d16450341acde0011a95197",
				"name": "php",
				"slug": "php",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/php/"
			}
		],
		"authors": [
			{
				"id": "5d1644b141acde0011a94f6e",
				"name": "Junade Ali",
				"slug": "junade-ali",
				"profile_image": "http://blog.cloudflare.com/content/images/2017/03/G1VwuaxB.jpg",
				"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-8.png",
				"bio": null,
				"website": null,
				"location": null,
				"facebook": null,
				"twitter": "@IcyApril",
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/junade-ali/"
			}
		],
		"primary_author": {
			"id": "5d1644b141acde0011a94f6e",
			"name": "Junade Ali",
			"slug": "junade-ali",
			"profile_image": "http://blog.cloudflare.com/content/images/2017/03/G1VwuaxB.jpg",
			"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-8.png",
			"bio": null,
			"website": null,
			"location": null,
			"facebook": null,
			"twitter": "@IcyApril",
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/junade-ali/"
		},
		"primary_tag": {
			"id": "5d16450341acde0011a95197",
			"name": "php",
			"slug": "php",
			"description": null,
			"feature_image": null,
			"visibility": "public",
			"meta_title": null,
			"meta_description": null,
			"og_image": null,
			"og_title": null,
			"og_description": null,
			"twitter_image": null,
			"twitter_title": null,
			"twitter_description": null,
			"codeinjection_head": null,
			"codeinjection_foot": null,
			"canonical_url": null,
			"accent_color": null,
			"url": "http://blog.cloudflare.com/tag/php/"
		},
		"url": "http://blog.cloudflare.com/using-guzzle-and-phpunit-for-rest-api-testing/",
		"excerpt": "APIs are increasingly becoming the backbone of the modern internet - whether you're ordering food from an app on your phone or browsing a blog using a modern JavaScript framework, chances are those requests are flowing through an API. ",
		"reading_time": 5,
		"access": true,
		"comments": false,
		"og_image": null,
		"og_title": null,
		"og_description": null,
		"twitter_image": null,
		"twitter_title": null,
		"twitter_description": null,
		"meta_title": null,
		"meta_description": null,
		"email_subject": null,
		"frontmatter": null,
		"feature_image_alt": null,
		"feature_image_caption": null
	},
	"locale": "en-us"
}