{
	"post": {
		"id": "5d16453b41acde0011a957ad",
		"uuid": "98bd429a-6614-45cb-a679-285e1ea36334",
		"title": "SEO Best Practices with Cloudflare Workers, Part 2: Implementing Subdomains",
		"slug": "subdomains-vs-subdirectories-improved-seo-part-2",
		"html": "<h4 id=\"recap\">Recap</h4><p>In <a href=\"http://blog.cloudflare.com/subdomains-vs-subdirectories-best-practices-workers-part-1/\">Part 1</a>, the merits and tradeoffs of <em>subdirectories</em> and <em>subdomains </em>were discussed.  The subdirectory strategy is typically superior to subdomains because subdomains suffer from <em>keyword</em> and <em>backlink dilution</em>.  The subdirectory strategy more effectively boosts a site's search rankings by ensuring that every keyword is attributed to the root domain instead of diluting across subdomains.</p><h4 id=\"subdirectory-strategy-without-the-nginx\">Subdirectory Strategy without the NGINX</h4><p>In the <a href=\"http://blog.cloudflare.com/subdomains-vs-subdirectories-best-practices-workers-part-1/\">first part</a>, our friend Bob set up a hosted Ghost blog at <em>bobtopia.coolghosthost.com</em> that he connected to <em>blog.bobtopia.com </em>using a <code>CNAME</code> DNS record.  But what if he wanted his blog to live at <em>bobtopia.com/blog</em> to gain the SEO advantages of subdirectories?</p><p>A reverse proxy like NGINX is normally needed to route traffic from subdirectories to remotely hosted services.  We'll demonstrate how to implement the subdirectory strategy with Cloudflare Workers and eliminate our dependency on NGINX. (Cloudflare Workers are <a href=\" https://www.cloudflare.com/learning/serverless/what-is-serverless/\">serverless</a> functions that run on the Cloudflare global network.)</p><h4 id=\"back-to-bobtopia\">Back to Bobtopia</h4><p>Let's write a Worker that proxies traffic from a subdirectory – <em>bobtopia.com/blog – </em>to a remotely hosted platform – <em>bobtopia.coolghosthost.com</em>.  This means that if I go to <em>bobtopia.com/blog</em>, I should see the content of <em>bobtopia.coolghosthost.com,</em> but my browser should still think it's on <em>bobtopia.com</em>.</p><h4 id=\"configuration-options\">Configuration Options</h4><p>In the <a href=\"https://dash.cloudflare.com/?zone=workers\">Workers</a> editor, we'll start a new script with some basic configuration options.</p><p></p><pre><code>// keep track of all our blog endpoints here\nconst myBlog = {\n  hostname: \"bobtopia.coolghosthost.com\",\n  targetSubdirectory: \"/articles\",\n  assetsPathnames: [\"/public/\", \"/assets/\"]\n}</code></pre><p></p><p>The script will proxy traffic from <code>myBlog.targetSubdirectory</code> to Bob's hosted Ghost endpoint, <code>myBlog.hostname</code>.  We'll talk about <code>myBlog.assetsPathnames</code> a little later.</p><p></p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"http://blog.cloudflare.com/content/images/2019/01/Screen-Shot-2019-01-27-at-2.47.39-PM.png\" class=\"kg-image\" alt loading=\"lazy\"><figcaption>Requests are proxied from bobtopia.com/articles to bobtopia.coolghosthost.com (Uh oh... is because the hosted Ghost blog doesn't actually exist)</figcaption></figure><p></p><h4 id=\"request-handlers\">Request Handlers</h4><p>Next, we'll add a request handler:</p><p></p><pre><code>async function handleRequest(request) {\n  return fetch(request)\n}\n\naddEventListener(\"fetch\", event =&gt; {\n  event.respondWith(handleRequest(event.request))\n})\n</code></pre><p></p><p>So far we're just passing requests through <code>handleRequest</code> unmodified.  Let's make it do something:</p><p></p><pre><code>\nasync function handleRequest(request) { \n  ...\n\n  // if the request is for blog html, get it\n  if (requestMatches(myBlog.targetSubdirectory)) {\n    console.log(\"this is a request for a blog document\", parsedUrl.pathname)\n    const targetPath = formatPath(parsedUrl)\n    \n    return fetch(`https://${myBlog.hostname}/${targetPath}`)\n  }\n\n  ...\n  \n  console.log(\"this is a request to my root domain\", parsedUrl.pathname)\n  // if its not a request blog related stuff, do nothing\n  return fetch(request)\n}\n\naddEventListener(\"fetch\", event =&gt; {\n  event.respondWith(handleRequest(event.request))\n})\n</code></pre><p></p><p>In the above code, we added a conditional statement to handle traffic to <code>myBlog.targetSubdirectory</code>.  Note that we've omitted our helper functions here.  The relevant code lives inside the <code>if</code> block near the top of the function. The <code>requestMatches</code> helper checks if the incoming request contains <code>targetSubdirectory</code>.  If it does, a request is made to <code>myBlog.hostname</code> to fetch the HTML document which is returned to the browser.</p><p>When the browser parses the HTML, it makes additional asset requests required by the document (think images, stylesheets, and scripts).  We'll need another conditional statement to handle these kinds of requests.</p><p></p><pre><code>// if its blog assets, get them\nif ([myBlog.assetsPathnames].some(requestMatches)) {\n    console.log(\"this is a request for blog assets\", parsedUrl.pathname)\n    const assetUrl = request.url.replace(parsedUrl.hostname, myBlog.hostname);\n\n    return fetch(assetUrl)\n  }</code></pre><p></p><p>This similarly shaped block checks if the request matches any pathnames enumerated in <code>myBlog.assetPathnames</code> and fetches the assets required to fully render the page.  Assets happen to live in <em>/public</em> and <em>/assets</em> on a Ghost blog.  You'll be able to identify your assets directories when you <code>fetch</code> the HTML and see logs for scripts, images, and stylesheets.</p><p></p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"http://blog.cloudflare.com/content/images/2019/01/Screen-Shot-2019-01-27-at-5.51.44-PM.png\" class=\"kg-image\" alt loading=\"lazy\"><figcaption>Logs show the various scripts and stylesheets required by Ghost live in <em>/assets</em> and <em>/public</em></figcaption></figure><p></p><p>The full script with helper functions included is:</p><p></p><pre><code>\n// keep track of all our blog endpoints here\nconst myBlog = {\n  hostname: \"bobtopia.coolghosthost.com\",\n  targetSubdirectory: \"/articles\",\n  assetsPathnames: [\"/public/\", \"/assets/\"]\n}\n\nasync function handleRequest(request) {\n  // returns an empty string or a path if one exists\n  const formatPath = (url) =&gt; {\n    const pruned = url.pathname.split(\"/\").filter(part =&gt; part)\n    return pruned &amp;&amp; pruned.length &gt; 1 ? `${pruned.join(\"/\")}` : \"\"\n  }\n  \n  const parsedUrl = new URL(request.url)\n  const requestMatches = match =&gt; new RegExp(match).test(parsedUrl.pathname)\n  \n  // if its blog html, get it\n  if (requestMatches(myBlog.targetSubdirectory)) {\n    console.log(\"this is a request for a blog document\", parsedUrl.pathname)\n    const targetPath = formatPath(parsedUrl)\n    \n    return fetch(`https://${myBlog.hostname}/${targetPath}`)\n  }\n  \n  // if its blog assets, get them\n  if ([myBlog.assetsPathnames].some(requestMatches)) {\n    console.log(\"this is a request for blog assets\", parsedUrl.pathname)\n    const assetUrl = request.url.replace(parsedUrl.hostname, myBlog.hostname);\n\n    return fetch(assetUrl)\n  }\n\n  console.log(\"this is a request to my root domain\", parsedUrl.host, parsedUrl.pathname);\n  // if its not a request blog related stuff, do nothing\n  return fetch(request)\n}\n\naddEventListener(\"fetch\", event =&gt; {\n  event.respondWith(handleRequest(event.request))\n})\n</code></pre><h4 id=\"caveat\">Caveat</h4><p>There is one important caveat about the current implementation that bears mentioning. This script will not work if your hosted service assets are stored in a folder that shares a name with a route on your root domain.  For example, if you're serving assets from the root directory of your hosted service, any request made to the <em>bobtopia.com</em> home page will be masked by these asset requests, and the home page won't load.</p><p>The solution here involves modifying the blog assets block to handle asset requests without using paths.  I'll leave it to the reader to solve this, but a more general solution might involve changing <code>myBlog.assetPathnames</code> to <code>myBlog.assetFileExtensions</code>, which is a list of all asset file extensions (like .png and .css).  Then, the assets block would handle requests that contain <code>assetFileExtensions</code> instead of <code>assetPathnames</code>.</p><h4 id=\"conclusion\">Conclusion</h4><p>Bob is now enjoying the same SEO advantages as Alice after converting his subdomains to subdirectories using Cloudflare Workers.  Bobs of the world, rejoice!</p><hr><!--kg-card-begin: markdown--><p><small>Interested in deploying a Cloudflare Worker without setting up a domain on Cloudflare? We’re making it easier to get started building serverless applications with custom subdomains on <a href=\"https://workers.dev\" target=\"_blank\">workers.dev</a>. <em>If you’re already a Cloudflare customer, you can add Workers to your existing website</em> <a href=\"https://dash.cloudflare.com/workers\" target=\"blank\"><em>here</em></a>.</small></p>\n<p align=center>\n<a class=\"btn btn-warning\" href=\"https://workers.dev\" target=\"_blank\">Reserve a workers.dev subdomain</a>\n</p><!--kg-card-end: markdown--><hr>",
		"comment_id": "5c4d2e82389f2100c0f6c9c3",
		"feature_image": "http://blog.cloudflare.com/content/images/2019/02/rawpixel-620230-unsplash.jpg",
		"featured": false,
		"visibility": "public",
		"created_at": "2019-01-27T04:07:30.000+00:00",
		"updated_at": "2024-02-12T21:06:53.000+00:00",
		"published_at": "2019-02-15T17:09:26.000+00:00",
		"custom_excerpt": "In Part 1, the merits and tradeoffs of subdirectories and subdomains were discussed.  The subdirectory strategy is typically superior to subdomains because subdomains suffer from keyword and backlink dilution. ",
		"codeinjection_head": null,
		"codeinjection_foot": null,
		"custom_template": null,
		"canonical_url": null,
		"authors": [
			{
				"id": "5d1644b141acde0011a95005",
				"name": "Michael Pinter",
				"slug": "michael-pinter",
				"profile_image": "http://blog.cloudflare.com/content/images/2018/11/g5QoJmQKS5iJdbcxHJXg_1204a20b3d1d96bba523a6a2a5fa3cd73bd4fe59240a27ad6eb8c064c6792446.png",
				"cover_image": "http://blog.cloudflare.com/content/images/2018/11/general@2x-7.png",
				"bio": null,
				"website": null,
				"location": null,
				"facebook": null,
				"twitter": null,
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/michael-pinter/"
			}
		],
		"tags": [
			{
				"id": "5d16450341acde0011a95253",
				"name": "Cloudflare Workers",
				"slug": "workers",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/workers/"
			},
			{
				"id": "5d16450341acde0011a9515f",
				"name": "SEO",
				"slug": "seo",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/seo/"
			},
			{
				"id": "5d16450341acde0011a95167",
				"name": "NGINX",
				"slug": "nginx",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/nginx/"
			},
			{
				"id": "5d16450341acde0011a95252",
				"name": "Serverless",
				"slug": "serverless",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Serverless.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Serverless",
				"meta_description": "Cloudflare blog posts tagged 'serverless'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/serverless/"
			},
			{
				"id": "64a3e2b834124c000b00b717",
				"name": "Developer Platform",
				"slug": "developer-platform",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developer-platform/"
			},
			{
				"id": "5d16450341acde0011a95204",
				"name": "Developers",
				"slug": "developers",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Developers-1.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Developers",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Developers'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developers/"
			}
		],
		"primary_author": {
			"id": "5d1644b141acde0011a95005",
			"name": "Michael Pinter",
			"slug": "michael-pinter",
			"profile_image": "http://blog.cloudflare.com/content/images/2018/11/g5QoJmQKS5iJdbcxHJXg_1204a20b3d1d96bba523a6a2a5fa3cd73bd4fe59240a27ad6eb8c064c6792446.png",
			"cover_image": "http://blog.cloudflare.com/content/images/2018/11/general@2x-7.png",
			"bio": null,
			"website": null,
			"location": null,
			"facebook": null,
			"twitter": null,
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/michael-pinter/"
		},
		"primary_tag": {
			"id": "5d16450341acde0011a95253",
			"name": "Cloudflare Workers",
			"slug": "workers",
			"description": null,
			"feature_image": null,
			"visibility": "public",
			"meta_title": null,
			"meta_description": null,
			"og_image": null,
			"og_title": null,
			"og_description": null,
			"twitter_image": null,
			"twitter_title": null,
			"twitter_description": null,
			"codeinjection_head": null,
			"codeinjection_foot": null,
			"canonical_url": null,
			"accent_color": null,
			"url": "http://blog.cloudflare.com/tag/workers/"
		},
		"url": "http://blog.cloudflare.com/subdomains-vs-subdirectories-improved-seo-part-2/",
		"excerpt": "In Part 1, the merits and tradeoffs of subdirectories and subdomains were discussed.  The subdirectory strategy is typically superior to subdomains because subdomains suffer from keyword and backlink dilution. ",
		"reading_time": 4,
		"access": true,
		"comments": false,
		"og_image": null,
		"og_title": null,
		"og_description": null,
		"twitter_image": null,
		"twitter_title": null,
		"twitter_description": null,
		"meta_title": "Subdomain vs. Subdirectory Strategies – Improving SEO Pt 2",
		"meta_description": "Subdomains and subdirectories are different strategies for instrumenting root domains with new features, but which strategy is technically better? ",
		"email_subject": null,
		"frontmatter": null,
		"feature_image_alt": null,
		"feature_image_caption": null
	},
	"locale": "en-us"
}