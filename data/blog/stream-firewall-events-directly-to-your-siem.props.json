{
	"locale": "en-us",
	"post": {
		"id": "5ea209cbb2b49a01bc816e51",
		"uuid": "e2c60cd9-83aa-4b6c-ae50-81ebbf5c03c0",
		"title": "Stream Firewall Events directly to your SIEM",
		"slug": "stream-firewall-events-directly-to-your-siem",
		"html": "<figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2020/04/image3-14.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>The highest trafficked sites using Cloudflare receive billions of requests per day. But only about 5% of those requests typically trigger security rules, whether they be “managed” rules such as our <a href=\"https://www.cloudflare.com/learning/ddos/glossary/web-application-firewall-waf/\">WAF</a> and DDoS protections, or custom rules such as those configured by customers using our powerful Firewall Rules and Rate Limiting engines.</p><p>When enforcement is taken on a request that interrupts the flow of malicious traffic, a <a href=\"http://blog.cloudflare.com/updates-to-firewall-analytics/#event-based-logging\">Firewall Event is logged with detail</a> about the request including which rule triggered us to take action and what action we took, e.g., challenged or blocked outright.</p><p>Previously, if you wanted to ingest all of these events into your <a href=\"https://www.cloudflare.com/learning/security/what-is-siem/\">SIEM</a> or logging platform, you had to take the whole firehose of requests—good and bad—and then filter them client side. If you’re paying by the log line or scaling your own storage solution, this cost can add up quickly. And if you have a security team monitoring logs, they’re being sent a lot of extraneous data to sift through before determining what needs their attention most.</p><p>As of today, customers using Cloudflare Logs can create <a href=\"https://developers.cloudflare.com/logs/about\">Logpush jobs</a> that send only Firewall Events. These events arrive much faster than our existing HTTP requests logs: they are typically delivered to your logging platform within 60 seconds of sending the response to the client.</p><p>In this post we’ll show you how to use Terraform and Sumo Logic, an <a href=\"https://developers.cloudflare.com/logs/analytics-integrations/\">analytics integration partner</a>, to get this logging set up live in just a few minutes.</p><h2 id=\"process-overview\">Process overview</h2><p>The steps below take you through the process of configuring Cloudflare Logs to push security events directly to your logging platform. For purposes of this tutorial, we’ve chosen Sumo Logic as our log destination, but you’re free to use any of our <a href=\"https://developers.cloudflare.com/logs/analytics-integrations/\">analytics partners</a>, or any logging platform that can read from cloud storage such as <a href=\"https://developers.cloudflare.com/logs/logpush/aws-s3/\">AWS S3</a>, <a href=\"https://developers.cloudflare.com/logs/logpush/azure/\">Azure Blob Storage</a>, or <a href=\"https://developers.cloudflare.com/logs/logpush/google-cloud-storage/\">Google Cloud Storage</a>.</p><p>To configure Sumo Logic and Cloudflare we make use of Terraform, a popular Infrastructure-as-Code tool from HashiCorp. If you’re new to Terraform, see <a href=\"http://blog.cloudflare.com/getting-started-with-terraform-and-cloudflare-part-1/\">Getting started with Terraform and Cloudflare</a> for a guided walkthrough with best practice recommendations such as how to version and store your configuration in git for easy rollback.</p><p>Once the infrastructure is in place, you’ll send a malicious request towards your site to trigger the Cloudflare Web Application Firewall, and watch as the Firewall Events generated by that request shows up in Sumo Logic about a minute later.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2020/04/image2-18.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><h2 id=\"prerequisites\">Prerequisites</h2><h3 id=\"install-terraform-and-go\">Install Terraform and Go</h3><p>First you’ll need to install Terraform. See our Developer Docs for <a href=\"https://developers.cloudflare.com/terraform/getting-started/installing/\">instructions</a>. </p><p>Next you’ll need to install Go. The easiest way on macOS to do so is with <a href=\"https://brew.sh/\">Homebrew</a>:</p><pre><code>$ brew install golang\n$ export GOPATH=$HOME/go\n$ mkdir $GOPATH</code></pre><p><a href=\"https://golang.org/\">Go</a> is required because the Sumo Logic Terraform Provider is a \"community\" plugin, which means it has to be built and installed manually rather than automatically through the Terraform Registry, as will happen later for the Cloudflare Terraform Provider. </p><h3 id=\"install-the-sumo-logic-terraform-provider-module\">Install the Sumo Logic Terraform Provider Module</h3><p>The official installation instructions for installing the Sumo Logic provider can be found on their <a href=\"https://github.com/SumoLogic/sumologic-terraform-provider\">GitHub Project page</a>, but here are my notes:</p><pre><code>$ mkdir -p $GOPATH/src/github.com/terraform-providers &amp;&amp; cd $_\n$ git clone https://github.com/SumoLogic/sumologic-terraform-provider.git\n$ cd sumologic-terraform-provider\n$ make install</code></pre><h2 id=\"prepare-sumo-logic-to-receive-cloudflare-logs\">Prepare Sumo Logic to receive Cloudflare Logs</h2><h3 id=\"install-sumo-logic-livetail-utility\">Install Sumo Logic livetail utility</h3><p>While not strictly necessary, the <a href=\"https://help.sumologic.com/05Search/Live-Tail/Live-Tail-CLI\">livetail tool</a> from Sumo Logic makes it easy to grab the Cloudflare Logs challenge token we’ll need in a minute, and also to view the fruits of your labor: seeing a Firewall Event appear in Sumo Logic shortly after the malicious request hit the edge.</p><p>On macOS:</p><pre><code>$ brew cask install livetail\n...\n==&gt; Verifying SHA-256 checksum for Cask 'livetail'.\n==&gt; Installing Cask livetail\n==&gt; Linking Binary 'livetail' to '/usr/local/bin/livetail'.\n?  livetail was successfully installed!</code></pre><h3 id=\"generate-sumo-logic-access-key\">Generate Sumo Logic Access Key</h3><p>This step assumes you already have a Sumo Logic account. If not, you can sign up for a free trial <a href=\"https://www.sumologic.com/sign-up/\">here</a>.</p><ol><li>Browse to <code>https://service.$ENV.sumologic.com/ui/#/security/access-keys</code> where <code>$ENV</code> should be replaced by <a href=\"http://help.sumologic.com/Send_Data/Collector_Management_API/Sumo_Logic_Endpoints\">the environment</a> you chose on signup.</li><li>Click the \"+ Add Access Key\" button, give it a name, and click \"Create Key\"</li><li>In the next step you'll save the Access ID and Access Key that are provided as environment variables, so don’t close this modal until you do. </li></ol><h3 id=\"generate-cloudflare-scoped-api-token\">Generate Cloudflare Scoped API Token</h3><ol><li>Log in to the <a href=\"https://dash.cloudflare.com/\">Cloudflare Dashboard</a></li><li>Click on the profile icon in the top-right corner and then select \"My Profile\"</li><li>Select \"API Tokens\" from the nav bar and click \"Create Token\"</li><li>Click the \"Get started\" button next to the \"Create Custom Token\" label</li></ol><p>On the Create Custom Token screen: </p><ol><li>Provide a token name, e.g., \"Logpush - Firewall Events\"</li><li>Under Permissions, change Account to Zone, and then select Logs and Edit, respectively, in the two drop-downs to the right</li><li>Optionally, change Zone Resources and IP Address Filtering to restrict restrict access for this token to specific zones or from specific IPs</li></ol><p>Click \"Continue to summary\" and then \"Create token\" on the next screen. Save the token somewhere secure, e.g., your password manager, as it'll be needed in just a minute.</p><h3 id=\"set-environment-variables\">Set environment variables</h3><p>Rather than add sensitive credentials to source files (that may get submitted to your source code repository), we'll set environment variables and have the Terraform modules read from them.</p><pre><code>$ export CLOUDFLARE_API_TOKEN=\"&lt;your scoped cloudflare API token&gt;\"\n$ export CF_ZONE_ID=\"&lt;tag of zone you wish to send logs for&gt;\"</code></pre><p>We'll also need your Sumo Logic environment, Access ID, and Access Key:</p><pre><code>$ export SUMOLOGIC_ENVIRONMENT=\"eu\"\n$ export SUMOLOGIC_ACCESSID=\"&lt;access id from previous step&gt;\"\n$ export SUMOLOGIC_ACCESSKEY=\"&lt;access key from previous step&gt;\"</code></pre><h3 id=\"create-the-sumo-logic-collector-and-http-source\">Create the Sumo Logic Collector and HTTP Source</h3><p>We'll create a directory to store our Terraform project in and build it up as we go:</p><pre><code>$ mkdir -p ~/src/fwevents &amp;&amp; cd $_</code></pre><p>Then we'll create the Collector and HTTP source that will store and provide Firewall Events logs to Sumo Logic:</p><pre><code>$ cat &lt;&lt;'EOF' | tee main.tf\n##################\n### SUMO LOGIC ###\n##################\nprovider \"sumologic\" {\n    environment = var.sumo_environment\n    access_id = var.sumo_access_id\n}\n\nresource \"sumologic_collector\" \"collector\" {\n    name = \"CloudflareLogCollector\"\n    timezone = \"Etc/UTC\"\n}\n\nresource \"sumologic_http_source\" \"http_source\" {\n    name = \"firewall-events-source\"\n    collector_id = sumologic_collector.collector.id\n    timezone = \"Etc/UTC\"\n}\nEOF</code></pre><p>Then we'll create a variables file so Terraform has credentials to communicate with Sumo Logic:</p><pre><code>$ cat &lt;&lt;EOF | tee variables.tf\n##################\n### SUMO LOGIC ###\n##################\nvariable \"sumo_environment\" {\n    default = \"$SUMOLOGIC_ENVIRONMENT\"\n}\n\nvariable \"sumo_access_id\" {\n    default = \"$SUMOLOGIC_ACCESSID\"\n}\nEOF</code></pre><p>With our Sumo Logic configuration set, we’ll initialize Terraform with <code>terraform init</code> and then preview what changes Terraform is going to make by running <code>terraform plan</code>:</p><pre><code>$ terraform init\n\nInitializing the backend...\n\nInitializing provider plugins...\n\nTerraform has been successfully initialized!\n\nYou may now begin working with Terraform. Try running \"terraform plan\" to see\nany changes that are required for your infrastructure. All Terraform commands\nshould now work.\n\nIf you ever set or change modules or backend configuration for Terraform,\nrerun this command to reinitialize your working directory. If you forget, other\ncommands will detect it and remind you to do so if necessary.</code></pre><pre><code>$ terraform plan\nRefreshing Terraform state in-memory prior to plan...\nThe refreshed state will be used to calculate this plan, but will not be\npersisted to local or remote state storage.\n\n\n------------------------------------------------------------------------\n\nAn execution plan has been generated and is shown below.\nResource actions are indicated with the following symbols:\n  + create\n\nTerraform will perform the following actions:\n\n  # sumologic_collector.collector will be created\n  + resource \"sumologic_collector\" \"collector\" {\n      + destroy        = true\n      + id             = (known after apply)\n      + lookup_by_name = false\n      + name           = \"CloudflareLogCollector\"\n      + timezone       = \"Etc/UTC\"\n    }\n\n  # sumologic_http_source.http_source will be created\n  + resource \"sumologic_http_source\" \"http_source\" {\n      + automatic_date_parsing       = true\n      + collector_id                 = (known after apply)\n      + cutoff_timestamp             = 0\n      + destroy                      = true\n      + force_timezone               = false\n      + id                           = (known after apply)\n      + lookup_by_name               = false\n      + message_per_request          = false\n      + multiline_processing_enabled = true\n      + name                         = \"firewall-events-source\"\n      + timezone                     = \"Etc/UTC\"\n      + url                          = (known after apply)\n      + use_autoline_matching        = true\n    }\n\nPlan: 2 to add, 0 to change, 0 to destroy.\n\n------------------------------------------------------------------------\n\nNote: You didn't specify an \"-out\" parameter to save this plan, so Terraform\ncan't guarantee that exactly these actions will be performed if\n\"terraform apply\" is subsequently run.</code></pre><p>Assuming everything looks good, let’s execute the plan:</p><pre><code>$ terraform apply -auto-approve\nsumologic_collector.collector: Creating...\nsumologic_collector.collector: Creation complete after 3s [id=108448215]\nsumologic_http_source.http_source: Creating...\nsumologic_http_source.http_source: Creation complete after 0s [id=150364538]\n\nApply complete! Resources: 2 added, 0 changed, 0 destroyed.</code></pre><p>Success! At this point you could log into the Sumo Logic web interface and confirm that your Collector and HTTP Source were created successfully.</p><h2 id=\"create-a-cloudflare-logpush-job\">Create a Cloudflare Logpush Job</h2><p>Before we’ll start sending logs to your collector, you need to demonstrate the ability to read from it. This validation step prevents accidental (or intentional) misconfigurations from overrunning your logs.</p><h3 id=\"tail-the-sumo-logic-collector-and-await-the-challenge-token\">Tail the Sumo Logic Collector and await the challenge token</h3><p>In a new shell window—you should keep the current one with your environment variables set for use with Terraform—we'll start tailing Sumo Logic for events sent from the <code>firewall-events-source</code> HTTP source. </p><p>The first time that you run livetail you'll need to specify your <a href=\"https://help.sumologic.com/APIs/General-API-Information/Sumo-Logic-Endpoints-and-Firewall-Security\">Sumo Logic Environment</a>, Access ID and Access Key, but these values will be stored in the working directory for subsequent runs:</p><pre><code>$ livetail _source=firewall-events-source\n### Welcome to Sumo Logic Live Tail Command Line Interface ###\n1 US1\n2 US2\n3 EU\n4 AU\n5 DE\n6 FED\n7 JP\n8 CA\nPlease select Sumo Logic environment: \nSee http://help.sumologic.com/Send_Data/Collector_Management_API/Sumo_Logic_Endpoints to choose the correct environment. 3\n### Authenticating ###\nPlease enter your Access ID: &lt;access id&gt;\nPlease enter your Access Key &lt;access key&gt;\n### Starting Live Tail session ###</code></pre><h3 id=\"request-and-receive-challenge-token\">Request and receive challenge token</h3><p>Before requesting a challenge token, we need to figure out where Cloudflare should send logs.</p><p>We do this by asking Terraform for the receiver URL of the recently created HTTP source. Note that we modify the URL returned slightly as Cloudflare Logs expects <code>sumo://</code> rather than <code>https://</code>.</p><pre><code>$ export SUMO_RECEIVER_URL=$(terraform state show sumologic_http_source.http_source | grep url | awk '{print $3}' | sed -e 's/https:/sumo:/; s/\"//g')\n\n$ echo $SUMO_RECEIVER_URL\nsumo://endpoint1.collection.eu.sumologic.com/receiver/v1/http/&lt;redacted&gt;</code></pre><p>With URL in hand, we can now request the token.</p><pre><code>$ curl -sXPOST -H \"Content-Type: application/json\" -H \"Authorization: Bearer $CLOUDFLARE_API_TOKEN\" -d '{\"destination_conf\":\"'''$SUMO_RECEIVER_URL'''\"}' https://api.cloudflare.com/client/v4/zones/$CF_ZONE_ID/logpush/ownership\n\n{\"errors\":[],\"messages\":[],\"result\":{\"filename\":\"ownership-challenge-bb2912e0.txt\",\"message\":\"\",\"valid\":true},\"success\":true}</code></pre><p>Back in the other window where your livetail is running you should see something like this:</p><pre><code>{\"content\":\"eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4R0NNIiwidHlwIjoiSldUIn0..WQhkW_EfxVy8p0BQ.oO6YEvfYFMHCTEd6D8MbmyjJqcrASDLRvHFTbZ5yUTMqBf1oniPNzo9Mn3ZzgTdayKg_jk0Gg-mBpdeqNI8LJFtUzzgTGU-aN1-haQlzmHVksEQdqawX7EZu2yiePT5QVk8RUsMRgloa76WANQbKghx1yivTZ3TGj8WquZELgnsiiQSvHqdFjAsiUJ0g73L962rDMJPG91cHuDqgfXWwSUqPsjVk88pmvGEEH4AMdKIol0EOc-7JIAWFBhcqmnv0uAXVOH5uXHHe_YNZ8PNLfYZXkw1xQlVDwH52wRC93ohIxg.pHAeaOGC8ALwLOXqxpXJgQ\",\"filename\":\"ownership-challenge-bb2912e0.txt\"}</code></pre><p>Copy the content value from above into an environment variable, as you'll need it in a minute to create the job:</p><pre><code>$ export LOGPUSH_CHALLENGE_TOKEN=\"&lt;content value&gt;\"</code></pre><h3 id=\"create-the-logpush-job-using-the-challenge-token\">Create the Logpush job using the challenge token</h3><p>With challenge token in hand, we'll use Terraform to create the job.</p><p>First you’ll want to choose the log fields that should be sent to Sumo Logic. You can enumerate the list by querying the dataset:</p><pre><code>$ curl -sXGET -H \"Authorization: Bearer $CLOUDFLARE_API_TOKEN\" https://api.cloudflare.com/client/v4/zones/$CF_ZONE_ID/logpush/datasets/firewall_events/fields | jq .\n{\n  \"errors\": [],\n  \"messages\": [],\n  \"result\": {\n    \"Action\": \"string; the code of the first-class action the Cloudflare Firewall took on this request\",\n    \"ClientASN\": \"int; the ASN number of the visitor\",\n    \"ClientASNDescription\": \"string; the ASN of the visitor as string\",\n    \"ClientCountryName\": \"string; country from which request originated\",\n    \"ClientIP\": \"string; the visitor's IP address (IPv4 or IPv6)\",\n    \"ClientIPClass\": \"string; the classification of the visitor's IP address, possible values are: unknown | clean | badHost | searchEngine | whitelist | greylist | monitoringService | securityScanner | noRecord | scan | backupService | mobilePlatform | tor\",\n    \"ClientRefererHost\": \"string; the referer host\",\n    \"ClientRefererPath\": \"string; the referer path requested by visitor\",\n    \"ClientRefererQuery\": \"string; the referer query-string was requested by the visitor\",\n    \"ClientRefererScheme\": \"string; the referer url scheme requested by the visitor\",\n    \"ClientRequestHTTPHost\": \"string; the HTTP hostname requested by the visitor\",\n    \"ClientRequestHTTPMethodName\": \"string; the HTTP method used by the visitor\",\n    \"ClientRequestHTTPProtocol\": \"string; the version of HTTP protocol requested by the visitor\",\n    \"ClientRequestPath\": \"string; the path requested by visitor\",\n    \"ClientRequestQuery\": \"string; the query-string was requested by the visitor\",\n    \"ClientRequestScheme\": \"string; the url scheme requested by the visitor\",\n    \"Datetime\": \"int or string; the date and time the event occurred at the edge\",\n    \"EdgeColoName\": \"string; the airport code of the Cloudflare datacenter that served this request\",\n    \"EdgeResponseStatus\": \"int; HTTP response status code returned to browser\",\n    \"Kind\": \"string; the kind of event, currently only possible values are: firewall\",\n    \"MatchIndex\": \"int; rules match index in the chain\",\n    \"Metadata\": \"object; additional product-specific information. Metadata is organized in key:value pairs. Key and Value formats can vary by Cloudflare security product and can change over time\",\n    \"OriginResponseStatus\": \"int; HTTP origin response status code returned to browser\",\n    \"OriginatorRayName\": \"string; the RayId of the request that issued the challenge/jschallenge\",\n    \"RayName\": \"string; the RayId of the request\",\n    \"RuleId\": \"string; the Cloudflare security product-specific RuleId triggered by this request\",\n    \"Source\": \"string; the Cloudflare security product triggered by this request\",\n    \"UserAgent\": \"string; visitor's user-agent string\"\n  },\n  \"success\": true\n}</code></pre><p>Then you’ll append your Cloudflare configuration to the <code>main.tf</code> file:</p><pre><code>$ cat &lt;&lt;EOF | tee -a main.tf\n\n##################\n### CLOUDFLARE ###\n##################\nprovider \"cloudflare\" {\n  version = \"~&gt; 2.0\"\n}\n\nresource \"cloudflare_logpush_job\" \"firewall_events_job\" {\n  name = \"fwevents-logpush-job\"\n  zone_id = var.cf_zone_id\n  enabled = true\n  dataset = \"firewall_events\"\n  logpull_options = \"fields=RayName,Source,RuleId,Action,EdgeResponseStatusDatetime,EdgeColoName,ClientIP,ClientCountryName,ClientASNDescription,UserAgent,ClientRequestHTTPMethodName,ClientRequestHTTPHost,ClientRequestHTTPPath&amp;timestamps=rfc3339\"\n  destination_conf = replace(sumologic_http_source.http_source.url,\"https:\",\"sumo:\")\n  ownership_challenge = \"$LOGPUSH_CHALLENGE_TOKEN\"\n}\nEOF</code></pre><p>And add to the <code>variables.tf</code> file:</p><pre><code>$ cat &lt;&lt;EOF | tee -a variables.tf\n\n##################\n### CLOUDFLARE ###\n##################\nvariable \"cf_zone_id\" {\n  default = \"$CF_ZONE_ID\"\n}</code></pre><p>Next we re-run <code>terraform init</code> to install the latest Cloudflare Terraform Provider Module. You’ll need to make sure you have at least version 2.6.0 as this is the version in which we added Logpush job support:</p><pre><code>$ terraform init\n\nInitializing the backend...\n\nInitializing provider plugins...\n- Checking for available provider plugins...\n- Downloading plugin for provider \"cloudflare\" (terraform-providers/cloudflare) 2.6.0...\n\nTerraform has been successfully initialized!\n\nYou may now begin working with Terraform. Try running \"terraform plan\" to see\nany changes that are required for your infrastructure. All Terraform commands\nshould now work.\n\nIf you ever set or change modules or backend configuration for Terraform,\nrerun this command to reinitialize your working directory. If you forget, other\ncommands will detect it and remind you to do so if necessary.\n</code></pre><p>With the latest Terraform installed, we check out the plan and then apply:</p><pre><code>$ terraform plan\nRefreshing Terraform state in-memory prior to plan...\nThe refreshed state will be used to calculate this plan, but will not be\npersisted to local or remote state storage.\n\nsumologic_collector.collector: Refreshing state... [id=108448215]\nsumologic_http_source.http_source: Refreshing state... [id=150364538]\n\n------------------------------------------------------------------------\n\nAn execution plan has been generated and is shown below.\nResource actions are indicated with the following symbols:\n  + create\n\nTerraform will perform the following actions:\n\n  # cloudflare_logpush_job.firewall_events_job will be created\n  + resource \"cloudflare_logpush_job\" \"firewall_events_job\" {\n      + dataset             = \"firewall_events\"\n      + destination_conf    = \"sumo://endpoint1.collection.eu.sumologic.com/receiver/v1/http/(redacted)\"\n      + enabled             = true\n      + id                  = (known after apply)\n      + logpull_options     = \"fields=RayName,Source,RuleId,Action,EdgeResponseStatusDatetime,EdgeColoName,ClientIP,ClientCountryName,ClientASNDescription,UserAgent,ClientRequestHTTPMethodName,ClientRequestHTTPHost,ClientRequestHTTPPath&amp;timestamps=rfc3339\"\n      + name                = \"fwevents-logpush-job\"\n      + ownership_challenge = \"(redacted)\"\n      + zone_id             = \"(redacted)\"\n    }\n\nPlan: 1 to add, 0 to change, 0 to destroy.\n\n------------------------------------------------------------------------\n\nNote: You didn't specify an \"-out\" parameter to save this plan, so Terraform\ncan't guarantee that exactly these actions will be performed if\n\"terraform apply\" is subsequently run.</code></pre><pre><code>$ terraform apply --auto-approve\nsumologic_collector.collector: Refreshing state... [id=108448215]\nsumologic_http_source.http_source: Refreshing state... [id=150364538]\ncloudflare_logpush_job.firewall_events_job: Creating...\ncloudflare_logpush_job.firewall_events_job: Creation complete after 3s [id=13746]\n\nApply complete! Resources: 1 added, 0 changed, 0 destroyed.</code></pre><p>Success! Last step is to test your setup.</p><h2 id=\"testing-your-setup-by-sending-a-malicious-request\">Testing your setup by sending a malicious request</h2><p>The following step assumes that you have the Cloudflare WAF turned on. Alternatively, you can create a Firewall Rule to match your request and generate a Firewall Event that way.</p><p>First make sure that livetail is running as described earlier:</p><pre><code>$ livetail \"_source=firewall-events-source\"\n### Authenticating ###\n### Starting Live Tail session ###</code></pre><p>Then in a browser make the following request <code>https://example.com/&lt;script&gt;alert()&lt;/script&gt;</code>. You should see the following returned:</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2020/04/sqli-upinatoms.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>And a few moments later in livetail:</p><pre><code>{\"RayName\":\"58830d3f9945bc36\",\"Source\":\"waf\",\"RuleId\":\"958052\",\"Action\":\"log\",\"EdgeColoName\":\"LHR\",\"ClientIP\":\"203.0.113.69\",\"ClientCountryName\":\"gb\",\"ClientASNDescription\":\"NTL\",\"UserAgent\":\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36\",\"ClientRequestHTTPMethodName\":\"GET\",\"ClientRequestHTTPHost\":\"upinatoms.com\"}\n{\"RayName\":\"58830d3f9945bc36\",\"Source\":\"waf\",\"RuleId\":\"958051\",\"Action\":\"log\",\"EdgeColoName\":\"LHR\",\"ClientIP\":\"203.0.113.69\",\"ClientCountryName\":\"gb\",\"ClientASNDescription\":\"NTL\",\"UserAgent\":\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36\",\"ClientRequestHTTPMethodName\":\"GET\",\"ClientRequestHTTPHost\":\"upinatoms.com\"}\n{\"RayName\":\"58830d3f9945bc36\",\"Source\":\"waf\",\"RuleId\":\"973300\",\"Action\":\"log\",\"EdgeColoName\":\"LHR\",\"ClientIP\":\"203.0.113.69\",\"ClientCountryName\":\"gb\",\"ClientASNDescription\":\"NTL\",\"UserAgent\":\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36\",\"ClientRequestHTTPMethodName\":\"GET\",\"ClientRequestHTTPHost\":\"upinatoms.com\"}\n{\"RayName\":\"58830d3f9945bc36\",\"Source\":\"waf\",\"RuleId\":\"973307\",\"Action\":\"log\",\"EdgeColoName\":\"LHR\",\"ClientIP\":\"203.0.113.69\",\"ClientCountryName\":\"gb\",\"ClientASNDescription\":\"NTL\",\"UserAgent\":\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36\",\"ClientRequestHTTPMethodName\":\"GET\",\"ClientRequestHTTPHost\":\"upinatoms.com\"}\n{\"RayName\":\"58830d3f9945bc36\",\"Source\":\"waf\",\"RuleId\":\"973331\",\"Action\":\"log\",\"EdgeColoName\":\"LHR\",\"ClientIP\":\"203.0.113.69\",\"ClientCountryName\":\"gb\",\"ClientASNDescription\":\"NTL\",\"UserAgent\":\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36\",\"ClientRequestHTTPMethodName\":\"GET\",\"ClientRequestHTTPHost\":\"upinatoms.com\"}\n{\"RayName\":\"58830d3f9945bc36\",\"Source\":\"waf\",\"RuleId\":\"981176\",\"Action\":\"drop\",\"EdgeColoName\":\"LHR\",\"ClientIP\":\"203.0.113.69\",\"ClientCountryName\":\"gb\",\"ClientASNDescription\":\"NTL\",\"UserAgent\":\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36\",\"ClientRequestHTTPMethodName\":\"GET\",\"ClientRequestHTTPHost\":\"upinatoms.com\"}</code></pre><p>Note that for this one malicious request Cloudflare Logs actually sent 6 separate Firewall Events to Sumo Logic. The reason for this is that this specific request triggered a variety of different Managed Rules: #958051, 958052, 973300, 973307, 973331, and 981176.</p><h2 id=\"seeing-it-all-in-action\">Seeing it all in action</h2><p>Here's a demo of  launching <code>livetail</code>, making a malicious request in a browser, and then seeing the result sent from the Cloudflare Logpush job:</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2020/04/fwevents-sumo-demo.gif\" class=\"kg-image\" alt loading=\"lazy\"></figure>",
		"comment_id": "5ea209cbb2b49a01bc816e51",
		"feature_image": "http://blog.cloudflare.com/content/images/2020/04/firewall-event-log@2x.png",
		"featured": false,
		"visibility": "public",
		"created_at": "2020-04-23T22:34:03.000+01:00",
		"updated_at": "2024-03-20T15:28:44.000+00:00",
		"published_at": "2020-04-24T12:00:00.000+01:00",
		"custom_excerpt": "As of today, customers using Cloudflare Logs can create Logpush jobs that send only Firewall Events. These events arrive much faster than our existing HTTP requests logs: they are typically delivered to your logging platform within 60 seconds of sending the response to the client.",
		"codeinjection_head": null,
		"codeinjection_foot": null,
		"custom_template": null,
		"canonical_url": null,
		"authors": [
			{
				"id": "5d1644b141acde0011a94f5c",
				"name": "Patrick R. Donahue",
				"slug": "patrick",
				"profile_image": "https://blog-cloudflare-com-assets.storage.googleapis.com/2020/04/me0-1.png",
				"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-108.png",
				"bio": null,
				"website": "https://www.cloudflare.com",
				"location": "San Francisco, CA",
				"facebook": null,
				"twitter": "@prdonahue",
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/patrick/"
			}
		],
		"tags": [
			{
				"id": "5d16450341acde0011a9525b",
				"name": "Firewall",
				"slug": "firewall",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/firewall/"
			},
			{
				"id": "5d16450341acde0011a95222",
				"name": "Logs",
				"slug": "logs",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/logs/"
			},
			{
				"id": "5d16450341acde0011a9524e",
				"name": "Terraform",
				"slug": "terraform",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/terraform/"
			},
			{
				"id": "5ea22498b2b49a01bc816fb2",
				"name": "SIEM",
				"slug": "siem",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/siem/"
			}
		],
		"primary_author": {
			"id": "5d1644b141acde0011a94f5c",
			"name": "Patrick R. Donahue",
			"slug": "patrick",
			"profile_image": "https://blog-cloudflare-com-assets.storage.googleapis.com/2020/04/me0-1.png",
			"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-108.png",
			"bio": null,
			"website": "https://www.cloudflare.com",
			"location": "San Francisco, CA",
			"facebook": null,
			"twitter": "@prdonahue",
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/patrick/"
		},
		"primary_tag": {
			"id": "5d16450341acde0011a9525b",
			"name": "Firewall",
			"slug": "firewall",
			"description": null,
			"feature_image": null,
			"visibility": "public",
			"meta_title": null,
			"meta_description": null,
			"og_image": null,
			"og_title": null,
			"og_description": null,
			"twitter_image": null,
			"twitter_title": null,
			"twitter_description": null,
			"codeinjection_head": null,
			"codeinjection_foot": null,
			"canonical_url": null,
			"accent_color": null,
			"url": "http://blog.cloudflare.com/tag/firewall/"
		},
		"url": "http://blog.cloudflare.com/stream-firewall-events-directly-to-your-siem/",
		"excerpt": "As of today, customers using Cloudflare Logs can create Logpush jobs that send only Firewall Events. These events arrive much faster than our existing HTTP requests logs: they are typically delivered to your logging platform within 60 seconds of sending the response to the client.",
		"reading_time": 12,
		"access": true,
		"comments": false,
		"og_image": "https://blog-cloudflare-com-assets.storage.googleapis.com/2020/04/facebook-Linked_Image___image3.png",
		"og_title": null,
		"og_description": null,
		"twitter_image": "https://blog-cloudflare-com-assets.storage.googleapis.com/2020/04/twitter-In-Stream_Wide___image3.png",
		"twitter_title": null,
		"twitter_description": null,
		"meta_title": "Stream Firewall Events directly to your SIEM with Cloudflare Logs",
		"meta_description": "Customers using Cloudflare Logs can now create Logpush jobs that send only Firewall Events. These are typically delivered to your logging platform within 60 seconds of sending the response to the client.",
		"email_subject": null,
		"frontmatter": null,
		"feature_image_alt": null,
		"feature_image_caption": null
	}
}