{
	"post": {
		"id": "5d16453b41acde0011a956f1",
		"uuid": "009064cd-d82c-4c1f-849c-077fd4568abe",
		"title": "Tracing System CPU on Debian Stretch",
		"slug": "tracing-system-cpu-on-debian-stretch",
		"html": "<!--kg-card-begin: markdown--><p><em>This is a heavily truncated version of an internal blog post from August 2017. For more recent updates on Kafka, check out <a href=\"http://blog.cloudflare.com/squeezing-the-firehose/\">another blog post on compression</a>, where we optimized throughput 4.5x for both disks and network.</em></p>\n<p><img src=\"https://images.unsplash.com/photo-1511971523672-53e6411f62b9?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjExNzczfQ&amp;s=79649c78f5bbe2b0beb5504eb08471b8\" alt=\"\" loading=\"lazy\"><br>\n<small>Photo by <a href=\"https://unsplash.com/@alex_povolyashko?utm_source=ghost&amp;utm_medium=referral&amp;utm_campaign=api-credit\">Alex Povolyashko</a> / <a href=\"https://unsplash.com/?utm_source=ghost&amp;utm_medium=referral&amp;utm_campaign=api-credit\">Unsplash</a></small></p>\n<h3 id=\"upgradingoursystemstodebianstretch\">Upgrading our systems to Debian Stretch</h3>\n<p>For quite some time we've been rolling out Debian Stretch, to the point where we have reached ~10% adoption in our core datacenters. As part of upgarding the underlying OS, we also evaluate the higher level software stack, e.g. taking a look at our ClickHouse and Kafka clusters.</p>\n<p>During our upgrade of Kafka, we sucessfully migrated two smaller clusters, <code>logs</code> and <code>dns</code>, but ran into issues when attempting to upgrade one of our larger clusters, <code>http</code>.</p>\n<p>Thankfully, we were able to roll back the <code>http</code> cluster upgrade relatively easily, due to heavy versioning of both the OS and the higher level software stack. If there's one takeaway from this blog post, it's to take advantage of consistent versioning.</p>\n<h3 id=\"highleveldifferences\">High level differences</h3>\n<p>We upgraded one Kafka <code>http</code> node, and it did not go as planned:</p>\n<p><a href=\"http://blog.cloudflare.com/content/images/2018/04/1.png\"><img src=\"http://blog.cloudflare.com/content/images/2018/04/1.png\" alt=\"1\" loading=\"lazy\"></a></p>\n<p>Having 5x CPU usage was definitely an unexpected outcome. For control datapoints, we compared to a node where no upgrade happened, and an intermediary node that received a software stack upgrade, but not an OS upgrade. Neither of these two nodes experienced the same CPU saturation issues, even though their setups were practically identical.</p>\n<p>For debugging CPU saturation issues, we call on <code>perf</code> to fish out details:</p>\n<p><a href=\"http://blog.cloudflare.com/content/images/2018/04/2-3.png\"><img src=\"http://blog.cloudflare.com/content/images/2018/04/2-3.png\" alt=\"2-3\" loading=\"lazy\"></a></p>\n<p><em>The command used was: <code>perf top -F 99</code>.</em></p>\n<h3 id=\"rcustalls\">RCU stalls</h3>\n<p>In addition to higher system CPU usage, we found secondary slowdowns, including <a href=\"http://www.rdrop.com/~paulmck/RCU/whatisRCU.html\">read-copy update (RCU)</a> stalls:</p>\n<pre><code>[ 4909.110009] logfwdr (26887) used greatest stack depth: 11544 bytes left\n[ 4909.392659] oom_reaper: reaped process 26861 (logfwdr), now anon-rss:8kB, file-rss:0kB, shmem-rss:0kB\n[ 4923.462841] INFO: rcu_sched self-detected stall on CPU\n[ 4923.462843]  13-...: (2 GPs behind) idle=ea7/140000000000001/0 softirq=1/2 fqs=4198\n[ 4923.462845]   (t=8403 jiffies g=110722 c=110721 q=6440)\n</code></pre>\n<p>We've seen RCU stalls before, and our (suboptimal) solution was to reboot the machine.</p>\n<p>However, one can only handle so many reboots before the problem becomes severe enough to warrant a deep dive. During our deep dive, we noticed in <code>dmesg</code> that we had issues allocating memory, while trying to write errors:</p>\n<pre><code>Aug 15 21:51:35 myhost kernel: INFO: rcu_sched detected stalls on CPUs/tasks:\nAug 15 21:51:35 myhost kernel:         26-...: (1881 ticks this GP) idle=76f/140000000000000/0 softirq=8/8 fqs=365\nAug 15 21:51:35 myhost kernel:         (detected by 0, t=2102 jiffies, g=1837293, c=1837292, q=262)\nAug 15 21:51:35 myhost kernel: Task dump for CPU 26:\nAug 15 21:51:35 myhost kernel: java            R  running task    13488  1714   1513 0x00080188\nAug 15 21:51:35 myhost kernel:  ffffc9000d1f7898 ffffffff814ee977 ffff88103f410400 000000000000000a\nAug 15 21:51:35 myhost kernel:  0000000000000041 ffffffff82203142 ffffc9000d1f78c0 ffffffff814eea10\nAug 15 21:51:35 myhost kernel:  0000000000000041 ffffffff82203142 ffff88103f410400 ffffc9000d1f7920\nAug 15 21:51:35 myhost kernel: Call Trace:\nAug 15 21:51:35 myhost kernel:  [&lt;ffffffff814ee977&gt;] ? scrup+0x147/0x160\nAug 15 21:51:35 myhost kernel:  [&lt;ffffffff814eea10&gt;] ? lf+0x80/0x90\nAug 15 21:51:35 myhost kernel:  [&lt;ffffffff814eecb5&gt;] ? vt_console_print+0x295/0x3c0\nAug 15 21:51:35 myhost kernel:  [&lt;ffffffff810b1193&gt;] ? call_console_drivers.isra.22.constprop.30+0xf3/0x100\nAug 15 21:51:35 myhost kernel:  [&lt;ffffffff810b1f51&gt;] ? console_unlock+0x281/0x550\nAug 15 21:51:35 myhost kernel:  [&lt;ffffffff810b2498&gt;] ? vprintk_emit+0x278/0x430\nAug 15 21:51:35 myhost kernel:  [&lt;ffffffff810b27ef&gt;] ? vprintk_default+0x1f/0x30\nAug 15 21:51:35 myhost kernel:  [&lt;ffffffff811588df&gt;] ? printk+0x48/0x50\nAug 15 21:51:35 myhost kernel:  [&lt;ffffffff810b30ee&gt;] ? dump_stack_print_info+0x7e/0xc0\nAug 15 21:51:35 myhost kernel:  [&lt;ffffffff8142d41f&gt;] ? dump_stack+0x44/0x65\nAug 15 21:51:35 myhost kernel:  [&lt;ffffffff81162e64&gt;] ? warn_alloc+0x124/0x150\nAug 15 21:51:35 myhost kernel:  [&lt;ffffffff81163842&gt;] ? __alloc_pages_slowpath+0x932/0xb80\nAug 15 21:51:35 myhost kernel:  [&lt;ffffffff81163c92&gt;] ? __alloc_pages_nodemask+0x202/0x250\nAug 15 21:51:35 myhost kernel:  [&lt;ffffffff811ae9c2&gt;] ? alloc_pages_current+0x92/0x120\nAug 15 21:51:35 myhost kernel:  [&lt;ffffffff81159d2f&gt;] ? __page_cache_alloc+0xbf/0xd0\nAug 15 21:51:35 myhost kernel:  [&lt;ffffffff8115cdfa&gt;] ? filemap_fault+0x2ea/0x4d0\nAug 15 21:51:35 myhost kernel:  [&lt;ffffffff8136dc95&gt;] ? xfs_filemap_fault+0x45/0xa0\nAug 15 21:51:35 myhost kernel:  [&lt;ffffffff8118b3eb&gt;] ? __do_fault+0x6b/0xd0\nAug 15 21:51:35 myhost kernel:  [&lt;ffffffff81190028&gt;] ? handle_mm_fault+0xe98/0x12b0\nAug 15 21:51:35 myhost kernel:  [&lt;ffffffff8110756b&gt;] ? __seccomp_filter+0x1db/0x290\nAug 15 21:51:35 myhost kernel:  [&lt;ffffffff8104fa5c&gt;] ? __do_page_fault+0x22c/0x4c0\nAug 15 21:51:35 myhost kernel:  [&lt;ffffffff8104fd10&gt;] ? do_page_fault+0x20/0x70\nAug 15 21:51:35 myhost kernel:  [&lt;ffffffff819bea02&gt;] ? page_fault+0x22/0x30\n</code></pre>\n<p>This suggested that we were logging too many errors, and the actual failure may be earlier in the process. Armed with this hypothesis, we looked at the very beginning of the error chain:</p>\n<pre><code>Aug 16 01:14:51 myhost systemd-journald[13812]: Missed 17171 kernel messages\nAug 16 01:14:51 myhost kernel:  [&lt;ffffffff81171754&gt;] shrink_inactive_list+0x1f4/0x4f0\nAug 16 01:14:51 myhost kernel:  [&lt;ffffffff8117234b&gt;] shrink_node_memcg+0x5bb/0x780\nAug 16 01:14:51 myhost kernel:  [&lt;ffffffff811725e2&gt;] shrink_node+0xd2/0x2f0\nAug 16 01:14:51 myhost kernel:  [&lt;ffffffff811728ef&gt;] do_try_to_free_pages+0xef/0x310\nAug 16 01:14:51 myhost kernel:  [&lt;ffffffff81172be5&gt;] try_to_free_pages+0xd5/0x180\nAug 16 01:14:51 myhost kernel:  [&lt;ffffffff811632db&gt;] __alloc_pages_slowpath+0x31b/0xb80\n</code></pre>\n<p>As much as <code>shrink_node</code> may scream &quot;NUMA issues&quot;, you're looking primarily at:</p>\n<pre><code>Aug 16 01:14:51 myhost systemd-journald[13812]: Missed 17171 kernel messages\n</code></pre>\n<p>In addition, we also found memory allocation issues:</p>\n<pre><code>[78972.506644] Mem-Info:\n[78972.506653] active_anon:3936889 inactive_anon:371971 isolated_anon:0\n[78972.506653]  active_file:25778474 inactive_file:1214478 isolated_file:2208\n[78972.506653]  unevictable:0 dirty:1760643 writeback:0 unstable:0\n[78972.506653]  slab_reclaimable:1059804 slab_unreclaimable:141694\n[78972.506653]  mapped:47285 shmem:535917 pagetables:10298 bounce:0\n[78972.506653]  free:202928 free_pcp:3085 free_cma:0\n[78972.506660] Node 0 active_anon:8333016kB inactive_anon:989808kB active_file:50622384kB inactive_file:2401416kB unevictable:0kB isolated(anon):0kB isolated(file):3072kB mapped:96624kB dirty:3422168kB writeback:0kB shmem:1261156kB shmem_thp: 0kB shmem_pmdmapped: 0kB anon_thp: 0kB writeback_tmp:0kB unstable:0kB pages_scanned:15744 all_unreclaimable? no\n[78972.506666] Node 1 active_anon:7414540kB inactive_anon:498076kB active_file:52491512kB inactive_file:2456496kB unevictable:0kB isolated(anon):0kB isolated(file):5760kB mapped:92516kB dirty:3620404kB writeback:0kB shmem:882512kB shmem_thp: 0kB shmem_pmdmapped: 0kB anon_thp: 0kB writeback_tmp:0kB unstable:0kB pages_scanned:9080974 all_unreclaimable? no\n[78972.506671] Node 0 DMA free:15900kB min:100kB low:124kB high:148kB active_anon:0kB inactive_anon:0kB active_file:0kB inactive_file:0kB unevictable:0kB writepending:0kB present:15996kB managed:15900kB mlocked:0kB slab_reclaimable:0kB slab_unreclaimable:0kB kernel_stack:0kB pagetables:0kB bounce:0kB free_pcp:0kB local_pcp:0kB free_cma:0kB\n** 9 printk messages dropped ** [78972.506716] Node 0 Normal: 15336*4kB (UMEH) 4584*8kB (MEH) 2119*16kB (UME) 775*32kB (MEH) 106*64kB (UM) 81*128kB (MH) 29*256kB (UM) 25*512kB (M) 19*1024kB (M) 7*2048kB (M) 2*4096kB (M) = 236080kB\n[78972.506725] Node 1 Normal: 31740*4kB (UMEH) 3879*8kB (UMEH) 873*16kB (UME) 353*32kB (UM) 286*64kB (UMH) 62*128kB (UMH) 28*256kB (MH) 20*512kB (UMH) 15*1024kB (UM) 7*2048kB (UM) 12*4096kB (M) = 305752kB\n[78972.506726] Node 0 hugepages_total=0 hugepages_free=0 hugepages_surp=0 hugepages_size=2048kB\n[78972.506727] Node 1 hugepages_total=0 hugepages_free=0 hugepages_surp=0 hugepages_size=2048kB\n[78972.506728] 27531091 total pagecache pages\n[78972.506729] 0 pages in swap cache\n[78972.506730] Swap cache stats: add 0, delete 0, find 0/0\n[78972.506730] Free swap  = 0kB\n[78972.506731] Total swap = 0kB\n[78972.506731] 33524975 pages RAM\n[78972.506732] 0 pages HighMem/MovableOnly\n[78972.506732] 546255 pages reserved\n[78972.620129] ntpd: page allocation stalls for 272380ms, order:0, mode:0x24000c0(GFP_KERNEL)\n[78972.620132] CPU: 16 PID: 13099 Comm: ntpd Tainted: G           O    4.9.43-cloudflare-2017.8.4 #1\n[78972.620133] Hardware name: Quanta Computer Inc D51B-2U (dual 1G LoM)/S2B-MB (dual 1G LoM), BIOS S2B_3A21 10/01/2015\n[78972.620136]  ffffc90022f9b6f8 ffffffff8142d668 ffffffff81ca31b8 0000000000000001\n[78972.620138]  ffffc90022f9b778 ffffffff81162f14 024000c022f9b740 ffffffff81ca31b8\n[78972.620140]  ffffc90022f9b720 0000000000000010 ffffc90022f9b788 ffffc90022f9b738\n[78972.620140] Call Trace:\n[78972.620148]  [&lt;ffffffff8142d668&gt;] dump_stack+0x4d/0x65\n[78972.620152]  [&lt;ffffffff81162f14&gt;] warn_alloc+0x124/0x150\n[78972.620154]  [&lt;ffffffff811638f2&gt;] __alloc_pages_slowpath+0x932/0xb80\n[78972.620157]  [&lt;ffffffff81163d42&gt;] __alloc_pages_nodemask+0x202/0x250\n[78972.620160]  [&lt;ffffffff811aeae2&gt;] alloc_pages_current+0x92/0x120\n[78972.620162]  [&lt;ffffffff8115f6ee&gt;] __get_free_pages+0xe/0x40\n[78972.620165]  [&lt;ffffffff811e747a&gt;] __pollwait+0x9a/0xe0\n[78972.620168]  [&lt;ffffffff817c9ec9&gt;] datagram_poll+0x29/0x100\n[78972.620170]  [&lt;ffffffff817b9d48&gt;] sock_poll+0x48/0xa0\n[78972.620172]  [&lt;ffffffff811e7c35&gt;] do_select+0x335/0x7b0\n</code></pre>\n<p>This specific error message did seem fun:</p>\n<pre><code>[78991.546088] systemd-network: page allocation stalls for 287000ms, order:0, mode:0x24200ca(GFP_HIGHUSER_MOVABLE)\n</code></pre>\n<p>You don't want your page allocations to stall for 5 minutes, especially when it's order zero allocation (smallest allocation of one 4 KiB page).</p>\n<p>Comparing to our control nodes, the only two possible explanations were: a kernel upgrade, and the switch from Debian Jessie to Debian Stretch. We suspected the former, since CPU usage implies a kernel issue. However, just to be safe, we rolled both the kernel back to 4.4.55, and downgraded the affected nodes back to Debian Jessie. This was a reasonable compromise, since we needed to minimize downtime on production nodes.</p>\n<h3 id=\"diggingabitdeeper\">Digging a bit deeper</h3>\n<p>Keeping servers running on older kernel and distribution is not a viable long term solution. Through bisection, we found the issue lay in the Jessie to Stretch upgrade, contrary to our initial hypothesis.</p>\n<p>Now that we knew what the problem was, we proceeded to investigate why. With the help from existing automation around <code>perf</code> and Java, we generated the following flamegraphs:</p>\n<ul>\n<li>Jessie</li>\n</ul>\n<p><a href=\"http://blog.cloudflare.com/content/images/2018/04/9.png\"><img src=\"http://blog.cloudflare.com/content/images/2018/04/9.png\" alt=\"9\" loading=\"lazy\"></a></p>\n<ul>\n<li>Stretch</li>\n</ul>\n<p><a href=\"http://blog.cloudflare.com/content/images/2018/04/10.png\"><img src=\"http://blog.cloudflare.com/content/images/2018/04/10.png\" alt=\"10\" loading=\"lazy\"></a></p>\n<p>At first it looked like Jessie was doing <code>writev</code> instead of <code>sendfile</code>, but the full flamegraphs revealed that Strech was executing <code>sendfile</code> a lot slower.</p>\n<p>If you highlight <code>sendfile</code>:</p>\n<ul>\n<li>Jessie</li>\n</ul>\n<p><a href=\"http://blog.cloudflare.com/content/images/2018/04/11.png\"><img src=\"http://blog.cloudflare.com/content/images/2018/04/11.png\" alt=\"11\" loading=\"lazy\"></a></p>\n<ul>\n<li>Stretch</li>\n</ul>\n<p><a href=\"http://blog.cloudflare.com/content/images/2018/04/12.png\"><img src=\"http://blog.cloudflare.com/content/images/2018/04/12.png\" alt=\"12\" loading=\"lazy\"></a></p>\n<p>And zoomed in:</p>\n<ul>\n<li>Jessie</li>\n</ul>\n<p><a href=\"http://blog.cloudflare.com/content/images/2018/04/13.png\"><img src=\"http://blog.cloudflare.com/content/images/2018/04/13.png\" alt=\"13\" loading=\"lazy\"></a></p>\n<ul>\n<li>Stretch</li>\n</ul>\n<p><a href=\"http://blog.cloudflare.com/content/images/2018/04/14.png\"><img src=\"http://blog.cloudflare.com/content/images/2018/04/14.png\" alt=\"14\" loading=\"lazy\"></a></p>\n<p>These two look very different.</p>\n<p>Some colleagues suggested that the differences in the graphs may be due to TCP offload being disabled, but upon checking our NIC settings, we found that the feature flags were identical.</p>\n<p>We'll dive into the differences in the next section.</p>\n<h3 id=\"anddeeper\">And deeper</h3>\n<p>To trace latency distributions of <code>sendfile</code> syscalls between Jessie and Stretch, we used <a href=\"https://github.com/iovisor/bcc/blob/master/tools/funclatency_example.txt\"><code>funclatency</code></a> from <a href=\"https://iovisor.github.io/bcc/\">bcc-tools</a>:</p>\n<ul>\n<li>Jessie</li>\n</ul>\n<pre><code>$ sudo /usr/share/bcc/tools/funclatency -uTi 1 do_sendfile\nTracing 1 functions for &quot;do_sendfile&quot;... Hit Ctrl-C to end.\n23:27:25\n     usecs               : count     distribution\n         0 -&gt; 1          : 9        |                                        |\n         2 -&gt; 3          : 47       |****                                    |\n         4 -&gt; 7          : 53       |*****                                   |\n         8 -&gt; 15         : 379      |****************************************|\n        16 -&gt; 31         : 329      |**********************************      |\n        32 -&gt; 63         : 101      |**********                              |\n        64 -&gt; 127        : 23       |**                                      |\n       128 -&gt; 255        : 50       |*****                                   |\n       256 -&gt; 511        : 7        |                                        |\n</code></pre>\n<ul>\n<li>Stretch</li>\n</ul>\n<pre><code>$ sudo /usr/share/bcc/tools/funclatency -uTi 1 do_sendfile\nTracing 1 functions for &quot;do_sendfile&quot;... Hit Ctrl-C to end.\n23:27:28\n     usecs               : count     distribution\n         0 -&gt; 1          : 1        |                                        |\n         2 -&gt; 3          : 20       |***                                     |\n         4 -&gt; 7          : 46       |*******                                 |\n         8 -&gt; 15         : 56       |********                                |\n        16 -&gt; 31         : 65       |**********                              |\n        32 -&gt; 63         : 75       |***********                             |\n        64 -&gt; 127        : 75       |***********                             |\n       128 -&gt; 255        : 258      |****************************************|\n       256 -&gt; 511        : 144      |**********************                  |\n       512 -&gt; 1023       : 24       |***                                     |\n      1024 -&gt; 2047       : 27       |****                                    |\n      2048 -&gt; 4095       : 28       |****                                    |\n      4096 -&gt; 8191       : 35       |*****                                   |\n      8192 -&gt; 16383      : 1        |                                        |\n</code></pre>\n<p>In the flamegraphs, you can see timers being set at the tip (<code>mod_timer</code> function), with these timers taking locks. On Stretch we installed 3x more timers, resulting in 10x the amount of contention:</p>\n<ul>\n<li>Jessie</li>\n</ul>\n<pre><code>$ sudo /usr/share/bcc/tools/funccount -T -i 1 mod_timer\nTracing 1 functions for &quot;mod_timer&quot;... Hit Ctrl-C to end.\n00:33:36\nFUNC                                    COUNT\nmod_timer                               60482\n00:33:37\nFUNC                                    COUNT\nmod_timer                               58263\n00:33:38\nFUNC                                    COUNT\nmod_timer                               54626\n</code></pre>\n<pre><code>$ sudo /usr/share/bcc/tools/funccount -T -i 1 lock_timer_base\nTracing 1 functions for &quot;lock_timer_base&quot;... Hit Ctrl-C to end.\n00:32:36\nFUNC                                    COUNT\nlock_timer_base                         15962\n00:32:37\nFUNC                                    COUNT\nlock_timer_base                         16261\n00:32:38\nFUNC                                    COUNT\nlock_timer_base                         15806\n</code></pre>\n<ul>\n<li>Stretch</li>\n</ul>\n<pre><code>$ sudo /usr/share/bcc/tools/funccount -T -i 1 mod_timer\nTracing 1 functions for &quot;mod_timer&quot;... Hit Ctrl-C to end.\n00:33:28\nFUNC                                    COUNT\nmod_timer                              149068\n00:33:29\nFUNC                                    COUNT\nmod_timer                              155994\n00:33:30\nFUNC                                    COUNT\nmod_timer                              160688\n</code></pre>\n<pre><code>$ sudo /usr/share/bcc/tools/funccount -T -i 1 lock_timer_base\nTracing 1 functions for &quot;lock_timer_base&quot;... Hit Ctrl-C to end.\n00:32:32\nFUNC                                    COUNT\nlock_timer_base                        119189\n00:32:33\nFUNC                                    COUNT\nlock_timer_base                        196895\n00:32:34\nFUNC                                    COUNT\nlock_timer_base                        140085\n</code></pre>\n<p>The Linux kernel includes debugging facilities for timers, which <a href=\"https://elixir.bootlin.com/linux/v4.9.43/source/kernel/time/timer.c#L1010\">call</a> the <code>timer:timer_start</code> <a href=\"https://elixir.bootlin.com/linux/v4.9.43/source/include/trace/events/timer.h#L44\">tracepoint</a> on every timer start. This allowed us to pull up timer names:</p>\n<ul>\n<li>Jessie</li>\n</ul>\n<pre><code>$ sudo perf record -e timer:timer_start -p 23485 -- sleep 10 &amp;&amp; sudo perf script | sed 's/.* function=//g' | awk '{ print $1 }' | sort | uniq -c\n[ perf record: Woken up 54 times to write data ]\n[ perf record: Captured and wrote 17.778 MB perf.data (173520 samples) ]\n      6 blk_rq_timed_out_timer\n      2 clocksource_watchdog\n      5 commit_timeout\n      5 cursor_timer_handler\n      2 dev_watchdog\n     10 garp_join_timer\n      2 ixgbe_service_timer\n     36 reqsk_timer_handler\n   4769 tcp_delack_timer\n    171 tcp_keepalive_timer\n 168512 tcp_write_timer\n</code></pre>\n<ul>\n<li>Stretch</li>\n</ul>\n<pre><code>$ sudo perf record -e timer:timer_start -p 3416 -- sleep 10 &amp;&amp; sudo perf script | sed 's/.* function=//g' | awk '{ print $1 }' | sort | uniq -c\n[ perf record: Woken up 671 times to write data ]\n[ perf record: Captured and wrote 198.273 MB perf.data (1988650 samples) ]\n      6 clocksource_watchdog\n      4 commit_timeout\n     12 cursor_timer_handler\n      2 dev_watchdog\n     18 garp_join_timer\n      4 ixgbe_service_timer\n      1 neigh_timer_handler\n      1 reqsk_timer_handler\n   4622 tcp_delack_timer\n      1 tcp_keepalive_timer\n1983978 tcp_write_timer\n      1 writeout_period\n</code></pre>\n<p>So basically we install 12x more <code>tcp_write_timer</code> timers, resulting in higher kernel CPU usage.</p>\n<p>Taking specific flamegraphs of the timers revealed the differences in their operation:</p>\n<ul>\n<li>Jessie</li>\n</ul>\n<p><a href=\"http://blog.cloudflare.com/content/images/2018/04/15.png\"><img src=\"http://blog.cloudflare.com/content/images/2018/04/15.png\" alt=\"15\" loading=\"lazy\"></a></p>\n<ul>\n<li>Stretch</li>\n</ul>\n<p><a href=\"http://blog.cloudflare.com/content/images/2018/04/16.png\"><img src=\"http://blog.cloudflare.com/content/images/2018/04/16.png\" alt=\"16\" loading=\"lazy\"></a></p>\n<p>We then traced the functions that were different:</p>\n<ul>\n<li>Jessie</li>\n</ul>\n<pre><code>$ sudo /usr/share/bcc/tools/funccount -T -i 1 tcp_sendmsg\nTracing 1 functions for &quot;tcp_sendmsg&quot;... Hit Ctrl-C to end.\n03:33:33\nFUNC                                    COUNT\ntcp_sendmsg                             21166\n03:33:34\nFUNC                                    COUNT\ntcp_sendmsg                             21768\n03:33:35\nFUNC                                    COUNT\ntcp_sendmsg                             21712\n</code></pre>\n<pre><code>$ sudo /usr/share/bcc/tools/funccount -T -i 1 tcp_push_one\nTracing 1 functions for &quot;tcp_push_one&quot;... Hit Ctrl-C to end.\n03:37:14\nFUNC                                    COUNT\ntcp_push_one                              496\n03:37:15\nFUNC                                    COUNT\ntcp_push_one                              432\n03:37:16\nFUNC                                    COUNT\ntcp_push_one                              495\n</code></pre>\n<pre><code>$ sudo /usr/share/bcc/tools/trace -p 23485 'tcp_sendmsg &quot;%d&quot;, arg3' -T -M 100000 | awk '{ print $NF }' | sort | uniq -c | sort -n | tail\n   1583 4\n   2043 54\n   3546 18\n   4016 59\n   4423 50\n   5349 8\n   6154 40\n   6620 38\n  17121 51\n  39528 44\n</code></pre>\n<ul>\n<li>Stretch</li>\n</ul>\n<pre><code>$ sudo /usr/share/bcc/tools/funccount -T -i 1 tcp_sendmsg\nTracing 1 functions for &quot;tcp_sendmsg&quot;... Hit Ctrl-C to end.\n03:33:30\nFUNC                                    COUNT\ntcp_sendmsg                             53834\n03:33:31\nFUNC                                    COUNT\ntcp_sendmsg                             49472\n03:33:32\nFUNC                                    COUNT\ntcp_sendmsg                             51221\n</code></pre>\n<pre><code>$ sudo /usr/share/bcc/tools/funccount -T -i 1 tcp_push_one\nTracing 1 functions for &quot;tcp_push_one&quot;... Hit Ctrl-C to end.\n03:37:10\nFUNC                                    COUNT\ntcp_push_one                            64483\n03:37:11\nFUNC                                    COUNT\ntcp_push_one                            65058\n03:37:12\nFUNC                                    COUNT\ntcp_push_one                            72394\n</code></pre>\n<pre><code>$ sudo /usr/share/bcc/tools/trace -p 3416 'tcp_sendmsg &quot;%d&quot;, arg3' -T -M 100000 | awk '{ print $NF }' | sort | uniq -c | sort -n | tail\n    396 46\n    409 4\n   1124 50\n   1305 18\n   1547 40\n   1672 59\n   1729 8\n   2181 38\n  19052 44\n  64504 4096\n</code></pre>\n<p>The traces showed huge variations of <code>tcp_sendmsg</code> and <code>tcp_push_one</code> within <code>sendfile</code>.</p>\n<p>To further introspect, we leveraged a kernel feature available since 4.9: the ability to count stacks. This led us to measuring what hits <code>tcp_push_one</code>:</p>\n<ul>\n<li>Jessie</li>\n</ul>\n<pre><code>$ sudo /usr/share/bcc/tools/stackcount -i 10 tcp_push_one\nTracing 1 functions for &quot;tcp_push_one&quot;... Hit Ctrl-C to end.\n  tcp_push_one\n  inet_sendmsg\n  sock_sendmsg\n  sock_write_iter\n  do_iter_readv_writev\n  do_readv_writev\n  vfs_writev\n  do_writev\n  SyS_writev\n  do_syscall_64\n  return_from_SYSCALL_64\n    1\n  tcp_push_one\n  inet_sendpage\n  kernel_sendpage\n  sock_sendpage\n  pipe_to_sendpage\n  __splice_from_pipe\n  splice_from_pipe\n  generic_splice_sendpage\n  direct_splice_actor\n  splice_direct_to_actor\n  do_splice_direct\n  do_sendfile\n  sys_sendfile64\n  do_syscall_64\n  return_from_SYSCALL_64\n    4950\n</code></pre>\n<ul>\n<li>Stretch</li>\n</ul>\n<pre><code>$ sudo /usr/share/bcc/tools/stackcount -i 10 tcp_push_one\nTracing 1 functions for &quot;tcp_push_one&quot;... Hit Ctrl-C to end.\n  tcp_push_one\n  inet_sendmsg\n  sock_sendmsg\n  sock_write_iter\n  do_iter_readv_writev\n  do_readv_writev\n  vfs_writev\n  do_writev\n  SyS_writev\n  do_syscall_64\n  return_from_SYSCALL_64\n    123\n  tcp_push_one\n  inet_sendmsg\n  sock_sendmsg\n  sock_write_iter\n  __vfs_write\n  vfs_write\n  SyS_write\n  do_syscall_64\n  return_from_SYSCALL_64\n    172\n  tcp_push_one\n  inet_sendmsg\n  sock_sendmsg\n  kernel_sendmsg\n  sock_no_sendpage\n  tcp_sendpage\n  inet_sendpage\n  kernel_sendpage\n  sock_sendpage\n  pipe_to_sendpage\n  __splice_from_pipe\n  splice_from_pipe\n  generic_splice_sendpage\n  direct_splice_actor\n  splice_direct_to_actor\n  do_splice_direct\n  do_sendfile\n  sys_sendfile64\n  do_syscall_64\n  return_from_SYSCALL_64\n    735110\n</code></pre>\n<p>If you diff the most popular stacks, you'll get:</p>\n<pre><code>--- jessie.txt  2017-08-16 21:14:13.000000000 -0700\n+++ stretch.txt 2017-08-16 21:14:20.000000000 -0700\n@@ -1,4 +1,9 @@\n tcp_push_one\n+inet_sendmsg\n+sock_sendmsg\n+kernel_sendmsg\n+sock_no_sendpage\n+tcp_sendpage\n inet_sendpage\n kernel_sendpage\n sock_sendpage\n</code></pre>\n<p>Let's look closer at <a href=\"https://elixir.bootlin.com/linux/v4.9.43/source/net/ipv4/tcp.c#L1012\"><code>tcp_sendpage</code></a>:</p>\n<pre><code>int tcp_sendpage(struct sock *sk, struct page *page, int offset,\n         size_t size, int flags)\n{\n    ssize_t res;\n\n    if (!(sk-&gt;sk_route_caps &amp; NETIF_F_SG) ||\n        !sk_check_csum_caps(sk))\n        return sock_no_sendpage(sk-&gt;sk_socket, page, offset, size,\n                    flags);\n\n    lock_sock(sk);\n\n    tcp_rate_check_app_limited(sk);  /* is sending application-limited? */\n\n    res = do_tcp_sendpages(sk, page, offset, size, flags);\n    release_sock(sk);\n    return res;\n}\n</code></pre>\n<p>It looks like we don't enter the <code>if</code> body. We looked up what <a href=\"https://elixir.bootlin.com/linux/v4.9.43/source/include/linux/netdev_features.h#L115\">NET_F_SG</a> does: <a href=\"https://en.wikipedia.org/wiki/Large_send_offload\">segmentation offload</a>. This difference is peculiar, since both OS'es should have this enabled.</p>\n<h3 id=\"evendeepertothecrux\">Even deeper, to the crux</h3>\n<p>It turned out that we had segmentation offload enabled for only a few of our NICs: <code>eth2</code>, <code>eth3</code>, and <code>bond0</code>. Our network setup can be described as follows:</p>\n<pre><code>eth2 --&gt;|              |--&gt; vlan10\n        |---&gt; bond0 --&gt;|\neth3 --&gt;|              |--&gt; vlan100\n</code></pre>\n<p><strong>The missing piece was that we were missing segmentation offload on VLAN interfaces, where the actual IPs live.</strong></p>\n<p>Here's the diff from <code>ethtook -k vlan10</code>:</p>\n<pre><code>$ diff -rup &lt;(ssh jessie sudo ethtool -k vlan10) &lt;(ssh stretch sudo ethtool -k vlan10)\n--- /dev/fd/63  2017-08-16 21:21:12.000000000 -0700\n+++ /dev/fd/62  2017-08-16 21:21:12.000000000 -0700\n@@ -1,21 +1,21 @@\n Features for vlan10:\n rx-checksumming: off [fixed]\n-tx-checksumming: off\n+tx-checksumming: on\n        tx-checksum-ipv4: off [fixed]\n-       tx-checksum-ip-generic: off\n+       tx-checksum-ip-generic: on\n        tx-checksum-ipv6: off [fixed]\n        tx-checksum-fcoe-crc: off\n        tx-checksum-sctp: off\n-scatter-gather: off\n-       tx-scatter-gather: off\n+scatter-gather: on\n+       tx-scatter-gather: on\n        tx-scatter-gather-fraglist: off\n-tcp-segmentation-offload: off\n-       tx-tcp-segmentation: off [requested on]\n-       tx-tcp-ecn-segmentation: off [requested on]\n-       tx-tcp-mangleid-segmentation: off [requested on]\n-       tx-tcp6-segmentation: off [requested on]\n-udp-fragmentation-offload: off [requested on]\n-generic-segmentation-offload: off [requested on]\n+tcp-segmentation-offload: on\n+       tx-tcp-segmentation: on\n+       tx-tcp-ecn-segmentation: on\n+       tx-tcp-mangleid-segmentation: on\n+       tx-tcp6-segmentation: on\n+udp-fragmentation-offload: on\n+generic-segmentation-offload: on\n generic-receive-offload: on\n large-receive-offload: off [fixed]\n rx-vlan-offload: off [fixed]\n</code></pre>\n<p>So we entusiastically enabled segmentation offload:</p>\n<pre><code>$ sudo ethtool -K vlan10 sg on\n</code></pre>\n<p>And it didn't help! Will the suffering ever end? Let's also enable TCP transmission checksumming offload:</p>\n<pre><code>$ sudo ethtool -K vlan10 tx on\nActual changes:\ntx-checksumming: on\n        tx-checksum-ip-generic: on\ntcp-segmentation-offload: on\n        tx-tcp-segmentation: on\n        tx-tcp-ecn-segmentation: on\n        tx-tcp-mangleid-segmentation: on\n        tx-tcp6-segmentation: on\nudp-fragmentation-offload: on\n</code></pre>\n<p>Nothing. The diff is essentially empty now:</p>\n<pre><code>$ diff -rup &lt;(ssh jessie sudo ethtool -k vlan10) &lt;(ssh stretch sudo ethtool -k vlan10)\n--- /dev/fd/63  2017-08-16 21:31:27.000000000 -0700\n+++ /dev/fd/62  2017-08-16 21:31:27.000000000 -0700\n@@ -4,11 +4,11 @@ tx-checksumming: on\n        tx-checksum-ipv4: off [fixed]\n        tx-checksum-ip-generic: on\n        tx-checksum-ipv6: off [fixed]\n-       tx-checksum-fcoe-crc: off [requested on]\n-       tx-checksum-sctp: off [requested on]\n+       tx-checksum-fcoe-crc: off\n+       tx-checksum-sctp: off\n scatter-gather: on\n        tx-scatter-gather: on\n-       tx-scatter-gather-fraglist: off [requested on]\n+       tx-scatter-gather-fraglist: off\n tcp-segmentation-offload: on\n        tx-tcp-segmentation: on\n        tx-tcp-ecn-segmentation: on\n</code></pre>\n<p>The last missing piece we found was that offload changes are applied only during connection initiation, so we restarted Kafka, and we immediately saw a performance improvement (green line):</p>\n<p><a href=\"http://blog.cloudflare.com/content/images/2018/04/17.png\"><img src=\"http://blog.cloudflare.com/content/images/2018/04/17.png\" alt=\"17\" loading=\"lazy\"></a></p>\n<p>Not enabling offload features when possible seems like a pretty bad regression, so we filed a ticket for <code>systemd</code>:</p>\n<ul>\n<li><a href=\"https://github.com/systemd/systemd/issues/6629\">https://github.com/systemd/systemd/issues/6629</a></li>\n</ul>\n<p>In the meantime, we work around our upstream issue by enabling offload features automatically on boot if they are disabled on VLAN interfaces.</p>\n<p>Having a fix enabled, we rebooted our <code>logs</code> Kafka cluster to upgrade to the latest kernel, and our 5 day CPU usage history yielded positive results:</p>\n<p><a href=\"http://blog.cloudflare.com/content/images/2018/04/18.png\"><img src=\"http://blog.cloudflare.com/content/images/2018/04/18.png\" alt=\"18\" loading=\"lazy\"></a></p>\n<p>The DNS cluster also yielded positive results, with just 2 nodes rebooted (purple line going down):</p>\n<p><a href=\"http://blog.cloudflare.com/content/images/2018/04/19.png\"><img src=\"http://blog.cloudflare.com/content/images/2018/04/19.png\" alt=\"19\" loading=\"lazy\"></a></p>\n<h3 id=\"conclusion\">Conclusion</h3>\n<p>It was an error on our part to hit performance degradation without a good regression framework in place to catch the issue. Luckily, due to our heavy use of version control, we managed to bisect the issue rather quickly, and had a temp rollback in place while root causing the problem.</p>\n<p>In the end, enabling offload also removed RCU stalls. It's not really clear whether it was the cause or just a catalyst, but the end result speaks for itself.</p>\n<p>On the bright side, we dug pretty deep into Linux kernel internals, and although there were fleeting moments of giving up, moving to the woods to become a park ranger, we persevered and came out of the forest successful.</p>\n<hr>\n<p><em>If deep diving from high level symptoms to kernel/OS issues makes you excited, <a href=\"https://www.cloudflare.com/careers/\">drop us a line</a>.</em></p>\n<hr>\n<!--kg-card-end: markdown-->",
		"comment_id": "5ae28464180249002268504c",
		"feature_image": "http://blog.cloudflare.com/content/images/2018/04/image2017-8-17-16_43_16.png",
		"featured": false,
		"visibility": "public",
		"created_at": "2018-04-27T03:01:08.000+01:00",
		"updated_at": "2018-08-29T08:38:59.000+01:00",
		"published_at": "2018-05-13T17:00:00.000+01:00",
		"custom_excerpt": "How an innocent OS upgrade triggered a cascade of issues and forced us into tracing Linux networking internals.",
		"codeinjection_head": null,
		"codeinjection_foot": null,
		"custom_template": null,
		"canonical_url": null,
		"tags": [
			{
				"id": "5d16450341acde0011a95160",
				"name": "Speed & Reliability",
				"slug": "speed-and-reliability",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Speed---Reliability-1.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Speed & Reliability",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Speed & Reliability'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/speed-and-reliability/"
			},
			{
				"id": "5d16450341acde0011a95242",
				"name": "Kafka",
				"slug": "kafka",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/kafka/"
			},
			{
				"id": "5d16450341acde0011a9524d",
				"name": "eBPF",
				"slug": "ebpf",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/ebpf/"
			},
			{
				"id": "5d16450341acde0011a951ff",
				"name": "Linux",
				"slug": "linux",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/linux/"
			}
		],
		"authors": [
			{
				"id": "5d1644b141acde0011a94f77",
				"name": "Ivan Babrou",
				"slug": "ivan",
				"profile_image": "http://blog.cloudflare.com/content/images/2022/09/Ivan-Babrou.png",
				"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-84.png",
				"bio": null,
				"website": null,
				"location": null,
				"facebook": null,
				"twitter": null,
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/ivan/"
			}
		],
		"primary_author": {
			"id": "5d1644b141acde0011a94f77",
			"name": "Ivan Babrou",
			"slug": "ivan",
			"profile_image": "http://blog.cloudflare.com/content/images/2022/09/Ivan-Babrou.png",
			"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-84.png",
			"bio": null,
			"website": null,
			"location": null,
			"facebook": null,
			"twitter": null,
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/ivan/"
		},
		"primary_tag": {
			"id": "5d16450341acde0011a95160",
			"name": "Speed & Reliability",
			"slug": "speed-and-reliability",
			"description": null,
			"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Speed---Reliability-1.png",
			"visibility": "public",
			"meta_title": "Cloudflare Blog: Speed & Reliability",
			"meta_description": "Collection of Cloudflare blog posts tagged 'Speed & Reliability'.",
			"og_image": null,
			"og_title": null,
			"og_description": null,
			"twitter_image": null,
			"twitter_title": null,
			"twitter_description": null,
			"codeinjection_head": null,
			"codeinjection_foot": null,
			"canonical_url": null,
			"accent_color": null,
			"url": "http://blog.cloudflare.com/tag/speed-and-reliability/"
		},
		"url": "http://blog.cloudflare.com/tracing-system-cpu-on-debian-stretch/",
		"excerpt": "How an innocent OS upgrade triggered a cascade of issues and forced us into tracing Linux networking internals.",
		"reading_time": 15,
		"access": true,
		"comments": false,
		"og_image": null,
		"og_title": null,
		"og_description": null,
		"twitter_image": null,
		"twitter_title": null,
		"twitter_description": null,
		"meta_title": null,
		"meta_description": null,
		"email_subject": null,
		"frontmatter": null,
		"feature_image_alt": null,
		"feature_image_caption": null
	},
	"locale": "en-us"
}