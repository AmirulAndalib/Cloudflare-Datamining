{
	"post": {
		"id": "5f97f9e96b4b9103f3ff371b",
		"uuid": "548204e2-eee2-4997-b1f7-b8a389a535eb",
		"title": "Diving into /proc/[pid]/mem",
		"slug": "diving-into-proc-pid-mem",
		"html": "<figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2020/10/image3-25.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><!--kg-card-begin: markdown--><p>A few months ago, after reading about <a href=\"http://blog.cloudflare.com/cloudflare-doubling-size-of-2020-summer-intern-class/\">Cloudflare doubling its intern class size</a>, I quickly dusted off my CV and applied for an internship. Long story short: now, a couple of months later, I found myself staring into Linux kernel code and adding a pretty cool feature <a href=\"https://gvisor.dev/\">to gVisor, a Linux container runtime</a>.</p>\n<p>My internship was under the Emerging Technologies and Incubation group on a project involving gVisor. A co-worker contacted my team about not being able to read the debug symbols of stack traces inside the sandbox. For example, when the isolated process crashed, this is what we saw in the logs:</p>\n<pre><code>*** Check failure stack trace: ***\n    @     0x7ff5f69e50bd  (unknown)\n    @     0x7ff5f69e9c9c  (unknown)\n    @     0x7ff5f69e4dbd  (unknown)\n    @     0x7ff5f69e55a9  (unknown)\n    @     0x5564b27912da  (unknown)\n    @     0x7ff5f650ecca  (unknown)\n    @     0x5564b27910fa  (unknown)\n</code></pre>\n<p>Obviously, this wasn't very useful. I eagerly volunteered to fix this stack unwinding code - how hard could it be?</p>\n<p>After some debugging, we found that the logging library used in the project opened <code>/proc/self/mem</code> to look for ELF headers at the start of each memory-mapped region. This was necessary to calculate an offset to find the correct addresses for debug symbols.</p>\n<p>It turns out this mechanism is rather common. The stack unwinding code is often run in weird contexts - like a SIGSEGV handler - so it would not be appropriate to dig over real memory addresses back and forth to read the ELF. This could trigger another SIGSEGV. And SIGSEGV inside a SIGSEGV handler means either termination via the default handler for a segfault or recursing into the same handler again and again (if one sets <code>SA_NODEFER</code>) leading to a stack overflow.</p>\n<p>However, inside gVisor, each call of <code>open()</code> on <code>/proc/self/mem</code> resulted in <code>ENOENT</code>, because the entire <code>/proc/self/mem</code> file was missing. In order to provide a robust sandbox, gVisor has to carefully reimplement the Linux kernel interfaces. This particular <code>/proc</code> file was simply unimplemented in the virtual file system of Sentry, one of gVisor's sandboxing components.<br>\n<a href=\"http://blog.cloudflare.com/author/marek-majkowski/\">Marek</a> asked the devs on the project chat and got confirmation - they would be happy to accept a patch implementing this file.<br>\n<img src=\"http://blog.cloudflare.com/content/images/2020/10/image1-39.png\" alt=\"image1-39\" loading=\"lazy\"></p>\n<p>The easy way out would have been to make a small, local patch to the unwinder behavior, yet I found myself diving into the Linux kernel trying to figure how the <code>mem</code> file worked in an attempt to implement it in Sentry's VFS.</p>\n<h2 id=\"whatdoesprocpidmemdo\">What does <code>/proc/[pid]/mem</code> do?</h2>\n<p>The file itself is quite powerful, because it allows raw access to the virtual address space of a process. <a href=\"https://man7.org/linux/man-pages/man5/proc.5.html\">According to manpages</a>, the documented file operations are <code>open()</code>, <code>read()</code> and <code>lseek()</code>. Typical use cases are debugging tasks or dumping process memory.</p>\n<h2 id=\"openingthefile\">Opening the file</h2>\n<p>When a process wants to open the file, the kernel does the file permissions check, looks up the associated operations for <code>mem</code> and invokes a method called <code>proc_mem_open</code>. It retrieves the associated task and <a href=\"https://elixir.bootlin.com/linux/v5.9/source/include/linux/sched/mm.h#L119\">calls a method named <code>mm_access</code></a>.</p>\n<pre><code class=\"language-C\">/*\n * Grab a reference to a task's mm, if it is not already going away\n * and ptrace_may_access with the mode parameter passed to it\n * succeeds.\n */\n</code></pre>\n<p>Seems relatively straightforward, right? The special thing about <code>mm_access</code> is that it verifies the permissions the current task has regarding the task to which the memory belongs. If the current task and target task do not share the same memory manager, the kernel <a href=\"https://elixir.bootlin.com/linux/v5.9/source/kernel/ptrace.c#L293\">invokes a method named <code>__ptrace_may_access</code></a>.</p>\n<pre><code class=\"language-C\">/*\n * May we inspect the given task?\n * This check is used both for attaching with ptrace\n * and for allowing access to sensitive information in /proc.\n *\n * ptrace_attach denies several cases that /proc allows\n * because setting up the necessary parent/child relationship\n * or halting the specified task is impossible.\n *\n */\n</code></pre>\n<p><a href=\"https://man7.org/linux/man-pages/man5/proc.5.html\">According to the manpages</a>, a process which would like to read from an unrelated <code>/proc/[pid]/mem</code> file should have access mode <a href=\"https://man7.org/linux/man-pages/man2/ptrace.2.html\"><code>PTRACE_MODE_ATTACH_FSCREDS</code></a>. This check does not verify that a process is attached via <code>PTRACE_ATTACH</code>, but rather if it has the permission to attach with the specified credentials mode.</p>\n<h2 id=\"accesschecks\">Access checks</h2>\n<p>After skimming through the function, you will see that a process is allowed access if the current task belongs to the same thread group as the target task, or denied access (depending on whether <code>PTRACE_MODE_FSCREDS</code> or <code>PTRACE_MODE_REALCREDS</code> is set, we will use either the file-system UID / GID, which is typically the same as the effective UID/GID, or the real UID / GID) if none of the following conditions are met:</p>\n<ul>\n<li>the current task's credentials (UID, GID) match up with the credentials (real, effective and saved set-UID/GID) of the target process</li>\n<li>the current task has <code>CAP_SYS_PTRACE</code> inside the user namespace of the target process</li>\n</ul>\n<p>In the next check, access is denied if the current task has neither <code>CAP_SYS_PTRACE</code> inside the user namespace of the target task, nor the target's dumpable attribute is set to <code>SUID_DUMP_USER</code>. <a href=\"https://man7.org/linux/man-pages/man2/prctl.2.html\">The dumpable attribute</a> is typically required to allow producing core dumps.</p>\n<p>After these three checks, we also go through the commoncap Linux Security Module (and other LSMs) to verify our access mode is fine. LSMs you may know are SELinux and AppArmor. The commoncap LSM performs the checks on the basis of effective or permitted process capabilities (depending on the mode being <code>FSCREDS</code> or <code>REALCREDS</code>), allowing access if</p>\n<ul>\n<li>the capabilities of the current task are a superset of the capabilities of the target task, or</li>\n<li>the current task has <code>CAP_SYS_PTRACE</code> in the target task's user namespace</li>\n</ul>\n<p>In conclusion, one has access (with only commoncap LSM checks active) if:</p>\n<ul>\n<li>the current task is in the same task group as the target task, or</li>\n<li>the current task has <code>CAP_SYS_PTRACE</code> in the target task's user namespace, or</li>\n<li>the credentials of the current and target task match up in the given credentials mode, the target task is dumpable, they run in the same user namespace and the target task's capabilities are a subset of the current task's capabilities</li>\n</ul>\n<p>I highly recommend reading through the <a href=\"https://www.man7.org/linux/man-pages/man2/ptrace.2.html\">ptrace manpages</a> to dig deeper into the different modes, options and checks.</p>\n<h2 id=\"readingfromthefile\">Reading from the file</h2>\n<p>Since all the access checks occur when opening the file, reading from it is quite straightforward. When one invokes <code>read()</code> on a <code>mem</code> file, <a href=\"https://elixir.bootlin.com/linux/v5.9/source/fs/proc/base.c#L835\">it calls up <code>mem_rw</code></a> (which actually can do both reading and writing).</p>\n<p>To avoid using lots of memory, <code>mem_rw</code> performs the copy in a loop and buffers the data in an intermediate page. <code>mem_rw</code> has a hidden superpower, that is, it uses <code>FOLL_FORCE</code> to avoid permission checks on user-owned pages (handling pages marked as non-readable/non-writable readable and writable).</p>\n<p><code>mem_rw</code> has other specialties, such as its error handling. Some interesting cases are:</p>\n<ul>\n<li>if the target task has exited after opening the file descriptor, performing <code>read()</code> will always succeed with reading 0 bytes</li>\n<li>if the initial copy from the target task's memory to the intermediate page fails, it does not always return an error but only if no data has been read</li>\n</ul>\n<p>You can also perform <code>lseek</code> on the file excluding <code>SEEK_END</code>.</p>\n<h2 id=\"howitworksingvisor\">How it works in gVisor</h2>\n<p>Luckily, gVisor already implemented <code>ptrace_may_access</code> as <code>kernel.task.CanTrace</code>, so one can avoid reimplementing all the ptrace access logic. However, <a href=\"https://cs.opensource.google/gvisor/gvisor/+/master:pkg/sentry/kernel/ptrace.go;l=105;bpv=0;bpt=1\">the implementation in gVisor</a> is less complicated due to the lack of support for <code>PTRACE_MODE_FSCREDS</code> (which is <a href=\"https://gvisor.dev/issue/260\">still an open issue</a>).</p>\n<p>When a new file descriptor is <code>open()</code>ed, the <code>GetFile</code> method of the virtual Inode is invoked, therefore this is where the access check naturally happens. After a successful access check, the <a href=\"https://pkg.go.dev/gvisor.dev/gvisor/pkg/sentry/fs#File\">method returns a <code>fs.File</code></a>. The <code>fs.File</code> implements all the file operations you would expect such as <code>Read()</code> and <code>Write()</code>. gVisor also provides tons of primitives for quickly building a working file structure so that one does not have to reimplement a generic <code>lseek()</code> for example.</p>\n<p>In case a task invokes a <code>Read()</code> call onto the <code>fs.File</code>, the <code>Read</code> method retrieves the memory manager of the file’s Task.<br>\n<a href=\"https://pkg.go.dev/gvisor.dev/gvisor/pkg/sentry/mm#MemoryManager\">Accessing the task's memory manager</a> is a breeze with comfortable <code>CopyIn</code> and <code>CopyOut</code> methods, with interfaces similar to <code>io.Writer</code> and <code>io.Reader</code>.</p>\n<p>After implementing all of this, we finally got a useful stack trace.</p>\n<pre><code>*** Check failure stack trace: ***\n    @     0x7f190c9e70bd  google::LogMessage::Fail()\n    @     0x7f190c9ebc9c  google::LogMessage::SendToLog()\n    @     0x7f190c9e6dbd  google::LogMessage::Flush()\n    @     0x7f190c9e75a9  google::LogMessageFatal::~LogMessageFatal()\n    @     0x55d6f718c2da  main\n    @     0x7f190c510cca  __libc_start_main\n    @     0x55d6f718c0fa  _start\n</code></pre>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>A comprehensive victory! The <code>/proc/&lt;pid&gt;/mem</code> file is an important mechanism that gives insight into contents of process memory. It is essential to stack unwinders to do their work in case of complicated and unforeseeable failures. Because the process memory contains highly-sensitive information, data access to the file is determined by a complex set of poorly documented rules. With a bit of effort, you can emulate <code>/proc/[PID]/mem</code> inside gVisor’s sandbox, where the process only has access to the subset of procfs that has been implemented by the gVisor authors and, as a result, you can have access to an easily readable stack trace in case of a crash.</p>\n<p><a href=\"https://github.com/google/gvisor/pull/4060\">Now I can't wait to get the PR merged into gVisor.</a></p>\n<!--kg-card-end: markdown-->",
		"comment_id": "5f97f9e96b4b9103f3ff371b",
		"feature_image": "http://blog.cloudflare.com/content/images/2020/10/image2-27.png",
		"featured": false,
		"visibility": "public",
		"created_at": "2020-10-27T10:43:53.000+00:00",
		"updated_at": "2020-10-27T12:25:46.000+00:00",
		"published_at": "2020-10-27T12:00:00.000+00:00",
		"custom_excerpt": "A few months ago, after reading about Cloudflare doubling its intern class, I quickly dusted off my CV and applied for an internship. Long story short: now, a couple of months later, I found myself staring at Linux kernel code and adding a pretty cool feature to gVisor.",
		"codeinjection_head": null,
		"codeinjection_foot": null,
		"custom_template": null,
		"canonical_url": null,
		"authors": [
			{
				"id": "5f8eff8edd84fc01ba7d8a24",
				"name": "Lennart Espe",
				"slug": "lennart",
				"profile_image": "http://blog.cloudflare.com/content/images/2020/10/PHOTO-2019-11-09-21-17-57-copy.jpg",
				"cover_image": null,
				"bio": null,
				"website": null,
				"location": null,
				"facebook": null,
				"twitter": null,
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/lennart/"
			}
		],
		"tags": [
			{
				"id": "5d16450341acde0011a9531b",
				"name": "Deep Dive",
				"slug": "deep-dive",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2023/08/CloudflareBlog-DeepDive.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Deep Dive",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Deep Dive'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/deep-dive/"
			},
			{
				"id": "5d16450341acde0011a95214",
				"name": "Programming",
				"slug": "programming",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/programming/"
			},
			{
				"id": "5d16450341acde0011a951ff",
				"name": "Linux",
				"slug": "linux",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/linux/"
			}
		],
		"primary_author": {
			"id": "5f8eff8edd84fc01ba7d8a24",
			"name": "Lennart Espe",
			"slug": "lennart",
			"profile_image": "http://blog.cloudflare.com/content/images/2020/10/PHOTO-2019-11-09-21-17-57-copy.jpg",
			"cover_image": null,
			"bio": null,
			"website": null,
			"location": null,
			"facebook": null,
			"twitter": null,
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/lennart/"
		},
		"primary_tag": {
			"id": "5d16450341acde0011a9531b",
			"name": "Deep Dive",
			"slug": "deep-dive",
			"description": null,
			"feature_image": "http://blog.cloudflare.com/content/images/2023/08/CloudflareBlog-DeepDive.png",
			"visibility": "public",
			"meta_title": "Cloudflare Blog: Deep Dive",
			"meta_description": "Collection of Cloudflare blog posts tagged 'Deep Dive'.",
			"og_image": null,
			"og_title": null,
			"og_description": null,
			"twitter_image": null,
			"twitter_title": null,
			"twitter_description": null,
			"codeinjection_head": null,
			"codeinjection_foot": null,
			"canonical_url": null,
			"accent_color": null,
			"url": "http://blog.cloudflare.com/tag/deep-dive/"
		},
		"url": "http://blog.cloudflare.com/diving-into-proc-pid-mem/",
		"excerpt": "A few months ago, after reading about Cloudflare doubling its intern class, I quickly dusted off my CV and applied for an internship. Long story short: now, a couple of months later, I found myself staring at Linux kernel code and adding a pretty cool feature to gVisor.",
		"reading_time": 6,
		"access": true,
		"comments": false,
		"og_image": null,
		"og_title": null,
		"og_description": null,
		"twitter_image": null,
		"twitter_title": null,
		"twitter_description": null,
		"meta_title": null,
		"meta_description": "A few months ago, after reading about Cloudflare doubling its intern class, I quickly dusted off my CV and applied for an internship. Long story short: now, a couple of months later, I found myself staring at Linux kernel code and adding a pretty cool feature to gVisor.",
		"email_subject": null,
		"frontmatter": null,
		"feature_image_alt": null,
		"feature_image_caption": null
	},
	"locale": "en-us"
}