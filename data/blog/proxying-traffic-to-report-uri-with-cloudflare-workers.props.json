{
	"locale": "en-us",
	"post": {
		"id": "5d16453b41acde0011a95712",
		"uuid": "024e473b-f168-4887-bc52-4f03a315d2cc",
		"title": "Proxying traffic to Report URI with Cloudflare Workers",
		"slug": "proxying-traffic-to-report-uri-with-cloudflare-workers",
		"html": "<!--kg-card-begin: markdown--><p><em>The following is a guest post by Scott Helme, a Security Researcher, international speaker, and <a href=\"https://scotthelme.co.uk/\">blogger</a>. He's also the founder of the popular <a href=\"http://securityheaders.com\">securityheaders.com</a> and <a href=\"http://report-uri.com\">report-uri.com</a>, free tools to help people  deploy better security.</em></p>\n<p>With the continued growth of Report URI we're seeing a larger and larger variety of sites use the service. With that diversity comes additional requirements that need to be met, some of them simple and some of them less so. Here's a quick look at those challenges and how they can be solved easily with a Cloudflare Worker.<!--more--></p>\n<h4 id=\"sendingcspreports\">Sending CSP Reports</h4>\n<p>When a browser sends a CSP report for us to collect at Report URI, we receive the JSON payload sent to us but we also have access to two other pieces of information, the client IP and the User Agent string. We never store, collect or analyse the client IP, we simply don't need or want to, and all we do with the UA string is extract the browser name like Chrome or Firefox. Most site operators are perfectly happy with our approach here and things work just fine. There are however some issues when the site operator simply doesn't want to have us to have this information and some cases have come up where they can't allow us to have access to that information because of restrictions placed on them by a regulator. The other common thing that comes up, which I honestly never anticipated, was simply the perception of the reporting endpoint being a 3rd party address. There are various different ways we can and do tackle these problems.</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2018/07/logo-2.png\" alt=\"logo-2\" loading=\"lazy\"></p>\n<h4 id=\"cname\">CNAME</h4>\n<p>Up until now, if a client didn't want to report to a 3rd party address we would ask them to CNAME their subdomain to us and run a dedicated instance that would ingest reports using their subdomain. We take control of certificate issuance and renewal and the customer doesn't need to do anything further. This is a fairly common approach across many different technical requirements and it's something that has worked well for us. The problem is that it does come with some administrative overheads for both parties. From our side the technical requirements of managing separate infrastructure are an additional burden, we're responsible for a subdomain belonging to someone else and there are more moving parts in the system, increasing complexity. I was curious if there was another way.</p>\n<h4 id=\"httpproxy\">HTTP Proxy</h4>\n<p>One idea that we discussed with a customer a while back, but never deployed, was for them to run a proxy on premise. They could report to their own endpoint under their own control and simply forward reports to their Report URI reporting address. This means they could shield the client IP from us, mask the User Agent string if required and generally do any sanitisation they liked on the payload. The problem with this was that it just seemed like an awful lot of work, I'd much rather have discussed deploying Report URI on premise instead. The client is also still at risk of things like accidentally DDoSing their endpoint, which removes one of the good reasons to use Report URI.</p>\n<h4 id=\"findinganotherway\">Finding Another Way</h4>\n<p>For the most part our current model was working really well but there were some customers who had a hard requirement to not send reports directly to us. Our on premise solution also isn't ready for prime time just yet so we needed something that we could offer, without it requiring too much of the overhead mentioned above. That's when I had an idea that might just cut it.</p>\n<h4 id=\"javascriptonaplane\">Javascript On A Plane</h4>\n<p>I was sat on a flight just a few days ago and I never like to waste time. When I'm sat in the car on the way to the airport, sat in the airport or sat on my flight, I'm working. Those are precious hours that can't be wasted and during a recent flight between Manchester and Vienna I was playing around with Cloudflare Workers in their playground. I was tinkering with a worker to add Security Headers to websites, which has since <a href=\"https://scotthelme.co.uk/security-headers-cloudflare-worker/\">been launched</a>, and whilst inspecting the headers object and looking through the headers that were in the request I saw the User Agent string. &quot;Oh hey, I could remove that if I wanted to&quot; I thought to myself, and then the rapid fire series of events triggered in my brain when you're in the process of realising a great idea. I could remove the UA header... From the request... Then the worker can make any subrequests it likes... Requests to a different origin... THE WORKER CAN RECEIVE A REPORT AND FORWARD IT!!!</p>\n<p>I realised that (of course) a Cloudflare Worker could be used to receive reports on a subdomain of your own site and then forward them to your reporting address at Report URI.</p>\n<h4 id=\"usingcloudflareworkersasareportproxy\">Using Cloudflare Workers As A Report Proxy</h4>\n<p>One of the main benefits of using Report URI is just how simple everything is to do and all of the solutions mentioned at the start of this blog changed that. With a Cloudflare Worker we could keep the absolute simplicity of deploying Report URI but also easily allow you the option to shield your client's IP addresses, or any other information in the payload, from us.</p>\n<br/>\n<pre><code class=\"javascript\">\nlet subdomain = 'scotthelme'\n\naddEventListener('fetch', event => {\n  event.respondWith(forwardReport(event.request))\n})\n\nasync function forwardReport(req) {\n  let newHdrs = new Headers()\n  newHdrs.set('User-Agent', req.headers.get('User-Agent'))\n  \n  const init = {\n    body: req.body,\n    headers: newHdrs,\n    method: 'POST'\n  }\n\n  let path = new URL(req.url).pathname\n  let address = 'https://' + subdomain + '.report-uri.com' + path\n  let response = await fetch (address, init);\n\n  return new Response(response.body, {\n    status: response.status,\n    statusText: response.statusText\n  })\n}\n</code></pre>\n<br/>\n<p>This simple worker, deployed on your own site, provides a solution to all of the above problems. All you need to do is configure your subdomain in the var on the first line and everything else will be taken care of for you. Deploy this worker onto the subdomain you want to send reports to, follow the same naming convention for the path when sending reports, and everything will Just Work(TM).</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2018/07/pic2.png\" alt=\"pic2\" loading=\"lazy\"></p>\n<p>The script above is configured for my subdomain, so if I wanted to deploy this on any site, say <code>example.com</code>, I'd choose the subdomain on my site where I wanted to send reports <code>report-uri.example.com</code> and off we go.</p>\n<br/>\n<pre><code>https://scotthelme.report-uri.com/r/d/csp/enforce\nbecomes\nhttps://report-uri.example.com/r/d/csp/enforce\n</code></pre>\n<br/>\n<p>The reports are now being sent to a subdomain under your own control, the worker will intercept the request and forward it to the destination at Report URI for you. In the process you will shield the client IP as we will only see the source IP as being the Cloudflare Worker and in the example above we are forwarding the UA string for browser identification.</p>\n<h4 id=\"amazinglysimple\">Amazingly Simple</h4>\n<p>With the worker above we don't need to worry about setting up a CNAME, certificate provisioning, separate infrastructure or anything else that goes with it. You also don't need to worry about setting up and managing a proxy to forward the reports to us and traffic or processing power required to do so. The worker will take care of all of that and what's best is that it will take care of it with minimal overhead, taking only a few minutes to setup and costing only $0.50 for every 1 million reports it processes.</p>\n<h4 id=\"takingitonestepfurther\">Taking It One Step Further</h4>\n<p>The great thing about this is that once the worker is setup and processing reports, you can start to do some pretty awesome things beyond just proxying reports, workers are incredibly powerful.</p>\n<h5 id=\"downsamplereportvolume\">Downsample report volume</h5>\n<p>If you want to save your quota on Report URI, maybe you're early in the process of deploying CSP and it's quite noisy, no problem. The worker can select a random downsample of reports to forward on so you can still receive reports but not eat your quota quite as quickly. Make the following change to the start of the <code>forwardReport()</code> function to randomly drop 50% of reports.</p>\n<br/>\n<pre><code class=\"javascript\">async function forwardReport(req) {\n  if(Math.floor((Math.random() * 100) + 1) <= 50) {\n    return new Response(\"discarded\")\n  }</code></pre>\n<br/>\n<h5 id=\"hidetheuastring\">Hide the UA string</h5>\n<p>If you did want to hide the UA string from Report URI and not let us see that either, you simply need to remove the following line of code.</p>\n<br/>\n<pre><code class=\"javascript\">newHdrs.set('User-Agent', req.headers.get('User-Agent'))</code></pre>\n<br/>\n<h5 id=\"advancedwork\">Advanced work</h5>\n<p>The worker can pretty much do anything you like. Maybe there are sections of your site that you don't want to send reports from. You could parse the JSON and check which page triggered the report and discard them. You could do a regex match on the JSON payload to make sure no sensitive tokens or information get sent too. The possibilities are basically endless and what we can say is that if you need to do it, it's easy and cheap enough to do in a Cloudflare Worker.</p>\n<h4 id=\"pricing\">Pricing</h4>\n<p>Talking about cheap enough, I thought I'd actually quantify that and quote the Cloudflare pricing for workers.</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2018/07/workers-pricing-text.png\" alt=\"workers-pricing-text\" loading=\"lazy\"></p>\n<p>Starting at $5 per month and covering your first 10 million requests is an amazingly cheap deal. Most websites that report through us wouldn't even come close to sending 10 million reports so you'd probably never pay any more than $5 for your Cloudflare Worker. That's it, $5 per month... By the time you've even thought about creating a CNAME or standing up your own proxy you've probably blown through more than Cloudflare Workers would ever cost you. What's best is that if you already use Cloudflare Workers then you can roll this into your existing usage and it might not even increase the cost if you have some of your initial 10 million requests spare. If you don't use Cloudflare on your site already then you could just as easily grab a new domain name exclusively for reporting, that'd cost just a few dollars, and stand that up behind Cloudflare too. One way or another this is insanely easy and insanely cheap.</p>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.12.2/themes/prism.min.css\" integrity=\"sha256-DJJDQyzflMYiUb2jX3gilm9m3gAkHPC4WLv9BAk4rTE=\" crossorigin=\"anonymous\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.12.2/prism.min.js\" integrity=\"sha256-S5OX5nYh2U/F4bOf42lUh9oOr/eb7xNXWU6bWr+33B4=\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.12.2/components/prism-javascript.min.js\" integrity=\"sha256-Z13YoGiGZzf9yTrtBc60CRm+utE6FAigKAHBVgVUSzw=\" crossorigin=\"anonymous\"></script><!--kg-card-end: markdown-->",
		"comment_id": "5b490aa9bdf1fc00bf809f19",
		"feature_image": "http://blog.cloudflare.com/content/images/2018/07/Screen-Shot-2018-07-16-at-10.48.24-AM.png",
		"featured": false,
		"visibility": "public",
		"created_at": "2018-07-13T21:25:13.000+01:00",
		"updated_at": "2023-05-02T02:18:48.000+01:00",
		"published_at": "2018-07-17T14:00:00.000+01:00",
		"custom_excerpt": "With the continued growth of Report URI we're seeing a larger and larger variety of sites use the service. With that diversity comes additional requirements that need to be met, some of them simple and some of them less so. ",
		"codeinjection_head": null,
		"codeinjection_foot": null,
		"custom_template": null,
		"canonical_url": null,
		"authors": [
			{
				"id": "5d1644b141acde0011a94fe0",
				"name": "Scott Helme (Guest Blogger)",
				"slug": "scott-helme",
				"profile_image": "http://blog.cloudflare.com/content/images/2018/07/98ae7e835cc7a03a70d59a1b4a31b264_400x400.png",
				"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-55.png",
				"bio": "Scott Helme is a Security Researcher, international speaker and blogger. He's  also the founder of the popular securityheaders.com and report-uri.com, free tools to help you deploy better security.",
				"website": "http://scotthelme.co.uk",
				"location": "UK",
				"facebook": null,
				"twitter": "@Scott_Helme",
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/scott-helme/"
			}
		],
		"tags": [
			{
				"id": "5d16450341acde0011a95253",
				"name": "Cloudflare Workers",
				"slug": "workers",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/workers/"
			},
			{
				"id": "5d16450341acde0011a95160",
				"name": "Speed & Reliability",
				"slug": "speed-and-reliability",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Speed---Reliability-1.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Speed & Reliability",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Speed & Reliability'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/speed-and-reliability/"
			},
			{
				"id": "5d16450341acde0011a95252",
				"name": "Serverless",
				"slug": "serverless",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Serverless.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Serverless",
				"meta_description": "Cloudflare blog posts tagged 'serverless'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/serverless/"
			},
			{
				"id": "5d16450341acde0011a95165",
				"name": "JavaScript",
				"slug": "javascript",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/javascript/"
			},
			{
				"id": "5d16450341acde0011a95214",
				"name": "Programming",
				"slug": "programming",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/programming/"
			},
			{
				"id": "6450636642d421000a133298",
				"name": "Guest Post",
				"slug": "guest-post",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/guest-post/"
			},
			{
				"id": "5d16450341acde0011a95204",
				"name": "Developers",
				"slug": "developers",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Developers-1.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Developers",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Developers'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developers/"
			},
			{
				"id": "64a3e2b834124c000b00b717",
				"name": "Developer Platform",
				"slug": "developer-platform",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developer-platform/"
			}
		],
		"primary_author": {
			"id": "5d1644b141acde0011a94fe0",
			"name": "Scott Helme (Guest Blogger)",
			"slug": "scott-helme",
			"profile_image": "http://blog.cloudflare.com/content/images/2018/07/98ae7e835cc7a03a70d59a1b4a31b264_400x400.png",
			"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-55.png",
			"bio": "Scott Helme is a Security Researcher, international speaker and blogger. He's  also the founder of the popular securityheaders.com and report-uri.com, free tools to help you deploy better security.",
			"website": "http://scotthelme.co.uk",
			"location": "UK",
			"facebook": null,
			"twitter": "@Scott_Helme",
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/scott-helme/"
		},
		"primary_tag": {
			"id": "5d16450341acde0011a95253",
			"name": "Cloudflare Workers",
			"slug": "workers",
			"description": null,
			"feature_image": null,
			"visibility": "public",
			"meta_title": null,
			"meta_description": null,
			"og_image": null,
			"og_title": null,
			"og_description": null,
			"twitter_image": null,
			"twitter_title": null,
			"twitter_description": null,
			"codeinjection_head": null,
			"codeinjection_foot": null,
			"canonical_url": null,
			"accent_color": null,
			"url": "http://blog.cloudflare.com/tag/workers/"
		},
		"url": "http://blog.cloudflare.com/proxying-traffic-to-report-uri-with-cloudflare-workers/",
		"excerpt": "With the continued growth of Report URI we're seeing a larger and larger variety of sites use the service. With that diversity comes additional requirements that need to be met, some of them simple and some of them less so. ",
		"reading_time": 7,
		"access": true,
		"comments": false,
		"og_image": null,
		"og_title": null,
		"og_description": null,
		"twitter_image": null,
		"twitter_title": null,
		"twitter_description": null,
		"meta_title": null,
		"meta_description": null,
		"email_subject": null,
		"frontmatter": null,
		"feature_image_alt": null,
		"feature_image_caption": null
	}
}