{
	"browserLocale": "en-us",
	"locale": "en-us",
	"post": {
		"access": true,
		"authors": [
			{
				"id": "5d1644b141acde0011a94f4d",
				"name": "Ólafur Guðmundsson",
				"slug": "olafur-gudmundsson",
				"profile_image": "http://blog.cloudflare.com/content/images/2023/10/_tmp_mini_magick20230112-42-p4sd2l.jpg",
				"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-106.png",
				"bio": "VP of Engineering at Cloudflare, long time Internet geek ",
				"website": null,
				"location": null,
				"facebook": null,
				"twitter": null,
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/olafur-gudmundsson/"
			}
		],
		"canonical_url": null,
		"codeinjection_foot": null,
		"codeinjection_head": null,
		"comment_id": "5a7a21217381f60021460055",
		"comments": false,
		"created_at": "2018-02-06T21:41:53.000+00:00",
		"custom_excerpt": "The root of the DNS tree has been using DNSSEC to protect the zone content since 2010. DNSSEC is simply a mechanism to provide cryptographic signatures alongside DNS records that can be validated, i.e. prove the answer is correct and has not been tampered with. ",
		"custom_template": null,
		"email_subject": null,
		"excerpt": "The root of the DNS tree has been using DNSSEC to protect the zone content since 2010. DNSSEC is simply a mechanism to provide cryptographic signatures alongside DNS records that can be validated, i.e. prove the answer is correct and has not been tampered with. ",
		"feature_image": "http://blog.cloudflare.com/content/images/2018/02/photo-1502082553048-f009c37129b9.jpg",
		"feature_image_alt": null,
		"feature_image_caption": null,
		"featured": false,
		"frontmatter": null,
		"html": "<!--kg-card-begin: markdown--><p><img src=\"https://images.unsplash.com/photo-1502082553048-f009c37129b9?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjExNzczfQ&amp;s=55daacee336c37582e9d4491bcd62395\" alt=\"\" loading=\"lazy\"><small>Photo by <a href=\"https://unsplash.com/@niko_photos?utm_source=ghost&amp;utm_medium=referral&amp;utm_campaign=api-credit\">Niko Soikkeli</a> / <a href=\"https://unsplash.com/?utm_source=ghost&amp;utm_medium=referral&amp;utm_campaign=api-credit\">Unsplash</a></small></p>\n<p>The root of the DNS tree has been using DNSSEC to protect the zone content since 2010. DNSSEC is simply a mechanism to provide cryptographic signatures alongside DNS records that can be validated, i.e.  prove the answer is correct and has not been tampered with. To learn more about why DNSSEC is important, you can read our <a href=\"http://blog.cloudflare.com/dnssec-an-introduction/\">earlier blog post</a>.</p>\n<p>Today, the root zone is signed with a 2048 bit RSA “Trust Anchor” key. This key is used to sign further keys and is used to establish the <a href=\"https://en.wikipedia.org/wiki/Chain_of_trust\">Chain of trust</a> that exists in the public DNS at the moment.</p>\n<p>With access to this root Trust Anchor, it would be possible to re-sign the DNS tree and tamper with the content of DNS records on any domain, implementing an on-path DNS attack… without causing recursors and resolvers to consider the data invalid.</p>\n<p>As explained in this <a href=\"https://www.cloudflare.com/dns/dnssec/root-signing-ceremony/\">blog</a> the key is very well protected with eye scanners and fingerprint readers and fire-breathing dragons patrolling the gate (okay, maybe not dragons). Operationally though, the root zone uses two different keys, the mentioned Trust Anchor key (that is called the Key Signing Key or KSK for short) and the Zone Signing Key (ZSK).</p>\n<p>The ZSK (Zone Signing Key) is used to generate signatures for all of the Resource Records (RRs) in a zone.</p>\n<p>You can query for the DNSSEC signature (the RRSIG record) of “<a href=\"http://www.cloudflare.com\">www.cloudflare.com</a>” using your friendly dig command.</p>\n<pre><code>$ dig www.cloudflare.com +dnssec\n</code></pre>\n<pre><code>;; QUESTION SECTION:\n;www.cloudflare.com.\t\tIN\tA\n;; ANSWER SECTION:\nwww.cloudflare.com.\t4\tIN\tA\t198.41.215.162\nwww.cloudflare.com.\t4\tIN\tA\t198.41.214.162\nwww.cloudflare.com.\t4\tIN\tRRSIG\tA 13 3 5 20180207170906 20180205150906 35273 cloudflare.com. 4W4mJXJRnd/wHnDyNo5minGvZY6hVNSXITnUI+pO6fzhnkpsEp1ko8K7 1PQ6r0s9SwLgrgfneqXyPs4b5X0YDw==\n</code></pre>\n<p>The two A records shown here can be cryptographically verified using the RRSIG and ZSK in the zone. The ZSK can itself be verified using the KSK, and so on… this continues upwards following the “chain of trust” until the root KSK is found.</p>\n<p>The <a href=\"http://dnsviz.net/\">http://dnsviz.net/</a> tool can be used to help visualize how this verification can be done for any domain on the internet, for example here is the trust chain for “www.cloudflare.com”.</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2018/02/Screen-Shot-2018-02-06-at-1.58.42-PM.png\" alt=\"Screen-Shot-2018-02-06-at-1.58.42-PM\" loading=\"lazy\"></p>\n<p>To verify the RRSIG on “www.cloudflare.com” we would need to cryptographically verify the signatures in reverse order on the diagram. First “cloudflare.com”, then “com”, and finally “.” – the root zone.</p>\n<p>If you are able to access the secret key that’s used to sign the root, it’s possible to trick resolvers into verifying a &quot;forged&quot; answer.</p>\n<p>While this DNSSEC signing has been deployed on the root zone, for over seven years, there is one operation that has never been attempted: rolling the Key Signing Key. This means to generate a new key and update every part of DNS infrastructure on the internet that needs it, retiring the old one completely.</p>\n<p>The ZSK (Zone Signing Key) has been rolled religiously every quarter since 2010, however rolling the Key Signing Key is a much scarier operation. If it goes wrong it could leave the root zone signing invalid, meaning a large part of the internet would not trust any of the content, effectively knocking DNS offline for validating resolvers. After DNSSEC was designed, a mechanism was devised for rolling out a new Key Signing Key in RFC5011, this operation is commonly known as the 5011 roll-over.</p>\n<h3 id=\"whatisakeyrollover\">What is a KEY rollover?</h3>\n<p>All cryptographic keys have a life cycle that can represented by states:<br>\nGenerated == the key is created but only the “owner” knows of its properties.<br>\nPublished == the key has been made public either as a public key or a hash of it.<br>\nActive == the key is in use<br>\nRetired == the has been withdrawn from service but is still published<br>\nRevoked == they key has been marked as not to be trusted ever again.<br>\nRemoved == taken out of publication</p>\n<p>Different keys move through the states in different ways depending on the usage, for example some keys are never revoked, just removing them is sufficient, for example the root ZSK’s are never revoked. When rolled, the root KSK will pass through all states.</p>\n<h3 id=\"whyistherootkskdifferent\">Why is the Root KSK different ?</h3>\n<p>For most keys used in DNS the trust is derived by a relationship between the parent zone and the child zone. The parent publishes a special record, the DS (Delegation Signer), that contains cryptographically strong binding to the actual key, a hash. The child has a DNSKEY RRset at the top of its zone that has at least one key that matches one of the DS records in the parent. To complete the chain of trust the DNSKEY RRset MUST be signed by that key.</p>\n<p>The root zone has no parent, thus trust cannot be derived in the same way. Instead, validating resolvers must be configured with the root Trust Anchor. This anchor must be refreshed during a key rollover or the validating resolver will not trust anything it sees in the root zone after the old KSK (from 2010) is retired from service. The Trust Anchors can be updated in a number of ways, such as a manual update, a software update, or an in-band update. The preferred update mechanism is the previously mentioned in-band update mechanism RFC5011-roll.</p>\n<p>The process outlined in RFC 5011 relies on two factors, first that the new key is published in the DNSKEY RRset – which is signed by the old KSK, and is kept there for at least a hold-down period of 30 days. Validating resolvers that follow the procedure will check frequently to see if there is a new KSK in the DNSKEY set. The new key can be trusted because it has been signed with a key that is already in service. When there is new key, it is placed in PendingAddition state If at any point one of the key’s in PendingAddition is removed from the DNSKEY set, the resolver will forget about it. This means that if the key were to appear again, it would start a new 30 day hold-down period.</p>\n<p>After the key has been in PendingAddtional for 30 consecutive days it is accepted into Active state and will be trusted to sign the DNSKEY set for the root. From this point onwards, the new key can be used to sign the Zone Signing Key, and in turn the root zone content itself.</p>\n<h3 id=\"whyarewerollingtherootkeytrustanchor\">Why are we rolling the root key trust anchor?</h3>\n<p>There are two main reasons;</p>\n<ol>\n<li>The community wants to be a sure that the RFC5011 mechanism works in practice.  Knowing this makes future rollovers possible, and less risky. Regular rollovers are something to be done as a matter of good key hygiene, like changing your password regularly</li>\n<li>Enables thinking about switching to different algorithms. RSA with a large key size is a strong algorithm, but using it causes DNS packets to be larger. There are other algorithms like the ones that Cloudflare uses that are based on elliptic curves have smaller keys but increased safety per bit. To switch to a new algorithm would require a new key.</li>\n</ol>\n<p>Some people advocated rolling the key and changing the algorithm at the same time but that was deemed too risky. The right time to start talking about that is after the current roll concludes successfully.</p>\n<h3 id=\"whathashappenedsofar\">What has happened so far?</h3>\n<p><a href=\"https://www.icann.org/en/system/files/files/ksk-rollover-operational-implementation-plan-22jul16-en.pdf\">ICANN started the rollover process last year</a>. The new keys has been created and replicated to all the <a href=\"https://en.wikipedia.org/wiki/Hardware_security_module\">HSM’s (Hardware Security Modules)</a> in the two facilities that ICANN operates. From now on we will use the terms <strong>KSK2010 (the old key)</strong> and <strong>KSK2017 (the new key)</strong>.</p>\n<p>Before starting the roll-over process, testing of RFC5011 implementations took place and most implementations reported success.</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2018/02/Screen-Shot-2018-02-05-at-7.46.40-PM.png\" alt=\"Screen-Shot-2018-02-05-at-7.46.40-PM\" loading=\"lazy\"></p>\n<p>The new key was published in DNS on July 11th 2017, thus the DNSKEY set now contains two KSKs. At that point the new key/KSK2017 has entered Published state. It was scheduled to become Active on October 11th 2017.  Any validating resolver that has been operating for at least 30 days during the July 11-October 11 window should have placed the new Trust Anchor in “Active” state before October 11th. But sometimes things do not go according to plan.</p>\n<p>One of the things that was put in place before the rollover was a way for <a href=\"https://tools.ietf.org/html/rfc8145\">resolvers to signal to authoritative servers what trust anchor the resolver trusts RFC8145</a>. RFC8145 was only published in April 2017, thus during the KSK2017 key publication phase, only the latest version of Bind-9 supported it by default.</p>\n<p>The mechanism works by resolvers periodically sending a query to the root nodes, with a query name formatted like “_ta-4a5c” or “_ta-4a5c-4f66”. The name contains HEX encoded versions of the Trust Anchor identifiers, 19036 and 20326 respectively. This at least allows root operators to estimate the % of resolvers that have implemented RFC8145 AND are aware of each Trust Anchor.</p>\n<p>On September 29 <a href=\"https://www.icann.org/news/announcement-2017-09-27-en\">ICANN postponed the roll</a> based on evidence from the resolvers that sent in reports.<br>\nIt was concerning that the latest and <a href=\"https://www.icann.org/news/blog/update-on-the-root-ksk-rollover-project\">greatest version of Bind-9 in 4%</a> of cases did not pick up the new Trust Anchor, this was explained in more detail in a <a href=\"https://indico.dns-oarc.net/event/27/session/1/contribution/11/material/slides/0.pdf\">DNS-OARC presentation</a>. But this still leaves us with the question, why?</p>\n<p>It is also important to note that although other implementations of RFC8145 did not enable it by default thus most of the reports were by Bind-9.</p>\n<p>Rolling the KSK at this point would have resulted in the remaining resolvers not trusting the content of the root zone, ultimately breaking all DNS resolution through them.</p>\n<h3 id=\"operationalrealityvstheprotocoldesign\">Operational reality vs the protocol design</h3>\n<p>At Cloudflare we operate validating resolvers in all of our &gt;120 data centers, and we monitored the adoption of trust anchors on a weekly basis, expecting everything to work correctly. After 6 weeks we noticed that things were not going right, some of the resolvers had picked up the new trust anchor and others had not accepted the new trust anchor even though more than enough time had passed.</p>\n<p>First let’s look at the assumptions that RFC5011 makes.</p>\n<ul>\n<li>The resolver is a long running process that understands time and and can keep state</li>\n<li>The resolver has access to persistent writeable storage that will work across reboots.</li>\n</ul>\n<p>In the protocol community we had worried about the first one a lot, for the second one we had identified two failure cases: machine configured from old read-only medium, and new machine takes over. Both were considered rare enough and operators would know to deal with those exceptions.</p>\n<p>Turns out the second assumption in RFC5011 had more failure modes than the community expected.</p>\n<p>For example in Bind-9, it originally had a hardcoded list of “trusted-keys”. Later when RFC5011 support was added the configuration option “managed-keys” was added. It looks like some installations while religiously updating the software never changed from the fixed configuration to the RFC5011 managed one. In this case the only recovery is to change the configuration, and in some cases the operator selected this operating mode assuming he/she would distribute a new configuration file during rollover, but the person may have left or forgotten.</p>\n<p>Software that uses managed-keys operations (Bind-9, Unbound, Knot-resolver) uses a file to maintain state between restarts.  BUT it is possible that the file is read-only and in that case managed-keys works just like trusted-keys. Why anyone would have a configuration like that is a good question? The interesting obersevation is that unless the implementation complains loudly about the read-only state, the operator is not likely to notice. The only recovery option here is to change the configuration so the trust anchor file can be written.</p>\n<p>Software upgrades are another possible reason for not picking up the new trust anchor, but only if the file containing the Trust Anchor state is overwritten or lost.  This can happen if the resolver machine has a disk replacement/reformat etc. but in this case the net effect is only slowing down the acceptance of the new trust anchor. This failure is visible as as KSK2017 spends more than 30 days in state “PendingAddition” but that is only visible if someone is looking.</p>\n<p>Modern operating practices use “containers” that are spun up and down, in those cases there is no “persistent” storage. To avoid validation errors in this case the software installed must know about the new key or perform a key discovery upon startup like the <a href=\"https://www.unbound.net/documentation/unbound-anchor.html\">unbound-anchor</a> program performs for Unbound.</p>\n<p>There are probably few other reasons where operations may cause the errors seen by the Trust Anchor Signaling.</p>\n<p>Back to what happened at Cloudflare? In our case the issue was a combination of upgrades and container issues. We were upgrading software on all our nodes and our resolver processes were allocated to different computers. Our fix was to quickly upgrade to a software version that knew about the new trust anchor, so future restarts/migrations would not cause loss in trust.</p>\n<h3 id=\"whatisnextforthekskrollover\">What is next for the KSK rollover</h3>\n<p>ICANN has just asked for comments on restarting the rollover process and <a href=\"https://www.icann.org/news/blog/announcing-draft-plan-for-continuing-with-the-ksk-roll\">perform the roll on October 11th 2018</a>.</p>\n<p>What can you do to prepare for the key rollover?<br>\nIf you operate a validating resolver, make sure you have the latest version of your vendors software, audit the configuration files and file permissions and check that your software supports both KSK2010 (key tag 19036) and KSK2017 (key tag <strong>20326</strong>).</p>\n<p>If you are a concerned end user right now there is nothing you can do, but the IETF is considering a proposal <a href=\"https://datatracker.ietf.org/doc/draft-ietf-dnsop-kskroll-sentinel/?include_text=1\">to allow remote trust anchor checking via queries</a>. Hopefully this will be standardized soon and DNS resolver software vendors add support, but until then there is no testing possible by you.</p>\n<p>If you speak languages other than English and you worry about your local operators should know about the DNSSEC Key Rollover failure modes, feel free to republish this blog or parts of it in your language.</p>\n<h3 id=\"hsmdestructionatthenextkskceremonyfeb7th2018\">HSM destruction at the next KSK ceremony Feb 7th 2018</h3>\n<p>Every quarter there is a new KSK signing ceremony where signatures for 3 months of use of the KSK  are generated. <a href=\"https://www.iana.org/dnssec/ceremonies/32\">February 6th 2018 is the next one</a> and it will sign a DNSKEY set with both KSKs but only signed by KSK2010 . You can see the script for the ceremony here and you can even watch it online. But the fun part of this particular ceremony is the destruction of old HSM (Hardware Security Module), via some fancy contraption.</p>\n<p>An HSM is a special kind of equipment that can store private keys and never leak them, and protects its secrets by erasing them when someone tries to access/tamper with the equipment. The secrets remain in the HSM as long as a non-replaceable battery lasts. The old KSK HSMs have a lifetime of 10 years and were made in late 2009 or early 2010 thus the battery is not designed to last much longer. Last year the private keys were safely and securly moved to newer models and the new machines have been in use for about a year. The final step of retiring the old machines is to destroy them during the ceremony, tune in to see how that is done.</p>\n<p>Excited by working on cutting edge stuff? Or building systems at a scale where once-in-a-decade problems can get triggered every day? <a href=\"https://www.cloudflare.com/careers/\">Then join our team</a>.</p>\n<!--kg-card-end: markdown-->",
		"id": "5d16453b41acde0011a956ab",
		"meta_description": null,
		"meta_title": null,
		"og_description": null,
		"og_image": null,
		"og_title": null,
		"primary_author": {
			"id": "5d1644b141acde0011a94f4d",
			"name": "Ólafur Guðmundsson",
			"slug": "olafur-gudmundsson",
			"profile_image": "http://blog.cloudflare.com/content/images/2023/10/_tmp_mini_magick20230112-42-p4sd2l.jpg",
			"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-106.png",
			"bio": "VP of Engineering at Cloudflare, long time Internet geek ",
			"website": null,
			"location": null,
			"facebook": null,
			"twitter": null,
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/olafur-gudmundsson/"
		},
		"primary_tag": {
			"id": "5d16450341acde0011a951d6",
			"name": "DNS",
			"slug": "dns",
			"description": null,
			"feature_image": null,
			"visibility": "public",
			"meta_title": null,
			"meta_description": null,
			"og_image": null,
			"og_title": null,
			"og_description": null,
			"twitter_image": null,
			"twitter_title": null,
			"twitter_description": null,
			"codeinjection_head": null,
			"codeinjection_foot": null,
			"canonical_url": null,
			"accent_color": null,
			"url": "http://blog.cloudflare.com/tag/dns/"
		},
		"published_at": "2018-02-06T22:33:19.000+00:00",
		"reading_time": 10,
		"slug": "its-hard-to-change-the-keys-to-the-internet-and-it-involves-destroying-hsms",
		"tags": [
			{
				"id": "5d16450341acde0011a951d6",
				"name": "DNS",
				"slug": "dns",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/dns/"
			},
			{
				"id": "5d16450341acde0011a951b1",
				"name": "DNSSEC",
				"slug": "dnssec",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/dnssec/"
			},
			{
				"id": "5d16450341acde0011a951ce",
				"name": "Reliability",
				"slug": "reliability",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/reliability/"
			}
		],
		"title": "It’s Hard To Change The Keys To The Internet And It Involves Destroying HSM’s",
		"twitter_description": null,
		"twitter_image": null,
		"twitter_title": null,
		"updated_at": "2020-08-21T00:41:26.000+01:00",
		"url": "http://blog.cloudflare.com/its-hard-to-change-the-keys-to-the-internet-and-it-involves-destroying-hsms/",
		"uuid": "f60be0de-1ddf-4e68-854c-d71d5da432c2",
		"visibility": "public"
	}
}