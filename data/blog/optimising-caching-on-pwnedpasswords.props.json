{
	"browserLocale": "en-us",
	"locale": "en-us",
	"post": {
		"access": true,
		"authors": [
			{
				"id": "5d1644b141acde0011a94f6e",
				"name": "Junade Ali",
				"slug": "junade-ali",
				"profile_image": "http://blog.cloudflare.com/content/images/2017/03/G1VwuaxB.jpg",
				"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-8.png",
				"bio": null,
				"website": null,
				"location": null,
				"facebook": null,
				"twitter": "@IcyApril",
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/junade-ali/"
			}
		],
		"canonical_url": null,
		"codeinjection_foot": null,
		"codeinjection_head": null,
		"comment_id": "5b6b57b6d05e8000bf5aba42",
		"comments": false,
		"created_at": "2018-08-08T21:51:02.000+01:00",
		"custom_excerpt": "In February, Troy Hunt unveiled Pwned Passwords v2. Containing over half a billion real world leaked passwords, this database provides a vital tool for correcting the course of how the ",
		"custom_template": null,
		"email_subject": null,
		"excerpt": "In February, Troy Hunt unveiled Pwned Passwords v2. Containing over half a billion real world leaked passwords, this database provides a vital tool for correcting the course of how the ",
		"feature_image": "http://blog.cloudflare.com/content/images/2018/08/1F1DF448-D827-4A84-BD60-B710CEA67202.jpeg",
		"feature_image_alt": null,
		"feature_image_caption": null,
		"featured": false,
		"frontmatter": null,
		"html": "<!--kg-card-begin: markdown--><p>In February, Troy Hunt unveiled <a href=\"https://www.troyhunt.com/ive-just-launched-pwned-passwords-version-2/\">Pwned Passwords v2</a>. Containing over half a billion real world leaked passwords, this database provides a vital tool for correcting the course of how the industry combats modern threats against password security.</p>\n<p>In supporting this project; I built a <a href=\"http://blog.cloudflare.com/validating-leaked-passwords-with-k-anonymity/\">k-Anonymity model</a> to add a layer of security to performed queries. This model allows for enhanced caching by mapping multiple leaked password hashes to a single hash prefix and additionally being performed in a deterministic HTTP-friendly way (which allows caching whereas other implementations of Private Set Intersection require a degree of randomness).</p>\n<p>Since launch, PwnedPasswords, using this anonymity model and delivered by Cloudflare, has been implemented in a widespread way across a wide variety of platforms - from site like EVE Online and Kogan to tools like 1Password and Okta's PassProtect. The anonymity model is also used by Firefox Monitor when checking if an email is in a data breach.</p>\n<p>Since it has been adopted, Troy has tweeted out about the high cache hit ratio; and people have been asking me about my &quot;secret ways&quot; of gaining such a high cache hit ratio. Over time I touched various pieces of Cloudflare's caching systems; in late 2016 I worked to bring <a href=\"http://blog.cloudflare.com/caching-anonymous-page-views/\">Bypass Cache on Cookie functionality</a> to our self-service Business plan users and wrestled with <a href=\"http://blog.cloudflare.com/the-curious-case-of-caching-csrf-tokens/\">cache implications of CSRF tokens</a> - however Pwned Passwords was far more fun to help show the power of Cloudflare's cache functionality from the perspective of a user.</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">Looks like Pwned Passwords traffic has started to double over the norm, trending around 8M requests a day now. <a href=\"https://twitter.com/IcyApril?ref_src=twsrc%5Etfw\">@IcyApril</a> made a cache change to improve stability but reduce hit ratio around the 10th, but that&#39;s improving again now with higher volumes (94% for the last week). <a href=\"https://t.co/HwMDLlmBEY\">pic.twitter.com/HwMDLlmBEY</a></p>&mdash; Troy Hunt (@troyhunt) <a href=\"https://twitter.com/troyhunt/status/1011139442847899648?ref_src=twsrc%5Etfw\">June 25, 2018</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">Will <a href=\"https://twitter.com/IcyApril?ref_src=twsrc%5Etfw\">@IcyApril</a> secret ways ever be released?!</p>&mdash; Neal (@tun35) <a href=\"https://twitter.com/tun35/status/993279245295144962?ref_src=twsrc%5Etfw\">May 7, 2018</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>It is worth noting that PwnedPasswords is not like a typical website in terms of caching - it contains 16^5 possible API queries (any possible form of five hexadecimal charecters, in total over a million possible queries) in order to guarantee k-Anonymity in the API. Whilst the API guarantees <em>k</em>-Anonymity, it does not guarantee <em>l</em>-Diversity, meaning individual queries can occur more than others.</p>\n<p>For ordinary websites, with fewer assets, the cache hit ratio can be far greater. An example of this is another site Troy set-up using our barebones free plan; by simply configuring a <a href=\"https://support.cloudflare.com/hc/en-us/articles/200172256-How-do-I-cache-static-HTML-\">Page Rule with the Cache Everything option</a> (and setting an <a href=\"http://blog.cloudflare.com/edge-cache-expire-ttl-easiest-way-to-override/\">Edge Cache TTL option</a>, should the Cache-Control headers from your origin not do so), you are able to cache static HTML easily.</p>\n<blockquote class=\"twitter-tweet\" data-cards=\"hidden\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">When I&#39;ve written about really high cache-hit ratios on <a href=\"https://twitter.com/haveibeenpwned?ref_src=twsrc%5Etfw\">@haveibeenpwned</a> courtesy of <a href=\"https://twitter.com/Cloudflare?ref_src=twsrc%5Etfw\">@Cloudflare</a>, some people have suggested it&#39;s due to higher-level plans. Here&#39;s <a href=\"https://t.co/Y4GlsInvu2\">https://t.co/Y4GlsInvu2</a> running on the *free* plan: 99.0% cache hit ratio on requests and 99.5% on bandwidth. Free! <a href=\"https://t.co/pP0wo7qKF3\">pic.twitter.com/pP0wo7qKF3</a></p>&mdash; Troy Hunt (@troyhunt) <a href=\"https://twitter.com/troyhunt/status/1024383718083809280?ref_src=twsrc%5Etfw\">July 31, 2018</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<h3 id=\"originheaders\">Origin Headers</h3>\n<p>Indeed, the fact the queries are usually API queries makes a substantial difference. When optimising caching, the most important thing to look for is instances where the same cache asset is stored multiple times for different cache keys; for some assets this may involve selectively <a href=\"https://support.cloudflare.com/hc/en-us/articles/200168256-What-are-Cloudflare-s-caching-levels-\">ignoring query strings</a> for cache purposes, but for APIs the devil is more in the detail.</p>\n<p>When a HTTP request is made from a JavaScript asset (as is done when PwnedPasswords is directly implemented in login forms) - the site will also send an <code>Origin</code> header to indicate where a fetch originates from.</p>\n<p>When you make a search on <a href=\"https://haveibeenpwned.com/Passwords\">haveibeenpwned.com/Passwords</a>, there's a bit of JavaScript which takes the password and applies the k-Anonymity model by SHA-1 hashing the password and truncating the hash to the first five charecters and sending that request off to <a href=\"https://api.pwnedpasswords.com/range/A94A8\">https://api.pwnedpasswords.com/range/A94A8</a> (then performing a check to see if any of the contained suffixes are in the response).</p>\n<p>In the headers of this request to PwnedPasswords.com, you can see the request contains an <code>Origin</code> header of the querying site.</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2018/08/Screen-Shot-2018-08-08-at-22.20.05.png\" alt=\"PwnedPasswords Headers\" loading=\"lazy\"></p>\n<p>This header is often useful for mitigating Cross-Site Request Forgery (CSRF) vulnerabilities by only allowing certain <code>Origin</code>s to make HTTP requests using Cross-Origin Resource Sharing (CORS).</p>\n<p>In the context of an API, this does not nessecarily make sense where there is no state (i.e. cookies). However, Cloudflare's default Cache Key contains this header for those who wish to use it. This means, Cloudflare will store a new cached copy of the asset whenever a different <code>Origin</code> header is present. Whilst this is ordinarily not a problem (most sites have one <code>Origin</code> header, or just a handful when using CORS), PwnedPasswords has <code>Origin</code> headers coming from websites all over the internet.</p>\n<p>As Pwned Passwords will always respond with the same for a given request, regardless of the Origin header - we are able to remove this header from the Cache Key using our Custom Cache Key functionality.</p>\n<p>Incidently, JavaScript CDNs will frequently be requested to fetch assets as sub-resources from another JavaScript asset - removing the <code>Origin</code> header from their Cache Key can have similar benefits:</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">Just applied some <a href=\"https://twitter.com/Cloudflare?ref_src=twsrc%5Etfw\">@Cloudflare</a> cache magic I experimented with to get <a href=\"https://twitter.com/troyhunt?ref_src=twsrc%5Etfw\">@troyhunt</a>&#39;s Pwned Passwords API cache hit ratio to ~91%, to a large JS CDN (<a href=\"https://twitter.com/unpkg?ref_src=twsrc%5Etfw\">@unpkg</a>) during a slow traffic period. Traffic 30mins post deploy shows a growing ~94% Cache Hit Ratio (with a planned cache purge!). <a href=\"https://t.co/ZQmfzEi4Y2\">pic.twitter.com/ZQmfzEi4Y2</a></p>&mdash; Junade Ali (@IcyApril) <a href=\"https://twitter.com/IcyApril/status/993276068210540544?ref_src=twsrc%5Etfw\">May 6, 2018</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<h3 id=\"caseinsensitivity\">Case Insensitivity</h3>\n<p>One thing I realised after speaking to <a href=\"https://twitter.com/stebets\">Stefán Jökull Sigurðarson</a> from EVE Online was that different users were querying assets using different casing; for example, instead of <code>range/A94A8</code> - a request to <code>range/a94a8</code> would result in the same asset. As the Cache Key accounted for case sensitivity, the asset would be cached twice.</p>\n<p>Unfortuantely, the API was already public with both forms of casing being acceptable once I started these optimisations.</p>\n<h4 id=\"entercloudflareworkers\">Enter Cloudflare Workers</h4>\n<p>Instead of adjusting the cache key to solve this problem, I decided to use Cloudflare Workers - allowing me to adjust cache behaviour using JavaScript.</p>\n<p>Troy initially had a simple worker on the site to enable CORS:</p>\n<pre><code class=\"language-js\">addEventListener('fetch', event =&gt; {\n    event.respondWith(checkAndDispatchReports(event.request))\n})\n\nasync function checkAndDispatchReports(req) {\n    if(req.method === 'OPTIONS') {\n        let responseHeaders = setCorsHeaders(new Headers())\n        return new Response('', {headers:responseHeaders})\n    } else {\n        return await fetch(req)\n    }\n}\n\nfunction setCorsHeaders(headers) {\n    headers.set('Access-Control-Allow-Origin', '*')\n    headers.set('Access-Control-Allow-Methods', 'GET')\n    headers.set('Access-Control-Allow-Headers', 'access-control-allow-headers')\n    headers.set('Access-Control-Max-Age', 1728000)\n    return headers\n}\n</code></pre>\n<p>I added to this worker to ensure that when a request left Workers, the hash prefix would always be upper case, additionally I used the <code>cacheKey</code> flag to allow the Cache Key to be set directly in Workers when making the request (instead of using our internal Custom Cache Key configuration):</p>\n<pre><code class=\"language-js\">addEventListener('fetch', event =&gt; {\n  event.respondWith(handleRequest(event.request));\n})\n\n/**\n * Fetch request after making casing of hash prefix uniform\n * @param {Request} request\n */\nasync function handleRequest(request) {\n      \n  if(request.method === 'OPTIONS') {\n    let responseHeaders = setCorsHeaders(new Headers())\n    return new Response('', {headers:responseHeaders})\n  }\n\n  const url = new URL(request.url);\n\n  if (!url.pathname.startsWith(&quot;/range/&quot;)) {\n    const response = await fetch(request)\n    return response;\n  }\n\n  const prefix = url.pathname.substr(7);\n  const newRequest = &quot;https://api.pwnedpasswords.com/range/&quot; + prefix.toUpperCase()\n\n  if (prefix === prefix.toUpperCase()) {\n    const response = await fetch(request, { cf: { cacheKey: newRequest } })\n    return response;\n  }\n\n  const init = {\n      method: request.method,\n      headers: request.headers\n  }\n  \n  const modifiedRequest = new Request(newRequest, init)\n  const response = await fetch(modifiedRequest, { cf: { cacheKey: newRequest } })\n  return response\n}\n\nfunction setCorsHeaders(headers) {\n    headers.set('Access-Control-Allow-Origin', '*')\n    headers.set('Access-Control-Allow-Methods', 'GET')\n    headers.set('Access-Control-Allow-Headers', 'access-control-allow-headers')\n    headers.set('Access-Control-Max-Age', 1728000)\n    return headers\n}\n</code></pre>\n<p>Incidentially, our Workers team are working on some really cool stuff around controlling our cache APIs at a fine grained level, you'll be able to see some of that stuff in due course by following this blog.</p>\n<h3 id=\"argo\">Argo</h3>\n<p>Finally, Argo plays an important part in improving Cache Hit ratio. Once toggled on, it is known for optimising speed at which traffic travels around the internet - but it also means that when traffic is routed from one Cloudflare data center to another, if an asset is cached closer to the origin web server, the asset will be served from that data center. In essence, it offers Tiered Cache functionality; by making sure when traffic comes from a less used Cloudflare data center, it can still utilise the cache from a data center recieving greater traffic (and more likely to have an asset in cache). This prevents an asset from having to travel all the way around the world whilst still being served from cache (even if not optimally close to the user).</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2017/05/Argo-infographic-1.jpg\" alt=\"Argo Infographic\" loading=\"lazy\"></p>\n<h3 id=\"conclusion\">Conclusion</h3>\n<p>By using Cloudflare's caching functionality, we are able to reduce the amount of times a single asset is in cache by accidental variations in the request parameters. Workers offers a mechanism to control the cache of assets on Cloudflare, with more fine-grained controls under active development.</p>\n<p>By implementing this on Pwned Passwords; we are able to provide developers a simple and fast interface to reduce password reuse amonst their users, thereby limiting the effects of Credential Stuffing attacks on their system. If only Irene Adler had used a password manager:</p>\n<iframe width=\"645\" height=\"363\" src=\"https://www.youtube.com/embed/-bBHT158E0s\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n<p>Interested in helping debug performance, cache and security issues for websites of all sizes? We're hiring for Support Engineers to join us in <a href=\"https://boards.greenhouse.io/cloudflare/jobs/584856?gh_jid=584856\">London</a>, and additionally those speaking <a href=\"https://boards.greenhouse.io/cloudflare/jobs/1093007?gh_jid=1093007\">Japanese</a>, <a href=\"https://boards.greenhouse.io/cloudflare/jobs/1149892?gh_jid=1149892\">Korean</a> or <a href=\"https://boards.greenhouse.io/cloudflare/jobs/584859?gh_jid=584859\">Mandarin</a> in our Singapore office.</p>\n<!--kg-card-end: markdown-->",
		"id": "5d16453b41acde0011a95728",
		"meta_description": null,
		"meta_title": null,
		"og_description": null,
		"og_image": null,
		"og_title": null,
		"primary_author": {
			"id": "5d1644b141acde0011a94f6e",
			"name": "Junade Ali",
			"slug": "junade-ali",
			"profile_image": "http://blog.cloudflare.com/content/images/2017/03/G1VwuaxB.jpg",
			"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-8.png",
			"bio": null,
			"website": null,
			"location": null,
			"facebook": null,
			"twitter": "@IcyApril",
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/junade-ali/"
		},
		"primary_tag": {
			"id": "5d16450341acde0011a95253",
			"name": "Cloudflare Workers",
			"slug": "workers",
			"description": null,
			"feature_image": null,
			"visibility": "public",
			"meta_title": null,
			"meta_description": null,
			"og_image": null,
			"og_title": null,
			"og_description": null,
			"twitter_image": null,
			"twitter_title": null,
			"twitter_description": null,
			"codeinjection_head": null,
			"codeinjection_foot": null,
			"canonical_url": null,
			"accent_color": null,
			"url": "http://blog.cloudflare.com/tag/workers/"
		},
		"published_at": "2018-08-09T16:42:50.000+01:00",
		"reading_time": 6,
		"slug": "optimising-caching-on-pwnedpasswords",
		"tags": [
			{
				"id": "5d16450341acde0011a95253",
				"name": "Cloudflare Workers",
				"slug": "workers",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/workers/"
			},
			{
				"id": "5d16450341acde0011a95157",
				"name": "Cache",
				"slug": "cache",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/cache/"
			},
			{
				"id": "5d16450341acde0011a95160",
				"name": "Speed & Reliability",
				"slug": "speed-and-reliability",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Speed---Reliability-1.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Speed & Reliability",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Speed & Reliability'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/speed-and-reliability/"
			},
			{
				"id": "5d16450341acde0011a95252",
				"name": "Serverless",
				"slug": "serverless",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Serverless.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Serverless",
				"meta_description": "Cloudflare blog posts tagged 'serverless'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/serverless/"
			},
			{
				"id": "64a3e2b834124c000b00b717",
				"name": "Developer Platform",
				"slug": "developer-platform",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developer-platform/"
			},
			{
				"id": "5d16450341acde0011a95204",
				"name": "Developers",
				"slug": "developers",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Developers-1.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Developers",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Developers'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developers/"
			}
		],
		"title": "Optimising Caching on Pwned Passwords (with Workers)",
		"twitter_description": null,
		"twitter_image": null,
		"twitter_title": null,
		"updated_at": "2024-02-12T20:48:24.000+00:00",
		"url": "http://blog.cloudflare.com/optimising-caching-on-pwnedpasswords/",
		"uuid": "cd25b999-3dc9-4122-8cb9-fd004213523d",
		"visibility": "public"
	}
}