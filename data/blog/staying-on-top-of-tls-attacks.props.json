{
	"browserLocale": "en-us",
	"locale": "en-us",
	"post": {
		"access": true,
		"authors": [
			{
				"id": "5d1644b141acde0011a94f2c",
				"name": "John Graham-Cumming",
				"slug": "john-graham-cumming",
				"profile_image": "http://blog.cloudflare.com/content/images/2017/03/url-2.jpg",
				"cover_image": "http://blog.cloudflare.com/content/images/2023/05/Twitter-Header-@cloudflare-US.png",
				"bio": null,
				"website": null,
				"location": "Lisbon, Portugal",
				"facebook": null,
				"twitter": null,
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/john-graham-cumming/"
			}
		],
		"canonical_url": null,
		"codeinjection_foot": null,
		"codeinjection_head": null,
		"comment_id": "4234",
		"comments": false,
		"created_at": "2014-08-20T11:03:46.000+01:00",
		"custom_excerpt": "CloudFlare makes extensive use of TLS connections throughout our\nservice which makes staying on top of the latest news about security problems with TLS a priority. We use TLS both externally and internally and different uses of TLS have different constraints.",
		"custom_template": null,
		"email_subject": null,
		"excerpt": "CloudFlare makes extensive use of TLS connections throughout our\nservice which makes staying on top of the latest news about security problems with TLS a priority. We use TLS both externally and internally and different uses of TLS have different constraints.",
		"feature_image": "http://blog.cloudflare.com/content/images/2018/02/dory.png",
		"feature_image_alt": null,
		"feature_image_caption": null,
		"featured": false,
		"frontmatter": null,
		"html": "<!--kg-card-begin: markdown--><p>CloudFlare makes extensive use of TLS connections throughout our service which makes staying on top of the latest news about security problems with TLS a priority. We use TLS both externally and internally and different uses of TLS have different constraints.</p>\n<p>Broadly there are three ways we use TLS: to handle HTTPS connections from web browsers visiting web sites that use CloudFlare, to make HTTPS connections from our network of datacenters to our customers' web servers, and internally within our network.</p>\n<p>This week, news of a new type of attack against the RC4 cipher used for some TLS connections has made us reevaluate (once again) all our use of TLS and specifically which ciphersuites we are using.</p>\n<p>This blog post gives some background on TLS and ciphersuites, the most recent attack and how we are configuring our systems to keep our customers (and their customers) as safe as possible.</p>\n<h3 id=\"tlsandciphersuites\">TLS and Ciphersuites</h3>\n<p>When two computers want to communicate securely using TLS, one of them (referred to as the client) connects to the other (the server) and they enter a negotiation about what encryption method to use. Central to that communication is an agreement between client and server on which ciphersuite will be used. The ciphersuite specifies precisely the type of encryption that will be used between client and server.</p>\n<p>For example, when you visit a web site such as <a href=\"https://cloudflare.com/\">https://cloudflare.com/</a> using HTTPS a TLS connection is established between your web browser and the CloudFlare web server. Your web browser starts the TLS connection by telling the web server which ciphersuites it supports: it tells the web server which types of encryption it is able to use.</p>\n<p>The list of available ciphersuites varies from browser to browser and from version to version. The University of Hannover has a little web site that will show you which ciphersuites your web browser supports. To use it just visit <a href=\"https://cc.dcsec.uni-hannover.de/\">https://cc.dcsec.uni-hannover.de/</a>.</p>\n<p>For my browser, the latest version of Google Chrome, the list of suites is as follows. The order gives the web browser's preference for ciphersuites. For example, it would prefer to use</p>\n<pre><code>ECDHE-ECDSA-AES256-SHA \n</code></pre>\n<p>instead of</p>\n<pre><code>ECDHE-RSA-AES256-SHA.\n</code></pre>\n<pre>ECDHE-ECDSA-AES256-SHA\nECDHE-RSA-AES256-SHA\nDHE-RSA-CAMELLIA256-SHA\nDHE-DSS-CAMELLIA256-SHA\nDHE-RSA-AES256-SHA     \nDHE-DSS-AES256-SHA\nECDH-RSA-AES256-SHA     \nECDH-ECDSA-AES256-SHA  \nRSA-CAMELLIA256-SHA\nRSA-AES256-SHA          \nECDHE-ECDSA-RC4128-SHA \nECDHE-ECDSA-AES128-SHA\nECDHE-RSA-RC4128-SHA\nECDHE-RSA-AES128-SHA\nDHE-RSA-CAMELLIA128-SHA\nDHE-DSS-CAMELLIA128-SHA\nDHE-DSS-RC4128-SHA\nDHE-RSA-AES128-SHA\nDHE-DSS-AES128-SHA\nECDH-RSA-RC4128-SHA\nECDH-RSA-AES128-SHA\nECDH-ECDSA-RC4128-SHA\nECDH-ECDSA-AES128-SHA\nRSA-SEED-SHA\nRSA-CAMELLIA128-SHA\nRSA-RC4128-SHA\nRSA-RC4128-MD5\nRSA-AES128-SHA\nECDHE-ECDSA-3DES-EDE-SHA\nECDHE-RSA-3DES-EDE-SHA\nDHE-RSA-3DES-EDE-SHA\nDHE-DSS-3DES-EDE-SHA\nECDH-RSA-3DES-EDE-SHA   \nECDH-ECDSA-3DES-EDE-SHA\nRSA-FIPS-3DES-EDE-SHA\nRSA-3DES-EDE-SHA\n</pre>\n<p>Each web server will have a similar list of ciphersuites and during the TLS handshake (at the start of a TLS connection) the client and server will agree on a ciphersuite that they both understand taking into account the order of preference of the client and server.</p>\n<p>When I connect to <a href=\"https://cloudflare.com/\">https://cloudflare.com/</a> my browser and the CloudFlare web server agree to use ECDHE-RSA-RC4128-SHA. That cryptic string has a lot of information in it. It explains how the browser and server will exchange or agree on<br>\nencryption keys and how the actual web browsing I do will be encrypted.</p>\n<p>It breaks down as follows:</p>\n<p>ECDHE means that the client and server will agree on encryption keys using Ephemeral Elliptic Curve Diffie-Hellman.</p>\n<p>RSA means that the client will verify that the key is valid using the RSA algorithm to communications.</p>\n<p>RC4128 means that the actual encryption of my web browsing session will be performed using the RC4 algorithm with a 128-bit key (that's the key that the client and server will have agreed using ECDHE-RSA).</p>\n<p>And finally SHA means that the SHA algorithm will be used for securely hashing parts of the TLS messages.</p>\n<p>CloudFlare's server configuration for TLS ciphersuites is set in <a href=\"http://blog.cloudflare.com/new-ssl-vulnerabilities-cloudflare-users-prot\">nginx</a> (which we use extensively) with the following configuration command:</p>\n<pre>ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;\nssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-RC4-SHA:\n            ECDHE-RSA-AES128-SHA:AES128-GCM-SHA256:RC4:HIGH:\n            !MD5:!aNULL:!EDH:!CAMELLIA;\nssl_prefer_server_ciphers on;\n</pre>\n<p>(Note that a previous version of this blog post had the wrong configuration caused by yours truly copy/pasting the wrong thing).</p>\n<p>That results on the server offering the following ciphersuites (you can check this yourself using the <a href=\"https://www.ssllabs.com/ssltest\">SSL Labs Report</a>):</p>\n<pre>ECDHE-RSA-AES128-GCM-SHA256\nECDHE-RSA-RC4128-SHA\nECDHE-RSA-AES128-CBC-SHA\nRSA-AES128-GCM-SHA256\nRSA-RC4128-SHA\nECDHE-RSA-AES256-GCM-SHA384\nECDHE-RSA-AES256-CBC-SHA384\nECDHE-RSA-AES256-CBC-SHA\nRSA-AES256-GCM-SHA384\nRSA-AES256-CBC-SHA256\nRSA-AES256-CBC-SHA\nECDHE-RSA-3DES-EDE-CBC-SHA\nRSA-3DES-EDE-CBC-SHA\nECDHE-RSA-AES128-CBC-SHA256\nRSA-AES128-CBC-SHA256\nRSA-AES128-CBC-SHA\n</pre>\n<p>The CloudFlare server's preference is ECDHE-RSA-AES128-GCM SHA256 but unfortunately it is not widely supported. Yet. I'll come back to that ciphersuite later. So, my browser and the server agreed to use the server's second preference, ECDHE-RSA-RC4128-SHA.</p>\n<p><img alt=\"Forward Secrecy\" src=\"http://blog.cloudflare.com/content/images/dory.png\" title=\"Forward Secrecy\"><noscript><img alt=\"Forward Secrecy\" src=\"http://blog.cloudflare.com/content/images/dory.png\" title=\"Forward Secrecy\"></noscript></p>\n<h3 id=\"forwardsecrecy\">Forward Secrecy</h3>\n<p>You'll notice that we've configured the CloudFlare server to prefer ciphers that use ECDHE. That's because, unlike the ciphers that start with RSA, they offer <a href=\"https://en.wikipedia.org/wiki/Perfect_forward_secrecy\">forward secrecy</a>. To understand forward secrecy it's best to start by understanding systems that don't offer it, such as RSA.</p>\n<p>When using RSA, the server's public key is used to encrypt a secret created by the client, the web browser. Because the server has the private key it can read the secret and both the client and server then know a shared secret that they can use for encryption. But the server's public RSA key is part of the server certificate and is typically very long lived. It's not uncommon for the same public key to be used for months or years (the current CloudFlare RSA key isn't set to expire until December 5, 2013). That creates a potential problem: if an SSL server's private key were to leak or be stolen all connections made in the past using that key would be vulnerable. It would be enough that someone had recorded your SSL connections: with the private key they could all be decrypted.</p>\n<p>But forward secrecy with ECDHE means a fresh public key is created for every single connection. That means that an adversary would need to break the key for each connection individually to read the communication. And the keys are ephemeral: the server forgets them when connections are done. So there's nothing to leak.</p>\n<p>So, we've prioritized those ciphers because they offer a higher level of long term security for people contacting CloudFlare sites.</p>\n<p>I mentioned above that the ciphersuite that CloudFlare prefers is ECDHE-RSA-AES128-GCM-SHA256 and that ECDHE is preferred because it offer forward secrecy. The next part of the ciphersuite is RSA. In the ECDHE scheme that's just used to prove the identity of web server, and not to secure the connection, so the concerns above about leakage of the private key don't apply.</p>\n<p>The next part is AES128-GCM. This is the cipher that will be used to encrypt the actual HTTP requests and responses encrypted in the TLS connection. This particular cipher is using <a href=\"https://en.wikipedia.org/wiki/Advanced_Encryption_Standard\">AES</a> with a 128 bit key in <a href=\"https://en.wikipedia.org/wiki/Galois/Counter_Mode\">Galois/Counter Mode</a>. Unfortunately, this very strong cipher is only part of <a href=\"https://en.wikipedia.org/wiki/Transport_Layer_Security#TLS_1.2\">TLSv1.2</a> which is not widely supported by web browsers. CloudFlare has it configured ready for the day when it is supported because it is very secure.</p>\n<h3 id=\"doubletrouble\">Double Trouble</h3>\n<p>Since TLSv1.2 isn't widely supported, the two popular ciphers used to secure the data sent across a TLS connection are <a href=\"https://en.wikipedia.org/wiki/RC4\">RC4</a> and AES (in <a href=\"https://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Cipher-block_chaining_.28CBC.29\">CBC mode</a>). Both have flaws and both have attacks that could be used against them. Very recently a <a href=\"http://www.isg.rhul.ac.uk/tls/\">new  attack</a> against RC4 was announced that could allow an attacker to recover parts of the original HTTP message (such as a cookie value) when RC4 is used.</p>\n<p>The CBC mode ciphers have attacks called <a href=\"http://www.isg.rhul.ac.uk/tls/Lucky13.html\">Lucky-13</a> which we've <a href=\"http://blog.cloudflare.com/new-ssl-vulnerabilities-cloudflare-users-prot\">discussed before</a> and <a href=\"https://en.wikipedia.org/wiki/BEAST_attack#BEAST_attack\">BEAST</a> which we've also <a href=\"http://blog.cloudflare.com/taming-beast-better-ssl-now-available-across\">talked about</a>.</p>\n<p>Because BEAST and Lucky-13 both attack CBC-based ciphers, CloudFlare decided in the past to prioritize the use of the other cipher:</p>\n<p>RC4. Unfortunately, the latest attack goes after RC4. So now both the popular ciphers have published flaws. The sooner browser vendors move to TLSv1.2 and away from RC4 and AES in CBC mode the better.</p>\n<p><img alt=\"Vernam\" src=\"http://blog.cloudflare.com/content/images/vernam.png\" title=\"Vernam\"><noscript><img alt=\"Vernam\" src=\"http://blog.cloudflare.com/content/images/vernam.png\" title=\"Vernam\"></noscript></p>\n<h3 id=\"rc4keystreambiases\">RC4 Keystream Biases</h3>\n<p>The new RC4 attack is based on biases in the RC4 keystream. To understand how the attack works it's necessary to understand a little of how RC4 works.</p>\n<p>RC4 operates by generating a pseudorandom stream of bytes of data called the keystream. These bytes are XORed with the information to be encrypted and the result is transmitted. For example, suppose that the word SECRET is to be sent using RC4.</p>\n<p>In ASCII, SECRET is the following six hexadecimal numbers:</p>\n<pre>S  E  C  R  E  T\n83 69 67 82 69 84\n</pre>\n<p>Suppose that RC4 generates the following six bytes in the keystream:</p>\n<pre>85 B8 D6 6B C7 51\n</pre>\n<p>To encrypt SECRET the keystream is XORed with the word SECRET byte by byte and the result, 06 D1 B1 E9 AE D5, is transmitted.</p>\n<pre>            S  E  C  R  E  T\nMessage:    83 69 67 82 69 84\nKeystream:  85 B8 D6 6B C7 51\nXOR         -----------------\nCiphertext: 06 D1 B1 E9 AE D5\n</pre>\n<p>(This XOR technique dates all the way back to 1919 with the <a href=\"https://en.wikipedia.org/wiki/Vernam_cipher\">Vernam Cipher</a>; read the Wikipedia article for a basic introduction to the use of XOR in ciphers. RC4 itself, of course, is much more recent.)</p>\n<p>The exact pseudorandom sequence that RC4 generates depends on the key used. As long as both client and server have the same key they can generate the same keystream and perform the same set of XOR operations to encrypt and decrypt data. That's because XOR is its own inverse: if you do Z = X XOR Y and then do Z XOR Y you get back to X.</p>\n<p>So, when 06 D1 B1 E9 AE D5 is received on the other side it performs the same XOR operation with the same keystream sequence to recover the original message.</p>\n<pre>Ciphertext: 06 D1 B1 E9 AE D5\nKeystream:  85 B8 D6 6B C7 51\nXOR         -----------------\nMessage:    83 69 67 82 69 84\n            S  E  C  R  E  T\n</pre>\n<p>But it's vital that the keystream be random so that an eavesdropper can't obtain any useful information from the ciphertext. If the random stream contained biases (such as some numbers that came up more often than others) it would be possible to use probability to predict what the original, unencrypted message was.</p>\n<p>That's what the latest RC4 attack shows. Specifically, there are biases in the first 256 bytes of keystream generated by RC4. Those first bytes are likely to be used to encrypt the start of an HTTP request and may include sensitive information such as a cookie used for logging into a web site.</p>\n<p>The attack works by causing the same request to occur over and over again (for example, using a piece of JavaScript to contact the same web site repeatedly). On each connection the same request (with the same cookie) will be encrypted with RC4. A different key is used each time which results in a different keystream, but over many encryptions any biases in the keystream will show up as certain numbers appearing in the ciphertext more or less often than others (because some numbers appeared more often than others in the keystream).</p>\n<p>The numbers that make up the RC4 keystream should be totally random. So if the same message, such as the word SECRET above, is encrypted over and over again with RC4 the resulting ciphertexts should be totally random: the probability of each number between 00 and FF appearing should be the same. If you encrypted SECRET over and over again with RC4 and counted the number of occurrences of 00 to FF in the ciphertext they should be roughly equal. Just as if you roll a fair die over and over again and count how many times the numbers 1 to 6 appear they should be equal.</p>\n<p>Unfortunately, the researchers have discovered that the first 256 bytes of the keystream are not completely random and over time a pattern emerges.</p>\n<p>For example, here's their chart showing the probability of each number appearing as the first number produced in the RC4 keystream. This should be completely flat with each number being equally probable. It's not. That means that if the same message were encrypted over and over again it would be possible to determine (with a certain probability) what the original first character was.</p>\n<p><img alt=\"RC4 bias\" src=\"http://blog.cloudflare.com/content/images/rc4bias.png\" title=\"RC4 bias\"><noscript><img alt=\"RC4 bias\" src=\"http://blog.cloudflare.com/content/images/rc4bias.png\" title=\"RC4 bias\"></noscript></p>\n<p>With many repeated tests, just as rolling a loaded die many times would show which numbers come up most often, the attack can see which ciphertext numbers come up most frequently and match that pattern to the pattern in the keystream. From that a simple XOR can reveal the original message.</p>\n<p>And the same authors describe another attack based on biases in adjacent numbers in the keystream that works at any point, not just in the first 256 bytes.</p>\n<p>So both of the widely supported ciphers have faults. These faults are exploitable by attackers under the right conditions; they are not theoretical attacks, but they are hard to pull off. Nevertheless, CloudFlare will be happy when we can move away from RC4 and CBC-based ciphers and put Lucky-13, BEAST and others behind us.</p>\n<h3 id=\"protectinginternalsystems\">Protecting Internal Systems</h3>\n<p>While CloudFlare has to wait for browser makers to implement the latest and safest cryptography, we don't have to wait for any of our internal systems.</p>\n<p>CloudFlare uses TLS internally extensively (and between CloudFlare software components like <a href=\"https://www.cloudflare.com/railgun\">Railgun</a>) and has recently done an audit of all uses of TLS to ensure that the best ciphers are in use. And so for situations where CloudFlare controls both the client and server we are deprecating use of TLSv1.1 and switching to TLSv1.2 with ECDHE-RSA-AES128-GCM-SHA256 as the current cipher of choice.</p>\n<p>As the world of cryptography and TLS changes CloudFlare will keep updating its systems to keep them at the forefront of the available research.</p>\n<!--kg-card-end: markdown-->",
		"id": "5d16453b41acde0011a95380",
		"meta_description": null,
		"meta_title": null,
		"og_description": null,
		"og_image": null,
		"og_title": null,
		"primary_author": {
			"id": "5d1644b141acde0011a94f2c",
			"name": "John Graham-Cumming",
			"slug": "john-graham-cumming",
			"profile_image": "http://blog.cloudflare.com/content/images/2017/03/url-2.jpg",
			"cover_image": "http://blog.cloudflare.com/content/images/2023/05/Twitter-Header-@cloudflare-US.png",
			"bio": null,
			"website": null,
			"location": "Lisbon, Portugal",
			"facebook": null,
			"twitter": null,
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/john-graham-cumming/"
		},
		"primary_tag": {
			"id": "5d16450341acde0011a95147",
			"name": "TLS",
			"slug": "tls",
			"description": null,
			"feature_image": null,
			"visibility": "public",
			"meta_title": null,
			"meta_description": null,
			"og_image": null,
			"og_title": null,
			"og_description": null,
			"twitter_image": null,
			"twitter_title": null,
			"twitter_description": null,
			"codeinjection_head": null,
			"codeinjection_foot": null,
			"canonical_url": null,
			"accent_color": null,
			"url": "http://blog.cloudflare.com/tag/tls/"
		},
		"published_at": "2013-07-12T00:02:00.000+01:00",
		"reading_time": 10,
		"slug": "staying-on-top-of-tls-attacks",
		"tags": [
			{
				"id": "5d16450341acde0011a95147",
				"name": "TLS",
				"slug": "tls",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/tls/"
			},
			{
				"id": "5d16450341acde0011a95148",
				"name": "RC4",
				"slug": "rc4",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/rc4/"
			},
			{
				"id": "5d16450341acde0011a95169",
				"name": "Attacks",
				"slug": "attacks",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/attacks/"
			},
			{
				"id": "5d16450341acde0011a95265",
				"name": "Security",
				"slug": "security",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Security.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Security",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Security'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/security/"
			}
		],
		"title": "Staying on top of TLS attacks",
		"twitter_description": null,
		"twitter_image": null,
		"twitter_title": null,
		"updated_at": "2018-08-27T22:08:56.000+01:00",
		"url": "http://blog.cloudflare.com/staying-on-top-of-tls-attacks/",
		"uuid": "8d73fb55-379d-480e-a5d2-c5c4b6583173",
		"visibility": "public"
	}
}