{
	"locale": "en-us",
	"post": {
		"id": "6041fb4bb6994503f310a448",
		"uuid": "febf5269-3d09-4137-82ee-5da93d09ff39",
		"title": "The benefits of serving stale DNS entries when using Consul",
		"slug": "the-benefits-of-serving-stale-dns-entries-when-using-consul",
		"html": "<h2 id=\"introduction\">Introduction</h2><p>We use <a href=\"https://www.consul.io/\">Consul</a> for service discovery, and we’ve deployed a cluster that spans several of our data centers. This cluster exposes HTTP and DNS interfaces so that clients can query the Consul catalog and search for a particular service and the majority of the clients use DNS. We were aware from the start that the DNS query latencies were not great from certain parts of the world that were furthest away from these data centers. This, together with the fact that we use <a href=\"https://en.wikipedia.org/wiki/DNS_over_TLS\">DNS over TLS</a>, results in some long latencies. The TTL of these names being low makes it even more impractical when resolving these names in the hot path.</p><p>The usual way to solve these issues is by caching values so that at least subsequent requests are resolved quickly, and this is exactly what our resolver of choice, <a href=\"https://www.nlnetlabs.nl/projects/unbound/about/\">Unbound</a>, is configured to do. The problem remains when the cache expires. When it expires, the next client will have to wait while Unbound resolves the name using the network. To have a low recovery time in case some service needs to failover and clients need to use another address we use a small TTL (30 seconds) in our records and as such cache expirations happen often.</p><p>There are at least two strategies to deal with this: prefetching and stale cache.</p><h2 id=\"prefetching\">Prefetching</h2><p>When prefetching is turned on, the server tries to refresh DNS records in the background before they expire. In practice, the way this works is: if an entry is served from cache and the TTL is less than 10% of the lifetime of the records, the server responds to the client, but in the background, it dispatches a job to refresh the record across the network. If it all goes as planned, the entry is refreshed in the cache before the TTL expires, and no client is ever left waiting for the network resolution.</p><p>This works very well for records that are accessed frequently, but poses issues in two situations: records that are accessed infrequently and records that have a small TTL. In both cases it is unlikely that a prefetch would be triggered, and so the cache expires and the next client will have to wait for the network resolution.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2021/03/image1-6.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>In our case, the records have a 30 second TTL, so frequently no requests come in during the yellow \"prefetch\" stage, which bumps the records out of the cache and causes the next client to have to wait for the slow network resolution. Prefetching was already turned on in our Unbound configuration but this still was not enough for our use case.</p><h2 id=\"stale-cache\">Stale cache</h2><p>Another option is to serve stale records from the cache while we dispatch a job to refresh the record in the background without keeping the client waiting for the response. This would provide benefits in two different scenarios:</p><ul><li>General high latency - even after the TTL expires subsequent attempts will be returned from cache if the response takes too long to arrive.</li><li>Consul/network blips - if for some reason Consul is unavailable/unreachable, there is still a period of time that expired responses can be used instead of failing resolution.</li></ul><p>The first case is exactly our current scenario.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2021/03/image7.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>Being able to serve stale entries from the cache for a period after the TTL expires affords us some time in which we can return a result to a client either immediately or after some small amount of time has passed. The latter is the behaviour that we are looking for which also makes us compliant with <a href=\"https://www.rfc-editor.org/rfc/rfc8767\">RFC 8767</a>, “Serving Stale Data to Improve DNS Resiliency”, published March 2020.</p><h3 id=\"previous-dealings-with-unbound-s-stale-cache\">Previous dealings with Unbound's stale cache</h3><p>Stale cache had been tried before at Cloudflare in 2017, and at that time, we encountered two problems:</p><!--kg-card-begin: markdown--><p><strong>1. Unbound could serve stale records from cache indefinitely</strong><br>\nWe could solve this through configuration that did not exist in 2017, but we had to test it.</p>\n<p><strong>2. Unbound serves negative/incomplete information from the expired cache</strong><br>\nIt was reported that Unbound would serve incomplete chains of responses to clients (for example, a CNAME record with no corresponding A/AAAA record).</p>\n<p>This turned out to be unconfirmed but it is a failure mode that nevertheless we wanted to make sure Unbound could handle since it would be possible for parts of the response chain to be purged from the stale cache before others.</p>\n<!--kg-card-end: markdown--><h3 id=\"test-configuration\">Test Configuration</h3><p>As mentioned before we would need to test a current version of Unbound, come up with an up-to-date stale cache configuration, and test the scenarios that posed problems when we last tried to use it plus any others that we came up with. The Unbound version used for tests was 1.13.0 and the stale cache was configured thus:</p><ul><li><em>serve-expired: yes</em> - enable the stale cache.</li><li><em>serve-expired-ttl: 3600</em> - this limits the serving of expired resources to one hour after they expire and no response from upstream was obtained.</li><li><em>serve-expired-client-timeout: 500</em> - serve from stale cache only when upstream takes longer than 500ms to respond.</li></ul><p>The option <em>serve-expired-ttl-reset</em> was considered, which would cause the records to never expire, even with the upstream down indefinitely as long as there are regular requests for them, but it was deemed too dangerous since it could potentially last forever and applies to all entries.</p><p>Example consul zone: <strong>service1.sd</strong>.</p><p>While resolving this name we end up with:</p><!--kg-card-begin: markdown--><pre><code>;; ANSWER SECTION:\nservice1.sd. 120 IN CNAME service1.query.consul.\nservice1.query.consul. 30 IN A 192.0.2.1\n \n;; Query time: 230 msec\n</code></pre>\n<!--kg-card-end: markdown--><p>If we dump Unbound's cache (unbound-control dump_cache), we can find the entries there:</p><!--kg-card-begin: markdown--><pre><code>service1.query.consul. 23  IN  A   192.0.2.1\nservice1.sd.   113 IN  CNAME   service1.query.consul.\n</code></pre>\n<!--kg-card-end: markdown--><p>If we wait for the TTL of these entries to expire and dump the cache again, we notice that they don't show up anymore:</p><!--kg-card-begin: markdown--><pre><code>➜ unbound-control dump_cache | grep -e query.consul -e service1\n➜\n</code></pre>\n<!--kg-card-end: markdown--><p>But if we block access to the Consul resolver, we can see that still the entries are returned:</p><!--kg-card-begin: markdown--><pre><code>;; ANSWER SECTION:\nservice1.sd. 119 IN CNAME service1.query.consul.\nservice1.query.consul. 30 IN A 192.0.2.1\n \n;; Query time: 503 msec\n</code></pre>\n<!--kg-card-end: markdown--><p>Notice that Unbound waited 500ms before returning a response, which was the value we configured. This also shows that the dump cache method does not return expired entries even though they are present. So far so good.</p><h5 id=\"test-unbound-could-serve-stale-records-from-cache-indefinitely\"><strong>Test - Unbound could serve stale records from cache indefinitely</strong></h5><p>After 3600 seconds pass we again try to resolve the same name:</p><!--kg-card-begin: markdown--><pre><code>➜ dig  service1.sd. @127.0.0.1\n \n; &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; service1.sd. @127.0.0.1\n;; global options: +cmd\n;; connection timed out; no servers could be reached\n</code></pre>\n<!--kg-card-end: markdown--><p>Dig gave up on waiting for a response from Unbound. So we see that after the configured time, Unbound will indeed stop serving the stale record, even if it has been requested recently. This is due to <em>serve-expired-ttl: 3600</em> and <em>serve-expired-ttl-reset </em>being set to \"no\" by default. These options were not available when we first tried Unbound’s stale cache.</p><h5 id=\"test-unbound-serves-negative-incomplete-information-from-the-expired-cache\"><strong>Test - Unbound serves negative/incomplete information from the expired cache</strong></h5><p>Since the record we are resolving includes a CNAME and an A record with different TTLs, we will try to see if Unbound can be made to return an incomplete chain (CNAME with no A record).</p><p>We start by having both entries in cache, and block connections to the Consul resolver. We then remove from the cache the A entry:</p><!--kg-card-begin: markdown--><pre><code>$ /usr/sbin/unbound-control flush_type service1.query.consul. A\nok\n</code></pre>\n<!--kg-card-end: markdown--><p>Now we attempt to query:</p><!--kg-card-begin: markdown--><pre><code>$ dig  service1.sd. @127.0.0.1\n...\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: SERVFAIL, id: 9532\n;; Query time: 22 msec\n</code></pre>\n<!--kg-card-end: markdown--><p>Nothing was returned which is the result we were expecting.</p><p>Another scenario we wanted to test was to see if when <em>serve-expired-ttl</em> + A's TTL had passed, the CNAME would be returned on its own.</p><!--kg-card-begin: markdown--><pre><code>➜ dig  service1.sd. @127.0.0.1\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 48918\n;; ANSWER SECTION:\nservice1.sd. 48 IN CNAME service1.query.consul.\nservice1.query.consul. 30 IN A 192.0.2.1\n;; Query time: 430 msec\n;; WHEN: Thu Dec 31 17:07:55 WET 2020\n \n➜ dig  service1.sd. @127.0.0.1\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: SERVFAIL, id: 42432\n;; Query time: 509 msec\n;; WHEN: Thu Dec 31 17:07:56 WET 2020\n</code></pre>\n<!--kg-card-end: markdown--><p>We lowered <em>serve-expired-ttl</em> to 40 to help testing the issue and we were able to see that as soon as the A entry was deemed not serve-able, the CNAME was also not returned, which is the behaviour that we want.</p><p>One last thing that we wanted to test was if the cache was really refreshed in the background while the stale entry was returned. <a href=\"https://developer.apple.com/download/more/?q=Additional%20Tools\">Network Link Conditioner</a> was used to simulate high latency:</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2021/03/image16.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><!--kg-card-begin: markdown--><pre><code>➜ dig service1.service.consul @CONSUL_ADDRESS\n \n;; ANSWER SECTION:\nservice1.service.consul. 60 IN A 192.0.2.10\nservice1.service.consul. 60 IN A 192.0.2.12\n \n;; Query time: 3053 msec\n</code></pre>\n<!--kg-card-end: markdown--><p>We can see that the artificial latency is working. We can now test if changes to the address are actually reflected on the consul record even though a stale record is served at first:</p><!--kg-card-begin: markdown--><pre><code>➜ dig service2.service.consul @127.0.0.1\n...\n;; ANSWER SECTION:\nservice2.service.consul. 30 IN A 192.0.2.100\n \n;; Query time: 501 msec\n;; SERVER: 127.0.0.1#53(127.0.0.1)\n;; WHEN: Sat Jan 02 13:00:36 WET 2021\n;; MSG SIZE  rcvd: 89\n \n➜ dig service2.service.consul @127.0.0.1\n...\n;; ANSWER SECTION:\nservice2.service.consul. 58 IN A 192.0.2.200\n \n;; Query time: 0 msec\n;; SERVER: 127.0.0.1#53(127.0.0.1)\n;; WHEN: Sat Jan 02 13:00:39 WET 2021\n;; MSG SIZE  rcvd: 89\n</code></pre>\n<!--kg-card-end: markdown--><p>We can see that the first attempt was served from the stale cache, since the address was already changed on Consul to <em>192.0.2.200</em>, and the query time was 500ms. The next attempt was served from the fresh cache, hence the 0ms response time, and so we know that the cache was refreshed in the background.</p><h4 id=\"test-notes\"><strong>Test notes</strong></h4><p>All the test scenarios completed successfully, even though we did find an <a href=\"https://github.com/NLnetLabs/unbound/issues/394\">issue</a> that has since been fixed upstream. We realised that the prefetching logic blocked the cache while it attempted to refresh the entry, which prevented stale entries from being served if the upstream was unresponsive. This fix is included in version 1.13.1.</p><h2 id=\"deployment-status\">Deployment status</h2><p>This change has already been deployed to all of our data centers, and while the change addressed our original use case, there were some interesting side-effects as can be seen from the graphs below.</p><h3 id=\"decreased-in-flight-requests\">Decreased in-flight requests</h3><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2021/03/image2-2.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>The graph above is from the Toronto data center which received the change at approximately 14:00 UTC. We can observe an attenuated curve, which indicates that spikes in the number of in-flight requests were probably caused by slow/unresponsive upstreams which are now served a stale response after a short while.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2021/03/image5-2.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>The same graph from the Perth data center, which received the change on a later day.</p><h3 id=\"decrease-in-p99-latency\">Decrease in P99 latency</h3><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2021/03/image15.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>The graph above is from the Lisbon data center<em>,</em> which received the change at approximately 12:37 UTC. We can see that the long tail (P99) of request latencies decreases dramatically as we are now able to serve a response to clients in more situations without having them wait for a slow upstream network resolution that might not even succeed.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2021/03/image10-2.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>The effect is even more dramatic on the Paris data center.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2021/03/image8-2.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>The decrease in P99 latencies directly correlates to the start of serving stale entries, even though there are not many of them. In the graph above we can observe the number of stale records served per second for the same data center, using the last 3 minutes of datapoints.</p><h3 id=\"decreased-general-error-rate\">Decreased general error rate</h3><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2021/03/image12.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>This graph is from our Perth data center, which received the change on February 8. This is explained by now being able to serve some requests to unresponsive/slow upstreams, which previously would have resulted in a failed request.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2021/03/image19.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>Graph from the Vientiane data center, which received the change on February 1.</p><h3 id=\"less-jitter-on-the-rate-of-load-balancer-queries-by-rrdns\">Less jitter on the rate of load balancer queries by RRDNS</h3><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2021/03/image11.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>Another graph from the Perth data center, which received the change on February 8. An explanation for this change is that resolvers usually retry after a small amount of time when they don't get any response, and so by returning a stale response instead of keeping the client waiting (and retrying), we prevent a surge of new queries for expired and slow to resolve records.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2021/03/image18.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>A graph from the Doha data center, which received the change on February 1.</p><h3 id=\"miscellaneous-unbound-metrics\">Miscellaneous Unbound metrics</h3><p>This change also had a positive effect on several Unbound-specific metrics, below are several graphs from the Perth data center that received the change on February 8.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2021/03/image6-2.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2021/03/image13.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2021/03/image14.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2021/03/image4-4.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2021/03/image9-1.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"http://blog.cloudflare.com/content/images/2021/03/image17.png\" class=\"kg-image\" alt loading=\"lazy\"><figcaption>How it started vs how it's going</figcaption></figure><h3 id=\"further-improvements\">Further improvements</h3><p>In the future, we would like to tweak the <em>serve-expired-client-timeout</em> value, which is currently set to 500ms. It was chosen conservatively, at a time when we were cautiously experimenting with a feature that had been problematic in the past, and our gut feeling is that it can be at least halved without causing issues to further improve the client’s experience. There is also the possibility of using different values per data center, for example picking up the P90 resolve latency value which differs per datacenter, and this is something that we want to explore further.</p><h2 id=\"summary\">Summary</h2><p>We are enabling Unbound to return expired entries from the cache whenever an upstream takes longer than 500ms to respond, while refreshing the cache in the background, unless 3600 seconds have elapsed from the record's original TTL.</p>",
		"comment_id": "6041fb4bb6994503f310a448",
		"feature_image": "http://blog.cloudflare.com/content/images/2021/03/image15-update.png",
		"featured": false,
		"visibility": "public",
		"created_at": "2021-03-05T09:35:07.000+00:00",
		"updated_at": "2021-03-08T14:00:01.000+00:00",
		"published_at": "2021-03-08T14:00:00.000+00:00",
		"custom_excerpt": "We use Consul for service discovery, and we’ve deployed a cluster that spans several of our data centers. We were aware from the start that the DNS query latencies were not great from certain parts of the world that were furthest away from these data centers.",
		"codeinjection_head": null,
		"codeinjection_foot": null,
		"custom_template": null,
		"canonical_url": null,
		"tags": [
			{
				"id": "5d16450341acde0011a951d6",
				"name": "DNS",
				"slug": "dns",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/dns/"
			},
			{
				"id": "5d16450341acde0011a95157",
				"name": "Cache",
				"slug": "cache",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/cache/"
			}
		],
		"authors": [
			{
				"id": "6034f17687ee1b01ba88e1c3",
				"name": "André Cruz",
				"slug": "andre-cruz",
				"profile_image": "http://blog.cloudflare.com/content/images/2021/02/andre2.jpg",
				"cover_image": null,
				"bio": null,
				"website": null,
				"location": "Lisbon, Portugal",
				"facebook": null,
				"twitter": "@edevil",
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/andre-cruz/"
			}
		],
		"primary_author": {
			"id": "6034f17687ee1b01ba88e1c3",
			"name": "André Cruz",
			"slug": "andre-cruz",
			"profile_image": "http://blog.cloudflare.com/content/images/2021/02/andre2.jpg",
			"cover_image": null,
			"bio": null,
			"website": null,
			"location": "Lisbon, Portugal",
			"facebook": null,
			"twitter": "@edevil",
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/andre-cruz/"
		},
		"primary_tag": {
			"id": "5d16450341acde0011a951d6",
			"name": "DNS",
			"slug": "dns",
			"description": null,
			"feature_image": null,
			"visibility": "public",
			"meta_title": null,
			"meta_description": null,
			"og_image": null,
			"og_title": null,
			"og_description": null,
			"twitter_image": null,
			"twitter_title": null,
			"twitter_description": null,
			"codeinjection_head": null,
			"codeinjection_foot": null,
			"canonical_url": null,
			"accent_color": null,
			"url": "http://blog.cloudflare.com/tag/dns/"
		},
		"url": "http://blog.cloudflare.com/the-benefits-of-serving-stale-dns-entries-when-using-consul/",
		"excerpt": "We use Consul for service discovery, and we’ve deployed a cluster that spans several of our data centers. We were aware from the start that the DNS query latencies were not great from certain parts of the world that were furthest away from these data centers.",
		"reading_time": 10,
		"access": true,
		"comments": false,
		"og_image": "http://blog.cloudflare.com/content/images/2021/03/image15-update3-1.png",
		"og_title": null,
		"og_description": null,
		"twitter_image": "http://blog.cloudflare.com/content/images/2021/03/image15-update3.png",
		"twitter_title": null,
		"twitter_description": null,
		"meta_title": null,
		"meta_description": "We use Consul for service discovery, and we’ve deployed a cluster that spans several of our data centers. We were aware from the start that the DNS query latencies were not great from certain parts of the world that were furthest away from these data centers.",
		"email_subject": null,
		"frontmatter": null,
		"feature_image_alt": null,
		"feature_image_caption": null
	}
}