{
	"locale": "en-us",
	"post": {
		"access": true,
		"authors": [
			{
				"id": "6139d5723a467902a7476f3b",
				"name": "Greg Brimble",
				"slug": "greg-brimble",
				"profile_image": "http://blog.cloudflare.com/content/images/2023/05/Profile-Picture--Square-.jpeg",
				"cover_image": null,
				"bio": null,
				"website": null,
				"location": "London, UK",
				"facebook": null,
				"twitter": "@GregBrimble",
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/greg-brimble/"
			}
		],
		"canonical_url": null,
		"codeinjection_foot": null,
		"codeinjection_head": null,
		"comment_id": "6351629a63069f000aeec9f4",
		"comments": false,
		"created_at": "2022-10-20T16:00:42.000+01:00",
		"custom_excerpt": "You can now deploy SSR Next.js applications to the Cloudflare Pages platform ⚡️",
		"custom_template": null,
		"email_subject": null,
		"excerpt": "You can now deploy SSR Next.js applications to the Cloudflare Pages platform ⚡️",
		"feature_image": "http://blog.cloudflare.com/content/images/2022/10/image1-16.png",
		"feature_image_alt": null,
		"feature_image_caption": null,
		"featured": false,
		"frontmatter": null,
		"html": "<figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2022/10/image1-17.png\" class=\"kg-image\" alt=\"And here's another one: the Next.js Edge Runtime becomes the fourth full-stack framework supported by Cloudflare Pages\" loading=\"lazy\"></figure><p>You can now deploy <a href=\"https://nextjs.org/\">Next.js</a> applications which opt in to the <a href=\"https://nextjs.org/docs/api-reference/edge-runtime\">Edge Runtime</a> on Cloudflare Pages. Next.js is the fourth full-stack web framework that the Pages platform officially supports, and it is <a href=\"https://almanac.httparchive.org/en/2022/jamstack\">one of the most popular in the 'Jamstack-y' space</a>.</p><p>Cloudflare Pages started its journey as a platform for static websites, but with <a href=\"http://blog.cloudflare.com/cloudflare-pages-goes-full-stack/\">last year's addition of Pages Functions</a> powered by Cloudflare Workers, the platform has progressed to support an even more diverse range of use cases. Pages Functions allows developers to sprinkle in small pieces of server-side code with its simple file-based routing, or, as we've seen with the adoption from other frameworks (namely <a href=\"https://developers.cloudflare.com/pages/framework-guides/deploy-a-svelte-site/\">SvelteKit</a>, <a href=\"https://developers.cloudflare.com/pages/framework-guides/remix/\">Remix</a> and <a href=\"https://developers.cloudflare.com/pages/framework-guides/deploy-a-qwik-site/\">Qwik</a>), Pages Functions can be used to power your entire full-stack app. The folks behind <a href=\"http://blog.cloudflare.com/remix-on-cloudflare-pages/\">Remix previously talked about the advantages of adopting open standards</a>, and we've seen this again with Next.js' Edge Runtime.</p><h2 id=\"next-js-edge-runtime\">Next.js' Edge Runtime</h2><p><a href=\"https://nextjs.org/docs/api-reference/edge-runtime\">Next.js' Edge Runtime</a> is an experimental mode that developers can opt into which results in a different type of application being built. Previously, Next.js applications which relied on server-side rendering (SSR) functionality had to be deployed on a Node.js server. Running a Node.js server has significant overhead, and our Cloudflare Workers platform was fundamentally built on a different technology, <a href=\"https://developers.cloudflare.com/workers/learning/how-workers-works/\">V8</a>.</p><p>However, when Next.js <a href=\"https://vercel.com/blog/introducing-the-edge-runtime\">introduced the Edge Runtime mode</a> in June 2022, we saw the opportunity to bring this widely used framework to our platform. We're very excited that this is being developed in coordination with the <a href=\"http://blog.cloudflare.com/introducing-the-wintercg/\">WinterCG</a> standards to ensure interoperability across the various web platforms and to ensure that developers have the choice on where they run their business, without fearing any significant vendor lock-in.</p><p>It’s important to note that some existing Next.js apps built for Node.js won't immediately work on Pages. If your application relies on any Node.js built-ins or long-running processes, then Pages may not support your app with today’s announcement as we're working on <a href=\"http://blog.cloudflare.com/node-js-support-cloudflare-workers/\">expanding our support for Node.js</a>.</p><p>However, we see the migration to the Edge Runtime as an effort that's worthy of investment, to run your applications, well, on the edge! These applications are cheaper to run, respond faster to users and have the latest features that full-stack frameworks offer. We're seeing increased interest in third-party npm packages and libraries that support standardized runtimes, and in combination with Cloudflare's data products (e.g. <a href=\"https://www.cloudflare.com/products/workers-kv/\">KV</a>, <a href=\"https://www.cloudflare.com/products/durable-objects/\">Durable Objects</a> and <a href=\"http://blog.cloudflare.com/whats-new-with-d1/\">D1</a>), we're confident that the edge is going to be the first place that people will want to deploy applications going forward.</p><h2 id=\"deploy-your-next-js-app-to-cloudflare-pages\">Deploy your Next.js app to Cloudflare Pages</h2><p>Let’s walk through an example, creating a new Next.js application that opts into this Edge Runtime and deploying it to Cloudflare Pages.</p><!--kg-card-begin: markdown--><pre><code class=\"language-sh\">npx create-next-app@latest my-app\n</code></pre>\n<!--kg-card-end: markdown--><p>This will create a new Next.js app in the <code>my-app</code> folder. The default template comes with a traditional Node.js powered API route, so let's update that to instead use the Edge Runtime.</p><!--kg-card-begin: markdown--><pre><code class=\"language-js\">// pages/api/hello.js\n\n// Next.js Edge API Routes: https://nextjs.org/docs/api-routes/edge-api-routes\n\nexport const config = {\n  runtime: 'experimental-edge',\n}\n\nexport default async function (req) {\n  return new Response(\n    JSON.stringify({ name: 'John Doe' }),\n    {\n      status: 200,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }\n  )\n}\n</code></pre>\n<!--kg-card-end: markdown--><p>Thanks to the Edge Runtime adopting the Web API standards, if you've ever written a Cloudflare Worker before, this might look familiar.</p><p>Next, we can update the global <code>next.config.js</code> configuration file to use the Edge Runtime. This will enable us to use <a href=\"https://nextjs.org/docs/api-reference/data-fetching/get-server-side-props\">the <code>getServerSideProps()</code> API</a> and server-side render (SSR) our webpages.</p><!--kg-card-begin: markdown--><pre><code class=\"language-js\">// next.config.js\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  experimental: {\n    runtime: 'experimental-edge',\n  },\n  reactStrictMode: true,\n  swcMinify: true,\n}\nmodule.exports = nextConfig\n</code></pre>\n<!--kg-card-end: markdown--><p>Finally, we're ready to deploy the project. Publish it to a GitHub or GitLab repository, create a new Pages project, and select \"Next.js\" from the list of framework presets. This will configure your project to use <a href=\"https://github.com/cloudflare/next-on-pages\">the <code>@cloudflare/next-on-pages</code> CLI</a> which builds and transforms your project into something we can deploy on Pages. Navigate to the project settings and add an environment variable, <code>NODE_VERSION</code> set to <code>14</code> or greater, as well as the following compatibility flags: <code>streams_enable_constructors</code> and <code>transformstream_enable_standard_constructor</code>. You should now be able to deploy your Next.js application. If you want to read more, you can find a detailed guide in <a href=\"https://developers.cloudflare.com/pages/framework-guides/deploy-a-nextjs-site/\">our documentation</a>.</p><h2 id=\"how-it-runs-on-cloudflare-pages\">How it runs on Cloudflare Pages</h2><h3 id=\"compatibility-dates-and-compatibility-flags\">Compatibility Dates and Compatibility Flags</h3><p>Cloudflare Workers has solved the versioning problem by <a href=\"http://blog.cloudflare.com/backwards-compatibility-in-cloudflare-workers/\">introducing compatibility dates and compatibility flags</a>. While it has been in beta, Pages Functions has always defaulted to using the oldest version of the Workers runtime. We've now introduced controls to allow developers to set these dates and flags on their Pages projects environments.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2022/10/image2-12.png\" class=\"kg-image\" alt=\"A screenshot of the Pages project settings page in the Cloudflare dashboard, showing the new compatibility date controls. The currently selected date is shown, alongside the list of other available dates.\" loading=\"lazy\"></figure><p>By keeping this date recent, you are able to opt in to the latest features and bug fixes that the Cloudflare Workers runtime offers, but equally, you're completely free to keep the date on whatever works for you today, and we'll continue to support the functionality at that point in time, forever. We also allow you to set these dates for your production and preview environments independently which will let you test these changes out safely in a preview deployment before rolling it out in production.</p><p>We've been working on adding more support for the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Streams_API\">Streams API</a> to the Workers Runtime, and some of this functionality is gated behind the flags we added to the project earlier. <a href=\"https://developers.cloudflare.com/workers/platform/compatibility-dates/#change-history\">These flags are currently scheduled to graduate</a> and become on-by-default on a future compatibility date, 2022-11-30.</p><!--kg-card-begin: markdown--><h3 id=\"thecloudflarenextonpagescli\">The <code>@cloudflare/next-on-pages</code> CLI</h3>\n<!--kg-card-end: markdown--><p>Vercel introduced the <a href=\"https://vercel.com/blog/build-output-api\">Build Output API</a> in July 2022 as a \"zero configuration\" directory structure which the Vercel platform inherently understands and can deploy. We've decided to hook into this same API as a way to build Next.js projects consistently that we can understand and deploy.</p><p>The <a href=\"https://github.com/cloudflare/next-on-pages\">open-source </a><code><a href=\"https://github.com/cloudflare/next-on-pages\">@cloudflare/next-on-pages</a></code><a href=\"https://github.com/cloudflare/next-on-pages\"> CLI</a> runs <code>npx vercel build</code> behind the scenes, which produces a <code>.vercel/output</code> directory. This directory conforms to the <a href=\"https://vercel.com/docs/build-output-api/v3\">Build Output API</a>, and of particular interest, contains a <code>config.json</code>, <code>static</code> folder and folder of <code>functions</code>. The <code>@cloudflare/next-on-pages</code> CLI then parses this <code>config.json</code> manifest, and combines all the <code>functions</code> into a single <a href=\"https://developers.cloudflare.com/pages/platform/functions/#advanced-mode\">Pages Functions 'advanced mode' <code>_worker.js</code></a>.</p><p>At this point, the build is finished. Pages then automatically picks up this <code>_worker.js</code> and deploys it with Pages Functions atop the <code>static</code> directory.</p><p>Although currently just an implementation detail, we opted to use this Build Output API for a number of reasons. We’re also exploring other similar functionality natively on the Pages platform. We already have one \"magical\" directory, the <code>functions</code> directory which we use for the file-based routing of Pages Functions. It's possible that we offer other fixed directory structures which would reduce the need for configuration of any projects using frameworks which adopt the API. Let us know <a href=\"https://discord.com/channels/595317990191398933/910978223968518144\">in Discord</a> if you have any thoughts or preferences on what you would like to see!</p><p>Additionally, if more full-stack frameworks do adopt Vercel's Build Output API, we may have automatic support for them running on Pages with this CLI. We've only been experimenting with Next.js here so far (and SvelteKit, Remix and Qwik all have their own way of building their projects on Pages at the moment), but it's possible that in the future we may converge on a standard approach which could be shared between frameworks and platforms. We're excited to see how this might transpire. Again, <a href=\"https://discord.com/channels/595317990191398933/910978223968518144\">let us know</a> if you have thoughts!</p><h3 id=\"experimental-webpack-minification\">Experimental webpack minification</h3><p>As part of the compilation from <code>.vercel/output/functions</code> to an <code>_worker.js</code>, the <code>@cloudflare/next-on-pages</code> CLI can perform an experimental minification to give you more space for your application to run on Workers. Right now, most accounts are <a href=\"https://developers.cloudflare.com/workers/platform/limits/#worker-size\">limited to a maximum script size of 1MB</a> (although this can be raised in some circumstances—<a href=\"https://docs.google.com/forms/d/e/1FAIpQLSd_fwAVOboH9SlutMonzbhCxuuuOmiU1L_I5O2CFbXf_XXMRg/viewform\">get in touch</a>!). You can ordinarily fit quite a lot of code in this, but one thing notable about Next.js' build process at the moment is that it creates webpack-compiled, fully-formed and fully-isolated functions scripts in each of the directories in <code>.vercel/output/functions</code>. This means that each function ends up looking something like this:</p><!--kg-card-begin: markdown--><pre><code class=\"language-js\">let _ENTRIES = {};\n(() =&gt; {\n  // webpackBootstrap\n})();\n\n(self[&quot;webpackChunk_N_E&quot;] = self[&quot;webpackChunk_N_E&quot;] || []).push([100], {\n\n  123: (() =&gt; {\n    // webpack chunk #123\n  }),\n  234: (() =&gt; {\n    // webpack chunk #234\n  }),\n  345: (() =&gt; {\n    // webpack chunk #345\n  }),\n\n  // …lots of webpack chunks…\n\n}, () =&gt; {\n  // webpackRuntimeModules\n}]);\n\nexport default {\n  async fetch(request, env, ctx) {\n    return _ENTRIES['some_function'].default.call(request);\n  }\n}\n</code></pre>\n<!--kg-card-end: markdown--><p>The script contains everything that's needed to deploy this function, and most of the logic exists in these webpack chunks, but that means that each function has a lot of code shared with its siblings. Quickly, you'll reach the 1MB limit, if you naively deployed all these functions together.</p><p>Our <code>@cloudflare/next-on-pages --experimental-minify</code> CLI argument deals with this problem by analyzing webpack chunks which are re-used in multiple places in this <code>.vercel/output/functions</code> directory and extracts out that code to a common place. This allows our compiler (esbuild) to efficiently combine this code, without duplicating it in all of these places. This process is experimental for the time being, while we look to make this as efficient as possible, without introducing any bugs as a result. Please <a href=\"https://github.com/cloudflare/next-on-pages/issues/\">file an issue on GitHub</a> if you notice any difference in behavior when using <code>--experimental-minify</code>.</p><h2 id=\"what-s-next\">What's next?</h2><p>Pages Functions has been in beta for almost a year, and we're very excited to say that general availability is just around the corner. We're polishing off the last of the remaining features which includes analytics, logging, and billing. In fact, for billing, we recently made <a href=\"https://developers.cloudflare.com/pages/platform/functions/billing/\">the announcement of how you'll be able to use the Workers Paid plan to remove the request limits of the Pages Functions beta from November 15</a>.</p><p>Finally, we're also looking at how we can bring Wasm support to Pages Functions which will unlock ever more use-cases for your full-stack applications. Stay tuned for more information on how we'll be offering this soon.</p><p>Try creating a Next.js Edge Runtime application and deploying it to Cloudflare Pages with the example above or by following <a href=\"https://developers.cloudflare.com/pages/framework-guides/deploy-a-nextjs-site/\">the guide in our documentation</a>. Let us know if you have any questions or face any issues in <a href=\"https://discord.com/channels/595317990191398933/910978223968518144\">Discord</a> or on <a href=\"https://github.com/cloudflare/next-on-pages/issues/\">GitHub</a>, and please report any quirks of the <code>--experimental-minify</code> argument. As always, we're excited to see what you build!</p>",
		"id": "6351629a63069f000aeec9f4",
		"meta_description": "You can now deploy SSR Next.js applications to the Cloudflare Pages platform ⚡️",
		"meta_title": null,
		"og_description": null,
		"og_image": "http://blog.cloudflare.com/content/images/2022/10/image1-OG-1.png",
		"og_title": null,
		"primary_author": {
			"id": "6139d5723a467902a7476f3b",
			"name": "Greg Brimble",
			"slug": "greg-brimble",
			"profile_image": "http://blog.cloudflare.com/content/images/2023/05/Profile-Picture--Square-.jpeg",
			"cover_image": null,
			"bio": null,
			"website": null,
			"location": "London, UK",
			"facebook": null,
			"twitter": "@GregBrimble",
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/greg-brimble/"
		},
		"primary_tag": null,
		"published_at": "2022-10-24T14:00:00.000+01:00",
		"reading_time": 7,
		"slug": "next-on-pages",
		"tags": [
			{
				"id": "63519a0363069f000aeeca02",
				"name": "#BLOG-1447",
				"slug": "hash-blog-1447",
				"description": null,
				"feature_image": null,
				"visibility": "internal",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/404/"
			},
			{
				"id": "5fdade32586dd703f3683188",
				"name": "Cloudflare Pages",
				"slug": "cloudflare-pages",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/cloudflare-pages/"
			},
			{
				"id": "6194b17d067ae202a80b6166",
				"name": "Full Stack",
				"slug": "full-stack",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/full-stack/"
			},
			{
				"id": "5d16450341acde0011a95253",
				"name": "Cloudflare Workers",
				"slug": "workers",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/workers/"
			},
			{
				"id": "5d16450341acde0011a95204",
				"name": "Developers",
				"slug": "developers",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Developers-1.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Developers",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Developers'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developers/"
			},
			{
				"id": "64a3e2b834124c000b00b717",
				"name": "Developer Platform",
				"slug": "developer-platform",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developer-platform/"
			}
		],
		"title": "And here's another one: the Next.js Edge Runtime becomes the fourth full-stack framework supported by Cloudflare Pages",
		"twitter_description": null,
		"twitter_image": "http://blog.cloudflare.com/content/images/2022/10/image1-OG.png",
		"twitter_title": null,
		"updated_at": "2024-02-15T23:55:11.000+00:00",
		"url": "http://blog.cloudflare.com/next-on-pages/",
		"uuid": "7b3c8a51-aeb7-4760-b7e8-ed1f0072ec91",
		"visibility": "public"
	}
}