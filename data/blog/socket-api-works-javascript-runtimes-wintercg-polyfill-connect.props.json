{
	"post": {
		"id": "651492e441a590000a601141",
		"uuid": "876aba56-3151-406e-8a84-911673f0b4d2",
		"title": "A Socket API that works across JavaScript runtimes — announcing a WinterCG spec and Node.js implementation of connect()",
		"slug": "socket-api-works-javascript-runtimes-wintercg-polyfill-connect",
		"html": "<figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2023/09/Connect---__-WinterCG.png\" class=\"kg-image\" alt=\"A Socket API that works across JavaScript runtimes — announcing a WinterCG spec and Node.js implementation of  connect()\" loading=\"lazy\" width=\"1600\" height=\"900\"></figure><p>Earlier this year, we <a href=\"http://blog.cloudflare.com/workers-tcp-socket-api-connect-databases/\">announced a new API for creating outbound TCP sockets</a> — <a href=\"https://developers.cloudflare.com/workers/runtime-apis/tcp-sockets?cf_target_id=6F3FD2F2360D5526EEE56A7398DB7D9D\">connect()</a>. From day one, we’ve been working with the <a href=\"https://wintercg.org/\">Web-interoperable Runtimes Community Group (WinterCG) community</a> to chart a course toward making this API a standard, available across all runtimes and platforms — including Node.js.</p><p>Today, we’re sharing that we’ve reached a new milestone in the path to making this API available across runtimes — engineers from Cloudflare and Vercel have published <a href=\"https://sockets-api.proposal.wintercg.org/\">a draft specification of the connect() sockets API</a> for review by the community, along with a Node.js compatible <a href=\"https://github.com/Ethan-Arrowood/socket\">implementation of the connect() API</a> that developers can start using today.</p><p>This implementation helps both application developers and maintainers of libraries and frameworks:</p><ol><li>Maintainers of existing libraries that use the <a href=\"https://nodejs.org/api/net.html\">node:net</a> and <a href=\"https://nodejs.org/api/tls.html\">node:tls</a> APIs can use it to more easily add support for runtimes where node:net and node:tls are not available.</li><li>JavaScript frameworks can use it to make connect() available in local development, making it easier for application developers to target runtimes that provide connect().</li></ol><h3 id=\"why-create-a-new-standard-why-connect\">Why create a new standard? Why connect()?</h3><p>As we <a href=\"http://blog.cloudflare.com/workers-tcp-socket-api-connect-databases/\">described when we first announced connect()</a>, to-date there has not been a standard API across JavaScript runtimes for creating and working with TCP or UDP sockets. This makes it harder for maintainers of open-source libraries to ensure compatibility across runtimes, and ultimately creates friction for application developers who have to navigate which libraries work on which platforms.</p><p>While Node.js provides the <a href=\"https://nodejs.org/api/net.html\">node:net</a> and <a href=\"https://nodejs.org/api/tls.html\">node:tls</a> APIs, these APIs were designed over 10 years ago in the very early days of the Node.js project and remain callback-based. As a result, they can be hard to work with, and expose configuration in ways that don’t fit serverless platforms or web browsers.</p><p>The connect() API fills this gap by incorporating the best parts of existing socket APIs and <a href=\"https://github.com/WICG/direct-sockets/blob/main/docs/explainer.md\">prior proposed standards</a>, based on feedback from the JavaScript community — including contributors to Node.js. Libraries like <a href=\"https://www.npmjs.com/package/pg\">pg</a> (<a href=\"https://github.com/brianc/node-postgres\">node-postgres</a> on Github) are already using the connect() API.</p><h3 id=\"the-connect-specification\">The connect() specification</h3><p>At time of writing, the <a href=\"https://sockets-api.proposal.wintercg.org/\">draft specification of the Sockets API</a> defines the following API:</p><!--kg-card-begin: markdown--><pre><code class=\"language-JavaScript\">dictionary SocketAddress {\n  DOMString hostname;\n  unsigned short port;\n};\n\ntypedef (DOMString or SocketAddress) AnySocketAddress;\n\nenum SecureTransportKind { &quot;off&quot;, &quot;on&quot;, &quot;starttls&quot; };\n\n[Exposed=*]\ndictionary SocketOptions {\n  SecureTransportKind secureTransport = &quot;off&quot;;\n  boolean allowHalfOpen = false;\n};\n\n[Exposed=*]\ninterface Connect {\n  Socket connect(AnySocketAddress address, optional SocketOptions opts);\n};\n\ninterface Socket {\n  readonly attribute ReadableStream readable;\n  readonly attribute WritableStream writable;\n\n  readonly attribute Promise&lt;undefined&gt; closed;\n  Promise&lt;undefined&gt; close();\n\n  Socket startTls();\n};\n</code></pre>\n<!--kg-card-end: markdown--><p>The proposed API is Promise-based and reuses existing standards whenever possible. For example, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream\">ReadableStream</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WritableStream\">WritableStream</a> are used for the read and write ends of the socket. This makes it easy to pipe data from a TCP socket to any other library or existing code that accepts a ReadableStream as input, or to write to a TCP socket via a WritableStream.</p><p>The entrypoint of the API is the connect() function, which takes a string containing both the hostname and port separated by a colon, or an object with discrete hostname and port fields. It returns a Socket object which represents a socket connection. An instance of this object exposes attributes and methods for working with the connection.</p><p>A connection can be established in plain-text or TLS mode, as well as a special “starttls” mode which allows the socket to be easily upgraded to TLS after some period of plain-text data transfer, by calling the startTls() method on the Socket object. No need to create a new socket or switch to using a separate set of APIs once the socket is upgraded to use TLS.</p><p>For example, to upgrade a socket using the startTLS pattern, you might do something like this:</p><pre><code class=\"language-javascript\">import { connect } from \"@arrowood.dev/socket\"\n\nconst options = { secureTransport: \"starttls\" };\nconst socket = connect(\"address:port\", options);\nconst secureSocket = socket.startTls();\n// The socket is immediately writable\n// Relies on web standard WritableStream\nconst writer = secureSocket.writable.getWriter();\nconst encoder = new TextEncoder();\nconst encoded = encoder.encode(\"hello\");\nawait writer.write(encoded);\n</code></pre><p>Equivalent code using the node:net and node:tls APIs:</p><pre><code class=\"language-javascript\">import net from 'node:net'\nimport tls from 'node:tls'\n\nconst socket = new net.Socket(HOST, PORT);\nsocket.once('connect', () =&gt; {\n  const options = { socket };\n  const secureSocket = tls.connect(options, () =&gt; {\n    // The socket can only be written to once the\n    // connection is established.\n    // Polymorphic API, uses Node.js streams\n    secureSocket.write('hello');\n  }\n})\n</code></pre><h3 id=\"use-the-nodejs-implementation-of-connect-in-your-library\">Use the Node.js implementation of connect() in your library</h3><p>To make it easier for open-source library maintainers to adopt the connect() API, we’ve published an <a href=\"https://github.com/Ethan-Arrowood/socket\">implementation of connect() in Node.js</a> that allows you to publish your library such that it works across JavaScript runtimes, without having to maintain any runtime-specific code.<br></p><p>To get started, install it as a dependency:</p><pre><code>npm install --save @arrowood.dev/socket</code></pre><p>And import it in your library or application:</p><pre><code class=\"language-javascript\">import { connect } from \"@arrowood.dev/socket\"</code></pre><h3 id=\"what%E2%80%99s-next-for-connect\">What’s next for connect()?</h3><p>The <a href=\"https://github.com/wintercg/proposal-sockets-api/\">wintercg/proposal-sockets-api</a> is published as a draft, and the next step is to solicit and incorporate feedback. We’d love your feedback, particularly if you maintain an open-source library or make direct use of the node:net or node:tls APIs.</p><p>Once feedback has been incorporated, engineers from Cloudflare, Vercel and beyond will be continuing to work towards contributing an implementation of the API directly to Node.js as a built-in API.</p>",
		"comment_id": "651492e441a590000a601141",
		"feature_image": "http://blog.cloudflare.com/content/images/2023/09/Connect---__-WinterCG-1.png",
		"featured": false,
		"visibility": "public",
		"created_at": "2023-09-27T21:39:00.000+01:00",
		"updated_at": "2024-02-15T22:57:25.000+00:00",
		"published_at": "2023-09-28T14:00:37.000+01:00",
		"custom_excerpt": "Engineers from Cloudflare and Vercel have published a specification of the connect() sockets API for review by the community, along with a Node.js compatible implementation of connect() that developers can start using today",
		"codeinjection_head": null,
		"codeinjection_foot": null,
		"custom_template": null,
		"canonical_url": null,
		"tags": [
			{
				"id": "651493ed41a590000a60116a",
				"name": "#BLOG-2024",
				"slug": "hash-blog-2024",
				"description": null,
				"feature_image": null,
				"visibility": "internal",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/404/"
			},
			{
				"id": "5d16450341acde0011a95211",
				"name": "Birthday Week",
				"slug": "birthday-week",
				"description": "Collection of Cloudflare blog posts tagged 'Birthday Week'.",
				"feature_image": "http://blog.cloudflare.com/content/images/2023/09/Welcome-to-Birthday-Week-2023.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Birthday Week",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Birthday Week'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/birthday-week/"
			},
			{
				"id": "5d16450341acde0011a951ee",
				"name": "Product News",
				"slug": "product-news",
				"description": "Product News (EN)",
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Product-News-1.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Product News",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Product News'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/product-news/"
			},
			{
				"id": "5d16450341acde0011a95253",
				"name": "Cloudflare Workers",
				"slug": "workers",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/workers/"
			},
			{
				"id": "5d16450341acde0011a95204",
				"name": "Developers",
				"slug": "developers",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Developers-1.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Developers",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Developers'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developers/"
			},
			{
				"id": "5d16450341acde0011a95163",
				"name": "TCP",
				"slug": "tcp",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/tcp/"
			},
			{
				"id": "6081bf116a6b1c01ba3a1304",
				"name": "Node.js",
				"slug": "node-js",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/node-js/"
			},
			{
				"id": "64a3e2b834124c000b00b717",
				"name": "Developer Platform",
				"slug": "developer-platform",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developer-platform/"
			}
		],
		"authors": [
			{
				"id": "65149c7441a590000a6011f3",
				"name": "Dominik Picheta",
				"slug": "dominik",
				"profile_image": "http://blog.cloudflare.com/content/images/2023/09/_tmp_mini_magick20230403-40-vmc77s.jpg",
				"cover_image": null,
				"bio": null,
				"website": null,
				"location": "London, England",
				"facebook": null,
				"twitter": "@d0m96",
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/dominik/"
			},
			{
				"id": "618c3373015c6002aaf447a3",
				"name": "James M Snell",
				"slug": "jasnell",
				"profile_image": "http://blog.cloudflare.com/content/images/2021/11/mecoffee.jpg",
				"cover_image": "http://blog.cloudflare.com/content/images/2021/11/IMG_5946.jpg",
				"bio": null,
				"website": null,
				"location": "California",
				"facebook": null,
				"twitter": "@jasnell",
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/jasnell/"
			},
			{
				"id": "64fb91ebefd8e7000a704dba",
				"name": "Ethan Arrowood (Guest author)",
				"slug": "ethan-arrowood",
				"profile_image": "http://blog.cloudflare.com/content/images/2023/09/Ethan-Arrowood.jpeg",
				"cover_image": null,
				"bio": "Avid adventurer ⛰ Open Source Maintainer 🌟 Senior Software Engineer \nat Vercel and Certified Ski Instructor ⛷ (he/him)",
				"website": "https://www.ethanarrowood.com/",
				"location": null,
				"facebook": null,
				"twitter": "@ArrowoodTech",
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/ethan-arrowood/"
			}
		],
		"primary_author": {
			"id": "65149c7441a590000a6011f3",
			"name": "Dominik Picheta",
			"slug": "dominik",
			"profile_image": "http://blog.cloudflare.com/content/images/2023/09/_tmp_mini_magick20230403-40-vmc77s.jpg",
			"cover_image": null,
			"bio": null,
			"website": null,
			"location": "London, England",
			"facebook": null,
			"twitter": "@d0m96",
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/dominik/"
		},
		"primary_tag": null,
		"url": "http://blog.cloudflare.com/socket-api-works-javascript-runtimes-wintercg-polyfill-connect/",
		"excerpt": "Engineers from Cloudflare and Vercel have published a specification of the connect() sockets API for review by the community, along with a Node.js compatible implementation of connect() that developers can start using today",
		"reading_time": 4,
		"access": true,
		"comments": false,
		"og_image": "http://blog.cloudflare.com/content/images/2023/09/A-Socket-API-that-works-across-JavaScript-runtimes---announcing-a-WinterCG-spec-and-Node.js-implementation-of-connect---OG-1.png",
		"og_title": null,
		"og_description": null,
		"twitter_image": "http://blog.cloudflare.com/content/images/2023/09/A-Socket-API-that-works-across-JavaScript-runtimes---announcing-a-WinterCG-spec-and-Node.js-implementation-of-connect---OG.png",
		"twitter_title": null,
		"twitter_description": null,
		"meta_title": null,
		"meta_description": "Engineers from Cloudflare and Vercel have published a specification of the connect() sockets API for review by the community, along with a Node.js compatible implementation of connect() that developers can start using today",
		"email_subject": null,
		"frontmatter": null,
		"feature_image_alt": "A Socket API that works across JavaScript runtimes — announcing a WinterCG spec and Node.js implementation of  connect()",
		"feature_image_caption": null
	},
	"locale": "en-us"
}