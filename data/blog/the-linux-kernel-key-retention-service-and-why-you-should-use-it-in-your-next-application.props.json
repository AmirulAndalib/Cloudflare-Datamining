{
	"locale": "en-us",
	"post": {
		"id": "6384b6110249aa00091da6a1",
		"uuid": "63034351-cf0c-4ad6-b036-1e7f97dcf029",
		"title": "The Linux Kernel Key Retention Service and why you should use it in your next application",
		"slug": "the-linux-kernel-key-retention-service-and-why-you-should-use-it-in-your-next-application",
		"html": "<!--kg-card-begin: markdown--><p><em><small>This post is also available in <a href=\"http://blog.cloudflare.com/zh-cn/the-linux-kernel-key-retention-service-and-why-you-should-use-it-in-your-next-application-zh-cn/\">简体中文</a>, <a href=\"http://blog.cloudflare.com/zh-tw/the-linux-kernel-key-retention-service-and-why-you-should-use-it-in-your-next-application-zh-tw/\">繁體中文</a>, <a href=\"http://blog.cloudflare.com/ja-jp/the-linux-kernel-key-retention-service-and-why-you-should-use-it-in-your-next-application-ja-jp/\">日本語</a>, <a href=\"http://blog.cloudflare.com/de-de/the-linux-kernel-key-retention-service-and-why-you-should-use-it-in-your-next-application-de-de/\">Deutsch</a>, <a href=\"http://blog.cloudflare.com/fr-fr/the-linux-kernel-key-retention-service-and-why-you-should-use-it-in-your-next-application-fr-fr/\">Français</a>, <a href=\"http://blog.cloudflare.com/es-es/the-linux-kernel-key-retention-service-and-why-you-should-use-it-in-your-next-application-es-es/\">Español</a> and <a href=\"http://blog.cloudflare.com/pt-br/the-linux-kernel-key-retention-service-and-why-you-should-use-it-in-your-next-application-pt-br/\">Português</a>.</small></em></p>\n<!--kg-card-end: markdown--><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2022/11/unnamed-5.png\" class=\"kg-image\" alt=\"The Linux Kernel Key Retention Service and why you should use it in your next application\" loading=\"lazy\"></figure><p>We want our digital data to be safe. We want to visit websites, send bank details, type passwords, sign documents online, login into remote computers, encrypt data before storing it in databases and be sure that nobody can tamper with it. Cryptography can provide a high degree of data security, but we need to protect cryptographic keys.</p><p>At the same time, we can’t have our key written somewhere securely and just access it occasionally. Quite the opposite, it’s involved in every request where we do crypto-operations. If a site supports TLS, then the private key is used to establish each connection.</p><p>Unfortunately cryptographic keys sometimes leak and when it happens, it is a big problem. Many leaks happen because of software bugs and security vulnerabilities. In this post we will learn how the Linux kernel can help protect cryptographic keys from a whole class of potential security vulnerabilities: memory access violations.</p><h3 id=\"memory-access-violations\">Memory access violations</h3><p>According to the <a href=\"https://www.nsa.gov/Press-Room/News-Highlights/Article/Article/3215760/nsa-releases-guidance-on-how-to-protect-against-software-memory-safety-issues/\">NSA</a>, around 70% of vulnerabilities in both Microsoft's and Google's code were related to memory safety issues. One of the consequences of incorrect memory accesses is leaking security data (including cryptographic keys). Cryptographic keys are just some (mostly random) data stored in memory, so they may be subject to memory leaks like any other in-memory data. The below example shows how a cryptographic key may accidentally leak via stack memory reuse:</p><p>broken.c</p><!--kg-card-begin: markdown--><pre><code class=\"language-cpp\">#include &lt;stdio.h&gt;\n#include &lt;stdint.h&gt;\n\nstatic void encrypt(void)\n{\n    uint8_t key[] = &quot;hunter2&quot;;\n    printf(&quot;encrypting with super secret key: %s\\n&quot;, key);\n}\n\nstatic void log_completion(void)\n{\n    /* oh no, we forgot to init the msg */\n    char msg[8];\n    printf(&quot;not important, just fyi: %s\\n&quot;, msg);\n}\n\nint main(void)\n{\n    encrypt();\n    /* notify that we're done */\n    log_completion();\n    return 0;\n}\n</code></pre>\n<!--kg-card-end: markdown--><p>Compile and run our program:</p><!--kg-card-begin: markdown--><pre><code>$ gcc -o broken broken.c\n$ ./broken \nencrypting with super secret key: hunter2\nnot important, just fyi: hunter2\n</code></pre>\n<!--kg-card-end: markdown--><p>Oops, we printed the secret key in the “fyi” logger instead of the intended log message! There are two problems with the code above:</p><ul><li>we didn’t securely destroy the key in our pseudo-encryption function (by overwriting the key data with zeroes, for example), when we finished using it</li><li>our buggy logging function has access to any memory within our process</li></ul><p>And while we can probably easily fix the first problem with some additional code, the second problem is the inherent result of how software runs inside the operating system.</p><p>Each process is given a block of contiguous virtual memory by the operating system. It allows the kernel to share limited computer resources among several simultaneously running processes. This approach is called <a href=\"https://en.wikipedia.org/wiki/Virtual_memory\">virtual memory management</a>. Inside the virtual memory a process has its own address space and doesn’t have access to the memory of other processes, but it can access any memory within its address space. In our example we are interested in a piece of process memory called the stack.</p><p>The stack consists of stack frames. A stack frame is dynamically allocated space for the currently running function. It contains the function’s local variables, arguments and return address. When compiling a function the compiler calculates how much memory needs to be allocated and requests a stack frame of this size. Once a function finishes execution the stack frame is marked as free and can be used again. A stack frame is a logical block, it doesn’t provide any boundary checks, it’s not erased, just marked as free. Additionally, the virtual memory is a contiguous block of addresses. Both of these statements give the possibility for malware/buggy code to access data from anywhere within virtual memory.</p><p>The stack of our program <code>broken.c</code> will look like:</p><!--kg-card-begin: html--><center><img src=\"https://imagedelivery.net/52R3oh4H-57qkVChwuo3Ag/3526edee-ce7e-4f98-a2bf-ff1efd2fc800/public\"></center><!--kg-card-end: html--><p>At the beginning we have a stack frame of the main function. Further, the <code>main()</code> function calls <code>encrypt()</code> which will be placed on the stack immediately below the <code>main()</code> (the code stack grows downwards). Inside <code>encrypt()</code> the compiler requests 8 bytes for the <code>key</code> variable (7 bytes of data + C-null character). When <code>encrypt()</code> finishes execution, the same memory addresses are taken by <code>log_completion()</code>. Inside the <code>log_completion()</code> the compiler allocates eight bytes for the <code>msg</code> variable. Accidentally, it was put on the stack at the same place where our private key was stored before. The memory for <code>msg</code> was only allocated, but not initialized, the data from the previous function left as is.</p><p>Additionally, to the code bugs, programming languages provide unsafe functions known for the safe-memory vulnerabilities. For example, for C such functions are <code>printf()</code>, <code>strcpy()</code>, <code>gets()</code>. The function <code>printf()</code> doesn’t check how many arguments must be passed to replace all placeholders in the format string. The function arguments are placed on the stack above the function stack frame, <code>printf()</code> fetches arguments according to the numbers and type of placeholders, easily going off its arguments and accessing data from the stack frame of the previous function.</p><p>The NSA advises us to use safety-memory languages like Python, Go, Rust. But will it completely protect us?</p><p>The Python compiler will definitely check boundaries in many cases for you and notify with an error:</p><!--kg-card-begin: markdown--><pre><code class=\"language-python\">&gt;&gt;&gt; print(&quot;x: {}, y: {}, {}&quot;.format(1, 2))\nTraceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\nIndexError: Replacement index 2 out of range for positional args tuple\n</code></pre>\n<!--kg-card-end: markdown--><p>However, this is a quote from one of 36 (for now) <a href=\"https://www.cvedetails.com/vulnerability-list/vendor_id-10210/opov-1/Python.html\">vulnerabilities</a>:</p><blockquote><em>Python 2.7.14 is vulnerable to a Heap-Buffer-Overflow as well as a Heap-Use-After-Free.</em></blockquote><p>Golang has its own list of <a href=\"https://www.cvedetails.com/vulnerability-list/vendor_id-14185/opov-1/Golang.html\">overflow vulnerabilities</a>, and has an <a href=\"https://pkg.go.dev/unsafe\">unsafe package</a>. The name of the package speaks for itself, usual rules and checks don’t work inside this package.</p><h3 id=\"heartbleed\">Heartbleed</h3><p>In 2014, the Heartbleed bug was discovered. The (at the time) most used cryptography library OpenSSL leaked private keys. We experienced it <a href=\"http://blog.cloudflare.com/answering-the-critical-question-can-you-get-private-ssl-keys-using-heartbleed/\">too</a>.</p><h3 id=\"mitigation\">Mitigation</h3><p>So memory bugs are a fact of life, and we can’t really fully protect ourselves from them. But, given the fact that cryptographic keys are much more valuable than the other data, can we do better protecting the keys at least?</p><p>As we already said, a memory address space is normally associated with a process. And two different processes don’t share memory by default, so are naturally isolated from each other. Therefore, a potential memory bug in one of the processes will not accidentally leak a cryptographic key from another process. The security of ssh-agent builds on this principle. There are always two processes involved: a client/requester and the <a href=\"https://linux.die.net/man/1/ssh-agent\">agent</a>.</p><blockquote><em>The agent will never send a private key over its request channel. Instead, operations that require a private key will be performed by the agent, and the result will be returned to the requester. This way, private keys are not exposed to clients using the agent.</em></blockquote><p>A requester is usually a network-facing process and/or processing untrusted input. Therefore, the requester is much more likely to be susceptible to memory-related vulnerabilities but in this scheme it would never have access to cryptographic keys (because keys reside in a separate process address space) and, thus, can never leak them.</p><p>At Cloudflare, we employ the same principle in <a href=\"http://blog.cloudflare.com/heartbleed-revisited/\">Keyless SSL</a>. Customer private keys are stored in an isolated environment and protected from Internet-facing connections.</p><h3 id=\"linux-kernel-key-retention-service\">Linux Kernel Key Retention Service</h3><p>The client/requester and agent approach provides better protection for secrets or cryptographic keys, but it brings some drawbacks:</p><ul><li>we need to develop and maintain two different programs instead of one</li><li>we also need to design a well-defined-interface for communication between the two processes</li><li>we need to implement the communication support between two processes (Unix sockets, shared memory, etc.)</li><li>we might need to authenticate and support ACLs between the processes, as we don’t want any requester on our system to be able to use our cryptographic keys stored inside the agent</li><li>we need to ensure the agent process is up and running, when working with the client/requester process</li></ul><p>What if we replace the agent process with the Linux kernel itself?</p><ul><li>it is already running on our system (otherwise our software would not work)</li><li>it has a well-defined interface for communication (system calls)</li><li>it can enforce various ACLs on kernel objects</li><li>and it runs in a separate address space!</li></ul><p>Fortunately, the <a href=\"https://www.kernel.org/doc/html/v6.0/security/keys/core.html\">Linux Kernel Key Retention Service</a> can perform all the functions of a typical agent process and probably even more!</p><p>Initially it was designed for kernel services like dm-crypt/ecryptfs, but later was opened to use by userspace programs. It gives us some advantages:</p><ul><li>the keys are stored outside the process address space</li><li>the well-defined-interface and the communication layer is implemented via syscalls</li><li>the keys are kernel objects and so have associated permissions and ACLs</li><li>the keys lifecycle can be implicitly bound to the process lifecycle</li></ul><p>The Linux Kernel Key Retention Service operates with two types of entities: keys and keyrings, where a keyring is a key of a special type. If we put it into analogy with files and directories, we can say a key is a file and a keyring is a directory. Moreover, they represent a key hierarchy similar to a filesystem tree hierarchy: keyrings reference keys and other keyrings, but only keys can hold the actual cryptographic material similar to files holding the actual data.</p><p>Keys have types. The type of key determines which operations can be performed over the keys. For example, keys of user and logon types can hold arbitrary blobs of data, but logon keys can never be read back into userspace, they are exclusively used by the in-kernel services.</p><p>For the purposes of using the kernel instead of an agent process the most interesting type of keys is the <a href=\"https://man7.org/linux/man-pages/man7/asymmetric.7.html\">asymmetric type</a>. It can hold a private key inside the kernel and provides the ability for the allowed applications to either decrypt or sign some data with the key. Currently, only RSA keys are supported, but work is underway to add <a href=\"https://lore.kernel.org/lkml/20221014100737.94742-2-ignat@cloudflare.com/\">ECDSA key support</a>.</p><p>While keys are responsible for safeguarding the cryptographic material inside the kernel, keyrings determine key lifetime and shared access. In its simplest form, when a particular keyring is destroyed, all the keys that are linked only to that keyring are securely destroyed as well. We can create custom keyrings manually, but probably one the most powerful features of the service are the “special keyrings”.</p><p>These keyrings are created implicitly by the kernel and their lifetime is bound to the lifetime of a different kernel object, like a process or a user. (Currently there are four categories of “implicit” <a href=\"https://man7.org/linux/man-pages/man7/keyrings.7.html\">keyrings</a>), but for the purposes of this post we’re interested in two most widely used ones: process keyrings and user keyrings.</p><p>User keyring lifetime is bound to the existence of a particular user and this keyring is shared between all the processes of the same UID. Thus, one process, for example, can store a key in a user keyring and another process running as the same user can retrieve/use the key. When the UID is removed from the system, all the keys (and other keyrings) under the associated user keyring will be securely destroyed by the kernel.</p><p>Process keyrings are bound to some processes and may be of three types differing in semantics: process, thread and session. A process keyring is bound and private to a particular process. Thus, any code within the process can store/use keys in the keyring, but other processes (even with the same user id or child processes) cannot get access. And when the process dies, the keyring and the associated keys are securely destroyed. Besides the advantage of storing our secrets/keys in an isolated address space, the process keyring gives us the guarantee that the keys will be destroyed regardless of the reason for the process termination: even if our application crashed hard without being given an opportunity to execute any clean up code - our keys will still be securely destroyed by the kernel.</p><p>A thread keyring is similar to a process keyring, but it is private and bound to a particular thread. For example, we can build a multithreaded web server, which can serve TLS connections using multiple private keys, and we can be sure that connections/code in one thread can never use a private key, which is associated with another thread (for example, serving a different domain name).</p><p>A session keyring makes its keys available to the current process and all its children. It is destroyed when the topmost process terminates and child processes can store/access keys, while the topmost process exists. It is mostly useful in shell and interactive environments, when we employ the <a href=\"https://man7.org/linux/man-pages/man1/keyctl.1.html\">keyctl tool</a> to access the Linux Kernel Key Retention Service, rather than using the kernel system call interface. In the shell, we generally can’t use the process keyring as every executed command creates a new process. Thus, if we add a key to the process keyring from the command line - that key will be immediately destroyed, because the “adding” process terminates, when the command finishes executing. Let’s actually confirm this with <code><a href=\"https://github.com/iovisor/bpftrace\">bpftrace</a></code>.</p><p>In one terminal we will trace the <code><a href=\"https://elixir.bootlin.com/linux/v5.19.17/source/security/keys/user_defined.c#L146\">user_destroy</a></code> function, which is responsible for deleting a user key:</p><!--kg-card-begin: markdown--><pre><code>$ sudo bpftrace -e 'kprobe:user_destroy { printf(&quot;destroying key %d\\n&quot;, ((struct key *)arg0)-&gt;serial) }'\nAtt\n</code></pre>\n<!--kg-card-end: markdown--><p>And in another terminal let’s try to add a key to the process keyring:</p><!--kg-card-begin: markdown--><pre><code>$ keyctl add user mykey hunter2 @p\n742524855\n</code></pre>\n<!--kg-card-end: markdown--><p>Going back to the first terminal we can immediately see:</p><!--kg-card-begin: markdown--><pre><code>…\nAttaching 1 probe...\ndestroying key 742524855\n</code></pre>\n<!--kg-card-end: markdown--><p>And we can confirm the key is not available by trying to access it:</p><!--kg-card-begin: markdown--><pre><code>$ keyctl print 742524855\nkeyctl_read_alloc: Required key not available\n</code></pre>\n<!--kg-card-end: markdown--><p>So in the above example, the key “mykey” was added to the process keyring of the subshell executing <code>keyctl add user mykey hunter2 @p</code>. But since the subshell process terminated the moment the command was executed, both its process keyring and the added key were destroyed.</p><p>Instead, the session keyring allows our interactive commands to add keys to our current shell environment and subsequent commands to consume them. The keys will still be securely destroyed, when our main shell process terminates (likely, when we log out from the system).</p><p>So by selecting the appropriate keyring type we can ensure the keys will be securely destroyed, when not needed. Even if the application crashes! This is a very brief introduction, but it will allow you to play with our examples, for the whole context, please, reach the <a href=\"https://www.kernel.org/doc/html/v5.8/security/keys/core.html\">official documentation</a>.</p><h3 id=\"replacing-the-ssh-agent-with-the-linux-kernel-key-retention-service\">Replacing the ssh-agent with the Linux Kernel Key Retention Service</h3><p>We gave a long description of how we can replace two isolated processes with the Linux Kernel Retention Service. It’s time to put our words into code. We talked about ssh-agent as well, so it will be a good exercise to replace our private key stored in memory of the agent with an in-kernel one. We picked the most popular SSH implementation <a href=\"https://github.com/openssh/openssh-portable.git\">OpenSSH</a> as our target.</p><p>Some minor changes need to be added to the code to add functionality to retrieve a key from the kernel:</p><!--kg-card-begin: markdown--><p>openssh.patch</p>\n<pre><code>diff --git a/ssh-rsa.c b/ssh-rsa.c\nindex 6516ddc1..797739bb 100644\n--- a/ssh-rsa.c\n+++ b/ssh-rsa.c\n@@ -26,6 +26,7 @@\n \n #include &lt;stdarg.h&gt;\n #include &lt;string.h&gt;\n+#include &lt;stdbool.h&gt;\n \n #include &quot;sshbuf.h&quot;\n #include &quot;compat.h&quot;\n@@ -63,6 +64,7 @@ ssh_rsa_cleanup(struct sshkey *k)\n {\n \tRSA_free(k-&gt;rsa);\n \tk-&gt;rsa = NULL;\n+\tk-&gt;serial = 0;\n }\n \n static int\n@@ -220,9 +222,14 @@ ssh_rsa_deserialize_private(const char *ktype, struct sshbuf *b,\n \tint r;\n \tBIGNUM *rsa_n = NULL, *rsa_e = NULL, *rsa_d = NULL;\n \tBIGNUM *rsa_iqmp = NULL, *rsa_p = NULL, *rsa_q = NULL;\n+\tbool is_keyring = (strncmp(ktype, &quot;ssh-rsa-keyring&quot;, strlen(&quot;ssh-rsa-keyring&quot;)) == 0);\n \n+\tif (is_keyring) {\n+\t\tif ((r = ssh_rsa_deserialize_public(ktype, b, key)) != 0)\n+\t\t\tgoto out;\n+\t}\n \t/* Note: can't reuse ssh_rsa_deserialize_public: e, n vs. n, e */\n-\tif (!sshkey_is_cert(key)) {\n+\telse if (!sshkey_is_cert(key)) {\n \t\tif ((r = sshbuf_get_bignum2(b, &amp;rsa_n)) != 0 ||\n \t\t    (r = sshbuf_get_bignum2(b, &amp;rsa_e)) != 0)\n \t\t\tgoto out;\n@@ -232,28 +239,46 @@ ssh_rsa_deserialize_private(const char *ktype, struct sshbuf *b,\n \t\t}\n \t\trsa_n = rsa_e = NULL; /* transferred */\n \t}\n-\tif ((r = sshbuf_get_bignum2(b, &amp;rsa_d)) != 0 ||\n-\t    (r = sshbuf_get_bignum2(b, &amp;rsa_iqmp)) != 0 ||\n-\t    (r = sshbuf_get_bignum2(b, &amp;rsa_p)) != 0 ||\n-\t    (r = sshbuf_get_bignum2(b, &amp;rsa_q)) != 0)\n-\t\tgoto out;\n-\tif (!RSA_set0_key(key-&gt;rsa, NULL, NULL, rsa_d)) {\n-\t\tr = SSH_ERR_LIBCRYPTO_ERROR;\n-\t\tgoto out;\n-\t}\n-\trsa_d = NULL; /* transferred */\n-\tif (!RSA_set0_factors(key-&gt;rsa, rsa_p, rsa_q)) {\n-\t\tr = SSH_ERR_LIBCRYPTO_ERROR;\n-\t\tgoto out;\n-\t}\n-\trsa_p = rsa_q = NULL; /* transferred */\n \tif ((r = sshkey_check_rsa_length(key, 0)) != 0)\n \t\tgoto out;\n-\tif ((r = ssh_rsa_complete_crt_parameters(key, rsa_iqmp)) != 0)\n-\t\tgoto out;\n-\tif (RSA_blinding_on(key-&gt;rsa, NULL) != 1) {\n-\t\tr = SSH_ERR_LIBCRYPTO_ERROR;\n-\t\tgoto out;\n+\n+\tif (is_keyring) {\n+\t\tchar *name;\n+\t\tsize_t len;\n+\n+\t\tif ((r = sshbuf_get_cstring(b, &amp;name, &amp;len)) != 0)\n+\t\t\tgoto out;\n+\n+\t\tkey-&gt;serial = request_key(&quot;asymmetric&quot;, name, NULL, KEY_SPEC_PROCESS_KEYRING);\n+\t\tfree(name);\n+\n+\t\tif (key-&gt;serial == -1) {\n+\t\t\tkey-&gt;serial = 0;\n+\t\t\tr = SSH_ERR_KEY_NOT_FOUND;\n+\t\t\tgoto out;\n+\t\t}\n+\t} else {\n+\t\tif ((r = sshbuf_get_bignum2(b, &amp;rsa_d)) != 0 ||\n+\t\t\t(r = sshbuf_get_bignum2(b, &amp;rsa_iqmp)) != 0 ||\n+\t\t\t(r = sshbuf_get_bignum2(b, &amp;rsa_p)) != 0 ||\n+\t\t\t(r = sshbuf_get_bignum2(b, &amp;rsa_q)) != 0)\n+\t\t\tgoto out;\n+\t\tif (!RSA_set0_key(key-&gt;rsa, NULL, NULL, rsa_d)) {\n+\t\t\tr = SSH_ERR_LIBCRYPTO_ERROR;\n+\t\t\tgoto out;\n+\t\t}\n+\t\trsa_d = NULL; /* transferred */\n+\t\tif (!RSA_set0_factors(key-&gt;rsa, rsa_p, rsa_q)) {\n+\t\t\tr = SSH_ERR_LIBCRYPTO_ERROR;\n+\t\t\tgoto out;\n+\t\t}\n+\t\trsa_p = rsa_q = NULL; /* transferred */\n+\t\tif ((r = ssh_rsa_complete_crt_parameters(key, rsa_iqmp)) != 0)\n+\t\t\tgoto out;\n+\t\tif (RSA_blinding_on(key-&gt;rsa, NULL) != 1) {\n+\t\t\tr = SSH_ERR_LIBCRYPTO_ERROR;\n+\t\t\tgoto out;\n+\t\t}\n \t}\n \t/* success */\n \tr = 0;\n@@ -333,6 +358,21 @@ rsa_hash_alg_nid(int type)\n \t}\n }\n \n+static const char *\n+rsa_hash_alg_keyctl_info(int type)\n+{\n+\tswitch (type) {\n+\tcase SSH_DIGEST_SHA1:\n+\t\treturn &quot;enc=pkcs1 hash=sha1&quot;;\n+\tcase SSH_DIGEST_SHA256:\n+\t\treturn &quot;enc=pkcs1 hash=sha256&quot;;\n+\tcase SSH_DIGEST_SHA512:\n+\t\treturn &quot;enc=pkcs1 hash=sha512&quot;;\n+\tdefault:\n+\t\treturn NULL;\n+\t}\n+}\n+\n int\n ssh_rsa_complete_crt_parameters(struct sshkey *key, const BIGNUM *iqmp)\n {\n@@ -433,7 +473,14 @@ ssh_rsa_sign(struct sshkey *key,\n \t\tgoto out;\n \t}\n \n-\tif (RSA_sign(nid, digest, hlen, sig, &amp;len, key-&gt;rsa) != 1) {\n+\tif (key-&gt;serial &gt; 0) {\n+\t\tlen = keyctl_pkey_sign(key-&gt;serial, rsa_hash_alg_keyctl_info(hash_alg), digest, hlen, sig, slen);\n+\t\tif ((long)len == -1) {\n+\t\t\tret = SSH_ERR_LIBCRYPTO_ERROR;\n+\t\t\tgoto out;\n+\t\t}\n+\t}\n+\telse if (RSA_sign(nid, digest, hlen, sig, &amp;len, key-&gt;rsa) != 1) {\n \t\tret = SSH_ERR_LIBCRYPTO_ERROR;\n \t\tgoto out;\n \t}\n@@ -705,6 +752,18 @@ const struct sshkey_impl sshkey_rsa_impl = {\n \t/* .funcs = */\t\t&amp;sshkey_rsa_funcs,\n };\n \n+const struct sshkey_impl sshkey_rsa_keyring_impl = {\n+\t/* .name = */\t\t&quot;ssh-rsa-keyring&quot;,\n+\t/* .shortname = */\t&quot;RSA&quot;,\n+\t/* .sigalg = */\t\tNULL,\n+\t/* .type = */\t\tKEY_RSA,\n+\t/* .nid = */\t\t0,\n+\t/* .cert = */\t\t0,\n+\t/* .sigonly = */\t0,\n+\t/* .keybits = */\t0,\n+\t/* .funcs = */\t\t&amp;sshkey_rsa_funcs,\n+};\n+\n const struct sshkey_impl sshkey_rsa_cert_impl = {\n \t/* .name = */\t\t&quot;ssh-rsa-cert-v01@openssh.com&quot;,\n \t/* .shortname = */\t&quot;RSA-CERT&quot;,\ndiff --git a/sshkey.c b/sshkey.c\nindex 43712253..3524ad37 100644\n--- a/sshkey.c\n+++ b/sshkey.c\n@@ -115,6 +115,7 @@ extern const struct sshkey_impl sshkey_ecdsa_nistp521_cert_impl;\n #  endif /* OPENSSL_HAS_NISTP521 */\n # endif /* OPENSSL_HAS_ECC */\n extern const struct sshkey_impl sshkey_rsa_impl;\n+extern const struct sshkey_impl sshkey_rsa_keyring_impl;\n extern const struct sshkey_impl sshkey_rsa_cert_impl;\n extern const struct sshkey_impl sshkey_rsa_sha256_impl;\n extern const struct sshkey_impl sshkey_rsa_sha256_cert_impl;\n@@ -154,6 +155,7 @@ const struct sshkey_impl * const keyimpls[] = {\n \t&amp;sshkey_dss_impl,\n \t&amp;sshkey_dsa_cert_impl,\n \t&amp;sshkey_rsa_impl,\n+\t&amp;sshkey_rsa_keyring_impl,\n \t&amp;sshkey_rsa_cert_impl,\n \t&amp;sshkey_rsa_sha256_impl,\n \t&amp;sshkey_rsa_sha256_cert_impl,\ndiff --git a/sshkey.h b/sshkey.h\nindex 771c4bce..a7ae45f6 100644\n--- a/sshkey.h\n+++ b/sshkey.h\n@@ -29,6 +29,7 @@\n #include &lt;sys/types.h&gt;\n \n #ifdef WITH_OPENSSL\n+#include &lt;keyutils.h&gt;\n #include &lt;openssl/rsa.h&gt;\n #include &lt;openssl/dsa.h&gt;\n # ifdef OPENSSL_HAS_ECC\n@@ -153,6 +154,7 @@ struct sshkey {\n \tsize_t\tshielded_len;\n \tu_char\t*shield_prekey;\n \tsize_t\tshield_prekey_len;\n+\tkey_serial_t serial;\n };\n \n #define\tED25519_SK_SZ\tcrypto_sign_ed25519_SECRETKEYBYTES\n</code></pre>\n<!--kg-card-end: markdown--><p>We need to download and patch OpenSSH from the latest git as the above patch won’t work on the latest release (<code>V_9_1_P1</code> at the time of this writing):</p><!--kg-card-begin: markdown--><pre><code>$ git clone https://github.com/openssh/openssh-portable.git\n…\n$ cd openssl-portable\n$ $ patch -p1 &lt; ../openssh.patch\npatching file ssh-rsa.c\npatching file sshkey.c\npatching file sshkey.h\n</code></pre>\n<!--kg-card-end: markdown--><p>Now compile and build the patched OpenSSH</p><!--kg-card-begin: markdown--><pre><code>$ autoreconf\n$ ./configure --with-libs=-lkeyutils --disable-pkcs11\n…\n$ make\n…\n</code></pre>\n<!--kg-card-end: markdown--><p>Note that we instruct the build system to additionally link with <code><a href=\"https://man7.org/linux/man-pages/man3/keyctl.3.html\">libkeyutils</a></code>, which provides convenient wrappers to access the Linux Kernel Key Retention Service. Additionally, we had to disable PKCS11 support as the code has a function with the same name as in `libkeyutils`, so there is a naming conflict. There might be a better fix for this, but it is out of scope for this post.</p><p>Now that we have the patched OpenSSH - let’s test it. Firstly, we need to generate a new SSH RSA key that we will use to access the system. Because the Linux kernel only supports private keys in the PKCS8 format, we’ll use it from the start (instead of the default OpenSSH format):</p><!--kg-card-begin: markdown--><pre><code>$ ./ssh-keygen -b 4096 -m PKCS8\nGenerating public/private rsa key pair.\n…\n</code></pre>\n<!--kg-card-end: markdown--><p>Normally, we would be using `ssh-add` to add this key to our ssh agent. In our case we need to use a replacement script, which would add the key to our current session keyring:</p><!--kg-card-begin: markdown--><p>ssh-add-keyring.sh</p>\n<pre><code>#/bin/bash -e\n\nin=$1\nkey_desc=$2\nkeyring=$3\n\nin_pub=$in.pub\nkey=$(mktemp)\nout=&quot;${in}_keyring&quot;\n\nfunction finish {\n    rm -rf $key\n}\ntrap finish EXIT\n\n# https://github.com/openssh/openssh-portable/blob/master/PROTOCOL.key\n# null-terminanted openssh-key-v1\nprintf 'openssh-key-v1\\0' &gt; $key\n# cipher: none\necho '00000004' | xxd -r -p &gt;&gt; $key\necho -n 'none' &gt;&gt; $key\n# kdf: none\necho '00000004' | xxd -r -p &gt;&gt; $key\necho -n 'none' &gt;&gt; $key\n# no kdf options\necho '00000000' | xxd -r -p &gt;&gt; $key\n# one key in the blob\necho '00000001' | xxd -r -p &gt;&gt; $key\n\n# grab the hex public key without the (00000007 || ssh-rsa) preamble\npub_key=$(awk '{ print $2 }' $in_pub | base64 -d | xxd -s 11 -p | tr -d '\\n')\n# size of the following public key with the (0000000f || ssh-rsa-keyring) preamble\nprintf '%08x' $(( ${#pub_key} / 2 + 19 )) | xxd -r -p &gt;&gt; $key\n# preamble for the public key\n# ssh-rsa-keyring in prepended with length of the string\necho '0000000f' | xxd -r -p &gt;&gt; $key\necho -n 'ssh-rsa-keyring' &gt;&gt; $key\n# the public key itself\necho $pub_key | xxd -r -p &gt;&gt; $key\n\n# the private key is just a key description in the Linux keyring\n# ssh will use it to actually find the corresponding key serial\n# grab the comment from the public key\ncomment=$(awk '{ print $3 }' $in_pub)\n# so the total size of the private key is\n# two times the same 4 byte int +\n# (0000000f || ssh-rsa-keyring) preamble +\n# a copy of the public key (without preamble) +\n# (size || key_desc) +\n# (size || comment )\npriv_sz=$(( 8 + 19 + ${#pub_key} / 2 + 4 + ${#key_desc} + 4 + ${#comment} ))\n# we need to pad the size to 8 bytes\npad=$(( 8 - $(( priv_sz % 8 )) ))\n# so, total private key size\nprintf '%08x' $(( $priv_sz + $pad )) | xxd -r -p &gt;&gt; $key\n# repeated 4-byte int\necho '0102030401020304' | xxd -r -p &gt;&gt; $key\n# preamble for the private key\necho '0000000f' | xxd -r -p &gt;&gt; $key\necho -n 'ssh-rsa-keyring' &gt;&gt; $key\n# public key\necho $pub_key | xxd -r -p &gt;&gt; $key\n# private key description in the keyring\nprintf '%08x' ${#key_desc} | xxd -r -p &gt;&gt; $key\necho -n $key_desc &gt;&gt; $key\n# comment\nprintf '%08x' ${#comment} | xxd -r -p &gt;&gt; $key\necho -n $comment &gt;&gt; $key\n# padding\nfor (( i = 1; i &lt;= $pad; i++ )); do\n    echo 0$i | xxd -r -p &gt;&gt; $key\ndone\n\necho '-----BEGIN OPENSSH PRIVATE KEY-----' &gt; $out\nbase64 $key &gt;&gt; $out\necho '-----END OPENSSH PRIVATE KEY-----' &gt;&gt; $out\nchmod 600 $out\n\n# load the PKCS8 private key into the designated keyring\nopenssl pkcs8 -in $in -topk8 -outform DER -nocrypt | keyctl padd asymmetric $key_desc $keyring\n\n</code></pre>\n<!--kg-card-end: markdown--><p>Depending on how our kernel was compiled, we might also need to load some kernel modules for asymmetric private key support:</p><!--kg-card-begin: markdown--><pre><code>$ sudo modprobe pkcs8_key_parser\n$ ./ssh-add-keyring.sh ~/.ssh/id_rsa myssh @s\nEnter pass phrase for ~/.ssh/id_rsa:\n723263309\n</code></pre>\n<!--kg-card-end: markdown--><p>Finally, our private ssh key is added to the current session keyring with the name “myssh”. In addition, the <code>ssh-add-keyring.sh</code> will create a pseudo-private key file in <code>~/.ssh/id_rsa_keyring</code>, which needs to be passed to the main <code>ssh</code> process. It is a pseudo-private key, because it doesn’t have any sensitive cryptographic material. Instead, it only has the “myssh” identifier in a native OpenSSH format. If we use multiple SSH keys, we have to tell the main <code>ssh</code> process somehow which in-kernel key name should be requested from the system.</p><p>Before we start testing it, let’s make sure our SSH server (running locally) will accept the newly generated key as a valid authentication:</p><!--kg-card-begin: markdown--><pre><code>$ cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys\n</code></pre>\n<!--kg-card-end: markdown--><p>Now we can try to SSH into the system:</p><!--kg-card-begin: markdown--><pre><code>$ SSH_AUTH_SOCK=&quot;&quot; ./ssh -i ~/.ssh/id_rsa_keyring localhost\nThe authenticity of host 'localhost (::1)' can't be established.\nED25519 key fingerprint is SHA256:3zk7Z3i9qZZrSdHvBp2aUYtxHACmZNeLLEqsXltynAY.\nThis key is not known by any other names.\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nWarning: Permanently added 'localhost' (ED25519) to the list of known hosts.\nLinux dev 5.15.79-cloudflare-2022.11.6 #1 SMP Mon Sep 27 00:00:00 UTC 2010 x86_64\n…\n</code></pre>\n<!--kg-card-end: markdown--><p>It worked! Notice that we’re resetting the `SSH_AUTH_SOCK` environment variable to make sure we don’t use any keys from an ssh-agent running on the system. Still the login flow does not request any password for our private key, the key itself is resident of the kernel address space, and we reference it using its serial for signature operations.</p><h3 id=\"user-or-session-keyring\">User or session keyring?</h3><p>In the example above, we set up our SSH private key into the session keyring. We can check if it is there:</p><!--kg-card-begin: markdown--><pre><code>$ keyctl show\nSession Keyring\n 577779279 --alswrv   1000  1000  keyring: _ses\n 846694921 --alswrv   1000 65534   \\_ keyring: _uid.1000\n 723263309 --als--v   1000  1000   \\_ asymmetric: myssh\n</code></pre>\n<!--kg-card-end: markdown--><p>We might have used user keyring as well. What is the difference? Currently, the “myssh” key lifetime is limited to the current login session. That is, if we log out and login again, the key will be gone, and we would have to run the <code>ssh-add-keyring.sh</code> script again. Similarly, if we log in to a second terminal, we won’t see this key:</p><!--kg-card-begin: markdown--><pre><code>$ keyctl show\nSession Keyring\n 333158329 --alswrv   1000  1000  keyring: _ses\n 846694921 --alswrv   1000 65534   \\_ keyring: _uid.1000\n</code></pre>\n<!--kg-card-end: markdown--><p>Notice that the serial number of the session keyring <code>_ses</code> in the second terminal is different. A new keyring was created and  “myssh” key along with the previous session keyring doesn’t exist anymore:</p><!--kg-card-begin: markdown--><pre><code>$ SSH_AUTH_SOCK=&quot;&quot; ./ssh -i ~/.ssh/id_rsa_keyring localhost\nLoad key &quot;/home/ignat/.ssh/id_rsa_keyring&quot;: key not found\n…\n</code></pre>\n<!--kg-card-end: markdown--><p>If instead we tell <code>ssh-add-keyring.sh</code> to load the private key into the user keyring (replace <code>@s</code> with <code>@u</code> in the command line parameters), it will be available and accessible from both login sessions. In this case, during logout and re-login, the same key will be presented. Although, this has a security downside - any process running as our user id will be able to access and use the key.</p><h3 id=\"summary\">Summary</h3><p>In this post we learned about one of the most common ways that data, including highly valuable cryptographic keys, can leak. We talked about some real examples, which impacted many users around the world, including Cloudflare. Finally, we learned how the Linux Kernel Retention Service can help us to protect our cryptographic keys and secrets.</p><p>We also introduced a working patch for OpenSSH to use this cool feature of the Linux kernel, so you can easily try it yourself. There are still many Linux Kernel Key Retention Service features left untold, which might be a topic for another blog post. Stay tuned!</p>",
		"comment_id": "6384b6110249aa00091da6a1",
		"feature_image": "http://blog.cloudflare.com/content/images/2022/11/unnamed-4.png",
		"featured": false,
		"visibility": "public",
		"created_at": "2022-11-28T13:22:25.000+00:00",
		"updated_at": "2023-01-20T08:35:33.000+00:00",
		"published_at": "2022-11-28T14:57:20.000+00:00",
		"custom_excerpt": "Many leaks happen because of software bugs and security vulnerabilities. In this post we will learn how the Linux kernel can help protect cryptographic keys from a whole class of potential security vulnerabilities: memory access violations.",
		"codeinjection_head": null,
		"codeinjection_foot": null,
		"custom_template": null,
		"canonical_url": null,
		"authors": [
			{
				"id": "5f3141d797a44803f37fbf58",
				"name": "Oxana Kharitonova",
				"slug": "oxana",
				"profile_image": "http://blog.cloudflare.com/content/images/2023/05/Oxana-Kharitonova.png",
				"cover_image": null,
				"bio": null,
				"website": null,
				"location": "London",
				"facebook": null,
				"twitter": null,
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/oxana/"
			},
			{
				"id": "5d1644b141acde0011a94fbc",
				"name": "Ignat Korchagin",
				"slug": "ignat",
				"profile_image": "http://blog.cloudflare.com/content/images/2018/02/AAEAAQAAAAAAAAepAAAAJGI3NzA4ZDQxLTE1NTYtNDNlNi05M2NjLTE4NDE3ZTE3OWEyZg.jpg",
				"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-83.png",
				"bio": null,
				"website": null,
				"location": null,
				"facebook": null,
				"twitter": "@ignatkn",
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/ignat/"
			}
		],
		"tags": [
			{
				"id": "6384be470249aa00091da6a7",
				"name": "#BLOG-1618",
				"slug": "hash-blog-1618",
				"description": null,
				"feature_image": null,
				"visibility": "internal",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/404/"
			},
			{
				"id": "5d16450341acde0011a951ff",
				"name": "Linux",
				"slug": "linux",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/linux/"
			},
			{
				"id": "5d3a2e0f7eefa70505e91e40",
				"name": "Kernel",
				"slug": "kernel",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/kernel/"
			},
			{
				"id": "5d16450341acde0011a9531b",
				"name": "Deep Dive",
				"slug": "deep-dive",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2023/08/CloudflareBlog-DeepDive.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Deep Dive",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Deep Dive'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/deep-dive/"
			}
		],
		"primary_author": {
			"id": "5f3141d797a44803f37fbf58",
			"name": "Oxana Kharitonova",
			"slug": "oxana",
			"profile_image": "http://blog.cloudflare.com/content/images/2023/05/Oxana-Kharitonova.png",
			"cover_image": null,
			"bio": null,
			"website": null,
			"location": "London",
			"facebook": null,
			"twitter": null,
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/oxana/"
		},
		"primary_tag": null,
		"url": "http://blog.cloudflare.com/the-linux-kernel-key-retention-service-and-why-you-should-use-it-in-your-next-application/",
		"excerpt": "Many leaks happen because of software bugs and security vulnerabilities. In this post we will learn how the Linux kernel can help protect cryptographic keys from a whole class of potential security vulnerabilities: memory access violations.",
		"reading_time": 17,
		"access": true,
		"comments": false,
		"og_image": "http://blog.cloudflare.com/content/images/2022/11/The-Linux-Kernel-Key-Retention-Service-and-why-you-should-use-it-in-your-next-application-OG-1.png",
		"og_title": null,
		"og_description": null,
		"twitter_image": "http://blog.cloudflare.com/content/images/2022/11/The-Linux-Kernel-Key-Retention-Service-and-why-you-should-use-it-in-your-next-application-OG.png",
		"twitter_title": null,
		"twitter_description": null,
		"meta_title": null,
		"meta_description": "Many leaks happen because of software bugs and security vulnerabilities. In this post we will learn how the Linux kernel can help protect cryptographic keys from a whole class of potential security vulnerabilities: memory access violations.",
		"email_subject": null,
		"frontmatter": null,
		"feature_image_alt": null,
		"feature_image_caption": null
	}
}