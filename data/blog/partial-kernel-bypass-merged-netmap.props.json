{
	"locale": "en-us",
	"post": {
		"access": true,
		"authors": [
			{
				"id": "5d1644b141acde0011a94f61",
				"name": "Gilberto Bertin",
				"slug": "gilberto-bertin",
				"profile_image": "http://blog.cloudflare.com/content/images/2017/03/fVckmgHM.jpg",
				"cover_image": null,
				"bio": null,
				"website": null,
				"location": null,
				"facebook": null,
				"twitter": null,
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/gilberto-bertin/"
			}
		],
		"canonical_url": null,
		"codeinjection_foot": null,
		"codeinjection_head": null,
		"comment_id": "4743",
		"comments": false,
		"created_at": "2015-12-17T12:13:49.000+00:00",
		"custom_excerpt": "In a previous post we described our work on a new netmap mode called single-rx-queue. After submitting the pull request, the netmap maintainers told us that the patch was interesting, but they would prefer something more configurable instead of a tailored custom mode.",
		"custom_template": null,
		"email_subject": null,
		"excerpt": "In a previous post we described our work on a new netmap mode called single-rx-queue. After submitting the pull request, the netmap maintainers told us that the patch was interesting, but they would prefer something more configurable instead of a tailored custom mode.",
		"feature_image": null,
		"feature_image_alt": null,
		"feature_image_caption": null,
		"featured": false,
		"frontmatter": null,
		"html": "<!--kg-card-begin: markdown--><p>In <a href=\"http://blog.cloudflare.com/single-rx-queue-kernel-bypass-with-netmap/\">a previous post</a> we described our work on a new netmap mode called <em>single-rx-queue</em>.</p>\n<p>After submitting the pull request, the netmap maintainers told us that the patch was interesting, but they would prefer something more configurable instead of a tailored custom mode.</p>\n<p>After an exchange of ideas and some more work, our patch just got merged to mainline netmap.</p>\n<h4 id=\"meetthenewnetmap\">Meet the new netmap</h4>\n<p>Before our patch netmap used to be an all-or-nothing deal. That is: there was no way to put a network adapter partially in netmap mode. All of the queues would have to be detached from the host network stack. Even a netmap mode called “single ring pair” didn't help.</p>\n<p>Our final patch is extended and more generic, while still supporting the simple functionality of our original single-rx-queue mode.</p>\n<p>First we modified netmap to leave queues that are not explicitly requested to be in netmap mode attached to the host stack. In this way, if a user requests a pair of rings (for example using <code>nm_open(“netmap:eth0-4”)</code>) it will actually get a reference to both the number 4 RX and TX rings, while keeping the other rings attached to the kernel stack.</p>\n<p>But since the NIC is still partially connected to the host stack, a new problem arises: what should we do with packets that are going to be transmitted by the operating system to a TX ring which is in netmap mode? The solution is simple: just move them to the RX host ring. In this way we can access these packets from netmap simply by opening the interface again in netmap mode and asking for its software ring pair.</p>\n<p>Last, for simpler use cases we needed a way to ask for only the RX rings, without the TX counterpart - we do not need TX rings for our specific use case. To achieve this we introduced a couple of flags, <code>NR_TX_RINGS_ONLY</code> and <code>NR_RX_RINGS_ONLY</code> (which translate to <code>/T</code> and <code>/R</code> when we are using <code>nm_open()</code>) to request only TX or RX rings.</p>\n<p>With these changes, the only line we needed to edit in our code was the netmap interface name passed to <code>nm_open()</code>. This:</p>\n<pre><code class=\"language-c\">snprintf(nm_if, sizeof(nm_if) “netmap:%s~%d”, if_name, ring_nr);\n</code></pre>\n<p>becomes this:</p>\n<pre><code class=\"language-c\">snprintf(nm_if, sizeof(nm_if), “netmap:%s-%d/R”, iface_name, ring_nr);\n</code></pre>\n<p>and everything kept working as expected!</p>\n<h4 id=\"tryitout\">Try it out</h4>\n<p>You can follow these instructions to build a test program under Linux. In this example we are using the ixgbe driver.</p>\n<p>The test program source code is available on github:</p>\n<ul>\n<li><a href=\"https://github.com/cloudflare/cloudflare-blog/blob/master/2015-12-nm-single-rx-queue/main.c\">2015-12-nm-single-rx-queue/main.c</a></li>\n</ul>\n<p>First clone the test application and the netmap repository:</p>\n<pre><code class=\"language-sh\">$ git clone https://github.com/cloudflare/cloudflare-blog\n$ cd cloudflare-blog/2015-12-nm-single-rx-queue\n$ git clone https://github.com/luigirizzo/netmap deps\n</code></pre>\n<p>build it:</p>\n<pre><code class=\"language-sh\">$ make\n</code></pre>\n<p>build and load netmap:</p>\n<pre><code class=\"language-sh\">$ cd deps/netmap/LINUX\n$ ./configure --kernel-sources=/path/to/kernel/sources --driver=ixgbe\n$ make\n$ sudo insmod netmap.ko\n$ sudo insmod ixgbe/ixgbe.ko\n</code></pre>\n<p>and launch the application:</p>\n<pre><code class=\"language-sh\">$ sudo ./nm-single-rx-queue eth0 1\n</code></pre>\n<h4 id=\"thanks\">Thanks</h4>\n<p>We would like to thanks Luigi and Giuseppe for their great help shaping the final patch and their work on netmap.</p>\n<!--kg-card-end: markdown-->",
		"id": "5d16453b41acde0011a95567",
		"meta_description": null,
		"meta_title": null,
		"og_description": null,
		"og_image": null,
		"og_title": null,
		"primary_author": {
			"id": "5d1644b141acde0011a94f61",
			"name": "Gilberto Bertin",
			"slug": "gilberto-bertin",
			"profile_image": "http://blog.cloudflare.com/content/images/2017/03/fVckmgHM.jpg",
			"cover_image": null,
			"bio": null,
			"website": null,
			"location": null,
			"facebook": null,
			"twitter": null,
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/gilberto-bertin/"
		},
		"primary_tag": {
			"id": "5d16450341acde0011a95214",
			"name": "Programming",
			"slug": "programming",
			"description": null,
			"feature_image": null,
			"visibility": "public",
			"meta_title": null,
			"meta_description": null,
			"og_image": null,
			"og_title": null,
			"og_description": null,
			"twitter_image": null,
			"twitter_title": null,
			"twitter_description": null,
			"codeinjection_head": null,
			"codeinjection_foot": null,
			"canonical_url": null,
			"accent_color": null,
			"url": "http://blog.cloudflare.com/tag/programming/"
		},
		"published_at": "2015-12-17T14:15:37.000+00:00",
		"reading_time": 2,
		"slug": "partial-kernel-bypass-merged-netmap",
		"tags": [
			{
				"id": "5d16450341acde0011a95214",
				"name": "Programming",
				"slug": "programming",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/programming/"
			},
			{
				"id": "5d16450341acde0011a951ff",
				"name": "Linux",
				"slug": "linux",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/linux/"
			}
		],
		"title": "Partial kernel bypass merged into netmap main",
		"twitter_description": null,
		"twitter_image": null,
		"twitter_title": null,
		"updated_at": "2020-08-18T19:21:37.000+01:00",
		"url": "http://blog.cloudflare.com/partial-kernel-bypass-merged-netmap/",
		"uuid": "ac954ed6-f70f-4053-a3ec-18aedc471cef",
		"visibility": "public"
	}
}