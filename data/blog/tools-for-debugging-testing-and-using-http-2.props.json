{
	"browserLocale": "en-us",
	"locale": "en-us",
	"post": {
		"access": true,
		"authors": [
			{
				"id": "5d1644b141acde0011a94f2c",
				"name": "John Graham-Cumming",
				"slug": "john-graham-cumming",
				"profile_image": "http://blog.cloudflare.com/content/images/2017/03/url-2.jpg",
				"cover_image": "http://blog.cloudflare.com/content/images/2023/05/Twitter-Header-@cloudflare-US.png",
				"bio": null,
				"website": null,
				"location": "Lisbon, Portugal",
				"facebook": null,
				"twitter": null,
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/john-graham-cumming/"
			}
		],
		"canonical_url": null,
		"codeinjection_foot": null,
		"codeinjection_head": null,
		"comment_id": "4738",
		"comments": false,
		"created_at": "2015-12-03T11:33:41.000+00:00",
		"custom_excerpt": "With CloudFlare's release of HTTP/2 for all our customers the web suddenly has a lot of HTTP/2 connections. To get the most out of HTTP/2 you'll want to be using an up to date web browser (all the major browsers support HTTP/2).",
		"custom_template": null,
		"email_subject": null,
		"excerpt": "With CloudFlare's release of HTTP/2 for all our customers the web suddenly has a lot of HTTP/2 connections. To get the most out of HTTP/2 you'll want to be using an up to date web browser (all the major browsers support HTTP/2).",
		"feature_image": "http://blog.cloudflare.com/content/images/2018/08/Screen-Shot-2015-12-03-at-15-49-44.png",
		"feature_image_alt": null,
		"feature_image_caption": null,
		"featured": false,
		"frontmatter": null,
		"html": "<!--kg-card-begin: markdown--><p>With CloudFlare's release of HTTP/2 for all our customers the web suddenly has a lot of HTTP/2 connections. To get the most out of HTTP/2 you'll want to be using an up to date web browser (all the major browsers support HTTP/2).</p>\n<p>But there are some non-browser tools that come in handy when working with HTTP/2. This blog post starts with a useful browser add-on, and then delves into command-line tools, load testing, conformance verification, development libraries and packet decoding for HTTP/2.</p>\n<p>If you know of something that I've missed please write a comment.</p>\n<h3 id=\"browserindicators\">Browser Indicators</h3>\n<p>For Google Chrome there's a handy <a href=\"https://chrome.google.com/webstore/detail/http2-and-spdy-indicator/mpbpobfflnpcgagjijhmgnchggcjblin?hl=en\">HTTP/2 and SPDY Indicator</a> extension that adds a colored lightning bolt to the browser bar showing the protocol being used when a web page is viewed.</p>\n<p>The blue lightning bolt shown here indicates that the CloudFlare home page was served using HTTP/2:</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2015/12/Screen-Shot-2015-12-03-at-12-08-25.png\" alt=\"\" loading=\"lazy\"></p>\n<p>A green lightning bolt indicates the site was served using SPDY and gives the SPDY version number. In this case SPDY/3.1:</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2015/12/Screen-Shot-2015-12-03-at-12-15-10.png\" alt=\"\" loading=\"lazy\"></p>\n<p>A grey lightning bolt indicates that neither HTTP/2 no SPDY were used. Here the web page was served using HTTP/1.1.</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2015/12/Screen-Shot-2015-12-03-at-12-10-18.png\" alt=\"\" loading=\"lazy\"></p>\n<p>There's a similar extension for <a href=\"https://addons.mozilla.org/en-GB/firefox/addon/spdy-indicator/\">Firefox</a>.</p>\n<h4 id=\"onlinetesting\">Online testing</h4>\n<p>There's also a handy <a href=\"https://tools.keycdn.com/http2-test\">online tool</a> to check any individual web site.</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2015/12/Screen-Shot-2015-12-03-at-12-22-11.png\" alt=\"\" loading=\"lazy\"></p>\n<h4 id=\"claire\">Claire</h4>\n<p>CloudFlare also has a Google Chrome extension called <a href=\"https://chrome.google.com/webstore/detail/claire/fgbpcgddpmjmamlibbaobboigaijnmkl\">Claire</a> that gives information about how a web page was loaded. For example here's the information that Claire shows for a site using CloudFlare that uses <a href=\"https://www.cloudflare.com/ipv6\">IPv6</a>, <a href=\"https://www.cloudflare.com/railgun\">Railgun</a>, and HTTP/2.<br>\n<br /></p>\n<div align=\"center\"><img src=\"http://blog.cloudflare.com/content/images/2015/12/Screen-Shot-2015-12-03-at-17-12-50.png\" width=\"300px\"></div>\n<br />\n<h3 id=\"commandlinetools\">Command-line Tools</h3>\n<p>There's a handy command-line tool called <a href=\"https://github.com/stefanjudis/is-http2-cli\">is-http</a> which is installed using npm as follows:</p>\n<pre><code>npm install -g is-http2-cli\n</code></pre>\n<p>Once installed you can check the HTTP/2 status of a web on the command-line:</p>\n<pre><code>$ is-http2 www.cloudflare.com\n✓ HTTP/2 supported by www.cloudflare.com\nSupported protocols: h2 spdy/3.1 http/1.1\n\n$ is-http2 www.amazon.com\n× HTTP/2 not supported by www.amazon.com\nSupported protocols: http/1.1\n</code></pre>\n<p>The <code>is-http</code> tool is also useful because it gives you a list of the protocols advertised by the server. As you can see www.cloudflare.com supports HTTP/2, HTTP/1.1 and SPDY/3.1.</p>\n<h4 id=\"curl\">curl</h4>\n<p>In version 7.43.0 the venerable <code>curl</code> tool got HTTP/2 support when it's linked with the <a href=\"https://nghttp2.org/\">nghttp</a> library. To build <code>curl</code> from sources you'll need OpenSSL, zlib, nghttp2 and libev. I used the following sequence of commands.</p>\n<pre><code>$ curl -LO http://dist.schmorp.de/libev/libev-4.20.tar.gz\n$ tar zvxf libev-4.20.tar.gz\n$ cd libev-4.20\n$ ./configure\n$ make\n$ sudo make install\n\n$ curl -LO https://www.openssl.org/source/openssl-1.0.2d.tar.gz\n$ tar zxvf openssl-1.0.2d.tar.gz\n$ cd openssl-1.0.2d\n$ ./config shared zlib-dynamic\n$ make &amp;&amp; make test\n$ sudo make install\n\n$ curl -LO http://zlib.net/zlib-1.2.8.tar.gz\n$ tar zxvf zlib-1.2.8.tar.gz\n$ cd zlib-1.2.8\n$ ./configure\n$ make &amp;&amp; make test\n$ sudo make install\n\n$ curl -LO https://github.com/tatsuhiro-t/nghttp2/releases/download/v1.5.0/nghttp2-1.5.0.tar.gz\n$ tar zxvf nghttp2-1.5.0.tar.gz\n$ cd nghttp2-1.5.0\n$ OPENSSL_CFLAGS=&quot;-I/usr/local/ssl/include&quot; OPENSSL_LIBS=&quot;-L/usr/local/ssl/lib -lssl -lcrypto -ldl&quot; ./configure\n$ make\n$ sudo make install\n\n$ curl -LO http://curl.haxx.se/download/curl-7.46.0.tar.gz\n$ tar zxvf curl-7.46.0.tar.gz\n$ cd curl-7.46.0\n$ ./configure\n$ make &amp;&amp; make test\n$ sudo make install\n$ sudo ldconfig\n</code></pre>\n<p>Once installed <code>curl</code> has a new <code>--http2</code> option that causes it to use HTTP/2 (if it can). The <code>-v</code> verbose option will show information about the use of HTTP/2:</p>\n<pre><code>$ curl -vso /dev/null --http2 https://www.cloudflare.com/\n[...]\n* Using HTTP2, server supports multi-use\n* Connection state changed (HTTP/2 confirmed)\n* TCP_NODELAY set\n* Copying HTTP/2 data in stream buffer to connection buffer after upgrade: len=0\n* Using Stream ID: 1 (easy handle 0xc3dba0)\n[...]\n</code></pre>\n<h4 id=\"nghttp2\">nghttp2</h4>\n<p>If you built <code>curl</code> using my instructions above you will have built and installed some tools that come with the <a href=\"https://nghttp2.org/\">nghttp2</a> library. One of those is a command-line client called <code>nghttp</code>. It can be used like <code>curl</code> to download from the web using HTTP/2 but it also has a handy verbose option that shows that actual HTTP/2 frames sent and received.</p>\n<p>By running it with <code>-nv</code> you get HTTP/2 and throw away the actual downloaded page. Here's its output when downloading www.cloudflare.com using HTTP/2. On a terminal with color support it uses coloring to highlight different parts of the log.<br>\n<br /></p>\n<div align=\"center\"><img src=\"http://blog.cloudflare.com/content/images/2015/12/Screen-Shot-2015-12-03-at-13-24-46.png\" style=\"width: 300px\"/></div>\n<br />\n<h4 id=\"h2c\">h2c</h4>\n<p>Another curl-like command-line tool for HTTP/2 is <a href=\"https://github.com/fstab/h2c\">h2c</a>. It also enables dumping of HTTP/2 frames and has a nice feature that it runs in the background and keeps connections to servers alive and has a useful 'wiretap' feature for intercepting an HTTP/2 for debugging.</p>\n<p>If you have <a href=\"https://golang.org/dl/\">Go 1.5.1</a> installed then you can download it as follows:</p>\n<pre><code>$ export GO15VENDOREXPERIMENT=1\n$ go get github.com/fstab/h2c\n</code></pre>\n<p>You start <code>h2c</code> running by doing <code>h2c start &amp;</code> which sets it running in the background. You can then communicate with a web server like this:</p>\n<pre><code> $ h2c connect www.cloudflare.com\n $ h2c get /\n $ h2c disconnect\n</code></pre>\n<p>And it will perform the HTTP request. To see detailed output at the HTTP/2 you start h2c with the <code>--dump</code> parameter:</p>\n<pre><code> $ h2c start --dump\n</code></pre>\n<p>You will then get detailed output dumped by that process, in color, of the HTTP/2 frames being used.<br>\n<br /></p>\n<div align=\"center\"><img src=\"http://blog.cloudflare.com/content/images/2015/12/Screen-Shot-2015-12-03-at-13-11-19.png\" style=\"width: 300px\"/></div>\n<br />\nDetails of the wiretap feature are in [this blog post](http://unrestful.io/2015/08/28/wiretap.html).\n<h4 id=\"openssls_client\">openssl s_client</h4>\n<p>If you just want to find out what protocols a web site supports OpenSSL's <code>s_client</code> can be used. If you specify an empty <code>-nextprotoneg</code> option OpenSSL sends an empty TLS option asking for negotiation of the next protocol and the server responds with a complete list of protocols it supports.</p>\n<pre><code>$ openssl s_client -connect www.cloudflare.com:443 -nextprotoneg ''\nCONNECTED(00000003)\nProtocols advertised by server: h2, spdy/3.1, http/1.1\n</code></pre>\n<p>There you can see that www.cloudflare.com support HTTP/2 (the h2), SPDY/3.1 and HTTP/1.1.</p>\n<h4 id=\"h2i\">h2i</h4>\n<p>If you want to do low level HTTP/2 debugging there's an interactive client call <a href=\"https://github.com/golang/net/tree/master/http2/h2i\">h2i</a>. Once again it requires that you have Go installed. To get it, run</p>\n<pre><code>$ go get github.com/golang/net/http2/h2i\n</code></pre>\n<p>You can then use <code>h2i</code> to connect to a site that uses HTTP/2 and send it individual HTTP/2 frames. For example, here's the start of session connecting to www.cloudflare.com and requesting the home page using the <code>headers</code> command which allows you to type in a standard HTTP/1.1 request.</p>\n<pre><code>$ h2i www.cloudflare.com\nConnecting to www.cloudflare.com:443 ...\nConnected to 198.41.214.163:443\nNegotiated protocol &quot;h2&quot;\n[FrameHeader SETTINGS len=18]\n [MAX_CONCURRENT_STREAMS = 128]\n [INITIAL_WINDOW_SIZE = 2147483647]\n [MAX_FRAME_SIZE = 16777215]\n[FrameHeader WINDOW_UPDATE len=4]\n  Window-Increment = 2147418112\n\nh2i&gt; headers\n (as HTTP/1.1)&gt; GET / HTTP/1.1\n (as HTTP/1.1)&gt; Host: www.cloudflare.com\n (as HTTP/1.1)&gt;\n  Opening Stream-ID 1:\n  :authority = www.cloudflare.com\n  :method = GET\n  :path = /\n  :scheme = https\n [FrameHeader HEADERS flags=END_HEADERS stream=1 len=819]\n   :status = &quot;200&quot;\n   server = &quot;cloudflare-nginx&quot;\n   date = &quot;Fri, 04 Dec 2015 10:36:15 GMT&quot;\n   content-type = &quot;text/html&quot;\n   last-modified = &quot;Thu, 03 Dec 2015 22:27:41 G MT&quot; \n   strict-transport-security = &quot;max-age=31536000&quot;\n   x-content-type-options = &quot;nosniff&quot;\n   x-frame-options = &quot;SAMEORIGIN&quot;\n   cf-cache-status = &quot;HIT&quot;\n   expires = &quot;Fri, 04 Dec 2015 14:36:15 GMT&quot;\n   cache-control = &quot;public, max-age=14400&quot;\n [FrameHeader DATA stream=1 len=7261]\n   &quot;&lt;!DOCTYPE html&gt;\\n&lt;html&gt;\\n&lt;head&gt;\\n&lt;!\n</code></pre>\n<h3 id=\"loadtesting\">Load Testing</h3>\n<p>The <a href=\"https://nghttp2.org\">nghttp2</a> library also includes a load testing tool called <a href=\"https://nghttp2.org/documentation/h2load.1.html\">h2load</a> which can be used a little like <a href=\"https://httpd.apache.org/docs/2.2/programs/ab.html\">ab</a>. There's a useful <a href=\"https://nghttp2.org/documentation/h2load-howto.html\">HOWTO</a> on using the tool.</p>\n<p>I ran it against the CloudFlare test server like this:</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2015/12/Screen-Shot-2015-12-03-at-16-02-50.png\" alt=\"\" loading=\"lazy\"></p>\n<h3 id=\"conformance\">Conformance</h3>\n<p>If you are testing an HTTP/2 implementation there's a useful tool called <a href=\"\">h2spec</a> which runs through a conformance test against a real HTTP/2 server. To use it first install <a href=\"https://golang.org/dl/\">Go 1.5.1</a> and then do</p>\n<pre><code>$ go get github.com/summerwind/h2spec/cmd/h2spec\n</code></pre>\n<p>I only recommend it for testing locally running HTTP/2 servers. If you built <code>nghttp2</code> above while building <code>curl</code> you will also have the <code>nghttpd</code> HTTP/2 server available. You can run <code>h2spec</code> against it like this:</p>\n<pre><code>$ nghttpd --no-tls -D -d /tmp 8888\n$ h2spec -p 8888\n</code></pre>\n<p><code>h2spec</code> will run a battery of tests against the server and output conformance information with a reference to the relevant part of <a href=\"https://tools.ietf.org/html/rfc7540\">RFC7540</a>.</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2015/12/Screen-Shot-2015-12-03-at-14-49-07.png\" alt=\"\" loading=\"lazy\"></p>\n<p>If you need to test a number of web sites to see which support HTTP/2 there's a tool called <a href=\"https://github.com/jgrahamc/h2scan\">h2scan</a>. Feed it a list of web sites and it will check to see if they support HTTPS, SPDY/3.1 and HTTP/2.</p>\n<pre><code>$ cat examples\nwww.cloudflare.com\nwww.amazon.com\nwww.yahoo.com\n$ h2scan --fields &lt; examples\nname,resolves,port443Open,tlsWorks,httpsWorks,cloudflare,spdyAnnounced,http2Announced,spdyWorks,http2Works,npn\nwww.cloudflare.com,t,t,t,t,t,t,t,t,t,h2 spdy/3.1 http/1.1\nwww.amazon.com,t,t,t,t,f,f,f,-,-,http/1.1\nwww.yahoo.com,t,t,t,t,f,t,f,t,-,spdy/3.1 spdy/3 http/1.1 http/1.0\n</code></pre>\n<h3 id=\"usefullibraries\">Useful Libraries</h3>\n<p>If you are working in C and need to add HTTP/2 support to a program there's the <a href=\"https://nghttp2.org/\">nghttp2</a> library that is full implementation of HTTP/2 with a simple interface. Their <a href=\"https://nghttp2.org/documentation/tutorial-client.html#libevent-client-c\">HTTP/2 client tutorial</a> explains how to use the library to add HTTP/2 client capabilities. nghttp2 can also be used for <a href=\"https://nghttp2.org/documentation/tutorial-server.html#libevent-server-c\">servers</a>.</p>\n<p>Go programmers will find full HTTP/2 support will arrive with Go 1.6. If you can't wait until then there's an extension package for HTTP/2 <a href=\"https://godoc.org/golang.org/x/net/http2\">golang.org/x/net/http2</a> . Details <a href=\"https://http2.golang.org/\">here</a>.</p>\n<p>There's a pure Ruby implementation of HTTP/2 available from <a href=\"https://github.com/igrigorik/http-2\">Ilya Grigorik</a>.</p>\n<p>Haskell programmers can use the <a href=\"https://hackage.haskell.org/package/http2\">http2</a> hackage.</p>\n<h3 id=\"packetsnooping\">Packet Snooping</h3>\n<p>The popular Wireshark packet analyzer added decoding on HTTP/2 in version <a href=\"https://www.wireshark.org/docs/relnotes/wireshark-1.12.0.html#_new_protocol_support\">1.12.0</a> and fully decodes HTTP/2 frames. Unfortunately most HTTP/2 is sent over TLS which means that, by default, Wireshark will not be able to decrypt the packets to be able to get to the HTTP/2 for decoding.</p>\n<p>Fortunately, there is a workaround if you are using Google Chrome for testing. It is possible to get Chrome to save the symmetric cryptographic key used for TLS connections to a file and Wireshark is able to read that file to decode TLS connections.</p>\n<p>This is done by setting the <code>SSLKEYLOGFILE</code> environment variable before running Chrome. I'm running on Mac OS X and use Google Chrome Canary for testing so I run:</p>\n<pre><code>% export SSLKEYLOGFILE=`pwd`/sslkey.log\n% /Applications/Google\\ Chrome\\ Canary.app/Contents/MacOS/Google\\ Chrome\\ Canary\n</code></pre>\n<p>Google Chrome will then write session keys to that file. In Wireshark I configure it to read the file by going to Preferences, expanding the Protocols list.</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2015/12/Screen-Shot-2015-12-03-at-15-48-59.png\" alt=\"\" loading=\"lazy\"></p>\n<p>Then I find SSL and set the Pre-Main-Secret log filename to point to the same file.</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2015/12/Screen-Shot-2015-12-03-at-15-49-44.png\" alt=\"\" loading=\"lazy\"></p>\n<p>Then Wireshark can decode the TLS connections made by that browser. Here's the beginning of a connection between Google Chrome Canary and the experimental server <a href=\"https://http2.cloudflare.com/\">https://http2.cloudflare.com/</a>.</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2015/12/Screen-Shot-2015-12-03-at-15-51-04.png\" alt=\"\" loading=\"lazy\"></p>\n<h3 id=\"chromedeveloperview\">Chrome Developer View</h3>\n<p>Finally, if you are looking at the performance of your own web site it can be handy to understand which parts of the page were downloaded using HTTP/2 and which were not.  You can do that pretty easily using the Developer view in Google Chrome. Here's a shot of the CloudFlare blog loaded in Chrome. There's an additional Protocol fields available on the pop-up menu.</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2015/12/Screen-Shot-2015-12-04-at-10-46-21.png\" alt=\"\" loading=\"lazy\"></p>\n<p>Once added you can sort by protocol to see which parts were HTTP/2 (the h2) and which were other protocols.</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2015/12/Screen-Shot-2015-12-04-at-10-46-29.png\" alt=\"\" loading=\"lazy\"></p>\n<h3 id=\"learningabouthttp2\">Learning about HTTP/2</h3>\n<ol start=\"0\">\n<li>\n<p>Short <a href=\"https://www.cloudflare.com/http2/what-is-http2/\">introduction to HTTP/2</a> from CloudFlare.</p>\n</li>\n<li>\n<p><a href=\"http://daniel.haxx.se/http2/\">http2 explained</a> from the creator of <code>curl</code>.</p>\n</li>\n<li>\n<p>The <a href=\"http://http2.github.io/\">home page</a> of the HTTP/2 working group with lots of information plus a list of useful <a href=\"https://github.com/http2/http2-spec/wiki/Tools\">tools</a>.</p>\n</li>\n</ol>\n<!--kg-card-end: markdown-->",
		"id": "5d16453b41acde0011a95562",
		"meta_description": null,
		"meta_title": null,
		"og_description": null,
		"og_image": null,
		"og_title": null,
		"primary_author": {
			"id": "5d1644b141acde0011a94f2c",
			"name": "John Graham-Cumming",
			"slug": "john-graham-cumming",
			"profile_image": "http://blog.cloudflare.com/content/images/2017/03/url-2.jpg",
			"cover_image": "http://blog.cloudflare.com/content/images/2023/05/Twitter-Header-@cloudflare-US.png",
			"bio": null,
			"website": null,
			"location": "Lisbon, Portugal",
			"facebook": null,
			"twitter": null,
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/john-graham-cumming/"
		},
		"primary_tag": {
			"id": "5d16450341acde0011a951c5",
			"name": "HTTP2",
			"slug": "http2",
			"description": null,
			"feature_image": null,
			"visibility": "public",
			"meta_title": null,
			"meta_description": null,
			"og_image": null,
			"og_title": null,
			"og_description": null,
			"twitter_image": null,
			"twitter_title": null,
			"twitter_description": null,
			"codeinjection_head": null,
			"codeinjection_foot": null,
			"canonical_url": null,
			"accent_color": null,
			"url": "http://blog.cloudflare.com/tag/http2/"
		},
		"published_at": "2015-12-04T12:56:36.000+00:00",
		"reading_time": 9,
		"slug": "tools-for-debugging-testing-and-using-http-2",
		"tags": [
			{
				"id": "5d16450341acde0011a951c5",
				"name": "HTTP2",
				"slug": "http2",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/http2/"
			},
			{
				"id": "5d16450341acde0011a9516c",
				"name": "Google",
				"slug": "google",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/google/"
			},
			{
				"id": "5d16450341acde0011a95259",
				"name": "Claire",
				"slug": "claire",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/claire/"
			},
			{
				"id": "5d16450341acde0011a95204",
				"name": "Developers",
				"slug": "developers",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Developers-1.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Developers",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Developers'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developers/"
			},
			{
				"id": "5d16450341acde0011a95214",
				"name": "Programming",
				"slug": "programming",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/programming/"
			}
		],
		"title": "Tools for debugging, testing and using HTTP/2",
		"twitter_description": null,
		"twitter_image": null,
		"twitter_title": null,
		"updated_at": "2020-08-14T20:18:03.000+01:00",
		"url": "http://blog.cloudflare.com/tools-for-debugging-testing-and-using-http-2/",
		"uuid": "bf5d2942-d963-4090-bddc-8cfb18ec52b6",
		"visibility": "public"
	}
}