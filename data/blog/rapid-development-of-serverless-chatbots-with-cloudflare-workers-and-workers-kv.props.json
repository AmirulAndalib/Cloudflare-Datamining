{
	"locale": "en-us",
	"post": {
		"id": "5d16453b41acde0011a957f7",
		"uuid": "7438b2a8-4c72-498a-a4eb-5986a097a006",
		"title": "Rapid Development of Serverless Chatbots with Cloudflare Workers and Workers KV",
		"slug": "rapid-development-of-serverless-chatbots-with-cloudflare-workers-and-workers-kv",
		"html": "<!--kg-card-begin: markdown--><p><img src=\"http://blog.cloudflare.com/content/images/2019/04/chat-bot@2x_optimized.png\" alt=\"chat-bot@2x_optimized\" loading=\"lazy\"></p>\n<p>I'm the Product Manager for the Application Services team here at Cloudflare. We recently identified a need for a new tool around service ownership. As a fast growing engineering organization, ownership of services changes fairly frequently. Many cycles get burned in chat with questions like &quot;Who owns service x now?</p>\n<p>Whilst it's easy to see how a tool like this saves a few seconds per day for the asker and askee, and saves on some mental context switches, the time saved is unlikely to add up to the cost of development and maintenance.</p>\n<pre><code class=\"language-10\">= 5 minutes per day\nx 260 work days \n= 1300 mins \n/ 60 mins \n= 20 person hours per year\n</code></pre>\n<p>So a 20 hour investment in that tool would pay itself back in a year valuing everyone's time the same. While we've made great strides in improving the efficiency of building tools at Cloudflare, 20 hours is a stretch for an end-to-end build, deploy and operation of a new tool.</p>\n<h3 id=\"entercloudflareworkersworkerskv\">Enter Cloudflare Workers + Workers KV</h3>\n<p>The more I use Serverless and Workers, the more I'm struck with the benefits of:</p>\n<h4 id=\"1reducedoperationaloverhead\">1. Reduced operational overhead</h4>\n<p>When I upload a Worker, it's automatically distributed to 175+ data centers. I don't have to be worried about uptime - it will be up, and it will be fast.</p>\n<h4 id=\"2reduceddevtime\">2. Reduced dev time</h4>\n<p>With operational overhead largely removed, I'm able to focus purely on code. A constrained problem space like this lends itself really well to Workers. I reckon we can knock this out in well under 20 hours.</p>\n<h3 id=\"requirements\">Requirements</h3>\n<p>At Cloudflare, people ask these questions in Chat, so that's a natural interface to service ownership. Here's the spec:</p>\n<table>\n<thead>\n<tr>\n<th>Use Case</th>\n<th>Input</th>\n<th>Output</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Add</td>\n<td>@ownerbot add Jira IT <a href=\"http://chat.google.com/room/ABC123\">http://chat.google.com/room/ABC123</a></td>\n<td>Service added</td>\n</tr>\n<tr>\n<td>Delete</td>\n<td>@ownerbot delete Jira</td>\n<td>Service deleted</td>\n</tr>\n<tr>\n<td>Question</td>\n<td>@ownerbot Kibana</td>\n<td>SRE Core owns Kibana. The room is: <a href=\"http://chat.google.com/ABC123\">http://chat.google.com/ABC123</a></td>\n</tr>\n<tr>\n<td>Export</td>\n<td>@ownerbot export</td>\n<td><code>[{name: &quot;Kibana&quot;, owner: &quot;SRE Core&quot;...}]</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"helloownerbot\">Hello @ownerbot</h3>\n<p>Following the <a href=\"https://developers.google.com/hangouts/chat/how-tos/bots-develop\">Hangouts Chat API Guide</a>, let's start with a hello world bot.</p>\n<ol>\n<li>\n<p>To configure the bot, go to the <a href=\"https://developers.google.com/hangouts/chat/how-tos/bots-publish\">Publish</a> page and scroll down to the <strong>Enable The API</strong> button:</p>\n</li>\n<li>\n<p>Enter the bot name</p>\n</li>\n<li>\n<p>Download the private key json file</p>\n</li>\n<li>\n<p>Go to the <a href=\"https://console.developers.google.com/\">API Console</a></p>\n</li>\n<li>\n<p>Search for the <strong>Hangouts Chat API</strong> (<em>Note: not the Google+ Hangouts API</em>) <br/><br/><br>\n<img src=\"http://blog.cloudflare.com/content/images/2019/04/api-console-hangouts-chat-api-1.png\" alt=\"api-console-hangouts-chat-api-1\" loading=\"lazy\"></p>\n</li>\n<li>\n<p>Click <strong>Configuration</strong> onthe left menu</p>\n</li>\n<li>\n<p>Fill out the form as per below <sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup></p>\n<ul>\n<li>Use a hard to guess URL. I <a href=\"https://www.guidgenerator.com/online-guid-generator.aspx\">generate a guid</a> and use that in the url.</li>\n<li>The URL will be the route you associate with your Worker in the Dashboard<br>\n<img src=\"http://blog.cloudflare.com/content/images/2019/04/bot-configuration-1.png\" alt=\"bot-configuration-1\" loading=\"lazy\"></li>\n</ul>\n</li>\n<li>\n<p>Click Save</p>\n</li>\n</ol>\n<p>So Google Chat should know about our bot now. Back in Google Chat, click in the &quot;Find people, rooms, bots&quot; textbox and choose &quot;Message a Bot&quot;. Your bot should show up in the search:</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2019/04/message-a-bot.png\" alt=\"message-a-bot\" loading=\"lazy\"></p>\n<p>It won't be too useful just yet, as we need to create our Worker to receive the messages and respond!</p>\n<h3 id=\"theworker\">The Worker</h3>\n<p>In the Workers dashboard, create a script and associate with the route you defined in step #7 (the one with the guid). It should look something like below. <sup class=\"footnote-ref\"><a href=\"#fn2\" id=\"fnref2\">[2]</a></sup></p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2019/04/route.png\" alt=\"route\" loading=\"lazy\"></p>\n<p>The Google Chatbot interface is pretty simple, but weirdly obfuscated in the Hangouts API guide IMHO. You have to reverse engineer the python example.</p>\n<p>Basically, if we message our bot like <code>@ownerbot-blog Kibana</code>, we'll get a message like this:</p>\n<pre><code>  {\n    &quot;type&quot;: &quot;MESSAGE&quot;,\n    &quot;message&quot;: {\n      &quot;argumentText&quot;: &quot;Kibana&quot;\n    }\n  }\n</code></pre>\n<p>To respond, we need to respond with <code>200 OK</code> and JSON body like this:</p>\n<pre><code>content-length: 27\ncontent-type: application/json\n\n{&quot;text&quot;:&quot;Hello chat world&quot;}\n</code></pre>\n<p>So, the minimum Chatbot Worker looks something like this:</p>\n<pre><code class=\"language-javascript\">addEventListener('fetch', event =&gt; { event.respondWith(process(event.request)) });\n\nfunction process(request) {\n  let body = {\n\ttext: &quot;Hello chat world&quot;\n  }\n  return new Response(JSON.stringify(body), {\n    status: 200,\n    headers: {\n        &quot;Content-Type&quot;: &quot;application/json&quot;,\n        &quot;Cache-Control&quot;: &quot;no-cache&quot;\n    }\n  });\n}\n</code></pre>\n<p>Save and deploy that and we should be able message our bot:</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2019/04/google-chatbot-hello-world-response.png\" alt=\"google-chatbot-hello-world-response\" loading=\"lazy\"></p>\n<p><marquee><strong>Success</strong>!</marquee></p>\n<h3 id=\"implementation\">Implementation</h3>\n<p>OK, on to the meat of the code. Based on the requirements, I see a need for an <code>AddCommand</code>, <code>QueryCommand</code>, <code>DeleteCommand</code> and <code>HelpCommand</code>. I also see some sort of <code>ServiceDirectory</code> that knows how to add, delete and retrieve services.</p>\n<p>I created a CommandFactory which accepts a ServiceDirectory, as well as an implementation of a KV store, which will be Workers KV in production, but I'll mock out in tests.</p>\n<pre><code class=\"language-javascript\">class CommandFactory {\n    constructor(serviceDirectory, kv) {\n        this.serviceDirectory = serviceDirectory;\n        this.kv = kv;\n    }\n\n    create(argumentText) {\n        let parts = argumentText.split(' ');\n        let primary = parts[0];       \n        \n        switch (primary) {\n            case &quot;add&quot;:\n                return new AddCommand(argumentText, this.serviceDirectory, this.kv);\n            case &quot;delete&quot;:\n                return new DeleteCommand(argumentText, this.serviceDirectory, this.kv);\n            case &quot;help&quot;:\n                return new HelpCommand(argumentText, this.serviceDirectory, this.kv);\n            default:\n                return new QueryCommand(argumentText, this.serviceDirectory, this.kv);\n        }\n    }\n}\n</code></pre>\n<p>OK, so if we receive a message like <code>@ownerbot add</code>, we'll interpret it as an <code>AddCommand</code>, but if it's not something we recognize, we'll assume it's a <code>QueryCommand</code> like <code>@ownerbot Kibana</code> which makes it easy to parse commands.</p>\n<p>OK, our commands need a service directory, which will look something like this:</p>\n<pre><code class=\"language-javascript\">class ServiceDirectory {     \n    get(serviceName) {...}\n    async add(service) {...}\n    async delete(serviceName) {...}\n    find(serviceName) {...}\n    getNames() {...}\n}\n</code></pre>\n<p>Let's build some commands. Oh, and my chatbot is going to be Ultima IV themed, because... reasons.</p>\n<pre><code class=\"language-javascript\">class AddCommand extends Command {\n\n    async respond() {\n        let cmdParts = this.commandParts;\n        if (cmdParts.length !== 6) {\n            return new OwnerbotResponse(&quot;Adding a service requireth Name, Owner, Room Name and Google Chat Room Url.&quot;, false);\n        }\n        let name = this.commandParts[1];\n        let owner = this.commandParts[2];\n        let room = this.commandParts[3];\n        let url = this.commandParts[4];\n        let aliasesPart = this.commandParts[5];\n        let aliases = aliasesPart.split(' ');\n        let service = {\n            name: name,\n            owner: owner,\n            room: room,\n            url: url,\n            aliases: aliases\n        }\n        await this.serviceDirectory.add(service);\n        return new OwnerbotResponse(`My codex of knowledge has expanded to contain knowledge of ${name}. Congratulations virtuous Paladin.`);\n    }\n}\n</code></pre>\n<p>The nice thing about the <a href=\"https://en.wikipedia.org/wiki/Command_pattern\">Command</a> pattern for chatbots, is you can encapsulate the logic of each command for testing, as well as compose series of commands together to test out conversations. Later, we could extend it to support undo. Let's test the <code>AddCommand</code></p>\n<pre><code class=\"language-javascript\">  it('requires all args', async function() {\n            let addCmd = new AddCommand(&quot;add AdminPanel 'Internal Tools' 'Internal Tools'&quot;, dir, kv); //missing url            \n            let res = await addCmd.respond();\n            console.log(res.text);\n            assert.equal(res.success, false, &quot;Adding with missing args should fail&quot;);            \n        });\n\n        it('returns success for all args', async function() {\n            let addCmd = new AddCommand(&quot;add AdminPanel 'Internal Tools' 'Internal Tools Room' 'http://chat.google.com/roomXYZ'&quot;, dir, kv);            \n            let res = await addCmd.respond();\n            console.debug(res.text);\n            assert.equal(res.success, true, &quot;Should have succeeded with all args&quot;);            \n        });\n</code></pre>\n<pre><code>$ mocha -g &quot;AddCommand&quot;\n  AddCommand\n    add\n      ✓ requires all args\n      ✓ returns success for all args\n  2 passing (19ms)\n</code></pre>\n<p>So far so good. But adding commands to our ownerbot isn't going to be so useful unless we can query them.</p>\n<pre><code class=\"language-javascript\">class QueryCommand extends Command {\n    async respond() {\n        let service = this.serviceDirectory.get(this.argumentText);\n        if (service) {\n            return new OwnerbotResponse(`${service.owner} owns ${service.name}. Seeketh thee room ${service.room} - ${service.url})`);\n        }\n        let serviceNames = this.serviceDirectory.getNames().join(&quot;, &quot;);\n        return new OwnerbotResponse(`I knoweth not of that service. Thou mightst asketh me of: ${serviceNames}`);\n    }\n}\n</code></pre>\n<p>Let's write a test that runs an <code>AddCommand</code> followed by a <code>QueryCommand</code></p>\n<pre><code class=\"language-javascript\">describe ('QueryCommand', function() {\n    let kv = new MockKeyValueStore();\n    let dir = new ServiceDirectory(kv);\n    await dir.init();\n\n    it('Returns added services', async function() {    \n        let addCmd = new AddCommand(&quot;add AdminPanel 'Internal Tools' 'Internal Tools Room' url 'alias' abc123&quot;, dir, kv);            \n        await addCmd.respond();\n\n        let queryCmd = new QueryCommand(&quot;AdminPanel&quot;, dir, kv);\n        let res = await queryCmd.respond();\n        assert.equal(res.success, true, &quot;Should have succeeded&quot;);\n        assert(res.text.indexOf('Internal Tools') &gt; -1, &quot;Should have returned the team name in the query response&quot;);\n    })\n})\n</code></pre>\n<h3 id=\"demo\">Demo</h3>\n<p>A lot of the code as been elided for brevity, but you can view the <a href=\"https://github.com/stevenpack/ownerbot\">full source on Github</a>.  Let's take it for a spin!</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2019/04/ownerbot1-1.gif\" alt=\"ownerbot1-1\" loading=\"lazy\"></p>\n<h3 id=\"learnings\">Learnings</h3>\n<p>Some of the things I learned during the development of @ownerbot were:</p>\n<ul>\n<li>Chatbots are an awesome use case for Serverless. You can deploy and not worry again about the infrastructure</li>\n<li>Workers KV means extends the range of useful chat bots to include stateful bots like @ownerbot</li>\n<li>The <code>Command</code> pattern provides a useful way to encapsulate the parsing and responding to commands in a chat bot.</li>\n</ul>\n<p>In <strong>Part 2</strong> we'll add authentication to ensure we're only responding to requests from our instance of Google Chat</p>\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p>For simplicity, I'm going to use a static shared key, but Google have recently rolled out a more <a href=\"https://developers.google.com/hangouts/chat/how-tos/bots-develop?hl=en_US#verifying_bot_authenticity\">secure method</a> for verifying the caller's authenticity, which we'll expand on in Part 2. <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn2\" class=\"footnote-item\"><p>This UI is the multiscript version available to Enterprise customers. You can still implement the bot with a single Worker, you'll just need to recognize and route requests to your chatbot code. <a href=\"#fnref2\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n<!--kg-card-end: markdown-->",
		"comment_id": "5cb66b96ada87e00c06fb542",
		"feature_image": "http://blog.cloudflare.com/content/images/2019/04/chat-bot@2x-1.png",
		"featured": false,
		"visibility": "public",
		"created_at": "2019-04-17T00:56:06.000+01:00",
		"updated_at": "2024-02-12T21:23:52.000+00:00",
		"published_at": "2019-04-25T14:00:00.000+01:00",
		"custom_excerpt": "I'm the Product Manager for the Internal Tools team here at Cloudflare. We recently identified a need for a new tool around service ownership. As a fast growing engineering organization, ownership of services changes fairly frequently.",
		"codeinjection_head": null,
		"codeinjection_foot": null,
		"custom_template": null,
		"canonical_url": null,
		"authors": [
			{
				"id": "5d1644b141acde0011a94fc5",
				"name": "Steven Pack",
				"slug": "stevenpack",
				"profile_image": "http://blog.cloudflare.com/content/images/2022/08/steven-pack.png",
				"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-123.png",
				"bio": "Partner Engineering Director",
				"website": null,
				"location": "San Francisco Bay Area, California",
				"facebook": null,
				"twitter": "@steven_pack",
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/stevenpack/"
			}
		],
		"tags": [
			{
				"id": "5d16450341acde0011a95253",
				"name": "Cloudflare Workers",
				"slug": "workers",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/workers/"
			},
			{
				"id": "5d16450341acde0011a95252",
				"name": "Serverless",
				"slug": "serverless",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Serverless.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Serverless",
				"meta_description": "Cloudflare blog posts tagged 'serverless'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/serverless/"
			},
			{
				"id": "5d16450341acde0011a95278",
				"name": "Cloudflare Workers KV",
				"slug": "cloudflare-workers-kv",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/cloudflare-workers-kv/"
			},
			{
				"id": "5d16450341acde0011a95165",
				"name": "JavaScript",
				"slug": "javascript",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/javascript/"
			},
			{
				"id": "5d16450341acde0011a95204",
				"name": "Developers",
				"slug": "developers",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Developers-1.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Developers",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Developers'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developers/"
			},
			{
				"id": "5d16450341acde0011a95283",
				"name": "#Lindered",
				"slug": "lindered",
				"description": "Posts featuring Kari Linder's awesome design work",
				"feature_image": null,
				"visibility": "internal",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/404/"
			},
			{
				"id": "64a3e2b834124c000b00b717",
				"name": "Developer Platform",
				"slug": "developer-platform",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developer-platform/"
			}
		],
		"primary_author": {
			"id": "5d1644b141acde0011a94fc5",
			"name": "Steven Pack",
			"slug": "stevenpack",
			"profile_image": "http://blog.cloudflare.com/content/images/2022/08/steven-pack.png",
			"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-123.png",
			"bio": "Partner Engineering Director",
			"website": null,
			"location": "San Francisco Bay Area, California",
			"facebook": null,
			"twitter": "@steven_pack",
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/stevenpack/"
		},
		"primary_tag": {
			"id": "5d16450341acde0011a95253",
			"name": "Cloudflare Workers",
			"slug": "workers",
			"description": null,
			"feature_image": null,
			"visibility": "public",
			"meta_title": null,
			"meta_description": null,
			"og_image": null,
			"og_title": null,
			"og_description": null,
			"twitter_image": null,
			"twitter_title": null,
			"twitter_description": null,
			"codeinjection_head": null,
			"codeinjection_foot": null,
			"canonical_url": null,
			"accent_color": null,
			"url": "http://blog.cloudflare.com/tag/workers/"
		},
		"url": "http://blog.cloudflare.com/rapid-development-of-serverless-chatbots-with-cloudflare-workers-and-workers-kv/",
		"excerpt": "I'm the Product Manager for the Internal Tools team here at Cloudflare. We recently identified a need for a new tool around service ownership. As a fast growing engineering organization, ownership of services changes fairly frequently.",
		"reading_time": 7,
		"access": true,
		"comments": false,
		"og_image": null,
		"og_title": null,
		"og_description": null,
		"twitter_image": null,
		"twitter_title": "Rapid Development of Serverless Chatbots with Cloudflare Workers and Workers KV",
		"twitter_description": "I'm the Product Manager for the Internal Tools team here at Cloudflare. We recently identified a need for a new tool around service ownership.",
		"meta_title": null,
		"meta_description": null,
		"email_subject": null,
		"frontmatter": null,
		"feature_image_alt": null,
		"feature_image_caption": null
	}
}