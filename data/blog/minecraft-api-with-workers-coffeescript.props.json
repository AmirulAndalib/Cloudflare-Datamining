{
	"locale": "en-us",
	"localesAvailable": [],
	"post": {
		"authors": [
			{
				"name": "Ashcon Partovi",
				"slug": "ashcon",
				"bio": null,
				"profile_image": "https://cf-assets.www.cloudflare.com/slt3lc6tev37/6mLS6e7vpfh6V98eiR9MQH/51123b559c38a05e6f26f802259f5604/ashcon.jpeg",
				"location": null,
				"website": null,
				"twitter": "@ashconpartovi",
				"facebook": null
			}
		],
		"excerpt": "If you've ever played a video game in the past couple of years, chances are you know about Minecraft. You might be familiar with the game or even planted a tree or two, but what you might not know about is the vast number of Minecraft online communities. ",
		"feature_image": "https://cf-assets.www.cloudflare.com/slt3lc6tev37/1vjHqnuCEEjHJ5Na1W8zrT/b7e83652b9400fb16a6f09f94d933e0a/minecraft-api-with-workers-coffeescript.png",
		"featured": false,
		"html": "<p><i>The following was originally written as a guest post by </i><a href=\"https://ashcon.app\"><i>Ashcon Partovi</i></a><i>, while a computer science and business undergraduate at the University of British Columbia in Vancouver, Canada. He&#39;s the founder of a popular Minecraft multiplayer server, </i><a href=\"https://stratus.network/forums\"><i>stratus.network</i></a><i>, that provides competitive, team-based gameplay to thousands of players every week. He also now works at Cloudflare.</i></p><p>If you&#39;ve ever played a video game in the past couple of years, chances are you know about <a href=\"https://en.wikipedia.org/wiki/Minecraft\"><i>Minecraft</i>.</a> You might be familiar with the game or even planted a tree or two, but what you might not know about is the vast number of <i>Minecraft</i> online communities. In this post, I&#39;m going to describe how I used Cloudflare Workers to deploy and scale a production-grade API that solves a big problem for these <i>Minecraft</i> websites.</p><h3>Introducing the Problem</h3><p>Here is an example of my <i>Minecraft</i> <a href=\"https://stratus.network/ElectroidFilms\">player profile</a> from one of the many multiplayer websites. It shows some identity information such as my username, a bitmap of my avatar, and a preview of my friends. Although rendering this page with 49 bitmap avatars may seem like an easy task, it&#39;s far from trivial. In fact, it&#39;s unnecessarily complicated.</p><p>Here is the current workflow to render a player profile on a website given their username:</p><ol><li><p>Find the UUID from the player&#39;s username.</p></li></ol>\n            <pre class=\"language-bash\"><code class=\"language-bash\">curl api.mojang.com/users/profiles/minecraft/ElectroidFilms\n{\n    \"id\": \"dad8b95ccf6a44df982e8c8dd70201e0\",\n    \"name\": \"ElectroidFilms\"\n}</pre></code>\n            <ol><li><p>Use that UUID to fetch the latest player information from the session server.</p></li></ol>\n            <pre class=\"language-bash\"><code class=\"language-bash\">curl sessionserver.mojang.com/session/minecraft/profile/dad8b95cc...\n{\n    \"id\": \"dad8b95ccf6a44df982e8c8dd70201e0\",\n    \"name\": \"ElectroidFilms\",\n    \"properties\": [{\n      \"name\": \"textures\",\n      \"value\": \"eyJ0aW1lc3RhbXAiOjE1MzI1MDI...\" // <base64>\n    }]\n}</pre></code>\n            <ol><li><p>Decode the textures string which is encoded as base64.</p></li></ol>\n            <pre class=\"language-bash\"><code class=\"language-bash\">echo \"eyJ0aW1lc3RhbXAiOjE1MzI1MDIwNDY5NjIsIn...\" | base64 --decode\n{\n    \"timestamp\": 1532502046962,\n    \"profileId\": \"dad8b95ccf6a44df982e8c8dd70201e0\",\n    \"profileName\": \"ElectroidFilms\",\n    \"textures\": {\n      \"SKIN\": {\"url\": \"textures.minecraft.net/texture/741df6aa0...\"},\n      \"CAPE\": {\"url\": \"textures.minecraft.net/texture/e7dfea16d...\"}\n    }\n}</pre></code>\n            <ol><li><p>Fetch the texture from the URL in the decoded JSON payload.</p></li></ol>\n            <pre class=\"language-bash\"><code class=\"language-bash\">curl textures.minecraft.net/texture/741df6aa027... > skin.png</pre></code>\n            <ol><li><p>Cache the texture in a database to avoid the 60-second rate limit.</p></li></ol>\n            <pre class=\"language-bash\"><code class=\"language-bash\">mongo\n> db.users.findOneAndUpdate(\n      { _id: \"dad8b95ccf6a44df982e8c8dd70201e0\" },\n      { skin_png: new BinData(0, \"GWA3u4F42GIH318sAlN2wfDAWTQ...\") })</pre></code>\n            <p>Yikes, that&#39;s 5 complex operations required to render a single avatar! But that&#39;s not all, in my example profile, there are 49 avatars, which would require a total of <code>5 * 49 = 245</code> operations.</p><p>And that&#39;s just <i>fetching</i> the data, we haven&#39;t even started to serve it to players! Then you have to setup a host to serve the web traffic, ensure that the service scales with demand, handle cache expiration of assets, and deploy across multiple regions. Then you have to deploy There has to be a better way!</p><h3>Prototyping with Workers</h3><p>I&#39;m a strong believer in the future of serverless computing. So naturally, when I learned how <a href=\"https://developers.cloudflare.com/workers/about/\">Cloudflare Workers</a> allow you to run JavaScript code in 150+ points of presence, I started to tinker with the possibilities of solving this problem. After looking at the documentation and using the <a href=\"https://cloudflareworkers.com\">Workers playground</a>, I quickly put together some JavaScript code that aggregated all that profile complexity into a single request.</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">addEventListener('fetch', event => {\n  event.respondWith(renderPlayerBitmap(event.request))\n})\n\nasync function renderPlayerBitmap(request) {\n  var username = request.url.split(\"/\").pop()\n  console.log(\"Starting request for... \" + username)\n\n  // Step 1: Username -> UUID\n  var uuid = await fetch(\"https://api.mojang.com/users/profiles/minecraft/\" + username)\n  if(uuid.ok) {\n    uuid = (await uuid.json()).id\n    console.log(\"Found uuid... \" + uuid)\n\n    // Step 2: UUID -> Profile\n    var session = await fetch(\"https://sessionserver.mojang.com/session/minecraft/profile/\" + uuid)\n    if(session.ok) {\n      session = await session.json()\n      console.log(\"Found session... \" + JSON.stringify(session))\n\n      // Step 3: Profile -> Texture URL\n      var texture = atob(session.properties[0].value)\n      console.log(\"Found texture... \" + texture)\n\n      // Step 4 + 5: Texture URL -> Texture PNG + Caching\n      texture = JSON.parse(texture)\n      return fetch(texture.textures.SKIN.url, cf: {cacheTtl: 60})\n    }\n  }\n\n  return new Response(undefined, {status: 500})\n}\n</pre></code>\n            <p>Within a couple minutes I had my first Workers implementation! I gave it my username and it was able to make all the necessary sub-requests to return my player&#39;s bitmap texture.</p><p>After realizing the potential of Workers, I started to wonder if I could use it for more than just a single script. What if I could design and deploy a production-ready API for <i>Minecraft</i> that runs exclusively on Workers?</p><h3>Designing an API</h3><p>I wanted to address an essential problem for <i>Minecraft</i> developers: too many APIs with too many restrictions. The hassle of parsing multiple requests and handling errors prevents developers from focusing on creating great experiences for players. There needs to be a solution that requires only <b>1 HTTP request with no rate limiting and no client-side caching.</b> After looking at the various use-cases for the existing APIs, I created a JSON schema that encompassed all the essential data into a single response:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">GET: api.ashcon.app/mojang/v1/user/<username|uuid></pre></code>\n            \n            <pre class=\"language-json\"><code class=\"language-json\">{\n  \"uuid\": \"<uuid>\",\n  \"username\": \"<username>\",\n  \"username_history\": [\n    {\n      \"username\": \"<username>\",\n      \"changed_at\": \"<date|null>\"\n    }\n  ],\n  \"textures\": {\n    \"slim\": \"<boolean>\",\n    \"custom\": \"<boolean>\",\n    \"skin\": {\n      \"url\": \"<url>\",\n      \"data\": \"<base64>\"\n    },\n    \"cape\": {\n      \"url\": \"<url|null>\",\n      \"data\": \"<base64|null>\"\n    }\n  },\n  \"cached_at\": \"<date>\"\n}</pre></code>\n            <p>One of the primary goals I had in mind was to minimize sub-requests by clients. For example, instead of giving developers a URL to a <code>image/png</code> static asset, why not fetch it for them and embed it as a base64 string? Now that&#39;s simplicity!</p><h3>Getting Started</h3><p>For this project, I decided to use <a href=\"https://coffeescript.org\">CoffeeScript</a>, which transcompiles to JavaScript and has a simple syntax. We&#39;ll also need to use <a href=\"https://webpack.js.org\">Webpack</a> to bundle all of our code into a single JavaScript file to upload to Cloudflare.</p>\n            <pre class=\"language-coffeescript\"><code class=\"language-coffeescript\"># Welcome to CoffeeScript!\n\nstr = \"heyo! #{40+2}\"    # 'heyo! 42'\nnum = 12 if str?         # 12\narr = [1, null, \"apple\"] # [1, null, 'apple']\nval = arr[1]?.length()   # null\nhash =                   # {key: 'value'}\n  key: \"value\"\n\nadd = (a, b, {c, d} = {}) ->\n  c ?= 3\n  d ?= 4\n  a + b + c + d\n\nadd(1, 2, d: 5) # 1 + 2 + 3 + 5 = 11</pre></code>\n            <p>First, let&#39;s make sure we have the proper dependencies installed for the project! These commands will create a <code>package.json</code> file and a <code>node_modules/</code> folder in our workspace.</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">mkdir -p workspace/src\ncd workspace\nnpm init --yes\nnpm install --save-dev webpack webpack-cli coffeescript coffee-loader workers-preview</pre></code>\n            <p>Now, we&#39;re going to edit our <code>package.json</code> to add two helper scripts for later. You can delete the default <code>&quot;test&quot;</code> script as well.</p>\n            <pre class=\"language-json\"><code class=\"language-json\">\"scripts\": {\n  \"build\": \"webpack\",\n  \"build:watch\": \"webpack --watch\",\n  \"preview\": \"workers-preview < dist/bundle.js\"\n}</pre></code>\n            <p>We also need to initialize a <code>webpack.config.js</code> file with a CoffeeScript compiler.</p>\n            <pre class=\"language-javascript\"><code class=\"language-javascript\">const path = require('path')\n\nmodule.exports = {\n  entry: {\n    bundle: path.join(__dirname, './src/index.coffee'),\n  },\n  output: {\n    filename: 'bundle.js',\n    path: path.join(__dirname, 'dist'),\n  },\n  mode: 'production',\n  watchOptions: {\n    ignored: /node_modules|dist|\\.js/g,\n  },\n  resolve: {\n    extensions: ['.coffee', '.js', '.json'],\n    plugins: [],\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.coffee?$/,\n        loader: 'coffee-loader',\n      }\n    ]\n  }\n}</pre></code>\n            <p>Before we start coding, we&#39;ll create a <code>src/index.coffee</code> file and make sure everything is working so far.</p>\n            <pre class=\"language-coffeescript\"><code class=\"language-coffeescript\">addEventListener('fetch', (event) ->\n  event.respondWith(route(event.request)))\n\n# We will populate this with our own logic after we test it!\nroute = (request) ->\n  fetch('https://api.ashcon.app/mojang/v1/user/ElectroidFilms')</pre></code>\n            <p>Open your terminal in the <code>workspace/</code> directory and run the following commands:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">npm run build\nnpm run preview</pre></code>\n            <p>Your computer&#39;s default internet browser will open up a new window and preview the result of our Worker. If you see a JSON response, then everything is working properly and we&#39;re ready to go!</p><h3>Writing Production Code for Workers</h3><p>Now that we&#39;re setup with a working example, we can design our source code file structure. It&#39;s important that we break up our code into easily testable chunks, so I&#39;ve gone ahead and outlined the approach that I took with this project:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">src/\n  index.coffee  # routing and serving requests\n  api.coffee    # logic layer to mutate and package requests\n  mojang.coffee # non-logic layer to send upstream requests\n  http.coffee   # HTTP requesting, parsing, and responding\n  util.coffee   # util methods and extensions</pre></code>\n            <p>If you&#39;ve feeling adventurous, I&#39;ve included a simplified version of my API code that you can browse through below. If you look at each file, you&#39;ll have a fully working implementation by the end! Otherwise, you can continue reading to learn about my deployment and analysis of the APIs impact.</p><h4><code>http.coffee</code></h4><p>Since our API will be making several HTTP requests, it&#39;s a good idea to code some common <code>request</code> and <code>respond</code> methods that can be reused among multiple requests. At the very least, we need to support parsing JSON or base64 responses and sending JSON or string data back to the client.</p>\n            <pre class=\"language-coffeescript\"><code class=\"language-coffeescript\"># Send a Http request and get a response.\n#\n# @param {string} url - Url to send the request.\n# @param {string} method - Http method (get, post, etc).\n# @param {integer} ttl - Time in seconds for Cloudflare to cache the request.\n# @param {boolean} json - Whether to parse the response as json.\n# @param {boolean} base64 - Whether to parse the response as a base64 string.\n# @returns {promise<\n#   json -> [err, json]\n#   base64 -> string|null\n#   else -> response\n# >} - A different response based on the method parameters above.\nexport request = (url, {method, ttl, json, base64} = {}) ->\n  method ?= \"GET\"\n  response = await fetch(url, method: method, cf: {cacheTtl: ttl} if ttl)\n  if json # Return a tuple of [err, json].\n    if err = coerce(response.status)\n      [err, null]\n    else\n      [null, await response.json()]\n  else if base64 # Return base64 string or null.\n    if response.ok\n      Buffer.from(await response.arrayBuffer(), \"binary\").toString(\"base64\")\n  else # If no parser is specified, just return the raw response.\n    response\n\nexport get = (url, options = {}) ->\n  request(url, Object.assign(options, {method: \"GET\"}))\n\n# Respond to a client with a http response.\n#\n# @param {object} data - Data to send back in the response.\n# @param {integer} code - Http status code.\n# @param {string} type - Http content type.\n# @param {boolean} json - Whether to respond in json.\n# @param {boolean} text - Whether to respond in plain text.\n# @returns {response} - Raw response object.\nexport respond = (data, {code, type, json, text} = {}) ->\n  code ?= 200\n  if json\n    type = \"application/json\"\n    # \"Pretty-print\" our JSON response with 2 spaces.\n    data = JSON.stringify(data, undefined, 2)\n  else if text\n    type = \"text/plain\"\n    data = String(data)\n  else\n    type ?= \"application/octet-stream\"\n  new Response(data, {status: code, headers: {\"Content-Type\": type}})\n\nexport error = (reason = null, {code, type} = {}) ->\n  code ?= 500\n  type ?= \"Internal Error\"\n  # An example would be: \"Internal Error - 500 (this is the reason)\"\n  respond(\"#{code} - #{type}\" + (if reason then \" (#{reason})\" else \"\"), code: code, text: true)\n\nexport badRequest = (reason = null) ->\n  error(reason, code: 400, type: \"Bad Request\")\n\nexport notFound = (reason = null) ->\n  error(reason, code: 404, type: \"Not Found\")\n\nexport tooManyRequests = (reason = null) ->\n  error(reason, code: 429, type: \"Too Many Requests\")\n\n# Convert common http error codes into error responses.\n#\n# @param {integer} code - Http status code.\n# @returns {response|null} - An error response or null if a 200 code.\nexport coerce = (code) ->\n  switch code\n    when 200 then null\n    # Some Minecraft APIs use 204 as a stand-in for a 404.\n    when 204 then notFound()\n    when 400 then invalidRequest()\n    # Theoretically this should never happen, but sometimes does.\n    when 429 then tooManyRequests()\n    else error(\"Unknown Response\", code: code)</pre></code>\n            <p>The <code>cf</code> key can be used to control various Cloudflare features, including how sub-requests are cached. See the <a href=\"https://developers.cloudflare.com/workers/reference/cloudflare-features/\">Workers documentation</a> for a more in-depth explanation.</p>\n            <pre class=\"language-coffeescript\"><code class=\"language-coffeescript\">cf:\n  cacheTtl: 120 # Cache for 2 mins.\n  # Pro+ only.\n  polish: \"lossless\" # Compress image data.\n  # Enterprise only.\n  cacheTtlByStatus:\n    \"200-299\": 60 # Cache for 60 secs.\n    \"300-399\": 0  # Cache but expire instantly.\n    \"400-404\": 10 # Cache for 10 secs.\n    \"405-599\": -1 # Do not cache at all.\n  cacheKey: url # Cache lookup key, defaults to the request URL.</pre></code>\n            <h4><code>mojang.coffee</code></h4><p>Now that we have code to send and parse requests, we can create an interface to retrieve data from the upstream APIs. It&#39;s good to note that there should be no mutation logic in this file, it&#39;s purpose is just to get the old APIs, not change them.</p>\n            <pre class=\"language-coffeescript\"><code class=\"language-coffeescript\">import { get } from \"./http\"\n\n# Get the UUID of a username at the current time.\n#\n# @param {string} name - Minecraft username.\n# @throws {204} - When no user exists with that name.\n# @returns {[err, json]} - An error or username and UUID response.\nexport usernameToUuid = (name) ->\n  get(\"https://api.mojang.com/users/profiles/minecraft/#{name}\", json: true)\n\n# Get the history of usernames for the given UUID.\n#\n# @param {string} id - The UUID to check the username history.\n# @returns {[err, json]} - An error or the username history.\nexport uuidToUsernameHistory = (id) ->\n  get(\"https://api.mojang.com/user/profiles/#{id}/names\", json: true)\n\n# Get the session profile of the UUID.\n#\n# @param {string} id - UUID to get the session profile.\n# @returns {[err, json]} - An error or the session profile.\nexport uuidToProfile = (id) ->\n  get(\"https://sessionserver.mojang.com/session/minecraft/profile/#{id}\", json: true)</pre></code>\n            <h4><code>api.coffee</code></h4><p>This is where the bulk of our API logic will reside. I&#39;ve broken up the process into 3 interdependent tasks that are executed in order:</p><ol><li><p>Given a username, fetch its UUID.</p></li><li><p>Given a UUID, fetch the user&#39;s profile.</p></li><li><p>Given a user&#39;s profile, decode and fetch the textures.</p></li></ol>\n            <pre class=\"language-coffeescript\"><code class=\"language-coffeescript\">import { get, respond, error, notFound, badRequest } from \"./http\"\nimport { usernameToUuid, uuidToProfile, uuidToUsernameHistory } from \"./mojang\"\n\n# Get the uuid of a user given their username.\n#\n# @param {string} name - Minecraft username, must be alphanumeric 16 characters.\n# @returns {[err, response]} - An error or the dashed uuid of the user.\nexport uuid = (name) ->\n  if name.asUsername() # Fits regex of a Minecraft username.\n    [err, res] = await usernameToUuid(name)\n    if id = res?.id?.asUuid(dashed: true)\n      [null, respond(id, text: true)]\n    else # Response was received, but contains no UUID.\n      [err || notFound(), null]\n  else\n    [badRequest(\"malformed username '#{name}'\"), null]\n\n# Get the full profile of a user given their uuid or username.\n#\n# @param {string} id - Minecraft username or uuid.\n# @returns {[err, json]} - An error or user profile.\nexport user = (id) ->\n  if id.asUsername()\n    [err, res] = await uuid(id)\n    if err # Could not find a player with that username.\n      [err, null]\n    else # Recurse with the new UUID.\n      await user(id = await res.text())\n  else if id.asUuid()\n    # Fetch the profile and usernames in parallel.\n    [[err0, profile], [err1, history]] = await Promise.all([\n      uuidToProfile(id = id.asUuid())\n      uuidToUsernameHistory(id)])\n    # Extract the textures from the profile.\n    # Since this operation is complex, off-load\n    # the logic into its own method.\n    [err2, texture] = await textures(profile)\n    if err = err0 || err1 || err2\n      [err, null] # One of the last three operations failed.\n    else\n      # Everything is good, now just put the data together.\n      [null, respond(\n        uuid: profile.id.asUuid(dashed: true)\n        username: profile.name\n        username_history: history.map((item) ->\n          username: item.name\n          changed_at: item.changedToAt?.asDate())\n        textures: texture\n        cached_at: new Date(),\n      json: true)]\n  else\n    [badRequest(\"malformed uuid '#{id}'\"), null]\n\n# Parse and decode base64 textures from the user profile.\n#\n# @param {json} profile - User profile from #uuidToProfile(id).\n# @returns {json} - Enhanced user profile with more convient texture fields.\ntextures = (profile) ->\n  unless profile # Will occur if the profile api failed.\n    return [error(\"no user profile found\"), null]\n  properties = profile.properties\n  if properties.length == 1\n    texture = properties[0]\n  else\n    texture = properties.filter((pair) -> pair.name == \"textures\" && pair.value?)[0]\n  # If a embedded texture does not exist or is empty,\n  # that user does not have a custom skin.\n  if !texture || (texture = JSON.parse(atob(texture.value)).textures).isEmpty()\n    skinUrl = \"http://assets.mojang.com/SkinTemplates/steve.png\"\n  # Fetch the skin and cape data in parallel, and cache for a day.\n  [skin, cape] = await Promise.all([\n    get(skinUrl ?= texture.SKIN?.url, base64: true, ttl: 86400)\n    get(capeUrl = texture.CAPE?.url, base64: true, ttl: 86400)])\n  unless skin\n    [error(\"unable to fetch skin '#{skinUrl}'\"), null]\n  else\n    texture =\n      slim: texture.SKIN?.metadata?.model == \"slim\"\n      skin: {url: skinUrl, data: skin}\n      cape: {url: capeUrl, data: cape} if capeUrl\n    [null, texture]</pre></code>\n            <h4><code>index.coffee</code></h4><p>Now, we parse the request&#39;s route and respond with the corresponding API.</p>\n            <pre class=\"language-coffeescript\"><code class=\"language-coffeescript\">import \"./util\"\nimport { notFound } from \"./http\"\nimport { uuid, user } from \"./api\"\n\naddEventListener(\"fetch\", (event) ->\n  event.respondWith(route(event.request)))\n\nroute = (request) ->\n  [base, version, method, id] = request.url.split(\"/\")[3..6]\n  if base == \"mojang\" && id?\n    if version == \"v1\"\n      v1(method, id)\n    else\n      notFound(\"unknown api version '#{version}'\")\n  else\n    notFound(\"unknown route\")\n\nv1 = (method, id) ->\n  if method == \"uuid\"\n    [err, res] = await uuid(id)\n  else if method == \"user\"\n    [err, res] = await user(id)\n  err || res || notFound(\"unknown v1 route '#{method}'\")</pre></code>\n            <h4><code>util.coffee</code></h4><p>Finally, we&#39;ll add some prototype extensions that we used along the way.</p>\n            <pre class=\"language-coffeescript\"><code class=\"language-coffeescript\"># Insert a string at a given index.\n#\n# @param {integer} i - Index to insert the string at.\n# @param {string} str - String to insert.\nString::insert = (i, str) ->\n  this.slice(0, i) + str + this.slice(i)\n\n# Ensure that the string is a valid Uuid.\n#\n# If dashed is enabled, it is possible the input\n# string is not the same as the output string.\n#\n# @param {boolean} dashed - Whether to return a dashed uuid.\n# @returns {string|null} - A uuid or null.\nString::asUuid = ({dashed} = {}) ->\n  if match = uuidPattern.exec(this)\n    uuid = match[1..].join(\"\")\n    if dashed\n      uuid.insert(8, \"-\")\n          .insert(12+1, \"-\")\n          .insert(16+2, \"-\")\n          .insert(20+3, \"-\")\n    else\n      uuid\nuuidPattern = /^([0-9a-f]{8})(?:-|)([0-9a-f]{4})(?:-|)(4[0-9a-f]{3})(?:-|)([0-9a-f]{4})(?:-|)([0-9a-f]{12})$/i\n\n# Ensure that the string is a valid Minecraft username.\n#\n# @returns {string|null} - Minecraft username or null.\nString::asUsername = ->\n  if usernamePattern.test(this) then this else false\nusernamePattern = /^[0-9A-Za-z_]{1,16}$/i\n\n# Ensure that the unix number is a Date.\n#\n# @returns {date} - The number as a floored date.\nNumber::asDate = ->\n  new Date(Math.floor(this))\n\n# Determine if the object is empty.\n#\n# @returns {boolean} - Whether the object is empty.\nObject::isEmpty = ->\n  Object.keys(this).length == 0</pre></code>\n            <h3>Analyzing a Workers Deployment</h3><p>I&#39;ve had this code deployed and tested by real <i>Minecraft</i> users for the past few weeks. As a developer that has global web traffic, it&#39;s pivotal that players can quickly get access to my services. The essential advantage of Workers is that I don&#39;t need to deploy several replicas of my code to different cloud regions, it&#39;s everywhere! That means players from any part of the world get the same great web experience with minimal latency.</p><p>As of today, the API is processing over <b>400k requests per day</b> from users all over the world! Cloudflare caches responses in the closest point of presence to the client, so I don&#39;t need to setup a database and developers don&#39;t need to worry about rate-limiting.</p><p>Since each request to the API generates 4 to 5 additional sub-requests, it handles approximately <b>1.8 million fetches per day</b> with a 88% cache hit rate.</p><h3>Wrapping Up</h3><p>Cloudflare Workers have enabled me to solve complex technical problems without worrying about host infrastructure or cloud regions. It&#39;s simple, easy to deploy, and works blazing fast all around the world. And for <b>50 cents for every 1 million requests</b>, it&#39;s incomparable to the other serverless solutions on the market.</p><p>If you&#39;re not already convinced to start using Workers, here&#39;s the deployment history of my API. I went from <b>0 to 5 million requests</b> with no scaling, no resizing, no servers, no clusters, and no containers. Just code.</p><p>If you&#39;re interested in looking at all of the code used in the post, you can find it here:<a href=\"https://github.com/Electroid/mojang-api\">https://github.com/Electroid/mojang-api</a></p><p>And if you&#39;re a <i>Minecraft</i> developer, my API is open for you to use for free:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">curl https://api.ashcon.app/mojang/v1/uuid/ElectroidFilms\ncurl https://api.ashcon.app/mojang/v1/user/ElectroidFilms</pre></code>\n            <p>You can also use this <a href=\"https://github.com/Electroid/mojang-api/tree/master/avatar\">extra goodie</a> that will crop just the face from a player texture:</p>\n            <pre class=\"language-bash\"><code class=\"language-bash\">curl https://api.ashcon.app/mojang/v1/avatar/ElectroidFilms > avatar.png\nopen avatar.png</pre></code>\n            ",
		"id": "HyCfVxEO5PIYjdk0kc5y1",
		"localeList": {
			"name": "Minecraft API with Workers + CoffeeScript Config",
			"enUS": "English for Locale",
			"zhCN": "No Page for Locale",
			"zhHansCN": "No Page for Locale",
			"zhTW": "No Page for Locale",
			"frFR": "No Page for Locale",
			"deDE": "No Page for Locale",
			"itIT": "No Page for Locale",
			"jaJP": "No Page for Locale",
			"koKR": "No Page for Locale",
			"ptBR": "No Page for Locale",
			"esLA": "No Page for Locale",
			"esES": "No Page for Locale",
			"enAU": "No Page for Locale",
			"enCA": "No Page for Locale",
			"enIN": "No Page for Locale",
			"enGB": "No Page for Locale",
			"idID": "No Page for Locale",
			"ruRU": "No Page for Locale",
			"svSE": "No Page for Locale",
			"viVN": "No Page for Locale",
			"plPL": "No Page for Locale",
			"arAR": "No Page for Locale",
			"nlNL": "No Page for Locale",
			"thTH": "No Page for Locale",
			"trTR": "No Page for Locale",
			"heIL": "No Page for Locale",
			"lvLV": "No Page for Locale",
			"etEE": "No Page for Locale",
			"ltLT": "No Page for Locale"
		},
		"meta_description": null,
		"metadata": {
			"imgPreview": ""
		},
		"primary_author": {},
		"published_at": "2018-07-31T09:00:00.000+01:00",
		"reading_time": 10,
		"slug": "minecraft-api-with-workers-coffeescript",
		"tags": [
			{
				"id": "6hbkItfupogJP3aRDAq6v8",
				"name": "Cloudflare Workers",
				"slug": "workers"
			},
			{
				"id": "5cye1Bh5KxFh3pKSnX8Dsy",
				"name": "Serverless",
				"slug": "serverless"
			},
			{
				"id": "4HIPcb68qM0e26fIxyfzwQ",
				"name": "Developers",
				"slug": "developers"
			},
			{
				"id": "6lhzEBz2B56RKa4nUEAGYJ",
				"name": "Programming",
				"slug": "programming"
			},
			{
				"id": "3JAY3z7p7An94s6ScuSQPf",
				"name": "Developer Platform",
				"slug": "developer-platform"
			}
		],
		"title": "Minecraft API with Workers + CoffeeScript",
		"updated_at": "2024-08-27T02:20:33.463Z",
		"url": "https://blog.cloudflare.com/minecraft-api-with-workers-coffeescript"
	},
	"translations": {
		"posts.by": "By",
		"footer.gdpr": "GDPR",
		"lang_blurb1": "This post is also available in {lang1}.",
		"lang_blurb2": "This post is also available in {lang1} and {lang2}.",
		"lang_blurb3": "This post is also available in {lang1}, {lang2} and {lang3}.",
		"footer.blurb": "Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href='http://www.cloudflare.com/careers' rel='noreferrer'>our open positions</a>.",
		"footer.press": "Press",
		"header.title": "The Cloudflare Blog",
		"footer.careers": "Careers",
		"footer.company": "Company",
		"footer.support": "Support",
		"footer.the_net": "theNet",
		"footer.our_team": "Our team",
		"footer.webinars": "Webinars",
		"page.more_posts": "More posts",
		"posts.time_read": "{time} min read",
		"footer.community": "Community",
		"footer.resources": "Resources",
		"footer.solutions": "Solutions",
		"footer.trademark": "Trademark",
		"header.subscribe": "Subscribe",
		"footer.compliance": "Compliance",
		"footer.free_plans": "Free plans",
		"footer.impact_ESG": "Impact/ESG",
		"posts.follow_on_X": "Follow on X",
		"footer.help_center": "Help center",
		"footer.network_map": "Network Map",
		"header.please_wait": "Please Wait",
		"page.related_posts": "Related posts",
		"footer.case_studies": "Case Studies",
		"footer.connect_2024": "Connect 2024",
		"footer.terms_of_use": "Terms of Use",
		"footer.white_papers": "White Papers",
		"footer.cloudflare_tv": "Cloudflare TV",
		"footer.community_hub": "Community Hub",
		"footer.compare_plans": "Compare plans",
		"footer.contact_sales": "Contact Sales",
		"header.contact_sales": "Contact Sales",
		"header.email_address": "Email Address",
		"page.error.not_found": "Page not found",
		"footer.developer_docs": "Developer docs",
		"footer.privacy_policy": "Privacy Policy",
		"footer.request_a_demo": "Request a demo",
		"page.continue_reading": "Continue reading",
		"footer.analysts_report": "Analyst reports",
		"footer.for_enterprises": "For enterprises",
		"footer.getting_started": "Getting Started",
		"footer.learning_center": "Learning Center",
		"footer.project_galileo": "Project Galileo",
		"pagination.newer_posts": "Newer Posts",
		"pagination.older_posts": "Older Posts",
		"posts.social_buttons.x": "Discuss on X",
		"footer.about_cloudflare": "About Cloudflare",
		"footer.athenian_project": "Athenian Project",
		"footer.become_a_partner": "Become a partner",
		"footer.cloudflare_radar": "Cloudflare Radar",
		"footer.network_services": "Network services",
		"footer.trust_and_safety": "Trust & Safety",
		"header.get_started_free": "Get Started Free",
		"page.search.placeholder": "Search Cloudflare",
		"footer.cloudflare_status": "Cloudflare Status",
		"footer.cookie_preference": "Cookie Preferences",
		"header.valid_email_error": "Must be valid email.",
		"footer.connectivity_cloud": "Connectivity cloud",
		"footer.developer_services": "Developer services",
		"footer.investor_relations": "Investor relations",
		"page.not_found.error_code": "Error Code: 404",
		"footer.logos_and_press_kit": "Logos & press kit",
		"footer.application_services": "Application services",
		"footer.get_a_recommendation": "Get a recommendation",
		"posts.social_buttons.reddit": "Discuss on Reddit",
		"footer.sse_and_sase_services": "SSE and SASE services",
		"page.not_found.outdated_link": "You may have used an outdated link, or you may have typed the address incorrectly.",
		"footer.report_security_issues": "Report Security Issues",
		"page.error.error_message_page": "Sorry, we can't find the page you are looking for.",
		"header.subscribe_notifications": "Subscribe to receive notifications of new posts:",
		"footer.cloudflare_for_campaigns": "Cloudflare for Campaigns",
		"header.subscription_confimation": "Subscription confirmed. Thank you for subscribing!",
		"posts.social_buttons.hackernews": "Discuss on Hacker News",
		"footer.diversity_equity_inclusion": "Diversity, equity & inclusion",
		"footer.critical_infrastructure_defense_project": "Critical Infrastructure Defense Project"
	}
}