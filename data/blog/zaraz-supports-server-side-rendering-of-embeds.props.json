{
	"browserLocale": "en-us",
	"locale": "en-us",
	"post": {
		"access": true,
		"authors": [
			{
				"id": "619bd62d6e475c001051a83b",
				"name": "Yair Dovrat",
				"slug": "yair-dovrat",
				"profile_image": "http://blog.cloudflare.com/content/images/2021/11/profile.jpeg",
				"cover_image": null,
				"bio": "Product Manager at Cloudflare. Previously co-founder & CEO of Zaraz, a third-party manager built for speed, privacy and security. A poet and classicist. Y Combinator W20 batch.",
				"website": null,
				"location": "Brussels",
				"facebook": null,
				"twitter": "@YDovrat",
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/yair-dovrat/"
			}
		],
		"canonical_url": null,
		"codeinjection_foot": null,
		"codeinjection_head": null,
		"comment_id": "667d9546a4598c000bd7062b",
		"comments": false,
		"created_at": "2024-06-27T17:37:26.000+01:00",
		"custom_excerpt": "We are thrilled to announce Cloudflare Zaraz support for server-side rendering of embeds from X and Instagram. This allows for secure, privacy-preserving, and performant embedding without third-party JavaScript or cookies, enhancing security, privacy, and performance on your website",
		"custom_template": null,
		"email_subject": null,
		"excerpt": "We are thrilled to announce Cloudflare Zaraz support for server-side rendering of embeds from X and Instagram. This allows for secure, privacy-preserving, and performant embedding without third-party JavaScript or cookies, enhancing security, privacy, and performance on your website",
		"feature_image": "http://blog.cloudflare.com/content/images/2024/07/Enhancing-Zaraz-Support_-Introducing-Certified-Developer.png",
		"feature_image_alt": null,
		"feature_image_caption": null,
		"featured": false,
		"frontmatter": null,
		"html": "<figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2024/07/Enhancing-Zaraz-Support_-Introducing-Certified-Developer-1.png\" class=\"kg-image\" alt=\"Cloudflare Zaraz adds support for server-side rendering of X and Instagram embeds\" loading=\"lazy\" width=\"2401\" height=\"1351\"></figure><p>We are thrilled to announce <a href=\"https://developers.cloudflare.com/zaraz/\">Cloudflare Zaraz</a> support of server-side rendering of embeds, featuring two Managed Components: X and Instagram. You can now use Cloudflare Zaraz to effortlessly embed posts from X or Instagram on your website in a performant, privacy-preserving, and secure way. Many traditional tag managers or customer data platforms rely heavily on third-party JavaScript and cookies to embed content, leading to concerns about privacy and performance. In contrast, we designed our solution to work without loading any third-party JavaScript or cookies, and furthermore to completely eliminate communication between the browser and third-party servers.</p><p>Starting today, you can use Cloudflare Zaraz not only for server-side data reporting to conventional marketing and analytics tools but also for server-side content rendering on your website. We are excited to pave the way with tools that enhance security, protect user privacy, and improve performance. Take a look at it:</p><!--kg-card-begin: html--><twitter-post tweet-id=\"1811018789498040736\"></twitter-post><!--kg-card-end: html--><h2 id=\"embed-social-media-content-without-sacrificing-security-and-speed\">Embed social media content without sacrificing security and speed</h2><p>Since social media platforms emerged, we have become more and more familiar with seeing posts being embedded on websites, from showcasing user testimonials on product pages to featuring posts from reporters and politicians in news articles or blogs. Traditionally, this process has involved integrating HTML and JavaScript code provided by the social media platform. While this method was quite convenient and simple to implement, it also introduces significant drawbacks in terms of security, privacy, and performance.<br></p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"http://blog.cloudflare.com/content/images/2024/06/image5-6.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"1882\" height=\"1280\"><figcaption><em>Instagram’s interface to copy HTML embed code</em></figcaption></figure><p>One of the primary concerns with using the embed scripts from these platforms is privacy. Today, there’s simply no way to embed social media content on your website without letting social media platforms collect data on your users. Very often this is done via <a href=\"https://www.cloudflare.com/learning/privacy/what-are-cookies/\">cookies</a>, but it is not the only way in which social media platforms collect information on your end users. More often than not, traditional embed scripts <a href=\"https://www.insideprivacy.com/international/european-union/cjeu-rules-that-facebook-and-website-operators-are-joint-controllers-if-the-website-embeds-facebooks-like-button/\">capture sensitive information</a> from the browser and include it in the requests sent to their endpoints, and often even to other third-party endpoints. Even if they don’t explicitly collect private information, the very request made from the browser to fetch the remote JavaScript resource can potentially expose sensitive user information, such as the IP address or User Agent. This practice has already led to GDPR compliance issues in Europe with other tools, as seen in the case with <a href=\"http://blog.cloudflare.com/cloudflare-fonts-enhancing-website-privacy-speed/\">Google Fonts</a>, and poses a similar future risk with any other third-party tool, including embeds.</p><p>Security is another big risk embed scripts pose. By embedding these external scripts, websites essentially place their trust in the security of these third-party platforms. A single vulnerability in any of their dependency libraries could <a href=\"http://blog.cloudflare.com/detecting-magecart-style-attacks-for-pageshield/\">compromise user safety</a> on a massive scale.</p><p>In contrast to traditional social media platform code snippets, Zaraz's method of embedding X and Instagram posts does not load any third-party JavaScript on the client side. And not only that, by leveraging different <a href=\"https://managedcomponents.dev/specs/category/server-functionality\">Managed Component APIs</a> (see code walkthrough below), Zaraz is fetching and caching all the content on the server side, and serving everything from your own domain. This means that there’s simply no direct communication between the end user’s browser and the third-party endpoint, which gives you much greater control over what information is shared with the external platform, if any.</p><p>Zaraz, running entirely on Cloudflare Workers, and with its ability to inject HTML before web content is served, also has performance advantages. Below, you can see the perfect 100 score that our X embed has received from Google PageSpeed Insights, and our ability to reach 0ms Total Blocking Time with only one request and a minimal transfer size of 12.1 KiB. To showcase the new feature, we’ve put together two identical HTML pages that are loading <a href=\"https://twitter.com/eastdakota/status/1754336034228171055\">this tweet</a>. One is embedding the tweet using Zaraz, the other embeds the code snippet provided by X. We then ran the Google PageSpeed Insights tests on the pages, loaded from the exact same environment.</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2024/06/image3-16.png\" class=\"kg-image\" alt=\"Cloudflare Zaraz Twitter Embed scores 100 in Google PageSpeed Insights test\" loading=\"lazy\" width=\"1434\" height=\"1056\"></figure><p>In comparison, the traditional way of embedding social media posts introduces a significant performance hit. Below are the results of the traditional embed code we tested: a 27-point decrease in the performance score, multiple requests with transfer size of 475 KiB, and 1,010 ms of Total Blocking Time (more than a second just to render this tweet!).</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2024/06/image2-16.png\" class=\"kg-image\" alt=\"X’s Embed code caused a 27-point decrease in the performance score on this Google PageSpeed Insights test.\" loading=\"lazy\" width=\"1458\" height=\"1324\"></figure><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2024/06/image1-24.png\" class=\"kg-image\" alt=\"X’s Embed code is blocking the main thread for over a second. \" loading=\"lazy\" width=\"1428\" height=\"1226\"></figure><p>By processing content server-side, we completely eliminate the need for cookies or third-party scripts on the client's browser, we prevent direct communication between the browser and the third-party server, and we provide a significantly faster user experience. So how does it work? Let’s dive into the code.</p><h2 id=\"using-and-building-embeds\">Using and building embeds</h2><p>The <a href=\"https://github.com/managed-components/twitter/\">X</a> and <a href=\"https://github.com/managed-components/instagram/\">Instagram</a> Managed Components we’ve built are open source and available on GitHub. We took a different approach with each tool to showcase different methods for fetching content and generating the embed’s HTML and CSS. The X embed is requesting JSON from X’s endpoint, and is distributing the information received inside a templated HTML post we’ve written. The HTML template mimics the looks of the original post. The Instagram embed is requesting the actual post’s HTML generated by Instagram, manipulating it so that it doesn’t include any scripts, and routing all the images and CSS through your own domain. We outline and showcase the different processes below.</p><h3 id=\"how-to-embed-posts-using-cloudflare-zaraz\">How to embed posts using Cloudflare Zaraz</h3><p>Loading an embed with Cloudflare Zaraz is simple: instead of loading the Embed JavaScript provided by X or Instagram, you simply add a placeholder element to your HTML.</p><p>For X:</p><!--kg-card-begin: markdown--><pre><code>&lt;twitter-post tweet-id=&quot;1754336034228171055&quot;&gt;&lt;/twitter-post&gt;\n</code></pre>\n<!--kg-card-end: markdown--><p>* Make sure to replace the tweet-id with the number shown in the embedded tweet’s URL.</p><p>For Instagram:</p><!--kg-card-begin: markdown--><pre><code>&lt;instagram-post\n  post-url=&quot;https://www.instagram.com/p/Ct_qa1ZtmiW/&quot;\n  captions=&quot;true&quot;&gt;\n&lt;/instagram-post&gt;\n</code></pre>\n<!--kg-card-end: markdown--><p>* Make sure to replace the post-url with the URL of the desired post. When `captions` is set to true, the embed will include the post’s captions.</p><p>Once you've added the HTML to your page, activate the corresponding tools in your Cloudflare Zaraz dashboard. Click “Add new tools” to add X and Instagram. This is how your screen should look when you finish setting up your tools:</p><figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2024/06/image6-4.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"1836\" height=\"1056\"></figure><p>Cloudflare Zaraz will then detect placeholder elements in your HTML and replace them with the embedded social media content.</p><h3 id=\"walkthrough-of-the-x-post-embed\">Walkthrough of the X post embed</h3><p>The X Managed Component is registering the following embed:</p><!--kg-card-begin: markdown--><pre><code class=\"language-JavaScript\">manager.registerEmbed(&quot;post&quot;, async ({ parameters, client }) =&gt; {\n  // embed's logic goes here\n});\n</code></pre>\n<!--kg-card-end: markdown--><p>Zaraz detects the placeholder element &lt;twitter-post&gt;, and picks up all the parameters included as HTML attributes of that element and sends them inside an object, together with the client, as the first argument of the <a href=\"https://managedcomponents.dev/specs/embed-and-widgets/embeds\"><code>manager.registerEmbed()</code></a> function. The <code>manager.registerEmbed()</code> <code>callback</code> will return HTML. To generate the HTML, we use generic HTML and CSS templates we’ve written to construct the post. Those templates contain placeholder variables to be filled with the relevant tweet data later on.</p><p>We use <a href=\"http://mustache.github.io/\">Mustache</a>, a library for rendering templates, to replace the placeholder variables spread across the HTML template. Wherever Mustache detects <code>{{text}}</code>, <code>{{name}}</code>, <code>{{username}}</code>, and the like in the HTML, it will replace their content with the relevant values we pass to it, like so:</p><!--kg-card-begin: markdown--><pre><code class=\"language-JavaScript\">//using Mustache to search for and replace placeholder variables in the post template with the tweet's content \n    const output = mustache.render(post, {\n      text,\n      name: user.name,\n      username: user.screen_name,\n      picture: 'data:image/jpeg;base64,' + profileImage,\n      datetime,\n      likes: numberFormatter(favorite_count, 1),\n      replies: numberFormatter(conversation_count, 1),\n      heartIcon,\n      commentIcon,\n      linkIcon,\n      tweetId,\n      xIcon,\n      tooltipIcon,\n      retweetUrl,\n    })\n</code></pre>\n<!--kg-card-end: markdown--><p>Most of the values of the variables we pass to Mustache, which contain the specific post data, are being fetched from one of X’s endpoints. This is done with a server-side fetch request. The response, containing a JSON file with all the post’s data, is then populated into the corresponding variables as shown above.</p><p>Zaraz is also caching the JSON for better performance. This is done with the Managed Components <a href=\"https://managedcomponents.dev/specs/cache/useCache\"><code>manager.useCache()</code></a> method, which takes 3 arguments: name, function and expiry. Here, the function argument is using <a href=\"https://managedcomponents.dev/specs/server-functionality/fetch\"><code>manager.fetch()</code></a> to send a fetch request from the server.</p><!--kg-card-begin: markdown--><pre><code class=\"language-JavaScript\">(...)\n\n// grabs the tweet-id from the parameters argument\n    const tweetId = parameters['tweet-id'] \n\n(...)\n\nconst tweetResponse = await manager.useCache(\n      'tweet_' + tweetId,\n      async () =&gt; {\n        const res = await manager.fetch(       `https://cdn.syndication.twimg.com/tweet-result?id=${tweetId}&amp;token=${randomToken}`,\n          {\n            headers: {\n              Accept: 'application/json',\n              'User-Agent': client?.userAgent || prefixedUA,\n            },\n          }\n        )\n        if (!res) {\n          throw new Error('Failed to fetch tweet data.')\n        }\n        return await res.text()\n      },\n      600 // cache the Tweet for 10 minutes\n    )\n</code></pre>\n<!--kg-card-end: markdown--><p>It is important to mention that all images populated in the post template, like the profile picture, are fetched server-side and cached using <a href=\"https://managedcomponents.dev/specs/storage/set\"><code>manager.set()</code></a>:</p><!--kg-card-begin: markdown--><pre><code class=\"language-JavaScript\">// first, we check if profile image is already cached\nlet profileImage = await manager.get('profileImage_' + user.screen_name)\n\n// if not, we fetch the image server-side and cache it using `manager.set()`\n\n    if (!profileImage) {\n      const res = await manager.fetch(user.profile_image_url_https, {\n        headers: {\n          Accept: 'image/jpeg,image/png,image/*,*/*;q=0.8',\n          'User-Agent': client?.userAgent || prefixedUA,\n        },\n        method: 'GET',\n      })\n      if (res) {\n        const imageBuffer = await res.arrayBuffer()\n\n        profileImage = base64Encode(imageBuffer)\n        await manager.set('profileImage_' + user.screen_name, profileImage)\n      }\n    }\n</code></pre>\n<!--kg-card-end: markdown--><p>Once the post’s HTML is ready, with all the relevant content fetched and rendered, the Managed Component returns the HTML content to Zaraz. Zaraz will then use it to replace the  <code>&lt;twitter-post&gt;</code> placeholder element. Because this all happens on Cloudflare, the response to the end-user's browser will already contain the embed code.</p><h3 id=\"walkthrough-of-the-instagram-post-embed\">Walkthrough of the Instagram post embed</h3><p>The Instagram post embed is built around Instagram's own generated HTML. In contrast to the X example, which uses JSON data to populate an HTML template, this approach involves tweaking Instagram's HTML to meet our privacy and safety requirements.</p><p>We want the Instagram embed to work without requiring direct communication between the browser and any of Instagram’s endpoints. This is done by fetching CSS content server-side, caching it, and finally serving it together with the output HTML, avoiding any network request from the browser to fetch CSS content. We also set up a route server on the customer’s own domain, from which the Managed Components serve all images. Setting up a route endpoint with Managed Components is fairly straightforward:</p><!--kg-card-begin: markdown--><pre><code class=\"language-JavaScript\">manager.route('/image/', async request =&gt; {\n// logic to fetch and cache all images\n});\n</code></pre>\n<!--kg-card-end: markdown--><p>After setting up routes, we fetch the HTML content of the specific Instagram post, server-side, using the <code>manager.fetch()</code> method. We then manipulate the HTML to fit it to the specific website and cache it using <code>manager.useCache()</code>. Amongst other things, changes to the HTML include setting image <code>src</code> and <code>srcset</code> attributes to serve images from your own routes, to avoid requesting images from Instagram’s endpoint (and by so doing, potentially revealing sensitive user information). As mentioned above, we also remove all scripts and stylesheet links, as we prefetch and cache all CSS content from stylesheet links server-side, in order to serve CSS and spare the browser a few additional network requests, improving privacy and performance.</p><p>The HTML manipulation is done using the <a href=\"https://cheerio.js.org/\">Cheerio</a> library. This is how, for example, we adjust the `src` attribute of images to redirect through our route:</p><!--kg-card-begin: markdown--><pre><code class=\"language-JavaScript\">$('img[src*=&quot;scontent.cdninstagram.com&quot;]').each((i, el) =&gt; {\n        const img = $(el)\n        const src = img.attr('src')!\n        const newSrc = src.replace(\n          /^https:\\/\\/scontent.cdninstagram.com\\/(.*)$/,\n          (_match, path) =&gt;\n            `${hostName(client)}${imgRoute}?q=` + encodeURIComponent(path)\n        )\n        img.attr('src', newSrc) \n</code></pre>\n<!--kg-card-end: markdown--><p>This implementation effectively prevents any direct communication from the browser to Instagram servers, safeguarding sensitive user information such as IP addresses.</p><h2 id=\"what-is-currently-supported-and-what%E2%80%99s-next-for-embeds\">What is currently supported and what’s next for embeds</h2><p>Currently, our X embed supports text tweets and the Instagram embed supports image posts. We are working to broaden our support to other media types. Beyond these improvements, we aim to extend the application of our embeds across an even broader range of tools. We invite our users and partners to collaborate with us on the <a href=\"https://managedcomponents.dev/\">Managed Component</a> open source project, in adding support for more tools that can be rendered entirely server-side. We believe that this is the way to create a safer and faster web for everyone, and we hope that what we are launching today will inspire the community to build even better solutions together with us!</p><p>Start using embeds now by adding X and Instagram in your <a href=\"https://dash.cloudflare.com/?to=/:account/:zone/zaraz\">Zaraz dashboard</a>.</p>",
		"id": "667d9546a4598c000bd7062b",
		"meta_description": "We are thrilled to announce Cloudflare Zaraz support for server-side rendering of embeds from X and Instagram. This allows for secure, privacy-preserving, and performant embedding without third-party JavaScript or cookies, enhancing security, privacy, and performance on your website.",
		"meta_title": null,
		"og_description": null,
		"og_image": "http://blog.cloudflare.com/content/images/2024/07/-2024--Blog-Template--1200x628--1.png",
		"og_title": null,
		"primary_author": {
			"id": "619bd62d6e475c001051a83b",
			"name": "Yair Dovrat",
			"slug": "yair-dovrat",
			"profile_image": "http://blog.cloudflare.com/content/images/2021/11/profile.jpeg",
			"cover_image": null,
			"bio": "Product Manager at Cloudflare. Previously co-founder & CEO of Zaraz, a third-party manager built for speed, privacy and security. A poet and classicist. Y Combinator W20 batch.",
			"website": null,
			"location": "Brussels",
			"facebook": null,
			"twitter": "@YDovrat",
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/yair-dovrat/"
		},
		"primary_tag": null,
		"published_at": "2024-07-10T14:00:55.000+01:00",
		"reading_time": 9,
		"slug": "zaraz-supports-server-side-rendering-of-embeds",
		"tags": [
			{
				"id": "667d95c2a4598c000bd70632",
				"name": "#BLOG-2396",
				"slug": "hash-blog-2396",
				"description": null,
				"feature_image": null,
				"visibility": "internal",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/404/"
			},
			{
				"id": "61fbc1e6f923e4000a1b0bcd",
				"name": "Zaraz",
				"slug": "zaraz",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/zaraz/"
			},
			{
				"id": "65c0d31851a92e000adeae66",
				"name": "#front-page",
				"slug": "hash-front-page",
				"description": null,
				"feature_image": null,
				"visibility": "internal",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/404/"
			}
		],
		"title": "Cloudflare Zaraz adds support for server-side rendering of X and Instagram embeds",
		"twitter_description": null,
		"twitter_image": "http://blog.cloudflare.com/content/images/2024/07/-2024--Blog-Template--1200x628-.png",
		"twitter_title": null,
		"updated_at": "2024-07-10T17:08:42.000+01:00",
		"url": "http://blog.cloudflare.com/zaraz-supports-server-side-rendering-of-embeds/",
		"uuid": "bbf70f98-fefc-41f8-9714-2cd929c7d53d",
		"visibility": "public"
	}
}