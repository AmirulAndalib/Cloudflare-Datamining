{
	"locale": "en-us",
	"post": {
		"id": "5dc0771afd9e450505d99f6f",
		"uuid": "02ae6bf0-fd97-4e95-b02e-814caef3c3ef",
		"title": "What’s new with Workers KV?",
		"slug": "whats-new-with-workers-kv",
		"html": "<figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"http://blog.cloudflare.com/content/images/2019/11/workers-KV-dark-back@2x.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>The Storage team here at Cloudflare shipped Workers KV, our global, low-latency, key-value store, <a href=\"http://blog.cloudflare.com/workers-kv-is-ga/\">earlier this year</a>. As people have started using it, we’ve gotten some feature requests, and have shipped some new features in response! In this post, we’ll talk about some of these use cases and how these new features enable them.</p><h2 id=\"new-kv-apis\">New KV APIs</h2><p>We’ve shipped some new APIs, both via <code>api.cloudflare.com</code>, as well as inside of a Worker. The first one provides the ability to upload and delete more than one key/value pair at once. Given that Workers KV is great for read-heavy, write-light workloads, a common pattern when getting started with KV is to write a bunch of data via the API, and then read that data from within a Worker. You can now do these bulk uploads without needing a separate API call for every key/value pair. This feature is available via <code>api.cloudflare.com</code>, but is not yet available from within a Worker.</p><p>For example, say we’re using KV to redirect legacy URLs to their new homes. We have a list of URLs to redirect, and where they should redirect to. We can turn this list into JSON that looks like this:</p><pre><code class=\"language-json\">[\n  {\n    \"key\": \"/old/post/1\",\n    \"value\": \"/new-post-slug-1\"\n  },\n  {\n    \"key\": \"/old/post/2\",\n    \"value\": \"/new-post-slug-2\"\n  }\n]</code></pre><p>And then POST this JSON to the new bulk endpoint, <code>/storage/kv/namespaces/:namespace_id/bulk</code>. This will add both key/value pairs to our namespace.</p><p>Likewise, if we wanted to drop support for these redirects, we could issue a DELETE that has this body:</p><pre><code class=\"language-json\">[\n    \"/old/post/1\",\n    \"/old/post/2\"\n]</code></pre><p>to <code>/storage/kv/namespaces/:namespace_id/bulk</code>, and we’d delete both key/value pairs in a single call to the API.</p><p>The bulk upload API has one more trick up its sleeve: not all data is a string. For example, you may have an image as a value, which is just a bag of bytes. if you need to write some binary data, you’ll have to base64 the value’s contents so that it’s valid JSON. You’ll also need to set one more key:</p><pre><code class=\"language-json\">[\n  {\n    \"key\": \"profile-picture\",\n    \"value\": \"aGVsbG8gd29ybGQ=\",\n    \"base64\": true\n  }\n]</code></pre><p>Workers KV will decode the value from base64, and then store the resulting bytes.</p><p>Beyond bulk upload and delete, we’ve also given you the ability to list all of the keys you’ve stored in any of your namespaces, from both the API and within a Worker. For example, if you wrote a blog powered by Workers + Workers KV, you might have each blog post stored as a key/value pair in a namespace called “contents”. Most blogs have some sort of “index” page that lists all of the posts that you can read. To create this page, we need to get a listing of all of the keys, since each key corresponds to a given post. We could do this from within a Worker by calling <code>list()</code> on our namespace binding:</p><pre><code class=\"language-javascript\">const value = await contents.list()</code></pre><p>But what we get back isn’t only a list of keys. The object looks like this:</p><pre><code class=\"language-json\">{\n  keys: [\n    { name: \"Title 1” },\n    { name: \"Title 2” }\n  ],\n  list_complete: false,\n  cursor: \"6Ck1la0VxJ0djhidm1MdX2FyD\"\n}</code></pre><p>We’ll talk about this “cursor” stuff in a second, but if we wanted to get the list of titles, we’d have to iterate over the keys property, and pull out the names:</p><pre><code class=\"language-javascript\">const keyNames = value.keys.map(e =&gt; e.name)</code></pre><p><code>keyNames</code> would be an array of strings:</p><pre><code class=\"language-json\">[“Title 1”, “Title 2”, “Title 3”, “Title 4”, “Title 5”]</code></pre><p>We could take <code>keyNames</code> and those titles to build our page.</p><p>So what’s up with the <code>list_complete</code> and <code>cursor</code> properties? Well, imagine that we’ve been a <em>very</em> prolific blogger, and we’ve now written thousands of posts. The list API is paginated, meaning that it will only return the first thousand keys. To see if there are more pages available, you can check the <code>list_complete</code> property. If it is false, you can use the cursor to fetch another page of results. The value of <code>cursor</code> is an opaque token that you pass to another call to list:</p><pre><code class=\"language-javascript\">const value = await NAMESPACE.list()\nconst cursor = value.cursor\nconst next_value = await NAMESPACE.list({\"cursor\": cursor})</code></pre><p>This will give us another page of results, and we can repeat this process until <code>list_complete</code> is true.</p><p>Listing keys has one more trick up its sleeve: you can also return only keys that have a certain prefix. Imagine we want to have a list of posts, but only the posts that were made in October of 2019. While Workers KV is only a key/value store, we can use the prefix functionality to do interesting things by filtering the list. In our original implementation, we had stored the titles of keys only:</p><ul><li><code>Title 1</code></li><li><code>Title 2</code></li></ul><p>We could change this to include the date in YYYY-MM-DD format, with a colon separating the two:</p><ul><li><code>2019-09-01:Title 1</code></li><li><code>2019-10-15:Title 2</code></li></ul><p>We can now ask for a list of all posts made in 2019:</p><pre><code class=\"language-javascript\">const value = await NAMESPACE.list({\"prefix\": \"2019\"})</code></pre><p>Or a list of all posts made in October of 2019:</p><pre><code class=\"language-javascript\">const value = await NAMESPACE.list({\"prefix\": \"2019-10\"})</code></pre><p>These calls will only return keys with the given prefix, which in our case, corresponds to a date. This technique can let you group keys together in interesting ways. We’re looking forward to seeing what you all do with this new functionality!</p><h2 id=\"relaxing-limits\">Relaxing limits</h2><p>For various reasons, there are a few hard limits with what you can do with Workers KV. We’ve decided to raise some of these limits, which expands what you can do.</p><p>The first is the limit of the number of namespaces any account could have. This was previously set at 20, but some of you have made a lot of namespaces! We’ve decided to relax this limit to 100 instead. This means you can create five times the number of namespaces you previously could.</p><p>Additionally, we had a two megabyte maximum size for values. We’ve increased the limit for values to ten megabytes. With the release of Workers Sites, folks are keeping things like images inside of Workers KV, and two megabytes felt a bit cramped. While Workers KV is not a great fit for truly large values, ten megabytes gives you the ability to store larger images easily. As an example, a 4k monitor has a native resolution of 4096 x 2160 pixels. If we had an image at this resolution as a lossless PNG, for example, it would be just over five megabytes in size.</p><h2 id=\"kv-browser\">KV browser</h2><p>Finally, you may have noticed that there’s now a KV browser in the dashboard! Needing to type out a cURL command just to see what’s in your namespace was a real pain, and so we’ve given you the ability to check out the contents of your namespaces right on the web. When you look at a namespace, you’ll also see a table of keys and values:</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"http://blog.cloudflare.com/content/images/2019/11/image-1.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>The browser has grown with a bunch of useful features since it initially shipped. You can not only see your keys and values, but also add new ones: </p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"http://blog.cloudflare.com/content/images/2019/11/image-2.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>edit existing ones:</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"http://blog.cloudflare.com/content/images/2019/11/image-3.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>...and even upload files!</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"http://blog.cloudflare.com/content/images/2019/11/image-4.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>You can also download them:</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"http://blog.cloudflare.com/content/images/2019/11/image-5.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>As we ship new features in Workers KV, we’ll be expanding the browser to include them too.</p><h2 id=\"wrangler-integration\">Wrangler integration</h2><p>The Workers Developer Experience team has also been shipping some features related to Workers KV. Specifically, you can fully interact with your namespaces and the key/value pairs inside of them.</p><p>For example, my personal website is running on Workers Sites. I have a Wrangler project named “website” to manage it. If I wanted to add another namespace, I could do this:</p><pre><code class=\"language-console\">$ wrangler kv:namespace create new_namespace\nCreating namespace with title \"website-new_namespace\"\nSuccess: WorkersKvNamespace {\n    id: \"&lt;id&gt;\",\n    title: \"website-new_namespace\",\n}\n\nAdd the following to your wrangler.toml:\n\nkv-namespaces = [\n    { binding = \"new_namespace\", id = \"&lt;id&gt;\" }\n]</code></pre><p><br>I’ve redacted the namespace IDs here, but Wrangler let me know that the creation was successful, and provided me with the configuration I need to put in my <code>wrangler.toml</code>. Once I’ve done that, I can add new key/value pairs:</p><pre><code class=\"language-console\">$ wrangler kv:key put \"hello\" \"world\" --binding new_namespace\nSuccess</code></pre><p>And read it back out again:</p><pre><code class=\"language-console\">&gt; wrangler kv:key get \"hello\" --binding new_namespace\nworld</code></pre><p>If you’d like to learn more about the design of these features, <a href=\"http://blog.cloudflare.com/how-we-design-features-for-wrangler/\">“How we design features for Wrangler, the Cloudflare Workers CLI”</a> discusses them in depth.</p><h2 id=\"more-to-come\">More to come</h2><p>The Storage team is working hard at improving Workers KV, and we’ll keep shipping new stuff every so often. Our updates will be more regular in the future. If there’s something you’d particularly like to see, please reach out! <br><br></p>",
		"comment_id": "5dc0771afd9e450505d99f6f",
		"feature_image": "http://blog.cloudflare.com/content/images/2019/11/Workers-KV-with-Logo.png",
		"featured": false,
		"visibility": "public",
		"created_at": "2019-11-04T19:08:10.000+00:00",
		"updated_at": "2024-02-15T22:45:19.000+00:00",
		"published_at": "2019-11-06T14:00:00.000+00:00",
		"custom_excerpt": "The Storage team has shipped some new features for Workers KV that folks have been asking for. In this post, we'll talk about some of these new features and how to use them.",
		"codeinjection_head": null,
		"codeinjection_foot": null,
		"custom_template": null,
		"canonical_url": null,
		"tags": [
			{
				"id": "5d16450341acde0011a95278",
				"name": "Cloudflare Workers KV",
				"slug": "cloudflare-workers-kv",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/cloudflare-workers-kv/"
			},
			{
				"id": "5d16450341acde0011a95253",
				"name": "Cloudflare Workers",
				"slug": "workers",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/workers/"
			},
			{
				"id": "5d16450341acde0011a95252",
				"name": "Serverless",
				"slug": "serverless",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Serverless.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Serverless",
				"meta_description": "Cloudflare blog posts tagged 'serverless'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/serverless/"
			},
			{
				"id": "5d16450341acde0011a951ee",
				"name": "Product News",
				"slug": "product-news",
				"description": "Product News (EN)",
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Product-News-1.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Product News",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Product News'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/product-news/"
			},
			{
				"id": "5d16450341acde0011a95194",
				"name": "API",
				"slug": "api",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/api/"
			},
			{
				"id": "5d16450341acde0011a95204",
				"name": "Developers",
				"slug": "developers",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Developers-1.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Developers",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Developers'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developers/"
			},
			{
				"id": "64a3e2b834124c000b00b717",
				"name": "Developer Platform",
				"slug": "developer-platform",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developer-platform/"
			}
		],
		"authors": [
			{
				"id": "5db06a48fd9e450505d992fb",
				"name": "Steve Klabnik",
				"slug": "steve",
				"profile_image": "https://blog-cloudflare-com-assets.storage.googleapis.com/2019/10/photo.jpg",
				"cover_image": "https://blog-cloudflare-com-assets.storage.googleapis.com/2019/10/general@2x-3.png",
				"bio": null,
				"website": null,
				"location": null,
				"facebook": null,
				"twitter": null,
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/steve/"
			}
		],
		"primary_author": {
			"id": "5db06a48fd9e450505d992fb",
			"name": "Steve Klabnik",
			"slug": "steve",
			"profile_image": "https://blog-cloudflare-com-assets.storage.googleapis.com/2019/10/photo.jpg",
			"cover_image": "https://blog-cloudflare-com-assets.storage.googleapis.com/2019/10/general@2x-3.png",
			"bio": null,
			"website": null,
			"location": null,
			"facebook": null,
			"twitter": null,
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/steve/"
		},
		"primary_tag": {
			"id": "5d16450341acde0011a95278",
			"name": "Cloudflare Workers KV",
			"slug": "cloudflare-workers-kv",
			"description": null,
			"feature_image": null,
			"visibility": "public",
			"meta_title": null,
			"meta_description": null,
			"og_image": null,
			"og_title": null,
			"og_description": null,
			"twitter_image": null,
			"twitter_title": null,
			"twitter_description": null,
			"codeinjection_head": null,
			"codeinjection_foot": null,
			"canonical_url": null,
			"accent_color": null,
			"url": "http://blog.cloudflare.com/tag/cloudflare-workers-kv/"
		},
		"url": "http://blog.cloudflare.com/whats-new-with-workers-kv/",
		"excerpt": "The Storage team has shipped some new features for Workers KV that folks have been asking for. In this post, we'll talk about some of these new features and how to use them.",
		"reading_time": 6,
		"access": true,
		"comments": false,
		"og_image": "https://blog-cloudflare-com-assets.storage.googleapis.com/2019/11/workers-KV-dark-back@2x-3.png",
		"og_title": null,
		"og_description": null,
		"twitter_image": "https://blog-cloudflare-com-assets.storage.googleapis.com/2019/11/workers-KV-dark-back@2x-2.png",
		"twitter_title": null,
		"twitter_description": null,
		"meta_title": "What's new with Workers KV?",
		"meta_description": "The Storage team has shipped some new features for Workers KV, and this post  talks about some of these new features and how to use them.",
		"email_subject": null,
		"frontmatter": null,
		"feature_image_alt": null,
		"feature_image_caption": null
	}
}