{
	"browserLocale": "en-us",
	"locale": "en-us",
	"post": {
		"access": true,
		"authors": [
			{
				"id": "5d1644b141acde0011a94f75",
				"name": "Matt Silverlock",
				"slug": "silverlock",
				"profile_image": "http://blog.cloudflare.com/content/images/2021/08/profile-1500px-square.jpeg",
				"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-43.png",
				"bio": "Director of Product at Cloudflare.",
				"website": null,
				"location": null,
				"facebook": null,
				"twitter": "@elithrar",
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/silverlock/"
			}
		],
		"canonical_url": null,
		"codeinjection_foot": null,
		"codeinjection_head": null,
		"comment_id": "660b4591a5fcdf000a08f5a0",
		"comments": false,
		"created_at": "2024-04-02T00:38:57.000+01:00",
		"custom_excerpt": "We’re making it easier to build scalable, reliable, data-driven applications on top of our global network, and so we’re announcing a new Event Notifications framework; our take on durable execution, Workflows; and an upcoming streaming ingestion service, Pipelines",
		"custom_template": null,
		"email_subject": null,
		"excerpt": "We’re making it easier to build scalable, reliable, data-driven applications on top of our global network, and so we’re announcing a new Event Notifications framework; our take on durable execution, Workflows; and an upcoming streaming ingestion service, Pipelines",
		"feature_image": "http://blog.cloudflare.com/content/images/2024/04/Data-Roadmap-1.png",
		"feature_image_alt": "Data Anywhere with Pipelines, Event Notifications, and Workflows",
		"feature_image_caption": null,
		"featured": false,
		"frontmatter": null,
		"html": "<figure class=\"kg-card kg-image-card\"><img src=\"http://blog.cloudflare.com/content/images/2024/04/image3-4.png\" class=\"kg-image\" alt=\"Data Anywhere with Pipelines, Event Notifications, and Workflows\" loading=\"lazy\" width=\"1999\" height=\"1125\"></figure><p>Data is fundamental to any real-world application: the database storing your user data and inventory, the analytics tracking sales events and/or error rates, the object storage with your web assets and/or the Parquet files driving your data science team, and the vector database enabling semantic search or AI-powered recommendations for your users. </p><p>When we first announced Workers <a href=\"http://blog.cloudflare.com/introducing-cloudflare-workers\">back in 2017</a>, and then <a href=\"http://blog.cloudflare.com/introducing-workers-kv\">Workers KV</a>, <a href=\"https://www.cloudflare.com/developer-platform/r2/\">Cloudflare R2</a>, and <a href=\"http://blog.cloudflare.com/introducing-d1\">D1</a>, it was obvious that the next big challenge to solve for developers would be in making it easier to ingest, store, and query the data needed to build scalable, full-stack applications.</p><p>To that end, as part of our quest to make building stateful, distributed-by-default applications even easier, we’re launching our new Event Notifications service; a preview of our upcoming streaming ingestion product, Pipelines; and a sneak peek into our take on durable execution, Workflows.</p><h3 id=\"event-based-architectures\">Event-based architectures</h3><p>When you’re writing data — whether that’s new data, changing existing data, or deleting old data — you often want to trigger other, asynchronous work to run in response. That could be processing user-driven uploads, updating search indexes as the underlying data changes, or removing associated rows in your SQL database when content is removed.</p><p>In order to make these event-driven workflows far easier to build across Cloudflare, we’re launching the first step towards a wider Event Notifications platform across Cloudflare, starting with notifications support in R2.</p><p>You can read more in the deep-dive on <a href=\"http://blog.cloudflare.com/r2-events-gcs-migration-infrequent-access/\">Event Notifications for R2</a>, but in a nutshell: you can configure changes to content in any R2 bucket to write directly to a <a href=\"https://developers.cloudflare.com/queues/\">Queue</a>, allowing you to reliably consume those events in a Worker or to <a href=\"https://developers.cloudflare.com/queues/reference/pull-consumers/\">pull from compute</a> in a legacy cloud.</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"http://blog.cloudflare.com/content/images/2024/04/image2-3.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"1999\" height=\"1020\"></figure><p>Event Notifications for R2 are just the beginning, though. There are many kinds of events you might want to trigger as a developer — these are just some of the event types we’re planning to support:</p><ul><li>Changes (writes) to key-value pairs in your <a href=\"https://developers.cloudflare.com/kv/\">Workers KV</a> namespaces.</li><li>Updates to your <a href=\"https://developers.cloudflare.com/d1/\">D1 databases</a>, including changed rows or triggers.</li><li><a href=\"https://developers.cloudflare.com/workers/configuration/versions-and-deployments/gradual-deployments/\">Deployments</a> to your Cloudflare Workers </li></ul><p>Consuming event notifications from a single Worker is just <em>one</em> approach, though. As you start to consume events, you may want to trigger multi-step <em>workflows</em> that execute reliably, resume from errors or exceptions, and ensure that previous steps aren’t duplicated or repeated unnecessarily. An event notification framework turns out to be just the thing needed to drive <a href=\"#durable-exectution\">a workflow engine that <em>executes durably</em>…</a></p><h3 id=\"making-it-even-easier-to-ingest-data\">Making it even easier to ingest data</h3><p>When we launched <a href=\"https://developers.cloudflare.com/r2/\">Cloudflare R2</a>, our object storage service, we knew that supporting the de facto-standard <a href=\"https://developers.cloudflare.com/r2/api/s3/api/\">S3 API</a> was critical in order to allow developers to bring the tooling and services they already had over to R2. But the S3 API is designed to be simple: at its core, it provides APIs for upload, download, multipart and metadata operations, and many tools <em>don’t</em> support the S3 API.</p><p>What if you want to batch clickstream data from your web services so that it’s efficient (and cost-effective) to query by your analytics team? Or partition data by customer ID, merchant ID, or locale within a structured data format like JSON?</p><p>Well, we want to help solve this problem too, and so we’re announcing Pipelines, an upcoming streaming ingestion service designed to ingest data at scale, aggregate it, and write it directly to R2, without you having to manage infrastructure, partitions, runners, or worry about durability.</p><p>With Pipelines, creating a globally scalable ingestion endpoint that can ingest tens-of-thousands of events per second doesn’t require any code:</p><pre><code class=\"language-js\">$ wrangler pipelines create clickstream-ingest-prod --batch-size=\"1MB\" --batch-timeout-secs=120 --batch-on-json-key=\".merchantId\" --destination-bucket=\"prod-cs-data\"\n\n✅ Successfully created new pipeline \"clickstream-ingest-prod\"\n📥 Created endpoints:\n➡ HTTPS: https://d458dbe698b8eef41837f941d73bc5b3.pipelines.cloudflarestorage.com/clickstream-ingest-prod\n➡ WebSocket: wss://d458dbe698b8eef41837f941d73bc5b3.pipelines.cloudflarestorage.com:8443/clickstream-ingest-prod\n➡ Kafka: d458dbe698b8eef41837f941d73bc5b3.pipelines.cloudflarestorage.com:9092 (topic: clickstream-ingest-prod)\n</code></pre><p>As you can see here, we’re already thinking about how to make Pipelines protocol-agnostic: write from a HTTP client, stream events over a WebSocket, and/or redirect your existing Kafka producer (and stop having to manage and scale Kafka) directly to Pipelines. </p><p>But that’s just the beginning of our vision here. Scalable ingestion and simple batching is one thing, but what about if you have more complex needs? Well, we have a massively scalable compute platform (<a href=\"https://developers.cloudflare.com/workers/\">Cloudflare Workers</a>) that can help address this too.</p><p>The code below is just an initial exploration for how we’re thinking about an API for running transforms over streaming data. If you’re aware of projects like <a href=\"https://beam.apache.org/documentation/programming-guide/\">Apache Beam</a> or <a href=\"https://flink.apache.org/\">Flink</a>, this programming model might even look familiar:</p><pre><code class=\"language-js\">export default {    \n   // Pipeline handler is invoked when batch criteria are met\n   async pipeline(stream: StreamPipeline, env: Env, ctx: ExecutionContext): Promise&lt;StreamingPipeline&gt; {\n      // ...\n      return stream\n         // Type: transform(label: string, transformFunc: TransformFunction): Promise&lt;StreamPipeline&gt;\n         // Each transform has a label that is used in metrics to provide\n    // per-transform observability and debugging\n         .transform(\"human readable label\", (events: Array&lt;StreamEvent&gt;) =&gt; {\n            return events.map((e) =&gt; ...)\n         })\n         .transform(\"another transform\", (events: Array&lt;StreamEvent&gt;) =&gt; {\n            return events.map((e) =&gt; ...)\n         })\n         .writeToR2({\n            format: \"json\",\n            bucket: \"MY_BUCKET_NAME\",\n            prefix: somePrefix,\n            batchSize: \"10MB\"\n         })\n   }\n}\n</code></pre><p>Specifically:</p><ul><li>The Worker describes a pipeline of transformations (mapping, reducing, filtering) that operates over each subset of events (records)</li><li>You can call out to other services — including D1 or KV — in order to synchronously or asynchronously hydrate data or lookup values during your stream processing</li><li>We take care of scaling horizontally based on records-per-second and/or any concurrency settings you configure based on processing latency requirements.</li></ul><p><strong>We’ll be bringing Pipelines into open beta later in 2024</strong>, and it will initially launch with support for HTTP ingestion and R2 as a destination (sink), but we’re already thinking bigger.</p><p>We’ll be sharing more as Pipelines gets closer to release. In the meantime, you can <a href=\"https://docs.google.com/forms/d/e/1FAIpQLSeuaQ5YZoXJej5h5KoEz6LNrVb7gASJ8msahJg8VmBeC0HEYQ/viewform?usp=sf_link\">register your interest and share your use-case</a>, and we’ll reach out when Pipelines reaches open beta.</p><h3 id=\"durable-execution\">Durable Execution</h3><p>If the term “Durable Execution” is new to you, don’t worry: the term comes from the desire to run applications that can resume execution from where they left off, even if the underlying host or compute fails (where the “durable” part comes from).</p><p>As we’ve continued to build out our data and AI platforms, we’ve been acutely aware that developers need ways to create reliable, repeatable workflows that operate over that data, turn unstructured data into structured data, trigger on fresh data (or periodically), and automatically retry, restart, and export metrics for each step along the way. The industry calls this Durable Execution: we’re just calling it <em>Workflows</em>.</p><p>What makes Workflows different from other takes on Durable Execution is that we provide the underlying compute as part of the platform. You don’t have to bring-your-own compute, or worry about scaling it or provisioning it in the right locations. Workflows runs on top of <a href=\"https://developers.cloudflare.com/workers/\">Cloudflare Workers</a> – you write the workflow, and we take care of the rest.</p><p>Here’s an early example of writing a Workflow that generates text embeddings using Workers AI and stores them (ready to query) in Vectorize as new content is written to (or updated within) R2.</p><ul><li>Each Workflow <em>run</em> is triggered by an Event Notification consumed from a Queue, but could also be triggered by a HTTP request, another Worker, or even scheduled on a timer.</li><li>Individual <em>steps</em> within the Workflow allow us to define individually retriable units of work: in this case, we’re reading the new objects from R2, creating text embeddings using Workers AI, and then inserting.</li><li>State is <em>durably</em> persisted between steps: each step can emit state, and Workflows will automatically persist that so that any underlying failures, uncaught exceptions or network retries can resume execution from the last successful step.</li><li>Every call to step() automatically emits metrics associated with the unique Workflow run, making it easier to debug within each step and/or break down your application into its smallest units of execution, without having to worry about observability.</li></ul><p>Step-by-step, it looks like this:</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"http://blog.cloudflare.com/content/images/2024/04/image4-5.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"1999\" height=\"1020\"></figure><p>Transforming this series of steps into real code, here’s what this would look like with Workflows:</p><pre><code class=\"language-js\">import { Ai } from \"@cloudflare/ai\";\nimport { Workflow } from \"cloudflare:workers\";\n\nexport interface Env {\n  R2: R2Bucket;\n  AI: any;\n  VECTOR_INDEX: VectorizeIndex;\n}\n\nexport default class extends Workflow {\n  async run(event: Event) {\n    const ai = new Ai(this.env.AI);\n\n    // List of keys to fetch from our incoming event notification\n    const keysToFetch = event.messages.map((val) =&gt; {\n      return val.object.key;\n    });\n\n    // The return value of each step is stored (the \"durable\" part\n    // of \"durable execution\")\n    // This ensures that state can be persisted between steps, reducing\n    // the need to recompute results ($$, time) should subsequent\n    // steps fail.\n    const inputs = await this.ctx.run(\n      // Each step has a user-defined label\n      // Metrics are emitted as each step runs (to success or failure)\n// with this label attached and available within per-Workflow\n// analytics in near-real-time.\n\"read objects from R2\", async () =&gt; {\n      const objects = [];\n\n      for (const key of keysToFetch) {\n        const object = await this.env.R2.get(key);\n        objects.push(await object.text());\n      }\n\n      return objects;\n    });\n\n\n    // Persist the output of this step.\n    const embeddings = await this.ctx.run(\n      \"generate embeddings\",\n      async () =&gt; {\n        const { data } = await ai.run(\"@cf/baai/bge-small-en-v1.5\", {\n          text: inputs,\n        });\n\n        if (data.length) {\n          return data;\n        } else {\n          // Uncaught exceptions trigger an automatic retry of the step\n          // Retries and timeouts have sane defaults and can be overridden\n    // per step\n          throw new Error(\"Failed to generate embeddings\");\n        }\n      },\n      {\n        retries: {\n          limit: 5,\n          delayMs: 1000,\n          backoff: \"exponential\",\n        },\n      }\n    );\n\n    await this.ctx.run(\"insert vectors\", async () =&gt; {\n      const vectors = [];\n\n      keysToFetch.forEach((key, index) =&gt; {\n        vectors.push({\n          id: crypto.randomUUID(),\n          // Our embeddings from the previous step\n          values: embeddings[index].values, \n          // The path to each R2 object to map back to during\n \t    // vector search\n          metadata: { r2Path: key },\n        });\n      });\n\n      return this.env.VECTOR_INDEX.upsert(vectors);\n    });\n  }\n}\n</code></pre><p>This is just one example of what a Workflow can do. The ability to durably execute an application, modeled as a series of steps, applies to a wide number of domains. You can apply this model of execution to a number of use-cases, including:</p><ul><li>Deploying software: each step can define a build step and subsequent health check, gating further progress until your deployment meets your criteria for “healthy”.</li><li>Post-processing user data: triggering a workflow based on user uploads (e.g. to Cloudflare R2) that then subsequently parses that data asynchronously, redacts PII or sensitive data, writes the sanitized output, and triggers a notification via email, webhook, or mobile push.</li><li>Payment and batch workflows: aggregating raw customer usage data on a periodic schedule by querying your data warehouse (or <a href=\"https://developers.cloudflare.com/analytics/analytics-engine/\">Workers Analytics Engine</a>), triggering usage or spend alerts, and/or generating PDF invoices.</li></ul><p>Each of these use cases model tasks that you want to run to completion, minimize redundant retries by persisting intermediate state, and (importantly) easily observe success and failure. </p><p><strong>We’ll be sharing more about Workflows during the second quarter of 2024 as we work towards an open (public!) beta</strong>. This includes how we’re thinking about idempotency and interactions with our storage, per-instance observability and metrics, local development, and templates to bootstrap common workflows.</p><h3 id=\"putting-it-together\">Putting it together</h3><p>We’ve often thought of Cloudflare’s own network as one massively scalable parallel data processing cluster: <a href=\"https://www.cloudflare.com/network/\">data centers in 310+ cities</a>, with the ability to run compute close to users and/or <a href=\"https://smart-placement-demo.pages.dev/\">close to data</a>, keep it within the bounds of regulatory or compliance requirements, and most importantly, use our massive scale to enable our customers to scale as well.</p><p>Recapping, a fully-fledged data platform needs to enable three things: </p><ol><li>Ingesting data: getting data into the platform (in the right format, from the right sources)</li><li>Storing data: securely, reliably, and durably.</li><li>Querying data: understanding and extracting insights from the data, and/or transforming it for use by other tools.</li></ol><p>When we launched R2 we tackled the second part, but knew that we’d need to follow up with the first and third parts in order to make it easier for developers to get data in and make use of it. </p><p>If we look at how we can build a system that helps us solve each of these three parts together with Pipelines, Event Notifications, R2, and Workflows, we end up with an architecture that resembles this:</p><figure class=\"kg-card kg-image-card kg-width-wide\"><img src=\"http://blog.cloudflare.com/content/images/2024/04/image1-2.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"1999\" height=\"1020\"></figure><p>Specifically, we have Pipelines (1) scaling out to ingest data, batch it, filter it, and then durably store it in R2 (2) in a format that’s ready and optimized for querying. Workflows, ClickHouse, Databricks, or the query engine of your choice can then query (3) that data as soon as it’s ready — with “ready” being automatically triggered by an Event Notification <em>as soon as the data is ingested and written to R2</em>. </p><p>There’s no need to poll, no need to batch after the fact, no need to have your query engine slow down on data that wasn’t pre-aggregated or filtered, and no need to manage and scale infrastructure in order to keep up with load or data jurisdiction requirements. Create a Pipeline, write your data directly to R2, and query directly from it.</p><p>If you’re also looking at this and wondering about the costs of moving this data around, then we’re holding to one important principle: zero egress fees across all of our data products. Just as we set the stage for this with <a href=\"http://blog.cloudflare.com/introducing-r2-object-storage\">our R2 object storage</a>, we intend to apply this to every data product we’re building, Pipelines included.</p><h3 id=\"start-building\">Start Building</h3><p>We’ve shared a lot of what we’re building so that developers have an opportunity to provide feedback (including via our <a href=\"https://discord.cloudflare.com/\">Developer Discord</a>), share use-cases, and think about how to build their <em>next</em> application on Cloudflare.</p>",
		"id": "660b4591a5fcdf000a08f5a0",
		"meta_description": "We’re making it easier to build scalable, reliable, data-driven applications on top of our global network, and so we’re announcing a new Event Notifications framework; our take on durable execution, Workflows; and an upcoming streaming ingestion service, Pipelines",
		"meta_title": null,
		"og_description": null,
		"og_image": "http://blog.cloudflare.com/content/images/2024/04/Data-Anywhere-with-Pipelines--Event-Notifications--and-Workflows-OG-1.png",
		"og_title": null,
		"primary_author": {
			"id": "5d1644b141acde0011a94f75",
			"name": "Matt Silverlock",
			"slug": "silverlock",
			"profile_image": "http://blog.cloudflare.com/content/images/2021/08/profile-1500px-square.jpeg",
			"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-43.png",
			"bio": "Director of Product at Cloudflare.",
			"website": null,
			"location": null,
			"facebook": null,
			"twitter": "@elithrar",
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/silverlock/"
		},
		"primary_tag": null,
		"published_at": "2024-04-03T14:00:17.000+01:00",
		"reading_time": 9,
		"slug": "data-anywhere-events-pipelines-durable-execution-workflows",
		"tags": [
			{
				"id": "660b4645a5fcdf000a08f5aa",
				"name": "#BLOG-2386",
				"slug": "hash-blog-2386",
				"description": null,
				"feature_image": null,
				"visibility": "internal",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/404/"
			},
			{
				"id": "607030964b1e0f03f340f2d8",
				"name": "Developer Week",
				"slug": "developer-week",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developer-week/"
			},
			{
				"id": "5d16450341acde0011a95204",
				"name": "Developers",
				"slug": "developers",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Developers-1.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Developers",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Developers'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developers/"
			},
			{
				"id": "64a3e2b834124c000b00b717",
				"name": "Developer Platform",
				"slug": "developer-platform",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developer-platform/"
			},
			{
				"id": "5d16450341acde0011a95253",
				"name": "Cloudflare Workers",
				"slug": "workers",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/workers/"
			},
			{
				"id": "61ddc4d00bfc69000a525a5b",
				"name": "R2 Storage",
				"slug": "cloudflare-r2",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/cloudflare-r2/"
			},
			{
				"id": "65c0d31851a92e000adeae66",
				"name": "#front-page",
				"slug": "hash-front-page",
				"description": null,
				"feature_image": null,
				"visibility": "internal",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/404/"
			},
			{
				"id": "65049bb4efd8e7000a705255",
				"name": "Connectivity Cloud",
				"slug": "connectivity-cloud",
				"description": "Discover the connectivity cloud. Regain control while connecting and protecting your people, apps and data everywhere.",
				"feature_image": "http://blog.cloudflare.com/content/images/2023/09/ConnCloud-Lilypad-2.png",
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/connectivity-cloud/"
			}
		],
		"title": "Data Anywhere with Pipelines, Event Notifications, and Workflows",
		"twitter_description": null,
		"twitter_image": "http://blog.cloudflare.com/content/images/2024/04/Data-Anywhere-with-Pipelines--Event-Notifications--and-Workflows-OG.png",
		"twitter_title": null,
		"updated_at": "2024-07-01T19:12:25.000+01:00",
		"url": "http://blog.cloudflare.com/data-anywhere-events-pipelines-durable-execution-workflows/",
		"uuid": "6a9ae1e2-437f-4742-935a-bf2b230d4aea",
		"visibility": "public"
	}
}