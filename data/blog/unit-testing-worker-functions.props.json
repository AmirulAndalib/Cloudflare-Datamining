{
	"locale": "en-us",
	"post": {
		"access": true,
		"authors": [
			{
				"id": "5d1644b141acde0011a9500a",
				"name": "Tom Brightbill",
				"slug": "tom-brightbill",
				"profile_image": "http://blog.cloudflare.com/content/images/2019/03/tomb.jpg",
				"cover_image": "http://blog.cloudflare.com/content/images/2019/03/general@2x-7.png",
				"bio": null,
				"website": null,
				"location": null,
				"facebook": null,
				"twitter": null,
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/tom-brightbill/"
			},
			{
				"id": "5d1644b141acde0011a95013",
				"name": "Tim Obezuk",
				"slug": "tim-obezuk",
				"profile_image": "https://blog-cloudflare-com-assets.storage.googleapis.com/2020/05/0-1.jpeg",
				"cover_image": "http://blog.cloudflare.com/content/images/2019/04/general@2x-3.png",
				"bio": null,
				"website": null,
				"location": null,
				"facebook": null,
				"twitter": "@obezuk",
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/tim-obezuk/"
			}
		],
		"canonical_url": null,
		"codeinjection_foot": null,
		"codeinjection_head": null,
		"comment_id": "5c8ae8dea3fb8700cc21696e",
		"comments": false,
		"created_at": "2019-03-14T23:50:54.000+00:00",
		"custom_excerpt": "If you were not aware, Cloudflare Workers lets you run Javascript in all 165+ of our Data Centers. We’re delighted to see some of the creative applications of Workers. As the use cases grow in complexity, the need to smoke test your code also grows. ",
		"custom_template": null,
		"email_subject": null,
		"excerpt": "If you were not aware, Cloudflare Workers lets you run Javascript in all 165+ of our Data Centers. We’re delighted to see some of the creative applications of Workers. As the use cases grow in complexity, the need to smoke test your code also grows. ",
		"feature_image": "http://blog.cloudflare.com/content/images/2019/03/local-worker@2x.png",
		"feature_image_alt": null,
		"feature_image_caption": null,
		"featured": false,
		"frontmatter": null,
		"html": "<p>If you were not aware, Cloudflare Workers lets you run Javascript in all 165+ of our Data Centers. We’re delighted to see some of the creative applications of Workers. As the use cases grow in complexity, the need to smoke test your code also grows.  </p><p>More specifically, if your Worker includes a number of functions, it’s important to ensure each function does what it’s intended to do in addition to ensuring the output of the entire Worker returns as expected.</p><p>In this post, we’re going to demonstrate how to unit test Cloudflare Workers, and their individual functions, with <a href=\"https://github.com/dollarshaveclub/cloudworker\">Cloudworker</a>, created by the Dollar Shave Club engineering team. </p><p>Dollar Shave Club is a Cloudflare customer, and they created Cloudworker, a mock for the Workers runtime, for testing purposes. We’re really grateful to them for this. They were kind enough to <a href=\"http://blog.cloudflare.com/cloudworker-a-local-cloudflare-worker-runner/\">post on our blog</a> about it.</p><p>This post will demonstrate how to abstract away Cloudworker, and test Workers with the same syntax you write them in. </p><h3 id=\"example-script\">Example Script</h3><p>Before we get into configuring Cloudworker, let’s introduce the simple script we are going to test against in our example. As you can see this script contains two functions, both of which contribute to the response to the client.</p><p></p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">addEventListener('fetch', event =&gt; {\n event.respondWith(handleRequest(event.request))\n})\n\nasync function addition(a, b) {\n  return a + b\n}\n\nasync function handleRequest(request) {\n  const added = await addition(1,3)\n  return new Response(`The Sum is ${added}!`)\n}\n</code></pre>\n<!--kg-card-end: markdown--><p></p><p>This script will be active for the route <code>worker.example.com</code>.</p><h3 id=\"directory-set-up\">Directory Set Up</h3><p>After I’ve created a new npm ( <code>npm init</code> ) project in a new directory, I placed my <code>worker.js</code> file inside, containing the above, and created the folder <code>test</code> which contains <code>worker-test.js</code>. The structure is laid out below.</p><p></p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">.\n----- worker.js\n----- test\n      . worker-test.js\n----- node_modules\n----- package.json\n----- package-lock.json.\n</code></pre>\n<!--kg-card-end: markdown--><p></p><p>Next I need to install Cloudworker ( <code>npm install @dollarshaveclub/cloudworker --save-dev</code> ) and the Mocha testing framework ( <code>npm install mocha --save-dev</code> ) if you do not have it installed globally. Make sure that <code>package.json</code> reflects a value of <code>mocha</code> for <code>tests</code>, like:</p><p></p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">&quot;scripts&quot;: {\n    &quot;test&quot;: &quot;mocha&quot;\n  }\n</code></pre>\n<!--kg-card-end: markdown--><p></p><p>Now we can finally write some tests! Luckily, <code>mocha</code> has <code>async/await</code> support which is going to make this very simple.  The idea is straightforward: Cloudworker allows you to place a Worker in development in front of an HTTP request and inspect the response.</p><h3 id=\"writing-tests-\">Writing Tests!</h3><p>Before any test logic, we’ll place two lines at the top of the test file ( <code>worker-test.js</code> ). The first line assigns all property values from Cloudworker and our Worker script to the global context before every <code>async function()</code> is run in mocha. The second line requires <code>assert</code>, which is commonly used to compare an expected output to a mocked output.</p><p></p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">before(async function () {\n   Object.assign(global, new (require('@dollarshaveclub/cloudworker'))(require('fs').readFileSync('worker.js', ‘utf8’)).context);\n});\n\n// You will replace worker.js with the relative path to your worker\n\nconst assert = require('assert')\n</code></pre>\n<!--kg-card-end: markdown--><p></p><p>Now, testing looks a lot more like a Worker itself as we access to all the underlying functions used by Cloudworker AND the Worker script.</p><p></p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">describe('Worker Test', function() {\n\n    it('returns a body that says The Sum is 4', async function () {\n        let url = new URL('https://worker.example.com')\n        let req = new Request(url)\n        let res = await handleRequest(req)\n        let body = await res.text()\n        assert.equal(body, 'The Sum is 4!')\n    })\n\n    it('does addition properly', async function() {\n        let res = await addition(1, 1)\n        assert.equal(res, 2)\n    })\n\n})\n</code></pre>\n<!--kg-card-end: markdown--><p></p><p>We can test individual functions with our Worker this way, as shown above with the <code>addition()</code> function call. This is really powerful and allows for more confidence when deploying complex workers as you can test each component that makes up the script. We hope this was useful and welcome any feedback.</p>",
		"id": "5d16453b41acde0011a957db",
		"meta_description": null,
		"meta_title": null,
		"og_description": null,
		"og_image": null,
		"og_title": null,
		"primary_author": {
			"id": "5d1644b141acde0011a9500a",
			"name": "Tom Brightbill",
			"slug": "tom-brightbill",
			"profile_image": "http://blog.cloudflare.com/content/images/2019/03/tomb.jpg",
			"cover_image": "http://blog.cloudflare.com/content/images/2019/03/general@2x-7.png",
			"bio": null,
			"website": null,
			"location": null,
			"facebook": null,
			"twitter": null,
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/tom-brightbill/"
		},
		"primary_tag": {
			"id": "5d16450341acde0011a95252",
			"name": "Serverless",
			"slug": "serverless",
			"description": null,
			"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Serverless.png",
			"visibility": "public",
			"meta_title": "Cloudflare Blog: Serverless",
			"meta_description": "Cloudflare blog posts tagged 'serverless'.",
			"og_image": null,
			"og_title": null,
			"og_description": null,
			"twitter_image": null,
			"twitter_title": null,
			"twitter_description": null,
			"codeinjection_head": null,
			"codeinjection_foot": null,
			"canonical_url": null,
			"accent_color": null,
			"url": "http://blog.cloudflare.com/tag/serverless/"
		},
		"published_at": "2019-03-15T14:17:11.000+00:00",
		"reading_time": 3,
		"slug": "unit-testing-worker-functions",
		"tags": [
			{
				"id": "5d16450341acde0011a95252",
				"name": "Serverless",
				"slug": "serverless",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Serverless.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Serverless",
				"meta_description": "Cloudflare blog posts tagged 'serverless'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/serverless/"
			},
			{
				"id": "5d16450341acde0011a95253",
				"name": "Cloudflare Workers",
				"slug": "workers",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/workers/"
			},
			{
				"id": "5d16450341acde0011a95165",
				"name": "JavaScript",
				"slug": "javascript",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/javascript/"
			},
			{
				"id": "64a3e2b834124c000b00b717",
				"name": "Developer Platform",
				"slug": "developer-platform",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developer-platform/"
			},
			{
				"id": "5d16450341acde0011a95204",
				"name": "Developers",
				"slug": "developers",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Developers-1.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Developers",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Developers'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developers/"
			}
		],
		"title": "Unit Testing Worker Functions",
		"twitter_description": null,
		"twitter_image": null,
		"twitter_title": null,
		"updated_at": "2020-08-14T20:32:42.000+01:00",
		"url": "http://blog.cloudflare.com/unit-testing-worker-functions/",
		"uuid": "502840f9-0a34-41f3-a75b-d8e03d19443a",
		"visibility": "public"
	}
}