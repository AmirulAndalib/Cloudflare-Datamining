{
	"locale": "en-us",
	"post": {
		"access": true,
		"authors": [
			{
				"id": "5d1644b141acde0011a94f5c",
				"name": "Patrick R. Donahue",
				"slug": "patrick",
				"profile_image": "https://blog-cloudflare-com-assets.storage.googleapis.com/2020/04/me0-1.png",
				"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-108.png",
				"bio": null,
				"website": "https://www.cloudflare.com",
				"location": "San Francisco, CA",
				"facebook": null,
				"twitter": "@prdonahue",
				"meta_title": null,
				"meta_description": null,
				"url": "http://blog.cloudflare.com/author/patrick/"
			}
		],
		"canonical_url": null,
		"codeinjection_foot": null,
		"codeinjection_head": null,
		"comment_id": "5ae36dd7180249002268505c",
		"comments": false,
		"created_at": "2018-04-27T19:37:11.000+01:00",
		"custom_excerpt": "Write code to manage your Cloudflare configuration using Terraform, and store it in your source code repository of choice for versioned history and rollback.",
		"custom_template": null,
		"email_subject": null,
		"excerpt": "Write code to manage your Cloudflare configuration using Terraform, and store it in your source code repository of choice for versioned history and rollback.",
		"feature_image": "http://blog.cloudflare.com/content/images/2018/04/Screen-Shot-2018-04-30-at-9.23.22-AM.png",
		"feature_image_alt": null,
		"feature_image_caption": null,
		"featured": false,
		"frontmatter": null,
		"html": "<!--kg-card-begin: markdown--><p><em>You can read Part 2 of Getting Started with Terraform <a href=\"http://blog.cloudflare.com/getting-started-with-terraform-and-cloudflare-part-2/\">here</a>.</em></p>\n<p>As a Product Manager at Cloudflare, I spend quite a bit of my time talking to customers. One of the most common topics I'm asked about is configuration management. Developers want to know how they can write code to manage their Cloudflare config, without interacting with our APIs or UI directly.</p>\n<p>Following best practices in software development, they want to store configuration in their own source code repository (be it <a href=\"https://github.com\">GitHub</a> or otherwise), institute a change management process that includes code review, and be able to track their configuration versions and history over time. Additionally, they want the ability to quickly and easily roll back changes when required.</p>\n<p>When I first spoke with our engineering teams about these requirements, they gave me the best answer a Product Manager could hope to hear: there's already an open source tool out there that does all of that (and more), with a strong community and plugin system to boot—it's called <a href=\"https://terraform.io\">Terraform</a>.</p>\n<p>This blog post is about getting started using Terraform with Cloudflare and the new version 1.0 of our Terraform provider. A &quot;provider&quot; is simply a plugin that knows how to talk to a specific set of APIs—in this case, Cloudflare, but there are also providers available for AWS, Azure, Google Cloud, Kubernetes, VMware, and <a href=\"https://www.terraform.io/docs/providers/\">many more services</a>. Today's release extends our existing provider that previously only supported DNS records with support for Zone Settings, Rate Limiting, Load Balancing, and Page Rules.</p>\n<h3 id=\"beforeandafterterraform\">Before and after Terraform</h3>\n<p>Before we jump into some real-world examples of using Terraform with Cloudflare, here is a set of diagrams that depicts the paradigm shift.</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2018/04/before-terraform-@3x.png\" alt=\"before-terraform-@3x\" loading=\"lazy\"></p>\n<p>Before Terraform, you needed to learn how to use the configuration interfaces or <a href=\"https://www.cloudflare.com/learning/security/api/what-is-an-api/\">APIs</a> of each cloud and edge provider, e.g., Google Cloud and Cloudflare below. Additionally, your ability to store your configuration in your own source code control system depends on vendor-specific configuration export mechanisms (which may or may not exist).<br>\n<br/></p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2018/04/with-terraform-@3x-2.png\" alt=\"with-terraform-@3x-2\" loading=\"lazy\"></p>\n<p>With Terraform, you can store and version your configuration in GitHub (or your source code control system of choice). Once you learn Terraform's configuration syntax, you don't need to bother learning how to use providers' UIs or APIs—you just tell Terraform what you want and it figures out the rest.</p>\n<h3 id=\"installingterraform\">Installing Terraform</h3>\n<p>The installation process for Terraform is extremely simple as it ships as a single binary file. Official instructions for installing Terraform can be found <a href=\"https://www.terraform.io/intro/getting-started/install.html\">here</a>, and for purposes of this example we'll show to do so on a macOS using <a href=\"https://brew.sh/\">Homebrew</a>:</p>\n<pre><code>$ brew install terraform\n==&gt; Downloading https://homebrew.bintray.com/bottles/terraform-0.11.7.sierra.bottle.tar.gz\n######################################################################## 100.0%\n==&gt; Pouring terraform-0.11.7.sierra.bottle.tar.gz\n?  /usr/local/Cellar/terraform/0.11.7: 6 files, 80.2MB\n\n$ terraform version\nTerraform v0.11.7\n</code></pre>\n<p><mark>The following instructions are adapted from the <a href=\"https://developers.cloudflare.com/terraform/\">Cloudflare Developers - Terraform documentation</a> site, which includes a <a href=\"https://developers.cloudflare.com/terraform/tutorial/\">full tutorial</a> and coverage of <a href=\"https://developers.cloudflare.com/terraform/advanced-topics/\">advanced topics</a>.</mark></p>\n<p>If you're interested in seeing how to use a specific Terraform resource or technique, click on one of the following anchor links:</p>\n<ul>\n<li><a href=\"#installingterraform\">Installing Terraform</a></li>\n<li><a href=\"#helloworld\">Hello, world!</a></li>\n<li><a href=\"#trackingchangehistory\">Tracking Change History</a></li>\n<li><a href=\"#applyingzonesettings\">Applying Zone Settings</a></li>\n<li><a href=\"#managingratelimits\">Managing Rate Limits</a></li>\n<li>Load Balancing Resource (next post!)</li>\n<li>Page Rules Resource (next post!)</li>\n<li>Reviewing and Rolling Back Configuration (next post!)</li>\n<li>Importing Existing State and Configuration (next post!)</li>\n</ul>\n<h3 id=\"helloworld\">Hello, world!</h3>\n<p>Now that Terraform is installed, it's time to start using it. Let's assume you have a web server for your domain that's accessible on <code>203.0.113.10</code>. You just signed up your domain, <code>example.com</code>, on Cloudflare and want to manage everything with Terraform.</p>\n<h4 id=\"1defineyourfirstterraformconfigfile\">1. Define your first Terraform config file</h4>\n<p>First we'll create a initial Terraform config file. Any files ending in <code>.tf</code> will be processed by Terraform. As you configuration gets more complex you'll want to split the config into separate files and modules, but for now we'll proceed with a single file:</p>\n<pre><code>$ cat &gt; cloudflare.tf &lt;&lt;'EOF'\nprovider &quot;cloudflare&quot; {\n  email = &quot;you@example.com&quot;\n  token = &quot;your-api-key&quot;\n}\n\nvariable &quot;domain&quot; {\n  default = &quot;example.com&quot;\n}\n\nresource &quot;cloudflare_record&quot; &quot;www&quot; {\n  domain  = &quot;${var.domain}&quot;\n  name    = &quot;www&quot;\n  value   = &quot;203.0.113.10&quot;\n  type    = &quot;A&quot;\n  proxied = true\n}\nEOF\n</code></pre>\n<h4 id=\"2initializeterraformandthecloudflareprovider\">2. Initialize Terraform and the Cloudflare provider</h4>\n<p>Now that you've created your basic configuration in HCL let's initialize Terraform and ask it to apply the configuration to Cloudflare. HCL stands for HashiCorp Configuration Lanaguage, and is named after the maker of Terraform.</p>\n<pre><code>$ terraform init\n\nInitializing provider plugins...\n- Checking for available provider plugins on https://releases.hashicorp.com...\n- Downloading plugin for provider &quot;cloudflare&quot; (1.0.0)...\n\nThe following providers do not have any version constraints in configuration,\nso the latest version was installed.\n\nTo prevent automatic upgrades to new major versions that may contain breaking\nchanges, it is recommended to add version = &quot;...&quot; constraints to the\ncorresponding provider blocks in configuration, with the constraint strings\nsuggested below.\n\n* provider.cloudflare: version = &quot;~&gt; 1.0&quot;\n\nTerraform has been successfully initialized!\n\nYou may now begin working with Terraform. Try running &quot;terraform plan&quot; to see\nany changes that are required for your infrastructure. All Terraform commands\nshould now work.\n\nIf you ever set or change modules or backend configuration for Terraform,\nrerun this command to reinitialize your working directory. If you forget, other\ncommands will detect it and remind you to do so if necessary.\nWhen you run terraform init, any plugins required, such as the Cloudflare Terraform provider, are automatically downloaded and saved locally to a .terraform directory:\n\n$ find .terraform/\n.terraform/\n.terraform//plugins\n.terraform//plugins/darwin_amd64\n.terraform//plugins/darwin_amd64/lock.json\n.terraform//plugins/darwin_amd64/terraform-provider-cloudflare_v1.0.0_x4\n</code></pre>\n<h4 id=\"3reviewtheexecutionplan\">3. Review the execution plan</h4>\n<p>With the Cloudflare provider installed, let's ask Terraform to show the changes it's planning to make to your Cloudflare account so you can confirm it matches the configuration you intended:</p>\n<pre><code>$ terraform plan\nRefreshing Terraform state in-memory prior to plan...\nThe refreshed state will be used to calculate this plan, but will not be\npersisted to local or remote state storage.\n\n\n------------------------------------------------------------------------\n\nAn execution plan has been generated and is shown below.\nResource actions are indicated with the following symbols:\n  + create\n\nTerraform will perform the following actions:\n\n  + cloudflare_record.www\n      id:          &lt;computed&gt;\n      created_on:  &lt;computed&gt;\n      domain:      &quot;example.com&quot;\n      hostname:    &lt;computed&gt;\n      metadata.%:  &lt;computed&gt;\n      modified_on: &lt;computed&gt;\n      name:        &quot;www&quot;\n      proxiable:   &lt;computed&gt;\n      proxied:     &quot;true&quot;\n      ttl:         &lt;computed&gt;\n      type:        &quot;A&quot;\n      value:       &quot;203.0.113.10&quot;\n      zone_id:     &lt;computed&gt;\n\n\nPlan: 1 to add, 0 to change, 0 to destroy.\n\n------------------------------------------------------------------------\n\nNote: You didn't specify an &quot;-out&quot; parameter to save this plan, so Terraform\ncan't guarantee that exactly these actions will be performed if\n&quot;terraform apply&quot; is subsequently run.\n</code></pre>\n<p>As you can see in the above &quot;execution plan”, Terraform is going to create a new DNS record, as requested. Values that you've explicitly specified are displayed, e.g., the value of the <code>A</code> record—<code>203.0.113.10</code>—while values that are derived based on other API calls, e.g., looking up the zone_id, or returned after the object is created, are displayed as <code>&lt;computed&gt;</code>.</p>\n<h4 id=\"4applyingyourchanges\">4. Applying Your Changes</h4>\n<p>The plan command is important, as it allows you to preview the changes for accuracy before actually making them. Once you're comfortable with the execution plan, it's time to apply it:</p>\n<pre><code>$ terraform apply --auto-approve\ncloudflare_record.www: Creating...\n  created_on:  &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\n  domain:      &quot;&quot; =&gt; &quot;example.com&quot;\n  hostname:    &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\n  metadata.%:  &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\n  modified_on: &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\n  name:        &quot;&quot; =&gt; &quot;www&quot;\n  proxiable:   &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\n  proxied:     &quot;&quot; =&gt; &quot;true&quot;\n  ttl:         &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\n  type:        &quot;&quot; =&gt; &quot;A&quot;\n  value:       &quot;&quot; =&gt; &quot;203.0.113.10&quot;\n  zone_id:     &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\ncloudflare_record.www: Creation complete after 1s (ID: c38d3103767284e7cd14d5dad3ab8668)\n\nApply complete! Resources: 1 added, 0 changed, 0 destroyed.\n\n</code></pre>\n<p>Note that I specified –auto-approve on the command line for briefer output; without this flag, Terraform will show you the output of <code>terraform plan</code> and then ask for confirmation before applying it.</p>\n<h4 id=\"verifytheresults\">Verify the results</h4>\n<p>Logging back into the Cloudflare Dashboard and selecting the DNS tab, I can see the record that was created by Terraform:</p>\n<p><img src=\"http://blog.cloudflare.com/content/images/2018/04/Verify-DNS.png\" alt=\"Verify-DNS\" loading=\"lazy\"></p>\n<p>If you'd like to see the full results returned from the API call (including the default values that you didn't specify but let Terraform compute), you can run <code>terraform show</code>:</p>\n<pre><code>$ terraform show\ncloudflare_record.www:\n  id = c38d3103767284e7cd14d5dad3ab8668\n  created_on = 2018-04-08T00:37:33.76321Z\n  data.% = 0\n  domain = example.com\n  hostname = www.example.com\n  metadata.% = 2\n  metadata.auto_added = false\n  metadata.managed_by_apps = false\n  modified_on = 2018-04-08T00:37:33.76321Z\n  name = www\n  priority = 0\n  proxiable = true\n  proxied = true\n  ttl = 1\n  type = A\n  value = 203.0.113.10\n  zone_id = e2e6391340be87a3726f91fc4148b122\n</code></pre>\n<pre><code>$ curl https://www.example.com\nHello, this is 203.0.113.10!\n</code></pre>\n<h3 id=\"trackingchangehistory\">Tracking change history</h3>\n<p>In the <code>terraform apply</code> step above, you created and applied some basic Cloudflare configuration. Terraform was able to apply this configuration to your account because you provided your email address and API token at the top of the cloudflare.tf file:</p>\n<pre><code>$ head -n4 cloudflare.tf \nprovider &quot;cloudflare&quot; {\n  email = &quot;you@example.com&quot;\n  token = &quot;your-api-key&quot;\n}\n</code></pre>\n<p>We're now going to store your configuration in GitHub where it can be tracked, peer-reviewed, and rolled back to as needed. But before we do so, we're going to remove your credentials from the Terraform config file so it doesn't get committed to a repository.</p>\n<h4 id=\"1useenvironmentvariablesforauthentication\">1. Use environment variables for authentication</h4>\n<p>As a good security practice we need to remove your Cloudflare credentials from anything that will be committed to a repository. The Cloudflare Terraform provider supports reading these values from the <code>CLOUDFLARE_EMAIL</code> and <code>CLOUDFLARE_TOKEN</code> environment variables, so all we need to do is:</p>\n<pre><code>$ sed -ie 's/^.*email =.*$/  # email pulled from $CLOUDFLARE_EMAIL/' cloudflare.tf\n$ sed -ie 's/^.*token =.*$/  # token pulled from $CLOUDFLARE_TOKEN/' cloudflare.tf\n\n$ head -n4 cloudflare.tf \nprovider &quot;cloudflare&quot; {\n  # email pulled from $CLOUDFLARE_EMAIL\n  # token pulled from $CLOUDFLARE_TOKEN\n}\n\n$ export CLOUDFLARE_EMAIL=you@example.com\n$ export CLOUDFLARE_TOKEN=your-api-key\n</code></pre>\n<p>Note that you need to leave the empty provider definition in the file, so that Terraform knows to install the Cloudflare plugin.</p>\n<p>After completing the above step, it's a good idea to make sure that you can still authenticate to Cloudflare. By running <code>terraform plan</code> we can get Terraform to pull the current state (which requires a valid email and API key):</p>\n<pre><code>$ terraform plan\nRefreshing Terraform state in-memory prior to plan...\nThe refreshed state will be used to calculate this plan, but will not be\npersisted to local or remote state storage.\n\ncloudflare_record.www: Refreshing state... (ID: c38d3102767284e7ca14d5dad3ab8b69)\n\n------------------------------------------------------------------------\n\nNo changes. Infrastructure is up-to-date.\n\nThis means that Terraform did not detect any differences between your\nconfiguration and real physical resources that exist. As a result, no\nactions need to be performed.\n</code></pre>\n<ol start=\"2\">\n<li>Store your configuration in GitHub<br>\nNow that credentials have been removed, it's time to initialize a git repository with your Cloudflare configuration and then push it to GitHub.</li>\n</ol>\n<p>First we'll create the GitHub repository to store the config. This can be done via the GitHub UI or with a simple API call:</p>\n<pre><code>$ export GITHUB_USER=your-github-user\n$ export GITHUB_TOKEN=your-github-token\n\n$ export GITHUB_URL=$(curl -sSXPOST https://api.github.com/user/repos?access_token=$GITHUB_TOKEN -H 'Content-Type: application/json' \\\n-d '{&quot;name&quot;: &quot;cf-config&quot;, &quot;private&quot;:&quot;true&quot;}' 2&gt;/dev/null | jq -r .ssh_url)\n\n$ echo $GITHUB_URL\ngit@github.com:$GITHUB_USER/cf-config.git\n</code></pre>\n<p>Now we'll initialize a git repository and make our first commit:</p>\n<pre><code>$ git init\nInitialized empty Git repository in $HOME/cf-config/.git/\n\n$ git remote add origin $GITHUB_URL\n$ git add cloudflare.tf\n\n$ git commit -m &quot;Step 2 - Initial commit with webserver definition.&quot;\n[master (root-commit) 5acea17] Step 2 - Initial commit with webserver definition.\n 1 file changed, 16 insertions(+)\n create mode 100644 cloudflare.tf\n</code></pre>\n<p>An astute reader may have noticed that we did not commit the <code>.terraform</code> directory nor did we commit the <code>terraform.tfstate</code> file. The former was not committed because this repository may be used on a different architecture, and the plugins contained in this directory are built for the system on which terraform init was run. The latter was not committed as i) it may eventually contain sensitive strings and ii) it is not a good way to keep state in sync, as HashiCorp [explains].</p>\n<p>To prevent git from bugging us about these files, let's add them to a new <code>.gitignore</code> file, commit it, and push everything to GitHub:</p>\n<pre><code>$ cat &gt; .gitignore &lt;&lt;'EOF'\n.terraform/\nterraform.tfstate*\nEOF\n\n$ git add .gitignore\n\n$ git commit -m &quot;Step 2 - Ignore terraform plugin directory and state file.&quot;\n[master 494c6d6] Step 2 - Ignore terraform plugin directory and state file.\n 1 file changed, 2 insertions(+)\n create mode 100644 .gitignore\n\n$ git push\nCounting objects: 6, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (4/4), done.\nWriting objects: 100% (6/6), 762 bytes | 0 bytes/s, done.\nTotal 6 (delta 0), reused 0 (delta 0)\nTo git@github.com:$GITHUB_USER/cf-config.git\n * [new branch]      master -&gt; master\n</code></pre>\n<h3 id=\"applyingzonesettings\">Applying zone settings</h3>\n<p>Now that you've got a basic website proxied through Cloudflare, it's time to use Terraform to adjust some additional settings on your zone. Below we'll configure some optional HTTPS settings, and then push the updated configuration to GitHub for posterity.</p>\n<p>We'll use a new git branch for the changes, and then merge it into master before applying. On a team, you might consider using this step as an opportunity for others to review your change before merging and deploying it. Or you may integrate Terraform into your CI/CD system to perform tests automatically using another Cloudflare domain.</p>\n<h4 id=\"1createanewbranchandappendthenewzonesettings\">1. Create a new branch and append the new zone settings</h4>\n<p>Here, we modify the Terraform configuration to enable the following settings: <a href=\"https://www.cloudflare.com/learning-resources/tls-1-3/\">TLS 1.3</a>, <a href=\"http://blog.cloudflare.com/how-to-make-your-site-https-only/\">Always Use HTTPS</a>, <a href=\"http://blog.cloudflare.com/introducing-strict-ssl-protecting-against-a-man-in-the-middle-attack-on-origin-traffic/\">Strict SSL mode</a>, and the <a href=\"https://www.cloudflare.com/waf/\">Cloudflare WAF</a>. Strict mode requires a valid SSL certificate on your origin, so be sure to use the <a href=\"http://blog.cloudflare.com/cloudflare-ca-encryption-origin/\">Cloudflare Origin CA</a> to generate one.</p>\n<pre><code>$ git checkout -b step3-https\nSwitched to a new branch 'step3-https'\n\n$ cat &gt;&gt; cloudflare.tf &lt;&lt;'EOF'\n\nresource &quot;cloudflare_zone_settings_override&quot; &quot;example-com-settings&quot; {\n  name = &quot;${var.domain}&quot;\n\n  settings {\n    tls_1_3 = &quot;on&quot;\n    automatic_https_rewrites = &quot;on&quot;\n    ssl = &quot;strict&quot;\n    waf = &quot;on&quot;\n  }\n}\nEOF\n</code></pre>\n<h4 id=\"2previewandmergethechanges\">2. Preview and merge the changes</h4>\n<p>Let's take a look at what Terraform is proposing before we apply it. We filter the <code>terraform plan</code> output to ignore those values that will be &quot;computed”—in this case, settings that will be left at their default values. For brevity from here on out, we'll omit some extranneous Terraform output; if you'd like to see the output exactly as run, please see the <a href=\"https://developers.cloudflare.com/terraform/tutorial/\">full tutorial</a>.</p>\n<pre><code>$ terraform plan | grep -v &quot;&lt;computed&gt;&quot;\nRefreshing Terraform state in-memory prior to plan...\nThe refreshed state will be used to calculate this plan, but will not be\npersisted to local or remote state storage.\n\ncloudflare_record.www: Refreshing state... (ID: c38d3103767284e7cd14d5dad3ab8668)\n\n------------------------------------------------------------------------\n\nAn execution plan has been generated and is shown below.\nResource actions are indicated with the following symbols:\n  + create\n\nTerraform will perform the following actions:\n\n  + cloudflare_zone_settings_override.example-com-settings\n      name:                                   &quot;example.com&quot;\n      settings.#:                             &quot;1&quot;\n      settings.0.automatic_https_rewrites:    &quot;on&quot;\n      settings.0.ssl:                         &quot;strict&quot;\n      settings.0.tls_1_3:                     &quot;on&quot;\n      settings.0.waf:                         &quot;on&quot;\n\n\nPlan: 1 to add, 0 to change, 0 to destroy.\n</code></pre>\n<p>The proposed changes look good, so we'll merge them into primary and then apply them with <code>terraform apply</code>. When working on a team, you may want to require pull requests and use this opportunity to peer review any proposed configuration changes.</p>\n<pre><code>$ git add cloudflare.tf\n$ git commit -m &quot;Step 3 - Enable TLS 1.3, Always Use HTTPS, and SSL Strict mode.&quot;\n[step3-https d540600] Step 3 - Enable TLS 1.3, Always Use HTTPS, and SSL Strict mode.\n 1 file changed, 11 insertions(+)\n\n$ git checkout master\nSwitched to branch 'master'\n\n$ git merge step3-https\nUpdating d26f40b..d540600\nFast-forward\n cloudflare.tf | 11 +++++++++++\n 1 file changed, 11 insertions(+)\n\n$ git push\nCounting objects: 3, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 501 bytes | 0 bytes/s, done.\nTotal 3 (delta 1), reused 0 (delta 0)\nremote: Resolving deltas: 100% (1/1), completed with 1 local object.\nTo git@github.com:$GITHUB_USER/cf-config.git\n   d26f40b..d540600  master -&gt; master\n</code></pre>\n<h4 id=\"3applyandverifythechanges\">3. Apply and verify the changes</h4>\n<p>Before applying the changes, let's see if we can connect with TLS 1.3. Hint: we should <em>not</em> be able to with default settings. If you want to follow along with this test, you'll need to [compile curl against BoringSSL].</p>\n<pre><code>$ curl -v --tlsv1.3 https://www.upinatoms.com 2&gt;&amp;1 | grep &quot;SSL connection\\|error&quot;\n* error:1000042e:SSL routines:OPENSSL_internal:TLSV1_ALERT_PROTOCOL_VERSION\ncurl: (35) error:1000042e:SSL routines:OPENSSL_internal:TLSV1_ALERT_PROTOCOL_VERSION\n</code></pre>\n<p>As shown above, we receive an error as TLS 1.3 is not yet enabled on your zone. Let's enable it by running terraform apply and try again:</p>\n<pre><code>$ terraform apply --auto-approve\ncloudflare_record.www: Refreshing state... (ID: c38d3103767284e7cd14d5dad3ab8668)\ncloudflare_zone_settings_override.example-com-settings: Creating...\n  initial_settings.#:                     &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\n  initial_settings_read_at:               &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\n  name:                                   &quot;&quot; =&gt; &quot;example.com&quot;\n  readonly_settings.#:                    &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\n  settings.#:                             &quot;&quot; =&gt; &quot;1&quot;\n  settings.0.advanced_ddos:               &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\n  settings.0.always_online:               &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\n  settings.0.always_use_https:            &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\n  settings.0.automatic_https_rewrites:    &quot;&quot; =&gt; &quot;on&quot;\n  settings.0.brotli:                      &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\n  settings.0.browser_cache_ttl:           &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\n  settings.0.browser_check:               &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\n  settings.0.cache_level:                 &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\n  settings.0.challenge_ttl:               &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\n  settings.0.cname_flattening:            &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\n  settings.0.development_mode:            &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\n  settings.0.edge_cache_ttl:              &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\n  settings.0.email_obfuscation:           &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\n  settings.0.hotlink_protection:          &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\n  settings.0.http2:                       &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\n  settings.0.ip_geolocation:              &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\n  settings.0.ipv6:                        &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\n  settings.0.max_upload:                  &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\n  settings.0.minify.#:                    &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\n  settings.0.mirage:                      &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\n  settings.0.mobile_redirect.#:           &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\n  settings.0.opportunistic_encryption:    &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\n  settings.0.origin_error_page_pass_thru: &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\n  settings.0.polish:                      &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\n  settings.0.prefetch_preload:            &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\n  settings.0.privacy_pass:                &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\n  settings.0.pseudo_ipv4:                 &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\n  settings.0.response_buffering:          &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\n  settings.0.rocket_loader:               &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\n  settings.0.security_header.#:           &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\n  settings.0.security_level:              &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\n  settings.0.server_side_exclude:         &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\n  settings.0.sha1_support:                &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\n  settings.0.sort_query_string_for_cache: &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\n  settings.0.ssl:                         &quot;&quot; =&gt; &quot;strict&quot;\n  settings.0.tls_1_2_only:                &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\n  settings.0.tls_1_3:                     &quot;&quot; =&gt; &quot;on&quot;\n  settings.0.tls_client_auth:             &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\n  settings.0.true_client_ip_header:       &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\n  settings.0.waf:                         &quot;&quot; =&gt; &quot;on&quot;\n  settings.0.webp:                        &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\n  settings.0.websockets:                  &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\n  zone_status:                            &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\n  zone_type:                              &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\ncloudflare_zone_settings_override.example-com-settings: Creation complete after 2s (ID: e2e6491340be87a3726f91fc4148b125)\n\nApply complete! Resources: 1 added, 0 changed, 0 destroyed.\n</code></pre>\n<p>Now we can try the same command as above, and see that it succeeds. Niiice, TLS 1.3!</p>\n<pre><code>$ curl -v --tlsv1.3 https://www.example.com 2&gt;&amp;1 | grep &quot;SSL connection\\|error&quot;\n* SSL connection using TLSv1.3 / AEAD-AES128-GCM-SHA256\n</code></pre>\n<h3 id=\"managingratelimits\">Managing rate limits</h3>\n<p><em>Before proceeding, make sure that your account is enabled for Rate Limiting. If you’re on an Enterprise plan, you should ask your Customer Success Manager to do this; otherwise, you can subscribe to Rate Limiting within the Cloudflare Dashboard.</em></p>\n<p>With our zone settings locked down, and our site starting to get some more attention, it's unfortunately begun attracting some of the less scrupulous characters on the internet. Our server access logs show attempts to brute force our login page at <code>https://www.example.com/login</code>. Let's see what we can do with Cloudflare's <a href=\"(https://www.cloudflare.com/rate-limiting/)\">rate limiting product</a> to put a stop to these efforts.</p>\n<h4 id=\"1createanewbranchandappendtheratelimitingsettings\">1. Create a new branch and append the rate limiting settings</h4>\n<p>After creating a new branch we specify the rate limiting rule:</p>\n<pre><code>$ git checkout -b step4-ratelimit\nSwitched to a new branch 'step4-ratelimit'\n\n$ cat &gt;&gt; cloudflare.cf &lt;&lt;'EOF'\nresource &quot;cloudflare_rate_limit&quot; &quot;login-limit&quot; {\n  zone = &quot;${var.domain}&quot;\n\n  threshold = 5\n  period = 60\n  match {\n    request {\n      url_pattern = &quot;${var.domain}/login&quot;\n      schemes = [&quot;HTTP&quot;, &quot;HTTPS&quot;]\n      methods = [&quot;POST&quot;]\n    }\n    response {\n      statuses = [401, 403]\n      origin_traffic = true\n    }\n  }\n  action {\n    mode = &quot;simulate&quot;\n    timeout = 300\n    response {\n      content_type = &quot;text/plain&quot;\n      body = &quot;You have failed to login 5 times in a 60 second period and will be blocked from attempting to login again for the next 5 minutes.&quot;\n    }\n  }\n  disabled = false\n  description = &quot;Block failed login attempts (5 in 1 min) for 5 minutes.&quot;\n}\nEOF\n</code></pre>\n<p>This rule is a bit more complex than the zone settings rule, so let's break it down:</p>\n<pre><code>00: resource &quot;cloudflare_rate_limit&quot; &quot;login-limit&quot; {\n01:   zone = &quot;${var.domain}&quot;\n02:\n03:   threshold = 5\n04:   period = 60\n</code></pre>\n<p>The threshold is an integer count of how many times an event (defined by the match block below) has to be detected in the period before the rule takes action. The period is measured in seconds, so the above rule says to take action if the match fires 5 times in 60 seconds.</p>\n<pre><code>05:   match {\n06:     request {\n07:       url_pattern = &quot;${var.domain}/login&quot;\n08:       schemes = [&quot;HTTP&quot;, &quot;HTTPS&quot;]\n09:       methods = [&quot;POST&quot;]\n10:     }\n11:     response {\n12:       statuses = [401, 403]\n13:     }\n14:   }\n</code></pre>\n<p>The match block tells the Cloudflare edge what to be on the lookout for, i.e., HTTP or HTTPS POST requests to <code>https://www.example.com/login</code>. We further restrict the match to HTTP <code>401/Unauthorized</code> or <code>403/Forbidden</code> response codes returned from the origin.</p>\n<pre><code>15:   action {\n16:     mode = &quot;simulate&quot;\n17:     timeout = 300\n18:     response {\n19:       content_type = &quot;text/plain&quot;\n20:       body = &quot;You have failed to login 5 times in a 60 second period and will be blocked from attempting to login again for the next 5 minutes.&quot;\n21:     }\n22:   }\n23:   disabled = false\n24:   description = &quot;Block failed login attempts (5 in 1 min) for 5 minutes.&quot;\n25: }\n</code></pre>\n<p>After matching traffic, we set the action for our edge to take. When testing, it's a good idea to set the mode to simulate and review logs before taking enforcement action (see below). The timeout field here indicates that we want to enforce this action for 300 seconds (5 minutes) and the response block indicates what should be sent back to the caller that tripped the rate limit.</p>\n<h4 id=\"2previewandmergethechanges\">2. Preview and merge the changes</h4>\n<p>As usual, we take a look at the proposed plan before we apply any changes:</p>\n<pre><code>$ terraform plan\n...\nTerraform will perform the following actions:\n\n  + cloudflare_rate_limit.login-limit\n      id:                                     &lt;computed&gt;\n      action.#:                               &quot;1&quot;\n      action.0.mode:                          &quot;simulate&quot;\n      action.0.response.#:                    &quot;1&quot;\n      action.0.response.0.body:               &quot;You have failed to login 5 times in a 60 second period and will be blocked from attempting to login again for the next 5 minutes.&quot;\n      action.0.response.0.content_type:       &quot;text/plain&quot;\n      action.0.timeout:                       &quot;300&quot;\n      description:                            &quot;Block failed login attempts (5 in 1 min) for 5 minutes.&quot;\n      disabled:                               &quot;false&quot;\n      match.#:                                &quot;1&quot;\n      match.0.request.#:                      &quot;1&quot;\n      match.0.request.0.methods.#:            &quot;1&quot;\n      match.0.request.0.methods.1012961568:   &quot;POST&quot;\n      match.0.request.0.schemes.#:            &quot;2&quot;\n      match.0.request.0.schemes.2328579708:   &quot;HTTP&quot;\n      match.0.request.0.schemes.2534674783:   &quot;HTTPS&quot;\n      match.0.request.0.url_pattern:          &quot;www.example.com/login&quot;\n      match.0.response.#:                     &quot;1&quot;\n      match.0.response.0.origin_traffic:      &quot;true&quot;\n      match.0.response.0.statuses.#:          &quot;2&quot;\n      match.0.response.0.statuses.1057413486: &quot;403&quot;\n      match.0.response.0.statuses.221297644:  &quot;401&quot;\n      period:                                 &quot;60&quot;\n      threshold:                              &quot;5&quot;\n      zone:                                   &quot;example.com&quot;\n      zone_id:                                &lt;computed&gt;\n\n\nPlan: 1 to add, 0 to change, 0 to destroy.\n</code></pre>\n<p>The plan looks good so let's go ahead, merge it in, and apply it.</p>\n<pre><code>$ git add cloudflare.tf\n$ git commit -m &quot;Step 4 - Add rate limiting rule to protect /login.&quot;\n[step4-ratelimit 0f7e499] Step 4 - Add rate limiting rule to protect /login.\n 1 file changed, 28 insertions(+)\n\n$ git checkout master\nSwitched to branch 'master'\n\n$ git merge step4-ratelimit\nUpdating 321c2bd..0f7e499\nFast-forward\n cloudflare.tf | 28 ++++++++++++++++++++++++++++\n 1 file changed, 28 insertions(+)\n\n$ terraform apply --auto-approve\ncloudflare_record.www: Refreshing state... (ID: c38d3103767284e7cd14d5dad3ab8668)\ncloudflare_zone_settings_override.example-com-settings: Refreshing state... (ID: e2e6491340be87a3726f91fc4148b125)\ncloudflare_rate_limit.login-limit: Creating...\n  action.#:                               &quot;&quot; =&gt; &quot;1&quot;\n  action.0.mode:                          &quot;&quot; =&gt; &quot;simulate&quot;\n  action.0.response.#:                    &quot;&quot; =&gt; &quot;1&quot;\n  action.0.response.0.body:               &quot;&quot; =&gt; &quot;You have failed to login 5 times in a 60 second period and will be blocked from attempting to login again for the next 5 minutes.&quot;\n  action.0.response.0.content_type:       &quot;&quot; =&gt; &quot;text/plain&quot;\n  action.0.timeout:                       &quot;&quot; =&gt; &quot;300&quot;\n  description:                            &quot;&quot; =&gt; &quot;Block failed login attempts (5 in 1 min) for 5 minutes.&quot;\n  disabled:                               &quot;&quot; =&gt; &quot;false&quot;\n  match.#:                                &quot;&quot; =&gt; &quot;1&quot;\n  match.0.request.#:                      &quot;&quot; =&gt; &quot;1&quot;\n  match.0.request.0.methods.#:            &quot;&quot; =&gt; &quot;1&quot;\n  match.0.request.0.methods.1012961568:   &quot;&quot; =&gt; &quot;POST&quot;\n  match.0.request.0.schemes.#:            &quot;&quot; =&gt; &quot;2&quot;\n  match.0.request.0.schemes.2328579708:   &quot;&quot; =&gt; &quot;HTTP&quot;\n  match.0.request.0.schemes.2534674783:   &quot;&quot; =&gt; &quot;HTTPS&quot;\n  match.0.request.0.url_pattern:          &quot;&quot; =&gt; &quot;www.example.com/login&quot;\n  match.0.response.#:                     &quot;&quot; =&gt; &quot;1&quot;\n  match.0.response.0.origin_traffic:      &quot;&quot; =&gt; &quot;true&quot;\n  match.0.response.0.statuses.#:          &quot;&quot; =&gt; &quot;2&quot;\n  match.0.response.0.statuses.1057413486: &quot;&quot; =&gt; &quot;403&quot;\n  match.0.response.0.statuses.221297644:  &quot;&quot; =&gt; &quot;401&quot;\n  period:                                 &quot;&quot; =&gt; &quot;60&quot;\n  threshold:                              &quot;&quot; =&gt; &quot;5&quot;\n  zone:                                   &quot;&quot; =&gt; &quot;example.com&quot;\n  zone_id:                                &quot;&quot; =&gt; &quot;&lt;computed&gt;&quot;\ncloudflare_rate_limit.login-limit: Creation complete after 1s (ID: 8d518c5d6e63406a9466d83cb8675bb6)\n\nApply complete! Resources: 1 added, 0 changed, 0 destroyed.\n</code></pre>\n<p>Note that if you haven't purchased rate limiting yet, you will see the following error when attempting to apply the new rule:</p>\n<pre><code>Error: Error applying plan:\n\n1 error(s) occurred:\n\n* cloudflare_rate_limit.login-limit: 1 error(s) occurred:\n\n* cloudflare_rate_limit.login-limit: error creating rate limit for zone: error from makeRequest: HTTP status 400: content &quot;{\\n  \\&quot;result\\&quot;: null,\\n  \\&quot;success\\&quot;: false,\\n  \\&quot;errors\\&quot;: [\\n    {\\n      \\&quot;code\\&quot;: 10021,\\n      \\&quot;message\\&quot;: \\&quot;ratelimit.api.not_entitled.account\\&quot;\\n    }\\n  ],\\n  \\&quot;messages\\&quot;: []\\n}\\n&quot;\n</code></pre>\n<h4 id=\"3updatetheruletobannotjustsimulate\">3. Update the rule to ban (not just simulate)</h4>\n<p>After confirming that the rule is triggering as planned in logs (but not yet enforcing), it's time to switch from simulate to ban:</p>\n<pre><code>$ git checkout step4-ratelimit\n$ sed -i.bak -e 's/simulate/ban/' cloudflare.tf\n\n$ git diff\ndiff --git a/cloudflare.tf b/cloudflare.tf\nindex ed5157c..9f25a0c 100644\n--- a/cloudflare.tf\n+++ b/cloudflare.tf\n@@ -42,7 +42,7 @@ resource &quot;cloudflare_rate_limit&quot; &quot;login-limit&quot; {\n     }\n   }\n   action {\n-    mode = &quot;simulate&quot;\n+    mode = &quot;ban&quot;\n     timeout = 300\n     response {\n       content_type = &quot;text/plain&quot;\n</code></pre>\n<pre><code>$ terraform plan\nRefreshing Terraform state in-memory prior to plan...\nThe refreshed state will be used to calculate this plan, but will not be\npersisted to local or remote state storage.\n\ncloudflare_zone_settings_override.example-com-settings: Refreshing state... (ID: e2e6491340be87a3726f91fc4148b126)\ncloudflare_rate_limit.login-limit: Refreshing state... (ID: 8d518c5d6e63406a9466d83cb8675bb6)\ncloudflare_record.www: Refreshing state... (ID: c38d3103767284e7cd14d5dad3ab8669)\n\n------------------------------------------------------------------------\n\nAn execution plan has been generated and is shown below.\nResource actions are indicated with the following symbols:\n  ~ update in-place\n\nTerraform will perform the following actions:\n\n  ~ cloudflare_rate_limit.login-limit\n      action.0.mode: &quot;simulate&quot; =&gt; &quot;ban&quot;\n\nPlan: 0 to add, 1 to change, 0 to destroy.\n</code></pre>\n<h4 id=\"4mergeanddeploytheupdatedrulethenpushconfigtogithub\">4. Merge and deploy the updated rule, then push config to GitHub</h4>\n<pre><code>$ git add cloudflare.tf\n\n$ git commit -m &quot;Step 4 - Update /login rate limit rule from 'simulate' to 'ban'.&quot;\n[step4-ratelimit e1c38cf] Step 4 - Update /login rate limit rule from 'simulate' to 'ban'.\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\n$ git checkout master &amp;&amp; git merge step4-ratelimit &amp;&amp; git push\nSwitched to branch 'master'\nUpdating 0f7e499..e1c38cf\nFast-forward\n cloudflare.tf | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\nCounting objects: 3, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 361 bytes | 0 bytes/s, done.\nTotal 3 (delta 1), reused 0 (delta 0)\nremote: Resolving deltas: 100% (1/1), completed with 1 local object.\nTo git@github.com:$GITHUB_USER/cf-config.git\n   0f7e499..e1c38cf  master -&gt; master\n</code></pre>\n<pre><code>$ terraform apply --auto-approve\ncloudflare_rate_limit.login-limit: Refreshing state... (ID: 8d518c5d6e63406a9466d83cb8675bb6)\ncloudflare_record.www: Refreshing state... (ID: c38d3103767284e7cd14d5dad3ab8669)\ncloudflare_zone_settings_override.example-com-settings: Refreshing state... (ID: e2e6491340be87a3726f91fc4148b126)\ncloudflare_rate_limit.login-limit: Modifying... (ID: 8d518c5d6e63406a9466d83cb8675bb6)\n  action.0.mode: &quot;simulate&quot; =&gt; &quot;ban&quot;\ncloudflare_rate_limit.login-limit: Modifications complete after 0s (ID: 8d518c5d6e63406a9466d83cb8675bb6)\n\nApply complete! Resources: 0 added, 1 changed, 0 destroyed.\n</code></pre>\n<h4 id=\"5confirmtheruleworksasexpected\">5. Confirm the rule works as expected</h4>\n<p>This step is optional, but it's a good way to demonstrate that the rule is working as expected (note the final <code>429</code> response):</p>\n<pre><code>$ for i in {1..6}; do curl -XPOST -d '{&quot;username&quot;: &quot;foo&quot;, &quot;password&quot;: &quot;bar&quot;}' -vso /dev/null https://www.example.com/login 2&gt;&amp;1 | grep &quot;&lt; HTTP&quot;; sleep 1; done\n&lt; HTTP/1.1 401 Unauthorized\n&lt; HTTP/1.1 401 Unauthorized\n&lt; HTTP/1.1 401 Unauthorized\n&lt; HTTP/1.1 401 Unauthorized\n&lt; HTTP/1.1 401 Unauthorized\n&lt; HTTP/1.1 429 Too Many Requests\n</code></pre>\n<h3 id=\"wrappingup\">Wrapping up</h3>\n<p>That's it for today! Stay tuned next week for <a href=\"http://blog.cloudflare.com/getting-started-with-terraform-and-cloudflare-part-2/\">part 2 of this post</a>, where we continue the tour through the following resources and techniques:</p>\n<ul>\n<li>Load Balancing Resource</li>\n<li>Page Rules Resource</li>\n<li>Reviewing and Rolling Back Changes</li>\n<li>Importing Existing State and Configuration</li>\n</ul>\n<!--kg-card-end: markdown-->",
		"id": "5d16453b41acde0011a956f3",
		"meta_description": null,
		"meta_title": null,
		"og_description": null,
		"og_image": null,
		"og_title": null,
		"primary_author": {
			"id": "5d1644b141acde0011a94f5c",
			"name": "Patrick R. Donahue",
			"slug": "patrick",
			"profile_image": "https://blog-cloudflare-com-assets.storage.googleapis.com/2020/04/me0-1.png",
			"cover_image": "http://blog.cloudflare.com/content/images/2018/08/general@2x-108.png",
			"bio": null,
			"website": "https://www.cloudflare.com",
			"location": "San Francisco, CA",
			"facebook": null,
			"twitter": "@prdonahue",
			"meta_title": null,
			"meta_description": null,
			"url": "http://blog.cloudflare.com/author/patrick/"
		},
		"primary_tag": {
			"id": "5d16450341acde0011a95204",
			"name": "Developers",
			"slug": "developers",
			"description": null,
			"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Developers-1.png",
			"visibility": "public",
			"meta_title": "Cloudflare Blog: Developers",
			"meta_description": "Collection of Cloudflare blog posts tagged 'Developers'.",
			"og_image": null,
			"og_title": null,
			"og_description": null,
			"twitter_image": null,
			"twitter_title": null,
			"twitter_description": null,
			"codeinjection_head": null,
			"codeinjection_foot": null,
			"canonical_url": null,
			"accent_color": null,
			"url": "http://blog.cloudflare.com/tag/developers/"
		},
		"published_at": "2018-04-27T21:18:10.000+01:00",
		"reading_time": 20,
		"slug": "getting-started-with-terraform-and-cloudflare-part-1",
		"tags": [
			{
				"id": "5d16450341acde0011a95204",
				"name": "Developers",
				"slug": "developers",
				"description": null,
				"feature_image": "http://blog.cloudflare.com/content/images/2020/10/Developers-1.png",
				"visibility": "public",
				"meta_title": "Cloudflare Blog: Developers",
				"meta_description": "Collection of Cloudflare blog posts tagged 'Developers'.",
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/developers/"
			},
			{
				"id": "5d16450341acde0011a9524e",
				"name": "Terraform",
				"slug": "terraform",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/terraform/"
			},
			{
				"id": "5d16450341acde0011a9524f",
				"name": "HashiCorp",
				"slug": "hashicorp",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/hashicorp/"
			},
			{
				"id": "5d16450341acde0011a95214",
				"name": "Programming",
				"slug": "programming",
				"description": null,
				"feature_image": null,
				"visibility": "public",
				"meta_title": null,
				"meta_description": null,
				"og_image": null,
				"og_title": null,
				"og_description": null,
				"twitter_image": null,
				"twitter_title": null,
				"twitter_description": null,
				"codeinjection_head": null,
				"codeinjection_foot": null,
				"canonical_url": null,
				"accent_color": null,
				"url": "http://blog.cloudflare.com/tag/programming/"
			}
		],
		"title": "Getting started with Terraform and Cloudflare (Part 1 of 2)",
		"twitter_description": null,
		"twitter_image": null,
		"twitter_title": null,
		"updated_at": "2023-08-24T20:47:57.000+01:00",
		"url": "http://blog.cloudflare.com/getting-started-with-terraform-and-cloudflare-part-1/",
		"uuid": "847fd36e-6ec4-4f3e-93c7-8ae2ce847bf2",
		"visibility": "public"
	}
}